(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var config = require('../../../config');
var randomName = require('sillyname');
var raycast = require('voxel-raycast');
var WebGL = require('./lib/webgl');
var Camera = require('./lib/camera');
var InputHandler = require('./lib/client-input');
var Lines = require('./lib/lines');
var Shapes = require('./lib/shapes');
var Textures = require('./lib/textures');
var Player = require('./lib/player');
var Sky = require('./lib/sky');
var Physics = require('./lib/physics');
var Stats = require('./lib/stats');
var VoxelingClient = require('./lib/client');
var Coordinates = require('../shared/coordinates');
var Voxels = require('./lib/voxels');
var Game = require('./lib/game');
var timer = require('./lib/timer');
//var Meshing = require('../lib/meshers/non-blocked')
var mesher = require('./lib/meshers/horizontal-merge');
var chunkSize = config.chunkSize;
var coordinates = new Coordinates(chunkSize);
var pool = require('./lib/object-pool');
// other
var trees = require('voxel-trees');
var client = new VoxelingClient(config);
// UI DIALOG SETUP
var fillMaterials = function (textures) {
    var container = document.getElementById('textureContainer');
    var html = '';
    for (var i = 0; i < textures.textureArray.length; i++) {
        var material = textures.textureArray[i];
        var src;
        if ('hidden' in material && material.hidden) {
            continue;
        }
        if ('sides' in material) {
            src = textures.byValue[material.sides[0]].src;
        }
        else {
            src = material.src;
        }
        html += '<div data-texturevalue="' + material.value + '"><img src="' + src + '" crossorigin="anonymous" />' + '<span>' + material.name + '</span></div>';
    }
    container.innerHTML = html;
};
var fillSettings = function (textures) {
    var container = document.getElementById('settings');
    var html = '';
    for (var i = 0; i < textures.textureArray.length; i++) {
        var index = i + 1;
        var material = textures.textureArray[i];
        if ('sides' in material) {
            continue;
        }
        html += '<input name="' + matrial.name + '" data-id="' + material.value + '" value="' + material.src + '" /> ' + material.name + '<br />';
    }
    container.innerHTML = html;
    $(container).on('blur', 'input', function (e) {
        var $el = $(this);
        var id = $el.data('id');
        textures.byValue[id].src = $el.val();
        // Now trigger reload ... need to modify the Textures object
        return false;
    });
};
client.on('close', function () {
    document.getElementById('overlay').className = 'disconnected';
});
client.on('ready', function () {
    var canvas = document.getElementById('herewego');
    var inputHandler = new InputHandler(document.body, canvas);
    var webgl;
    var textures;
    canvas.width = canvas.clientWidth;
    canvas.height = canvas.clientHeight;
    webgl = new WebGL(canvas);
    textures = new Textures(config.textures);
    // Wait until textures have fully loaded
    textures.load(webgl.gl, function () {
        // ready=false stops physics from running early
        var ready = false;
        var player = client.player = new Player(webgl.gl, webgl.shaders.projectionViewPosition, textures.byName[client.avatar]);
        var players = {};
        var sky = new Sky(webgl.gl, webgl.shaders.projectionViewPosition, textures, player);
        var voxels = client.voxels = new Voxels(webgl.gl, webgl.shaders.projectionPosition, textures, 
        // releaseMeshCallback
        function (mesh) {
            // Release old mesh
            var transferList = [];
            for (var textureValue in mesh) {
                var texture = mesh[textureValue];
                // Go past the Growable, to the underlying ArrayBuffer
                transferList.push(texture.position.buffer);
                transferList.push(texture.texcoord.buffer);
                transferList.push(texture.normal.buffer);
            }
            // specially list the ArrayBuffer object we want to transfer
            client.worker.postMessage(['freeMesh', mesh], transferList);
        });
        var camera = client.camera = new Camera(canvas, player);
        var game = client.game = new Game(config, coordinates, player, 
        // regionChangeCallback
        function () {
            client.regionChange();
        });
        var physics = new Physics(player, inputHandler.state, game);
        var lines = new Lines(webgl.gl);
        var highlightOn = true;
        // add cube wireframe
        //lines.fill( Shapes.wire.cube([0,0,0], [1,1,1]) )
        //lines.fill( Shapes.wire.mesh([-32,0,-32], 96, 96) )
        var st = new Stats();
        st.domElement.style.position = 'absolute';
        st.domElement.style.bottom = '0px';
        document.body.appendChild(st.domElement);
        webgl.onRender(function (ts) {
            // what's the proper name for this matrix?
            // get inverse matrix from camera and pass to render() on other objects?
            if (!ts) {
                ts = 0;
            }
            // START of non-render stuff
            // Do these in sync with frame drawing so movement is smoother
            inputHandler.tick();
            // Wait until user clicks the canvas for the first time before we activate physics
            // Otherwise player may fall through the world before we get the the initial voxel data
            if (ready) {
                // physics will somehow update player position, and thus, the camera
                physics.tick();
            }
            // END of non-render stuff
            camera.updateProjection();
            sky.render(camera.inverse, ts);
            voxels.render(camera.inverse, ts, sky.ambientLightColor, sky.directionalLight);
            if (highlightOn) {
                // Highlight of targeted bock can be turned off with Shift
                lines.render(camera.inverse);
            }
            player.render(camera.inverse, ts);
            st.update();
            for (var id in players) {
                var pl = players[id];
                pl.model.render(camera.inverse, ts);
            }
        });
        player.translate(config.initialPosition);
        client.worker.postMessage(['createFrustum', camera.verticalFieldOfView, camera.ratio, camera.farDistance]);
        // regionChange() triggers loading of world chunks from the server
        client.regionChange();
        webgl.start();
        client.on('players', function (others) {
            var ticksPerHalfSecond = 30;
            var calculateAdjustments = function (output, current, wanted) {
                for (var i = 0; i < output.length; i++) {
                    output[i] = (wanted[i] - current[i]) / ticksPerHalfSecond;
                }
            };
            for (var id in others) {
                var updatedPlayerInfo = others[id];
                var player;
                if (!('positions' in updatedPlayerInfo)) {
                    continue;
                }
                if (id in players) {
                    player = players[id];
                    calculateAdjustments(player.adjustments, player.latest, updatedPlayerInfo.positions);
                    player.current = player.latest;
                    player.latest = updatedPlayerInfo.positions;
                }
                else {
                    player = players[id] = {
                        latest: updatedPlayerInfo.positions,
                        current: updatedPlayerInfo.positions,
                        adjustments: [0, 0, 0, 0, 0, 0],
                        model: new Player(webgl.gl, webgl.shaders.projectionViewPosition, textures.byName['player'])
                    };
                    player.model.setTranslation(updatedPlayerInfo.positions[0], updatedPlayerInfo.positions[1], updatedPlayerInfo.positions[2]);
                    player.model.setRotation(updatedPlayerInfo.positions[3], updatedPlayerInfo.positions[4], updatedPlayerInfo.positions[5]);
                }
                player.model.setTexture(textures.byName[updatedPlayerInfo.avatar]);
            }
            // Compare players to others, remove old players
            var playerIds = Object.keys(players);
            for (var i = 0; i < playerIds.length; i++) {
                var id = playerIds[i];
                if (!(id in others)) {
                    delete players[id];
                }
            }
        });
        // Material to build with. The material picker dialog changes this value
        var currentMaterial = 1;
        // Holds coordinates of the voxel being looked at
        var currentVoxel = null;
        var currentNormalVoxel = pool.malloc('array', 3);
        // When doing bulk create/destroy, holds the coordinates of the start of the selected region
        var selectStart = pool.malloc('array', 3);
        fillMaterials(textures);
        // Show coordinates
        var elCoordinates = document.getElementById('coordinates');
        setInterval(function () {
            elCoordinates.innerHTML = player.getPosition().map(Math.floor).join(',') +
                '<br />' +
                game.lastRegion.join(',');
        }, 1000);
        // INPUT HANDLER SETUP
        inputHandler.mouseDeltaCallback(function (deltaX, deltaY) {
            // Can I do these at the same time? Maybe a new quat, rotated by vector, multiplied into existing?
            player.rotateY(-(deltaX / 200.0));
            // Don't pitch player, just the camera
            player.rotateX(-(deltaY / 200.0));
        });
        inputHandler.on('to.start', function () {
            var element;
            var value;
            document.getElementById('overlay').className = 'introduction';
            // nickname
            element = document.getElementById('username');
            value = localStorage.getItem('name');
            if (!value || value.length == 0 || value.trim().length == 0) {
                value = randomName();
                localStorage.setItem('name', value);
            }
            element.value = value;
            // draw distance
            element = document.getElementById('drawDistance');
            value = parseInt(localStorage.getItem('drawDistance'));
            if (!value) {
                value = 2;
                localStorage.setItem('drawDistance', value);
            }
            element.value = value;
            config.drawDistance = value;
            config.removeDistance = value + 1;
        });
        inputHandler.on('drawDistance', function (drawDistance) {
            var value = parseInt(drawDistance);
            if (value < 0) {
                value = 1;
            }
            localStorage.setItem('drawDistance', value);
            config.drawDistance = value;
            config.removeDistance = value + 1;
            client.regionChange();
        });
        inputHandler.on('avatar', function (avatar) {
            client.avatar = avatar;
            player.setTexture(textures.byName[avatar]);
        });
        inputHandler.on('from.start', function () {
            // User has clicked the canvas to start playing. Let's activate physics now.
            ready = true;
            // Get name from input and store in localStorage
            var element = document.getElementById('username');
            var value = element.value.trim();
            if (value.length == 0) {
                value = randomName();
            }
            localStorage.setItem('name', value);
        });
        inputHandler.on('to.playing', function () {
            // hide intro
            var overlay = document.getElementById('overlay');
            overlay.className = '';
        });
        inputHandler.on('view', function () {
            camera.nextView();
        });
        inputHandler.on('shift', function () {
            highlightOn = (highlightOn ? false : true);
        });
        inputHandler.on('to.materials', function () {
            document.getElementById('overlay').className = 'textures';
        });
        inputHandler.on('from.materials', function () {
            document.getElementById('overlay').className = '';
        });
        // Creation / destruction
        var selecting = false;
        var low = pool.malloc('array', 3);
        var high = pool.malloc('array', 3);
        inputHandler.on('fire.down', function () {
            // Log current voxel we're pointing at
            if (currentVoxel) {
                selecting = true;
                selectStart[0] = currentVoxel[0];
                selectStart[1] = currentVoxel[1];
                selectStart[2] = currentVoxel[2];
            }
        });
        inputHandler.on('fire.up', function () {
            if (currentVoxel && selecting) {
                /*
                {
                    chunkId: [index, value, index2, value2 ...],
                    ...
                }
                */
                var chunkVoxelIndexValue = {};
                var touching = {};
                low[0] = Math.min(selectStart[0], currentVoxel[0]);
                low[1] = Math.min(selectStart[1], currentVoxel[1]);
                low[2] = Math.min(selectStart[2], currentVoxel[2]);
                high[0] = Math.max(selectStart[0], currentVoxel[0]);
                high[1] = Math.max(selectStart[1], currentVoxel[1]);
                high[2] = Math.max(selectStart[2], currentVoxel[2]);
                if (inputHandler.state.alt) {
                    console.log('Does this get called anymore?');
                    coordinates.lowToHighEach(low, high, function (i, j, k) {
                        game.setBlock(i, j, k, currentMaterial, chunkVoxelIndexValue);
                    });
                }
                else {
                    coordinates.lowToHighEach(low, high, function (i, j, k) {
                        game.setBlock(i, j, k, 0, chunkVoxelIndexValue, touching);
                    });
                }
                client.worker.postMessage(['chunkVoxelIndexValue', chunkVoxelIndexValue, touching]);
            }
            selecting = false;
        });
        inputHandler.on('firealt.down', function () {
            // Log current voxel we're pointing at
            if (currentVoxel) {
                selecting = true;
                selectStart[0] = currentNormalVoxel[0];
                selectStart[1] = currentNormalVoxel[1];
                selectStart[2] = currentNormalVoxel[2];
            }
        });
        inputHandler.on('firealt.up', function () {
            // TODO: clean this up so we use the object pool for these arrays
            if (currentVoxel && selecting) {
                var chunkVoxelIndexValue = {};
                low[0] = Math.min(selectStart[0], currentNormalVoxel[0]);
                low[1] = Math.min(selectStart[1], currentNormalVoxel[1]);
                low[2] = Math.min(selectStart[2], currentNormalVoxel[2]);
                high[0] = Math.max(selectStart[0], currentNormalVoxel[0]);
                high[1] = Math.max(selectStart[1], currentNormalVoxel[1]);
                high[2] = Math.max(selectStart[2], currentNormalVoxel[2]);
                if (currentMaterial == 305) {
                    function getRandomInt(min, max) {
                        return Math.floor(Math.random() * (max - min)) + min;
                    }
                    coordinates.lowToHighEach(low, high, function (i, j, k) {
                        var treeTypes = ['subspace', 'guybrush'];
                        var treeType = getRandomInt(0, 2);
                        trees({
                            position: {
                                x: i,
                                y: j,
                                z: k
                            },
                            setBlock: function (position, material) {
                                game.setBlock(position.x, position.y, position.z, material, chunkVoxelIndexValue);
                            },
                            treeType: treeTypes[treeType],
                            bark: 24,
                            leaves: 100
                        });
                    });
                }
                else {
                    coordinates.lowToHighEach(low, high, function (i, j, k) {
                        game.setBlock(i, j, k, currentMaterial, chunkVoxelIndexValue);
                    });
                }
                client.worker.postMessage(['chunkVoxelIndexValue', chunkVoxelIndexValue]);
            }
            selecting = false;
        });
        inputHandler.on('currentMaterial', function (c) {
            currentMaterial = c;
        });
        inputHandler.on('chat', function (message) {
            var out = {
                user: localStorage.getItem('name'),
                text: message
            };
            client.worker.postMessage(['chat', out]);
        });
        inputHandler.transition('start');
        client.on('close', function () {
            inputHandler.transition('disconnected');
        });
        // This needs cleanup, and encapsulation, but it works
        var voxelHit = pool.malloc('array', 3);
        var voxelNormal = pool.malloc('array', 3);
        var distance = 10;
        var direction = vec3.create();
        var pointer = function () {
            var hit;
            direction[0] = direction[1] = 0;
            direction[2] = -1;
            vec3.transformQuat(direction, direction, player.getRotationQuat());
            hit = raycast(game, camera.getPosition(), direction, distance, voxelHit, voxelNormal);
            if (hit > 0) {
                voxelHit[0] = Math.floor(voxelHit[0]);
                voxelHit[1] = Math.floor(voxelHit[1]);
                voxelHit[2] = Math.floor(voxelHit[2]);
                // Give us access to the current voxel and the voxel at it's normal
                currentVoxel = voxelHit;
                currentNormalVoxel[0] = voxelHit[0] + voxelNormal[0];
                currentNormalVoxel[1] = voxelHit[1] + voxelNormal[1];
                currentNormalVoxel[2] = voxelHit[2] + voxelNormal[2];
                if (selecting) {
                    if (inputHandler.state.alt || inputHandler.state.firealt) {
                        low[0] = Math.min(selectStart[0], currentNormalVoxel[0]);
                        low[1] = Math.min(selectStart[1], currentNormalVoxel[1]);
                        low[2] = Math.min(selectStart[2], currentNormalVoxel[2]);
                        high[0] = Math.max(selectStart[0] + 1, currentNormalVoxel[0] + 1);
                        high[1] = Math.max(selectStart[1] + 1, currentNormalVoxel[1] + 1);
                        high[2] = Math.max(selectStart[2] + 1, currentNormalVoxel[2] + 1);
                    }
                    else {
                        low[0] = Math.min(selectStart[0], currentVoxel[0]);
                        low[1] = Math.min(selectStart[1], currentVoxel[1]);
                        low[2] = Math.min(selectStart[2], currentVoxel[2]);
                        high[0] = Math.max(selectStart[0] + 1, currentVoxel[0] + 1);
                        high[1] = Math.max(selectStart[1] + 1, currentVoxel[1] + 1);
                        high[2] = Math.max(selectStart[2] + 1, currentVoxel[2] + 1);
                    }
                    lines.fill(Shapes.wire.cube(low, high));
                }
                else {
                    if (inputHandler.state.alt || inputHandler.state.firealt) {
                        high[0] = currentNormalVoxel[0] + 1;
                        high[1] = currentNormalVoxel[1] + 1;
                        high[2] = currentNormalVoxel[2] + 1;
                        lines.fill(Shapes.wire.cube(currentNormalVoxel, high));
                    }
                    else {
                        high[0] = currentVoxel[0] + 1;
                        high[1] = currentVoxel[1] + 1;
                        high[2] = currentVoxel[2] + 1;
                        lines.fill(Shapes.wire.cube(currentVoxel, high));
                    }
                }
                lines.skip(false);
            }
            else {
                // clear
                lines.skip(true);
                currentVoxel = null;
            }
        };
        // INTERVAL CALLBACKS NOT TIED TO FRAMERATE
        // 60 calls per second
        setInterval(function () {
            game.tick();
            //other.tick()
            pointer();
            // Update player positions
            for (var id in players) {
                var player = players[id];
                var summed = 0;
                for (var i = 0; i < player.adjustments.length; i++) {
                    player.current[i] += player.adjustments[i];
                    summed += Math.abs(player.adjustments[i]);
                }
                player.model.setTranslation(player.current[0], player.current[1], player.current[2]);
                player.model.setRotation(player.current[3], player.current[4], player.current[5]);
                player.model.isMoving = (summed > 0.05);
            }
            // TODO: calculate delta in webgl render callback and move sky.tick there
            sky.tick(6);
            // What if we call this 30 times a second instead?
        }, 1000 / 60);
    });
});
setInterval(function () {
    timer.print();
}, 10000);

},{"../../../config":30,"../shared/coordinates":27,"./lib/camera":2,"./lib/client":4,"./lib/client-input":3,"./lib/game":5,"./lib/lines":8,"./lib/meshers/horizontal-merge":9,"./lib/object-pool":14,"./lib/physics":15,"./lib/player":16,"./lib/shapes":19,"./lib/sky":21,"./lib/stats":22,"./lib/textures":23,"./lib/timer":24,"./lib/voxels":25,"./lib/webgl":26,"gl-matrix":32,"sillyname":43,"voxel-raycast":44,"voxel-trees":45}],2:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var inherits = require('inherits');
var Movable = require('./movable');
var scratch = require('./scratch');
function Camera(canvas, follow) {
    Movable.call(this);
    this.canvas = canvas;
    this.matrix = mat4.create();
    this.inverse = mat4.create();
    this.verticalFieldOfView = Math.PI / 4;
    this.ratio;
    // 32 * 20 = 640 ... 20 chunks away
    this.farDistance = 640;
    this.projection = mat4.create();
    this.follow = follow;
    this.view = 0;
    this.shoulderOffset = [0.4, 2, 2];
    this.thirdPersonOffset = [0, 2, 4];
    this.canvasResized();
}
inherits(Camera, Movable);
Camera.prototype.canvasResized = function () {
    this.ratio = this.canvas.clientWidth / this.canvas.clientHeight;
    // Adjusts coordinates for the screen's aspect ration
    // Not sure to set near and far to ... seems arbitrary. Surely those values should match the frustum
    mat4.perspective(this.projection, this.verticalFieldOfView, this.ratio, 0.1, this.farDistance);
};
Camera.prototype.updateProjection = function () {
    var offset;
    switch (this.view) {
        // Over shoulder
        case 1:
            offset = this.shoulderOffset;
            //vec3.transformQuat(this.tempVector, offset, this.follow.getRotationQuat());
            // transform this offset, according to yaw
            //vec3.add(this.position, this.follow.getPosition(), this.tempVector);
            break;
        // Birds-eye
        case 2:
            offset = this.thirdPersonOffset;
            //vec3.transformQuat(this.tempVector, offset, this.follow.getRotationQuat());
            // transform this offset, according to yaw
            //vec3.add(this.position, this.follow.getPosition(), this.tempVector);
            break;
        // First-person
        default:
            offset = this.follow.getEyeOffset();
            break;
    }
    // Rotate eye offset into tempVector, which we'll then add to player position
    quat.rotateY(scratch.quat, scratch.identityQuat, this.follow.getYaw());
    vec3.transformQuat(scratch.vec3, offset, scratch.quat);
    vec3.add(this.position, this.follow.getPosition(), scratch.vec3);
    mat4.fromRotationTranslation(this.matrix, this.follow.getRotationQuat(), this.position);
    mat4.invert(this.inverse, this.matrix);
    mat4.multiply(this.inverse, this.projection, this.inverse);
    return this.inverse;
};
Camera.prototype.nextView = function () {
    this.view++;
    if (this.view > 2) {
        this.view = 0;
    }
};
module.exports = Camera;

},{"./movable":13,"./scratch":18,"gl-matrix":32,"inherits":42}],3:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var debug = false;
var mouseCallback = function () { };
var codeMap = {
    // control
    17: 'alt',
    // shift
    16: 'select',
    // W
    87: 'forward',
    // S
    83: 'backward',
    // A
    65: 'left',
    // D
    68: 'right',
    // space
    32: 'jump',
    // F
    70: 'fly'
};
var states = {
    start: {
        to: function () {
            if (debug) {
                console.log('entering start state');
            }
        },
        from: function () {
            if (debug) {
                console.log('leaving start state');
            }
        },
        mouseup: function (event) {
            // Only if event target is the canvas
            if (event.target.tagName == 'CANVAS') {
                this.transition('playing');
                return false;
            }
        },
        change: function (event) {
            switch (event.target.id) {
                case 'drawDistance':
                    this.emitter.emit('drawDistance', event.target.value);
                    break;
                case 'avatar':
                    this.emitter.emit('avatar', event.target.value);
                    break;
            }
        }
    },
    playing: {
        to: function () {
            var self = this;
            if (debug) {
                console.log('entering playing state');
            }
            this.canvas.requestPointerLock();
        },
        from: function () {
            if (debug) {
                console.log('leaving playing state');
            }
            // stop moving
            for (var i in controlStates) {
                controlStates[i] = false;
            }
        },
        // Chrome intercepts Escape key presses, so let's transition based on this event
        pointerlockchange: function (event) {
            if (document.pointerLockElement === this.canvas) {
                //console.log('The pointer lock status is now locked');
            }
            else {
                //console.log('The pointer lock status is now unlocked');
                this.transition('start');
            }
        },
        mousedown: function (event) {
            if (event.which == 3 || controlStates.alt) {
                controlStates.firealt = true;
                this.emitter.emit('firealt.down');
            }
            else if (event.which == 1) {
                controlStates.fire = true;
                this.emitter.emit('fire.down');
            }
        },
        mouseup: function (event) {
            if (event.which == 3 || controlStates.alt) {
                controlStates.firealt = false;
                this.emitter.emit('firealt.up');
            }
            else if (event.which == 1) {
                controlStates.fire = false;
                this.emitter.emit('fire.up');
            }
        },
        mousemove: function (ev) {
            mouseCallback(ev.movementX, ev.movementY);
        },
        keydown: function (event) {
            if (debug)
                console.log(event);
            // E
            if (event.which == 69) {
                this.transition('materials');
                return;
            }
            // M
            if (event.which == 77) {
                this.transition('map');
                return;
            }
            // Escape
            if (code == 27) {
                console.log('escape');
                // We shouldn't ever get here
            }
            var code = event.which;
            var key;
            if (code in codeMap) {
                key = codeMap[code];
                if (key in controlStates) {
                    controlStates[key] = 1;
                }
                return false;
            }
        },
        keyup: function (event) {
            var code = event.which;
            var key;
            if (debug)
                console.log(event);
            // Enter
            if (code == 13) {
                this.transition('chat');
                return false;
            }
            // Escape
            if (code == 27) {
                console.log('escape');
                // We shouldn't ever get here
            }
            // R
            if (code == 82) {
                this.emitter.emit('view');
                return;
            }
            // Shift
            if (code == 16) {
                this.emitter.emit('shift');
                return;
            }
            if (code in codeMap) {
                key = codeMap[code];
                if (key in controlStates) {
                    controlStates[key] = 0;
                }
                // try to prevent ctrl+W from bubbling up
                return false;
            }
        }
    },
    // end playing state
    materials: {
        to: function () {
            if (debug) {
                console.log('entering materials state');
            }
        },
        from: function () {
            if (debug) {
                console.log('leaving materials state');
            }
        },
        keydown: function (event) {
            if (debug) {
                console.log(event);
            }
            // Would love for this to exist only in client.js, but need to re-work event handler bind hierarchy
            var adjustment = 0;
            var perRow = 6;
            switch (event.which) {
                // E
                case 69:
                    this.transition('playing');
                    break;
                // escape should transition back to start
                case 27:
                    this.transition('start');
                    break;
                case 87:
                // W
                case 38:
                    // up
                    adjustment = -perRow;
                    break;
                // S and down
                case 83:
                case 40:
                    adjustment = perRow;
                    break;
                // A and left
                case 65:
                case 37:
                    // left
                    adjustment = -1;
                    break;
                // D and right
                case 68:
                case 39:
                    adjustment = 1;
                    break;
                default:
                    break;
            }
            if (adjustment != 0) {
                var matches = document.querySelectorAll('#textureContainer div');
                var from = 0;
                for (var i = 0; i < matches.length; i++) {
                    if (matches[i].className == 'selected') {
                        from = i;
                    }
                    matches[i].className = '';
                }
                matches[from + adjustment].className = 'selected';
                this.emitter.emit('currentMaterial', Number(matches[from + adjustment].getAttribute('data-texturevalue')));
            }
        },
        mousedown: function (event) {
            var $div = $(event.target).closest('div');
            var matches = document.querySelectorAll('#textureContainer div');
            var from = 0;
            for (var i = 0; i < matches.length; i++) {
                matches[i].className = '';
            }
            $div.addClass('selected');
            this.emitter.emit('currentMaterial', Number($div.data('texturevalue')));
        }
    },
    chat: {
        to: function () {
            if (debug) {
                console.log('entering chat state');
            }
            document.getElementById('chat').className = 'active';
            document.getElementById('cmd').focus();
        },
        from: function () {
            if (debug) {
                console.log('leaving chat state');
            }
            document.getElementById('chat').className = '';
            document.getElementById('cmd').value = '';
        },
        keyup: function (event) {
            if (event.which == 13) {
                var el = document.getElementById('cmd');
                if (document.activeElement === el) {
                    //unbind mouse would be nice
                    this.emitter.emit('chat', el.value);
                    el.value = '';
                    el.blur();
                    this.transition('playing');
                    return false;
                }
            }
            // if press escape, go back to playing
            if (event.which == 27) {
                // escape
                this.transition('playing');
                return false;
            }
        }
    },
    disconnected: {
        to: function () {
        },
        from: function () {
        }
    }
};
var controlStates = {
    select: false,
    alt: false,
    forward: false,
    backward: false,
    left: false,
    right: false,
    jump: false,
    fly: false,
    fire: false,
    firealt: false
};
var currentState = '';
var gamepad;
// Really want to proxy events, so that way I can convert controller events to mouse events and send them to the player/camera
// movement handler.
var InputHandler = function (bindToElement, canvas) {
    var self = this;
    this.bindToElement = bindToElement;
    this.canvas = canvas;
    this.state = controlStates;
    this.emitter = new EventEmitter();
    this.boundStates = {};
    // Fix up states data structure with functions bound to this
    for (var state in states) {
        this.boundStates[state] = {};
        for (var method in states[state]) {
            this.boundStates[state][method] = states[state][method].bind(this);
        }
    }
    document.addEventListener('pointerlockerror', function (error) {
        console.log('Pointer Lock Error', error);
    }, false);
};
InputHandler.prototype.mouseDeltaCallback = function (callback) {
    mouseCallback = callback;
};
InputHandler.prototype.transition = function (newState) {
    var current;
    if (currentState) {
        // we might be starting at the null state
        current = this.boundStates[currentState];
        // Unbind current event handlers
        for (var method in current) {
            if (method == 'from' || method == 'to') {
                continue;
            }
            if (method == 'pointerlockchange') {
                document.removeEventListener(method, current[method], false);
            }
            else {
                this.bindToElement.removeEventListener(method, current[method], false);
            }
        }
        if ('from' in current) {
            current['from']();
        }
        this.emitter.emit('from.' + currentState);
    }
    if (newState in states) {
        currentState = newState;
        current = this.boundStates[currentState];
        // Bind new event handlers
        for (var method in current) {
            if (method == 'from' || method == 'to') {
                continue;
            }
            if (method == 'pointerlockchange') {
                document.addEventListener(method, current[method], false);
            }
            else {
                this.bindToElement.addEventListener(method, current[method], false);
            }
        }
        if ('to' in current) {
            current['to']();
        }
        this.emitter.emit('to.' + newState);
    }
};
function buttonPressed(b) {
    if (typeof b == "object") {
        return b.pressed;
    }
    return b == 1;
}
var fired = false;
InputHandler.prototype.tick = function () {
    var gamepad = navigator.getGamepads()[0];
    if (!gamepad) {
        return;
    }
    // HANDLE MOVEMENT
    var threshold = 0.15;
    if (gamepad.axes[0] > threshold) {
        controlStates.left = 0;
        controlStates.right = Math.abs(gamepad.axes[0]);
    }
    else if (gamepad.axes[0] < -threshold) {
        controlStates.left = Math.abs(gamepad.axes[0]);
        controlStates.right = 0;
    }
    else {
        controlStates.left = controlStates.right = 0;
    }
    if (gamepad.axes[1] > threshold) {
        controlStates.backward = Math.abs(gamepad.axes[1]);
        controlStates.forward = 0;
    }
    else if (gamepad.axes[1] < -threshold) {
        controlStates.backward = 0;
        controlStates.forward = Math.abs(gamepad.axes[1]);
    }
    else {
        controlStates.backward = controlStates.forward = 0;
    }
    // HANDLE LOOKING
    threshold = 0.15;
    var speed = 4;
    var lookHorizontal = gamepad.axes[2];
    var lookVertical = gamepad.axes[3];
    var deltaX = 0;
    var deltaY = 0;
    if (lookHorizontal > threshold) {
        deltaX = Math.floor(speed * lookHorizontal);
    }
    else if (lookHorizontal < -threshold) {
        deltaX = Math.floor(speed * lookHorizontal);
    }
    if (lookVertical > threshold) {
        deltaY = Math.floor(speed * lookVertical);
    }
    else if (gamepad.axes[3] < -threshold) {
        deltaY = Math.floor(speed * lookVertical);
    }
    if (deltaX || deltaY) {
        mouseCallback(deltaX, deltaY);
    }
    if (buttonPressed(gamepad.buttons[0]) || buttonPressed(gamepad.buttons[7])) {
        controlStates.jump = true;
    }
    else {
        controlStates.jump = false;
    }
    if (buttonPressed(gamepad.buttons[1]) || buttonPressed(gamepad.buttons[6])) {
        controlStates.fly = true;
    }
    else {
        controlStates.fly = false;
    }
    // 4 - left shoulder
    // 6 left trigger
    // fire triggers too quickly ... track state changes
    // TODO: update this to emit fire.down and fire.up, same for firealt
    if (buttonPressed(gamepad.buttons[5])) {
        // right shoulder
        if (!fired) {
            this.emitter.emit('fire');
            fired = true;
        }
    }
    else if (buttonPressed(gamepad.buttons[4])) {
        // right trigger
        if (!fired) {
            this.emitter.emit('firealt');
            fired = true;
        }
    }
    else {
        fired = false;
    }
};
InputHandler.prototype.on = function (name, callback) {
    this.emitter.on(name, callback);
};
if (!module) {
    module = {};
}
module.exports = InputHandler;

},{"events":31}],4:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;
var pool = require('./object-pool');
var log = require('../../shared/log')('lib/client', false);
function Client(settings) {
    var self = this;
    this.settings = settings;
    this.server = settings.server;
    // These will be set later
    this.id = null;
    this.player = null;
    this.avatar = 'player';
    this.players = null;
    this.voxels = null;
    this.camera = null;
    this.game = null;
    this.connected = false;
    this.emitter = new EventEmitter();
    this.receivedChunks = [];
    this.worker = new Worker('/client/client-worker.js');
    this.bindEvents();
    this.otherSetup();
    this.worker.postMessage(['connect']);
}
;
// Listen for certain events/data from the server
Client.prototype.bindEvents = function () {
    var self = this;
    var messageHandlers = {
        open: function () {
            self.connected = true;
            log('Client.bindEvents: connection opened');
            self.emitter.emit('open');
        },
        close: function () {
            self.connected = false;
            log('Client.bindEvents: connection closed');
            self.emitter.emit('close');
        },
        error: function (message) {
            log('Client.bindEvents.error: ' + message);
        },
        settings: function (settings, id) {
            // merge settings from server into those from the client side
            // TODO: fix this for new engine setup
            //self.settings = extend(self.settings, settings) // server settings squash client settings
            log('Client.bindEvents: Got settings', settings);
            if ('initialPosition' in settings) {
                self.settings.initialPosition = settings.initialPosition;
            }
            self.id = id;
            //self.player.avatarImage = avatarImage
            log('Client.bindEvents: got id ' + id);
            // setup complete, do we need to do additional engine setup?
            self.emitter.emit('ready');
        },
        chunkVoxels: function (chunk) {
            self.game.storeVoxels(chunk);
        },
        // Game no longer needs to hold this voxel data
        nearbyChunks: function (chunks) {
            self.game.nearbyChunks(chunks);
        },
        // Chunk was re-meshed
        chunkMesh: function (chunkID, mesh) {
            self.voxels.showMesh(chunkID, mesh);
        },
        meshesToShow: function (meshDistances) {
            self.voxels.meshesToShow(meshDistances);
        },
        // Worker relays voxel changes from the server to us
        chunkVoxelIndexValue: function (changes) {
            self.game.updateVoxelCache(changes);
        },
        chat: function (message) {
            var messages = document.getElementById('messages');
            var el = document.createElement('dt');
            el.innerText = message.user;
            messages.appendChild(el);
            el = document.createElement('dd');
            el.innerText = message.text;
            messages.appendChild(el);
            messages.scrollTop = messages.scrollHeight;
        },
        // Got batch of player position updates
        players: function (players) {
            delete players[self.id];
            self.emitter.emit('players', players);
        }
    };
    this.worker.onmessage = function (e) {
        var message = e.data;
        var type = message.shift();
        messageHandlers[type].apply(self, message);
    };
};
Client.prototype.regionChange = function () {
    this.worker.postMessage(['regionChange', this.player.getPosition(), this.camera.follow.getRotationQuat(), this.settings.drawDistance, this.settings.removeDistance]);
};
Client.prototype.otherSetup = function () {
    var self = this;
    // TODO: send position to web worker
    setInterval(function () {
        if (!self.player)
            return;
        self.worker.postMessage(['playerPosition', self.player.getPosition(), self.player.getYaw(), self.player.getPitch(), self.avatar]);
    }, 1000 / 10);
};
Client.prototype.on = function (name, callback) {
    this.emitter.on(name, callback);
};
module.exports = Client;

},{"../../shared/log":29,"./object-pool":14,"events":31}],5:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var pool = require('../lib/object-pool');
var log = require('../../shared/log')('lib/game', false);
// miscellaneous state
var previousTimeStamp = 0;
var Game = function (config, coordinates, player, regionChangeCallback) {
    var self = this;
    this.currentVoxel = new Array(3);
    // if this is vec3.create(), floating point messes things up
    this.lastRegion = [0, 0, 0];
    this.player = player;
    this.regionChangeCallback = regionChangeCallback;
    // Extract relevant values from config
    this.config = config;
    this.coordinates = coordinates;
    // Same as above, but for voxel arrays
    this.currentVoxels = {};
};
Game.prototype.storeVoxels = function (chunk) {
    var chunkID = chunk.chunkID;
    log('Game.storeVoxels: storing voxels for ' + chunkID);
    this.currentVoxels[chunkID] = chunk;
};
Game.prototype.nearbyChunks = function (chunks) {
    for (var chunkId in this.currentVoxels) {
        if (!(chunkId in chunks)) {
            delete this.currentVoxels[chunkId];
        }
    }
};
Game.prototype.positionChange = function (position) {
    var thisRegion = this.coordinates.positionToChunk(position);
    var lastRegion = this.lastRegion;
    if (thisRegion[0] !== lastRegion[0] || thisRegion[1] !== lastRegion[1] || thisRegion[2] !== lastRegion[2]) {
        this.regionChangeCallback(position);
    }
    this.lastRegion = thisRegion;
};
// This is only used for collision detection
Game.prototype.getBlock = function (x, y, z) {
    var chunkID = this.coordinates.coordinatesToChunkID(x, y, z);
    if (chunkID in this.currentVoxels) {
        var voxelIndex = this.coordinates.coordinatesToVoxelIndex(x, y, z);
        var voxelValue = this.currentVoxels[chunkID].voxels[voxelIndex];
        // Uncomment the following when I'm ready to make water walkable
        return (voxelValue > 0); // && voxelValue != 6);
    }
    else {
        log('Game.getBlock: chunkid not found');
    }
    // if chunk doesn't exist, act like it's full of blocks (keep player out)
    return 1;
};
/*
Modifies the chunkVoxelIndexValue data structure
*/
Game.prototype.setBlock = function (x, y, z, value, chunkVoxelIndexValue, touching) {
    var parts = this.coordinates.coordinatesToChunkAndVoxelIndex(x, y, z, touching);
    var chunkID = parts[0];
    var voxelIndex = parts[1];
    this.currentVoxels[chunkID].voxels[voxelIndex] = value;
    // Maybe some memoize setup could help with this
    if (chunkID in chunkVoxelIndexValue) {
        chunkVoxelIndexValue[chunkID].push(voxelIndex, value);
    }
    else {
        chunkVoxelIndexValue[chunkID] = [
            voxelIndex,
            value
        ];
    }
};
// When webworker gets voxel changes, lib/client relays them here
Game.prototype.updateVoxelCache = function (changes) {
    var self = this;
    for (var chunkID in changes) {
        if (chunkID in self.currentVoxels) {
            var chunk = self.currentVoxels[chunkID];
            var details = changes[chunkID];
            for (var i = 0; i < details.length; i += 2) {
                var index = details[i];
                var val = details[i + 1];
                chunk.voxels[index] = val;
            }
        }
    }
};
// drawing and whatnot
Game.prototype.tick = function () {
    this.positionChange(this.player.getPosition());
};
Game.prototype.setPlayers = function (players) {
    return;
};
module.exports = Game;

},{"../../shared/log":29,"../lib/object-pool":14,"gl-matrix":32}],6:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.2.0
 */
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
(function (_global) {
    "use strict";
    var shim = {};
    if (typeof (exports) === 'undefined') {
        if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
            shim.exports = {};
            define(function () {
                return shim.exports;
            });
        }
        else {
            // gl-matrix lives in a browser, define its namespaces in global
            shim.exports = typeof (window) !== 'undefined' ? window : _global;
        }
    }
    else {
        // gl-matrix lives in commonjs, define its namespaces in exports
        shim.exports = exports;
    }
    (function (exports) {
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
    
    Redistribution and use in source and binary forms, with or without modification,
    are permitted provided that the following conditions are met:
    
      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
    ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        if (!GLMAT_EPSILON) {
            var GLMAT_EPSILON = 0.000001;
        }
        if (!GLMAT_ARRAY_TYPE) {
            var GLMAT_ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
        }
        if (!GLMAT_RANDOM) {
            var GLMAT_RANDOM = Math.random;
        }
        /**
         * @class Common utilities
         * @name glMatrix
         */
        var glMatrix = {};
        /**
         * Sets the type of array used when creating new vectors and matricies
         *
         * @param {Type} type Array type, such as Float32Array or Array
         */
        glMatrix.setMatrixArrayType = function (type) {
            GLMAT_ARRAY_TYPE = type;
        };
        if (typeof (exports) !== 'undefined') {
            exports.glMatrix = glMatrix;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 2 Dimensional Vector
         * @name vec2
         */
        var vec2 = {};
        /**
         * Creates a new, empty vec2
         *
         * @returns {vec2} a new 2D vector
         */
        vec2.create = function () {
            var out = new GLMAT_ARRAY_TYPE(2);
            out[0] = 0;
            out[1] = 0;
            return out;
        };
        /**
         * Creates a new vec2 initialized with values from an existing vector
         *
         * @param {vec2} a vector to clone
         * @returns {vec2} a new 2D vector
         */
        vec2.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(2);
            out[0] = a[0];
            out[1] = a[1];
            return out;
        };
        /**
         * Creates a new vec2 initialized with the given values
         *
         * @param {Number} x X component
         * @param {Number} y Y component
         * @returns {vec2} a new 2D vector
         */
        vec2.fromValues = function (x, y) {
            var out = new GLMAT_ARRAY_TYPE(2);
            out[0] = x;
            out[1] = y;
            return out;
        };
        /**
         * Copy the values from one vec2 to another
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the source vector
         * @returns {vec2} out
         */
        vec2.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            return out;
        };
        /**
         * Set the components of a vec2 to the given values
         *
         * @param {vec2} out the receiving vector
         * @param {Number} x X component
         * @param {Number} y Y component
         * @returns {vec2} out
         */
        vec2.set = function (out, x, y) {
            out[0] = x;
            out[1] = y;
            return out;
        };
        /**
         * Adds two vec2's
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec2} out
         */
        vec2.add = function (out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            return out;
        };
        /**
         * Subtracts vector b from vector a
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec2} out
         */
        vec2.subtract = function (out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            return out;
        };
        /**
         * Alias for {@link vec2.subtract}
         * @function
         */
        vec2.sub = vec2.subtract;
        /**
         * Multiplies two vec2's
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec2} out
         */
        vec2.multiply = function (out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            return out;
        };
        /**
         * Alias for {@link vec2.multiply}
         * @function
         */
        vec2.mul = vec2.multiply;
        /**
         * Divides two vec2's
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec2} out
         */
        vec2.divide = function (out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            return out;
        };
        /**
         * Alias for {@link vec2.divide}
         * @function
         */
        vec2.div = vec2.divide;
        /**
         * Returns the minimum of two vec2's
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec2} out
         */
        vec2.min = function (out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            return out;
        };
        /**
         * Returns the maximum of two vec2's
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec2} out
         */
        vec2.max = function (out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            return out;
        };
        /**
         * Scales a vec2 by a scalar number
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the vector to scale
         * @param {Number} b amount to scale the vector by
         * @returns {vec2} out
         */
        vec2.scale = function (out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            return out;
        };
        /**
         * Adds two vec2's after scaling the second operand by a scalar value
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @param {Number} scale the amount to scale b by before adding
         * @returns {vec2} out
         */
        vec2.scaleAndAdd = function (out, a, b, scale) {
            out[0] = a[0] + (b[0] * scale);
            out[1] = a[1] + (b[1] * scale);
            return out;
        };
        /**
         * Calculates the euclidian distance between two vec2's
         *
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {Number} distance between a and b
         */
        vec2.distance = function (a, b) {
            var x = b[0] - a[0], y = b[1] - a[1];
            return Math.sqrt(x * x + y * y);
        };
        /**
         * Alias for {@link vec2.distance}
         * @function
         */
        vec2.dist = vec2.distance;
        /**
         * Calculates the squared euclidian distance between two vec2's
         *
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {Number} squared distance between a and b
         */
        vec2.squaredDistance = function (a, b) {
            var x = b[0] - a[0], y = b[1] - a[1];
            return x * x + y * y;
        };
        /**
         * Alias for {@link vec2.squaredDistance}
         * @function
         */
        vec2.sqrDist = vec2.squaredDistance;
        /**
         * Calculates the length of a vec2
         *
         * @param {vec2} a vector to calculate length of
         * @returns {Number} length of a
         */
        vec2.length = function (a) {
            var x = a[0], y = a[1];
            return Math.sqrt(x * x + y * y);
        };
        /**
         * Alias for {@link vec2.length}
         * @function
         */
        vec2.len = vec2.length;
        /**
         * Calculates the squared length of a vec2
         *
         * @param {vec2} a vector to calculate squared length of
         * @returns {Number} squared length of a
         */
        vec2.squaredLength = function (a) {
            var x = a[0], y = a[1];
            return x * x + y * y;
        };
        /**
         * Alias for {@link vec2.squaredLength}
         * @function
         */
        vec2.sqrLen = vec2.squaredLength;
        /**
         * Negates the components of a vec2
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a vector to negate
         * @returns {vec2} out
         */
        vec2.negate = function (out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            return out;
        };
        /**
         * Normalize a vec2
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a vector to normalize
         * @returns {vec2} out
         */
        vec2.normalize = function (out, a) {
            var x = a[0], y = a[1];
            var len = x * x + y * y;
            if (len > 0) {
                //TODO: evaluate use of glm_invsqrt here?
                len = 1 / Math.sqrt(len);
                out[0] = a[0] * len;
                out[1] = a[1] * len;
            }
            return out;
        };
        /**
         * Calculates the dot product of two vec2's
         *
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {Number} dot product of a and b
         */
        vec2.dot = function (a, b) {
            return a[0] * b[0] + a[1] * b[1];
        };
        /**
         * Computes the cross product of two vec2's
         * Note that the cross product must by definition produce a 3D vector
         *
         * @param {vec3} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @returns {vec3} out
         */
        vec2.cross = function (out, a, b) {
            var z = a[0] * b[1] - a[1] * b[0];
            out[0] = out[1] = 0;
            out[2] = z;
            return out;
        };
        /**
         * Performs a linear interpolation between two vec2's
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the first operand
         * @param {vec2} b the second operand
         * @param {Number} t interpolation amount between the two inputs
         * @returns {vec2} out
         */
        vec2.lerp = function (out, a, b, t) {
            var ax = a[0], ay = a[1];
            out[0] = ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            return out;
        };
        /**
         * Generates a random vector with the given scale
         *
         * @param {vec2} out the receiving vector
         * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
         * @returns {vec2} out
         */
        vec2.random = function (out, scale) {
            scale = scale || 1.0;
            var r = GLMAT_RANDOM() * 2.0 * Math.PI;
            out[0] = Math.cos(r) * scale;
            out[1] = Math.sin(r) * scale;
            return out;
        };
        /**
         * Transforms the vec2 with a mat2
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the vector to transform
         * @param {mat2} m matrix to transform with
         * @returns {vec2} out
         */
        vec2.transformMat2 = function (out, a, m) {
            var x = a[0], y = a[1];
            out[0] = m[0] * x + m[2] * y;
            out[1] = m[1] * x + m[3] * y;
            return out;
        };
        /**
         * Transforms the vec2 with a mat2d
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the vector to transform
         * @param {mat2d} m matrix to transform with
         * @returns {vec2} out
         */
        vec2.transformMat2d = function (out, a, m) {
            var x = a[0], y = a[1];
            out[0] = m[0] * x + m[2] * y + m[4];
            out[1] = m[1] * x + m[3] * y + m[5];
            return out;
        };
        /**
         * Transforms the vec2 with a mat3
         * 3rd vector component is implicitly '1'
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the vector to transform
         * @param {mat3} m matrix to transform with
         * @returns {vec2} out
         */
        vec2.transformMat3 = function (out, a, m) {
            var x = a[0], y = a[1];
            out[0] = m[0] * x + m[3] * y + m[6];
            out[1] = m[1] * x + m[4] * y + m[7];
            return out;
        };
        /**
         * Transforms the vec2 with a mat4
         * 3rd vector component is implicitly '0'
         * 4th vector component is implicitly '1'
         *
         * @param {vec2} out the receiving vector
         * @param {vec2} a the vector to transform
         * @param {mat4} m matrix to transform with
         * @returns {vec2} out
         */
        vec2.transformMat4 = function (out, a, m) {
            var x = a[0], y = a[1];
            out[0] = m[0] * x + m[4] * y + m[12];
            out[1] = m[1] * x + m[5] * y + m[13];
            return out;
        };
        /**
         * Perform some operation over an array of vec2s.
         *
         * @param {Array} a the array of vectors to iterate over
         * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
         * @param {Number} offset Number of elements to skip at the beginning of the array
         * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
         * @param {Function} fn Function to call for each vector in the array
         * @param {Object} [arg] additional argument to pass to fn
         * @returns {Array} a
         * @function
         */
        vec2.forEach = (function () {
            var vec = vec2.create();
            return function (a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) {
                    stride = 2;
                }
                if (!offset) {
                    offset = 0;
                }
                if (count) {
                    l = Math.min((count * stride) + offset, a.length);
                }
                else {
                    l = a.length;
                }
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1];
                }
                return a;
            };
        })();
        /**
         * Returns a string representation of a vector
         *
         * @param {vec2} vec vector to represent as a string
         * @returns {String} string representation of the vector
         */
        vec2.str = function (a) {
            return 'vec2(' + a[0] + ', ' + a[1] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.vec2 = vec2;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 3 Dimensional Vector
         * @name vec3
         */
        var vec3 = {};
        /**
         * Creates a new, empty vec3
         *
         * @returns {vec3} a new 3D vector
         */
        vec3.create = function () {
            var out = new GLMAT_ARRAY_TYPE(3);
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            return out;
        };
        /**
         * Creates a new vec3 initialized with values from an existing vector
         *
         * @param {vec3} a vector to clone
         * @returns {vec3} a new 3D vector
         */
        vec3.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(3);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            return out;
        };
        /**
         * Creates a new vec3 initialized with the given values
         *
         * @param {Number} x X component
         * @param {Number} y Y component
         * @param {Number} z Z component
         * @returns {vec3} a new 3D vector
         */
        vec3.fromValues = function (x, y, z) {
            var out = new GLMAT_ARRAY_TYPE(3);
            out[0] = x;
            out[1] = y;
            out[2] = z;
            return out;
        };
        /**
         * Copy the values from one vec3 to another
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the source vector
         * @returns {vec3} out
         */
        vec3.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            return out;
        };
        /**
         * Set the components of a vec3 to the given values
         *
         * @param {vec3} out the receiving vector
         * @param {Number} x X component
         * @param {Number} y Y component
         * @param {Number} z Z component
         * @returns {vec3} out
         */
        vec3.set = function (out, x, y, z) {
            out[0] = x;
            out[1] = y;
            out[2] = z;
            return out;
        };
        /**
         * Adds two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.add = function (out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            return out;
        };
        /**
         * Subtracts vector b from vector a
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.subtract = function (out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            return out;
        };
        /**
         * Alias for {@link vec3.subtract}
         * @function
         */
        vec3.sub = vec3.subtract;
        /**
         * Multiplies two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.multiply = function (out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];
            return out;
        };
        /**
         * Alias for {@link vec3.multiply}
         * @function
         */
        vec3.mul = vec3.multiply;
        /**
         * Divides two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.divide = function (out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            out[2] = a[2] / b[2];
            return out;
        };
        /**
         * Alias for {@link vec3.divide}
         * @function
         */
        vec3.div = vec3.divide;
        /**
         * Returns the minimum of two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.min = function (out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            out[2] = Math.min(a[2], b[2]);
            return out;
        };
        /**
         * Returns the maximum of two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.max = function (out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            out[2] = Math.max(a[2], b[2]);
            return out;
        };
        /**
         * Scales a vec3 by a scalar number
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the vector to scale
         * @param {Number} b amount to scale the vector by
         * @returns {vec3} out
         */
        vec3.scale = function (out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            return out;
        };
        /**
         * Adds two vec3's after scaling the second operand by a scalar value
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @param {Number} scale the amount to scale b by before adding
         * @returns {vec3} out
         */
        vec3.scaleAndAdd = function (out, a, b, scale) {
            out[0] = a[0] + (b[0] * scale);
            out[1] = a[1] + (b[1] * scale);
            out[2] = a[2] + (b[2] * scale);
            return out;
        };
        /**
         * Calculates the euclidian distance between two vec3's
         *
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {Number} distance between a and b
         */
        vec3.distance = function (a, b) {
            var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
            return Math.sqrt(x * x + y * y + z * z);
        };
        /**
         * Alias for {@link vec3.distance}
         * @function
         */
        vec3.dist = vec3.distance;
        /**
         * Calculates the squared euclidian distance between two vec3's
         *
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {Number} squared distance between a and b
         */
        vec3.squaredDistance = function (a, b) {
            var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2];
            return x * x + y * y + z * z;
        };
        /**
         * Alias for {@link vec3.squaredDistance}
         * @function
         */
        vec3.sqrDist = vec3.squaredDistance;
        /**
         * Calculates the length of a vec3
         *
         * @param {vec3} a vector to calculate length of
         * @returns {Number} length of a
         */
        vec3.length = function (a) {
            var x = a[0], y = a[1], z = a[2];
            return Math.sqrt(x * x + y * y + z * z);
        };
        /**
         * Alias for {@link vec3.length}
         * @function
         */
        vec3.len = vec3.length;
        /**
         * Calculates the squared length of a vec3
         *
         * @param {vec3} a vector to calculate squared length of
         * @returns {Number} squared length of a
         */
        vec3.squaredLength = function (a) {
            var x = a[0], y = a[1], z = a[2];
            return x * x + y * y + z * z;
        };
        /**
         * Alias for {@link vec3.squaredLength}
         * @function
         */
        vec3.sqrLen = vec3.squaredLength;
        /**
         * Negates the components of a vec3
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a vector to negate
         * @returns {vec3} out
         */
        vec3.negate = function (out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            return out;
        };
        /**
         * Normalize a vec3
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a vector to normalize
         * @returns {vec3} out
         */
        vec3.normalize = function (out, a) {
            var x = a[0], y = a[1], z = a[2];
            var len = x * x + y * y + z * z;
            if (len > 0) {
                //TODO: evaluate use of glm_invsqrt here?
                len = 1 / Math.sqrt(len);
                out[0] = a[0] * len;
                out[1] = a[1] * len;
                out[2] = a[2] * len;
            }
            return out;
        };
        /**
         * Calculates the dot product of two vec3's
         *
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {Number} dot product of a and b
         */
        vec3.dot = function (a, b) {
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
        };
        /**
         * Computes the cross product of two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @returns {vec3} out
         */
        vec3.cross = function (out, a, b) {
            var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
            out[0] = ay * bz - az * by;
            out[1] = az * bx - ax * bz;
            out[2] = ax * by - ay * bx;
            return out;
        };
        /**
         * Performs a linear interpolation between two vec3's
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the first operand
         * @param {vec3} b the second operand
         * @param {Number} t interpolation amount between the two inputs
         * @returns {vec3} out
         */
        vec3.lerp = function (out, a, b, t) {
            var ax = a[0], ay = a[1], az = a[2];
            out[0] = ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            out[2] = az + t * (b[2] - az);
            return out;
        };
        /**
         * Generates a random vector with the given scale
         *
         * @param {vec3} out the receiving vector
         * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
         * @returns {vec3} out
         */
        vec3.random = function (out, scale) {
            scale = scale || 1.0;
            var r = GLMAT_RANDOM() * 2.0 * Math.PI;
            var z = (GLMAT_RANDOM() * 2.0) - 1.0;
            var zScale = Math.sqrt(1.0 - z * z) * scale;
            out[0] = Math.cos(r) * zScale;
            out[1] = Math.sin(r) * zScale;
            out[2] = z * scale;
            return out;
        };
        /**
         * Transforms the vec3 with a mat4.
         * 4th vector component is implicitly '1'
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the vector to transform
         * @param {mat4} m matrix to transform with
         * @returns {vec3} out
         */
        vec3.transformMat4 = function (out, a, m) {
            var x = a[0], y = a[1], z = a[2];
            out[0] = m[0] * x + m[4] * y + m[8] * z + m[12];
            out[1] = m[1] * x + m[5] * y + m[9] * z + m[13];
            out[2] = m[2] * x + m[6] * y + m[10] * z + m[14];
            return out;
        };
        /**
         * Transforms the vec3 with a mat3.
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the vector to transform
         * @param {mat4} m the 3x3 matrix to transform with
         * @returns {vec3} out
         */
        vec3.transformMat3 = function (out, a, m) {
            var x = a[0], y = a[1], z = a[2];
            out[0] = x * m[0] + y * m[3] + z * m[6];
            out[1] = x * m[1] + y * m[4] + z * m[7];
            out[2] = x * m[2] + y * m[5] + z * m[8];
            return out;
        };
        /**
         * Transforms the vec3 with a quat
         *
         * @param {vec3} out the receiving vector
         * @param {vec3} a the vector to transform
         * @param {quat} q quaternion to transform with
         * @returns {vec3} out
         */
        vec3.transformQuat = function (out, a, q) {
            // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
            var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], 
            // calculate quat * vec
            ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
            // calculate result * inverse quat
            out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
            out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
            out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
            return out;
        };
        /**
         * Perform some operation over an array of vec3s.
         *
         * @param {Array} a the array of vectors to iterate over
         * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
         * @param {Number} offset Number of elements to skip at the beginning of the array
         * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
         * @param {Function} fn Function to call for each vector in the array
         * @param {Object} [arg] additional argument to pass to fn
         * @returns {Array} a
         * @function
         */
        vec3.forEach = (function () {
            var vec = vec3.create();
            return function (a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) {
                    stride = 3;
                }
                if (!offset) {
                    offset = 0;
                }
                if (count) {
                    l = Math.min((count * stride) + offset, a.length);
                }
                else {
                    l = a.length;
                }
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    vec[2] = a[i + 2];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1];
                    a[i + 2] = vec[2];
                }
                return a;
            };
        })();
        /**
         * Returns a string representation of a vector
         *
         * @param {vec3} vec vector to represent as a string
         * @returns {String} string representation of the vector
         */
        vec3.str = function (a) {
            return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.vec3 = vec3;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 4 Dimensional Vector
         * @name vec4
         */
        var vec4 = {};
        /**
         * Creates a new, empty vec4
         *
         * @returns {vec4} a new 4D vector
         */
        vec4.create = function () {
            var out = new GLMAT_ARRAY_TYPE(4);
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            return out;
        };
        /**
         * Creates a new vec4 initialized with values from an existing vector
         *
         * @param {vec4} a vector to clone
         * @returns {vec4} a new 4D vector
         */
        vec4.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(4);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out;
        };
        /**
         * Creates a new vec4 initialized with the given values
         *
         * @param {Number} x X component
         * @param {Number} y Y component
         * @param {Number} z Z component
         * @param {Number} w W component
         * @returns {vec4} a new 4D vector
         */
        vec4.fromValues = function (x, y, z, w) {
            var out = new GLMAT_ARRAY_TYPE(4);
            out[0] = x;
            out[1] = y;
            out[2] = z;
            out[3] = w;
            return out;
        };
        /**
         * Copy the values from one vec4 to another
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the source vector
         * @returns {vec4} out
         */
        vec4.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out;
        };
        /**
         * Set the components of a vec4 to the given values
         *
         * @param {vec4} out the receiving vector
         * @param {Number} x X component
         * @param {Number} y Y component
         * @param {Number} z Z component
         * @param {Number} w W component
         * @returns {vec4} out
         */
        vec4.set = function (out, x, y, z, w) {
            out[0] = x;
            out[1] = y;
            out[2] = z;
            out[3] = w;
            return out;
        };
        /**
         * Adds two vec4's
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {vec4} out
         */
        vec4.add = function (out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            return out;
        };
        /**
         * Subtracts vector b from vector a
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {vec4} out
         */
        vec4.subtract = function (out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            return out;
        };
        /**
         * Alias for {@link vec4.subtract}
         * @function
         */
        vec4.sub = vec4.subtract;
        /**
         * Multiplies two vec4's
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {vec4} out
         */
        vec4.multiply = function (out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];
            out[3] = a[3] * b[3];
            return out;
        };
        /**
         * Alias for {@link vec4.multiply}
         * @function
         */
        vec4.mul = vec4.multiply;
        /**
         * Divides two vec4's
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {vec4} out
         */
        vec4.divide = function (out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            out[2] = a[2] / b[2];
            out[3] = a[3] / b[3];
            return out;
        };
        /**
         * Alias for {@link vec4.divide}
         * @function
         */
        vec4.div = vec4.divide;
        /**
         * Returns the minimum of two vec4's
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {vec4} out
         */
        vec4.min = function (out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            out[2] = Math.min(a[2], b[2]);
            out[3] = Math.min(a[3], b[3]);
            return out;
        };
        /**
         * Returns the maximum of two vec4's
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {vec4} out
         */
        vec4.max = function (out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            out[2] = Math.max(a[2], b[2]);
            out[3] = Math.max(a[3], b[3]);
            return out;
        };
        /**
         * Scales a vec4 by a scalar number
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the vector to scale
         * @param {Number} b amount to scale the vector by
         * @returns {vec4} out
         */
        vec4.scale = function (out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            return out;
        };
        /**
         * Adds two vec4's after scaling the second operand by a scalar value
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @param {Number} scale the amount to scale b by before adding
         * @returns {vec4} out
         */
        vec4.scaleAndAdd = function (out, a, b, scale) {
            out[0] = a[0] + (b[0] * scale);
            out[1] = a[1] + (b[1] * scale);
            out[2] = a[2] + (b[2] * scale);
            out[3] = a[3] + (b[3] * scale);
            return out;
        };
        /**
         * Calculates the euclidian distance between two vec4's
         *
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {Number} distance between a and b
         */
        vec4.distance = function (a, b) {
            var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
            return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        /**
         * Alias for {@link vec4.distance}
         * @function
         */
        vec4.dist = vec4.distance;
        /**
         * Calculates the squared euclidian distance between two vec4's
         *
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {Number} squared distance between a and b
         */
        vec4.squaredDistance = function (a, b) {
            var x = b[0] - a[0], y = b[1] - a[1], z = b[2] - a[2], w = b[3] - a[3];
            return x * x + y * y + z * z + w * w;
        };
        /**
         * Alias for {@link vec4.squaredDistance}
         * @function
         */
        vec4.sqrDist = vec4.squaredDistance;
        /**
         * Calculates the length of a vec4
         *
         * @param {vec4} a vector to calculate length of
         * @returns {Number} length of a
         */
        vec4.length = function (a) {
            var x = a[0], y = a[1], z = a[2], w = a[3];
            return Math.sqrt(x * x + y * y + z * z + w * w);
        };
        /**
         * Alias for {@link vec4.length}
         * @function
         */
        vec4.len = vec4.length;
        /**
         * Calculates the squared length of a vec4
         *
         * @param {vec4} a vector to calculate squared length of
         * @returns {Number} squared length of a
         */
        vec4.squaredLength = function (a) {
            var x = a[0], y = a[1], z = a[2], w = a[3];
            return x * x + y * y + z * z + w * w;
        };
        /**
         * Alias for {@link vec4.squaredLength}
         * @function
         */
        vec4.sqrLen = vec4.squaredLength;
        /**
         * Negates the components of a vec4
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a vector to negate
         * @returns {vec4} out
         */
        vec4.negate = function (out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = -a[3];
            return out;
        };
        /**
         * Normalize a vec4
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a vector to normalize
         * @returns {vec4} out
         */
        vec4.normalize = function (out, a) {
            var x = a[0], y = a[1], z = a[2], w = a[3];
            var len = x * x + y * y + z * z + w * w;
            if (len > 0) {
                len = 1 / Math.sqrt(len);
                out[0] = a[0] * len;
                out[1] = a[1] * len;
                out[2] = a[2] * len;
                out[3] = a[3] * len;
            }
            return out;
        };
        /**
         * Calculates the dot product of two vec4's
         *
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @returns {Number} dot product of a and b
         */
        vec4.dot = function (a, b) {
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
        };
        /**
         * Performs a linear interpolation between two vec4's
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the first operand
         * @param {vec4} b the second operand
         * @param {Number} t interpolation amount between the two inputs
         * @returns {vec4} out
         */
        vec4.lerp = function (out, a, b, t) {
            var ax = a[0], ay = a[1], az = a[2], aw = a[3];
            out[0] = ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            out[2] = az + t * (b[2] - az);
            out[3] = aw + t * (b[3] - aw);
            return out;
        };
        /**
         * Generates a random vector with the given scale
         *
         * @param {vec4} out the receiving vector
         * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
         * @returns {vec4} out
         */
        vec4.random = function (out, scale) {
            scale = scale || 1.0;
            //TODO: This is a pretty awful way of doing this. Find something better.
            out[0] = GLMAT_RANDOM();
            out[1] = GLMAT_RANDOM();
            out[2] = GLMAT_RANDOM();
            out[3] = GLMAT_RANDOM();
            vec4.normalize(out, out);
            vec4.scale(out, out, scale);
            return out;
        };
        /**
         * Transforms the vec4 with a mat4.
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the vector to transform
         * @param {mat4} m matrix to transform with
         * @returns {vec4} out
         */
        vec4.transformMat4 = function (out, a, m) {
            var x = a[0], y = a[1], z = a[2], w = a[3];
            out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
            out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
            out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
            out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
            return out;
        };
        /**
         * Transforms the vec4 with a quat
         *
         * @param {vec4} out the receiving vector
         * @param {vec4} a the vector to transform
         * @param {quat} q quaternion to transform with
         * @returns {vec4} out
         */
        vec4.transformQuat = function (out, a, q) {
            var x = a[0], y = a[1], z = a[2], qx = q[0], qy = q[1], qz = q[2], qw = q[3], 
            // calculate quat * vec
            ix = qw * x + qy * z - qz * y, iy = qw * y + qz * x - qx * z, iz = qw * z + qx * y - qy * x, iw = -qx * x - qy * y - qz * z;
            // calculate result * inverse quat
            out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
            out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
            out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
            return out;
        };
        /**
         * Perform some operation over an array of vec4s.
         *
         * @param {Array} a the array of vectors to iterate over
         * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
         * @param {Number} offset Number of elements to skip at the beginning of the array
         * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
         * @param {Function} fn Function to call for each vector in the array
         * @param {Object} [arg] additional argument to pass to fn
         * @returns {Array} a
         * @function
         */
        vec4.forEach = (function () {
            var vec = vec4.create();
            return function (a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) {
                    stride = 4;
                }
                if (!offset) {
                    offset = 0;
                }
                if (count) {
                    l = Math.min((count * stride) + offset, a.length);
                }
                else {
                    l = a.length;
                }
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    vec[2] = a[i + 2];
                    vec[3] = a[i + 3];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1];
                    a[i + 2] = vec[2];
                    a[i + 3] = vec[3];
                }
                return a;
            };
        })();
        /**
         * Returns a string representation of a vector
         *
         * @param {vec4} vec vector to represent as a string
         * @returns {String} string representation of the vector
         */
        vec4.str = function (a) {
            return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.vec4 = vec4;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 2x2 Matrix
         * @name mat2
         */
        var mat2 = {};
        /**
         * Creates a new identity mat2
         *
         * @returns {mat2} a new 2x2 matrix
         */
        mat2.create = function () {
            var out = new GLMAT_ARRAY_TYPE(4);
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        };
        /**
         * Creates a new mat2 initialized with values from an existing matrix
         *
         * @param {mat2} a matrix to clone
         * @returns {mat2} a new 2x2 matrix
         */
        mat2.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(4);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out;
        };
        /**
         * Copy the values from one mat2 to another
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the source matrix
         * @returns {mat2} out
         */
        mat2.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out;
        };
        /**
         * Set a mat2 to the identity matrix
         *
         * @param {mat2} out the receiving matrix
         * @returns {mat2} out
         */
        mat2.identity = function (out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        };
        /**
         * Transpose the values of a mat2
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the source matrix
         * @returns {mat2} out
         */
        mat2.transpose = function (out, a) {
            // If we are transposing ourselves we can skip a few steps but have to cache some values
            if (out === a) {
                var a1 = a[1];
                out[1] = a[2];
                out[2] = a1;
            }
            else {
                out[0] = a[0];
                out[1] = a[2];
                out[2] = a[1];
                out[3] = a[3];
            }
            return out;
        };
        /**
         * Inverts a mat2
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the source matrix
         * @returns {mat2} out
         */
        mat2.invert = function (out, a) {
            var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], 
            // Calculate the determinant
            det = a0 * a3 - a2 * a1;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            out[0] = a3 * det;
            out[1] = -a1 * det;
            out[2] = -a2 * det;
            out[3] = a0 * det;
            return out;
        };
        /**
         * Calculates the adjugate of a mat2
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the source matrix
         * @returns {mat2} out
         */
        mat2.adjoint = function (out, a) {
            // Caching this value is nessecary if out == a
            var a0 = a[0];
            out[0] = a[3];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = a0;
            return out;
        };
        /**
         * Calculates the determinant of a mat2
         *
         * @param {mat2} a the source matrix
         * @returns {Number} determinant of a
         */
        mat2.determinant = function (a) {
            return a[0] * a[3] - a[2] * a[1];
        };
        /**
         * Multiplies two mat2's
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the first operand
         * @param {mat2} b the second operand
         * @returns {mat2} out
         */
        mat2.multiply = function (out, a, b) {
            var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
            var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
            out[0] = a0 * b0 + a1 * b2;
            out[1] = a0 * b1 + a1 * b3;
            out[2] = a2 * b0 + a3 * b2;
            out[3] = a2 * b1 + a3 * b3;
            return out;
        };
        /**
         * Alias for {@link mat2.multiply}
         * @function
         */
        mat2.mul = mat2.multiply;
        /**
         * Rotates a mat2 by the given angle
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @returns {mat2} out
         */
        mat2.rotate = function (out, a, rad) {
            var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], s = Math.sin(rad), c = Math.cos(rad);
            out[0] = a0 * c + a1 * s;
            out[1] = a0 * -s + a1 * c;
            out[2] = a2 * c + a3 * s;
            out[3] = a2 * -s + a3 * c;
            return out;
        };
        /**
         * Scales the mat2 by the dimensions in the given vec2
         *
         * @param {mat2} out the receiving matrix
         * @param {mat2} a the matrix to rotate
         * @param {vec2} v the vec2 to scale the matrix by
         * @returns {mat2} out
         **/
        mat2.scale = function (out, a, v) {
            var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], v0 = v[0], v1 = v[1];
            out[0] = a0 * v0;
            out[1] = a1 * v1;
            out[2] = a2 * v0;
            out[3] = a3 * v1;
            return out;
        };
        /**
         * Returns a string representation of a mat2
         *
         * @param {mat2} mat matrix to represent as a string
         * @returns {String} string representation of the matrix
         */
        mat2.str = function (a) {
            return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.mat2 = mat2;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 2x3 Matrix
         * @name mat2d
         *
         * @description
         * A mat2d contains six elements defined as:
         * <pre>
         * [a, b,
         *  c, d,
         *  tx,ty]
         * </pre>
         * This is a short form for the 3x3 matrix:
         * <pre>
         * [a, b, 0
         *  c, d, 0
         *  tx,ty,1]
         * </pre>
         * The last column is ignored so the array is shorter and operations are faster.
         */
        var mat2d = {};
        /**
         * Creates a new identity mat2d
         *
         * @returns {mat2d} a new 2x3 matrix
         */
        mat2d.create = function () {
            var out = new GLMAT_ARRAY_TYPE(6);
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = 0;
            out[5] = 0;
            return out;
        };
        /**
         * Creates a new mat2d initialized with values from an existing matrix
         *
         * @param {mat2d} a matrix to clone
         * @returns {mat2d} a new 2x3 matrix
         */
        mat2d.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(6);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            return out;
        };
        /**
         * Copy the values from one mat2d to another
         *
         * @param {mat2d} out the receiving matrix
         * @param {mat2d} a the source matrix
         * @returns {mat2d} out
         */
        mat2d.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            return out;
        };
        /**
         * Set a mat2d to the identity matrix
         *
         * @param {mat2d} out the receiving matrix
         * @returns {mat2d} out
         */
        mat2d.identity = function (out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = 0;
            out[5] = 0;
            return out;
        };
        /**
         * Inverts a mat2d
         *
         * @param {mat2d} out the receiving matrix
         * @param {mat2d} a the source matrix
         * @returns {mat2d} out
         */
        mat2d.invert = function (out, a) {
            var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5];
            var det = aa * ad - ab * ac;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            out[0] = ad * det;
            out[1] = -ab * det;
            out[2] = -ac * det;
            out[3] = aa * det;
            out[4] = (ac * aty - ad * atx) * det;
            out[5] = (ab * atx - aa * aty) * det;
            return out;
        };
        /**
         * Calculates the determinant of a mat2d
         *
         * @param {mat2d} a the source matrix
         * @returns {Number} determinant of a
         */
        mat2d.determinant = function (a) {
            return a[0] * a[3] - a[1] * a[2];
        };
        /**
         * Multiplies two mat2d's
         *
         * @param {mat2d} out the receiving matrix
         * @param {mat2d} a the first operand
         * @param {mat2d} b the second operand
         * @returns {mat2d} out
         */
        mat2d.multiply = function (out, a, b) {
            var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5], ba = b[0], bb = b[1], bc = b[2], bd = b[3], btx = b[4], bty = b[5];
            out[0] = aa * ba + ab * bc;
            out[1] = aa * bb + ab * bd;
            out[2] = ac * ba + ad * bc;
            out[3] = ac * bb + ad * bd;
            out[4] = ba * atx + bc * aty + btx;
            out[5] = bb * atx + bd * aty + bty;
            return out;
        };
        /**
         * Alias for {@link mat2d.multiply}
         * @function
         */
        mat2d.mul = mat2d.multiply;
        /**
         * Rotates a mat2d by the given angle
         *
         * @param {mat2d} out the receiving matrix
         * @param {mat2d} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @returns {mat2d} out
         */
        mat2d.rotate = function (out, a, rad) {
            var aa = a[0], ab = a[1], ac = a[2], ad = a[3], atx = a[4], aty = a[5], st = Math.sin(rad), ct = Math.cos(rad);
            out[0] = aa * ct + ab * st;
            out[1] = -aa * st + ab * ct;
            out[2] = ac * ct + ad * st;
            out[3] = -ac * st + ct * ad;
            out[4] = ct * atx + st * aty;
            out[5] = ct * aty - st * atx;
            return out;
        };
        /**
         * Scales the mat2d by the dimensions in the given vec2
         *
         * @param {mat2d} out the receiving matrix
         * @param {mat2d} a the matrix to translate
         * @param {vec2} v the vec2 to scale the matrix by
         * @returns {mat2d} out
         **/
        mat2d.scale = function (out, a, v) {
            var vx = v[0], vy = v[1];
            out[0] = a[0] * vx;
            out[1] = a[1] * vy;
            out[2] = a[2] * vx;
            out[3] = a[3] * vy;
            out[4] = a[4] * vx;
            out[5] = a[5] * vy;
            return out;
        };
        /**
         * Translates the mat2d by the dimensions in the given vec2
         *
         * @param {mat2d} out the receiving matrix
         * @param {mat2d} a the matrix to translate
         * @param {vec2} v the vec2 to translate the matrix by
         * @returns {mat2d} out
         **/
        mat2d.translate = function (out, a, v) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4] + v[0];
            out[5] = a[5] + v[1];
            return out;
        };
        /**
         * Returns a string representation of a mat2d
         *
         * @param {mat2d} a matrix to represent as a string
         * @returns {String} string representation of the matrix
         */
        mat2d.str = function (a) {
            return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                a[3] + ', ' + a[4] + ', ' + a[5] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.mat2d = mat2d;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 3x3 Matrix
         * @name mat3
         */
        var mat3 = {};
        /**
         * Creates a new identity mat3
         *
         * @returns {mat3} a new 3x3 matrix
         */
        mat3.create = function () {
            var out = new GLMAT_ARRAY_TYPE(9);
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out;
        };
        /**
         * Copies the upper-left 3x3 values into the given mat3.
         *
         * @param {mat3} out the receiving 3x3 matrix
         * @param {mat4} a   the source 4x4 matrix
         * @returns {mat3} out
         */
        mat3.fromMat4 = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[4];
            out[4] = a[5];
            out[5] = a[6];
            out[6] = a[8];
            out[7] = a[9];
            out[8] = a[10];
            return out;
        };
        /**
         * Creates a new mat3 initialized with values from an existing matrix
         *
         * @param {mat3} a matrix to clone
         * @returns {mat3} a new 3x3 matrix
         */
        mat3.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(9);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out;
        };
        /**
         * Copy the values from one mat3 to another
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the source matrix
         * @returns {mat3} out
         */
        mat3.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out;
        };
        /**
         * Set a mat3 to the identity matrix
         *
         * @param {mat3} out the receiving matrix
         * @returns {mat3} out
         */
        mat3.identity = function (out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out;
        };
        /**
         * Transpose the values of a mat3
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the source matrix
         * @returns {mat3} out
         */
        mat3.transpose = function (out, a) {
            // If we are transposing ourselves we can skip a few steps but have to cache some values
            if (out === a) {
                var a01 = a[1], a02 = a[2], a12 = a[5];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a01;
                out[5] = a[7];
                out[6] = a02;
                out[7] = a12;
            }
            else {
                out[0] = a[0];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a[1];
                out[4] = a[4];
                out[5] = a[7];
                out[6] = a[2];
                out[7] = a[5];
                out[8] = a[8];
            }
            return out;
        };
        /**
         * Inverts a mat3
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the source matrix
         * @returns {mat3} out
         */
        mat3.invert = function (out, a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b01 = a22 * a11 - a12 * a21, b11 = -a22 * a10 + a12 * a20, b21 = a21 * a10 - a11 * a20, 
            // Calculate the determinant
            det = a00 * b01 + a01 * b11 + a02 * b21;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            out[0] = b01 * det;
            out[1] = (-a22 * a01 + a02 * a21) * det;
            out[2] = (a12 * a01 - a02 * a11) * det;
            out[3] = b11 * det;
            out[4] = (a22 * a00 - a02 * a20) * det;
            out[5] = (-a12 * a00 + a02 * a10) * det;
            out[6] = b21 * det;
            out[7] = (-a21 * a00 + a01 * a20) * det;
            out[8] = (a11 * a00 - a01 * a10) * det;
            return out;
        };
        /**
         * Calculates the adjugate of a mat3
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the source matrix
         * @returns {mat3} out
         */
        mat3.adjoint = function (out, a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
            out[0] = (a11 * a22 - a12 * a21);
            out[1] = (a02 * a21 - a01 * a22);
            out[2] = (a01 * a12 - a02 * a11);
            out[3] = (a12 * a20 - a10 * a22);
            out[4] = (a00 * a22 - a02 * a20);
            out[5] = (a02 * a10 - a00 * a12);
            out[6] = (a10 * a21 - a11 * a20);
            out[7] = (a01 * a20 - a00 * a21);
            out[8] = (a00 * a11 - a01 * a10);
            return out;
        };
        /**
         * Calculates the determinant of a mat3
         *
         * @param {mat3} a the source matrix
         * @returns {Number} determinant of a
         */
        mat3.determinant = function (a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8];
            return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
        };
        /**
         * Multiplies two mat3's
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the first operand
         * @param {mat3} b the second operand
         * @returns {mat3} out
         */
        mat3.multiply = function (out, a, b) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], b00 = b[0], b01 = b[1], b02 = b[2], b10 = b[3], b11 = b[4], b12 = b[5], b20 = b[6], b21 = b[7], b22 = b[8];
            out[0] = b00 * a00 + b01 * a10 + b02 * a20;
            out[1] = b00 * a01 + b01 * a11 + b02 * a21;
            out[2] = b00 * a02 + b01 * a12 + b02 * a22;
            out[3] = b10 * a00 + b11 * a10 + b12 * a20;
            out[4] = b10 * a01 + b11 * a11 + b12 * a21;
            out[5] = b10 * a02 + b11 * a12 + b12 * a22;
            out[6] = b20 * a00 + b21 * a10 + b22 * a20;
            out[7] = b20 * a01 + b21 * a11 + b22 * a21;
            out[8] = b20 * a02 + b21 * a12 + b22 * a22;
            return out;
        };
        /**
         * Alias for {@link mat3.multiply}
         * @function
         */
        mat3.mul = mat3.multiply;
        /**
         * Translate a mat3 by the given vector
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the matrix to translate
         * @param {vec2} v vector to translate by
         * @returns {mat3} out
         */
        mat3.translate = function (out, a, v) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v[0], y = v[1];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a10;
            out[4] = a11;
            out[5] = a12;
            out[6] = x * a00 + y * a10 + a20;
            out[7] = x * a01 + y * a11 + a21;
            out[8] = x * a02 + y * a12 + a22;
            return out;
        };
        /**
         * Rotates a mat3 by the given angle
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @returns {mat3} out
         */
        mat3.rotate = function (out, a, rad) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
            out[0] = c * a00 + s * a10;
            out[1] = c * a01 + s * a11;
            out[2] = c * a02 + s * a12;
            out[3] = c * a10 - s * a00;
            out[4] = c * a11 - s * a01;
            out[5] = c * a12 - s * a02;
            out[6] = a20;
            out[7] = a21;
            out[8] = a22;
            return out;
        };
        /**
         * Scales the mat3 by the dimensions in the given vec2
         *
         * @param {mat3} out the receiving matrix
         * @param {mat3} a the matrix to rotate
         * @param {vec2} v the vec2 to scale the matrix by
         * @returns {mat3} out
         **/
        mat3.scale = function (out, a, v) {
            var x = v[0], y = v[1];
            out[0] = x * a[0];
            out[1] = x * a[1];
            out[2] = x * a[2];
            out[3] = y * a[3];
            out[4] = y * a[4];
            out[5] = y * a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out;
        };
        /**
         * Copies the values from a mat2d into a mat3
         *
         * @param {mat3} out the receiving matrix
         * @param {mat2d} a the matrix to copy
         * @returns {mat3} out
         **/
        mat3.fromMat2d = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = 0;
            out[3] = a[2];
            out[4] = a[3];
            out[5] = 0;
            out[6] = a[4];
            out[7] = a[5];
            out[8] = 1;
            return out;
        };
        /**
        * Calculates a 3x3 matrix from the given quaternion
        *
        * @param {mat3} out mat3 receiving operation result
        * @param {quat} q Quaternion to create matrix from
        *
        * @returns {mat3} out
        */
        mat3.fromQuat = function (out, q) {
            var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
            out[0] = 1 - (yy + zz);
            out[3] = xy + wz;
            out[6] = xz - wy;
            out[1] = xy - wz;
            out[4] = 1 - (xx + zz);
            out[7] = yz + wx;
            out[2] = xz + wy;
            out[5] = yz - wx;
            out[8] = 1 - (xx + yy);
            return out;
        };
        /**
        * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
        *
        * @param {mat3} out mat3 receiving operation result
        * @param {mat4} a Mat4 to derive the normal matrix from
        *
        * @returns {mat3} out
        */
        mat3.normalFromMat4 = function (out, a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, 
            // Calculate the determinant
            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
            out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            return out;
        };
        /**
         * Returns a string representation of a mat3
         *
         * @param {mat3} mat matrix to represent as a string
         * @returns {String} string representation of the matrix
         */
        mat3.str = function (a) {
            return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
                a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
                a[6] + ', ' + a[7] + ', ' + a[8] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.mat3 = mat3;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class 4x4 Matrix
         * @name mat4
         */
        var mat4 = {};
        /**
         * Creates a new identity mat4
         *
         * @returns {mat4} a new 4x4 matrix
         */
        mat4.create = function () {
            var out = new GLMAT_ARRAY_TYPE(16);
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out;
        };
        /**
         * Creates a new mat4 initialized with values from an existing matrix
         *
         * @param {mat4} a matrix to clone
         * @returns {mat4} a new 4x4 matrix
         */
        mat4.clone = function (a) {
            var out = new GLMAT_ARRAY_TYPE(16);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out;
        };
        /**
         * Copy the values from one mat4 to another
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the source matrix
         * @returns {mat4} out
         */
        mat4.copy = function (out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out;
        };
        /**
         * Set a mat4 to the identity matrix
         *
         * @param {mat4} out the receiving matrix
         * @returns {mat4} out
         */
        mat4.identity = function (out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out;
        };
        /**
         * Transpose the values of a mat4
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the source matrix
         * @returns {mat4} out
         */
        mat4.transpose = function (out, a) {
            // If we are transposing ourselves we can skip a few steps but have to cache some values
            if (out === a) {
                var a01 = a[1], a02 = a[2], a03 = a[3], a12 = a[6], a13 = a[7], a23 = a[11];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a01;
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a02;
                out[9] = a12;
                out[11] = a[14];
                out[12] = a03;
                out[13] = a13;
                out[14] = a23;
            }
            else {
                out[0] = a[0];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a[1];
                out[5] = a[5];
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a[2];
                out[9] = a[6];
                out[10] = a[10];
                out[11] = a[14];
                out[12] = a[3];
                out[13] = a[7];
                out[14] = a[11];
                out[15] = a[15];
            }
            return out;
        };
        /**
         * Inverts a mat4
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the source matrix
         * @returns {mat4} out
         */
        mat4.invert = function (out, a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32, 
            // Calculate the determinant
            det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) {
                return null;
            }
            det = 1.0 / det;
            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
            out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
            out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
            out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
            out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
            out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
            out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
            out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
            return out;
        };
        /**
         * Calculates the adjugate of a mat4
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the source matrix
         * @returns {mat4} out
         */
        mat4.adjoint = function (out, a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
            out[0] = (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
            out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
            out[2] = (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
            out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
            out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
            out[5] = (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
            out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
            out[7] = (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
            out[8] = (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
            out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
            out[10] = (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
            out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
            out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
            out[13] = (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
            out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
            out[15] = (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
            return out;
        };
        /**
         * Calculates the determinant of a mat4
         *
         * @param {mat4} a the source matrix
         * @returns {Number} determinant of a
         */
        mat4.determinant = function (a) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15], b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10, b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12, b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30, b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32;
            // Calculate the determinant
            return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        };
        /**
         * Multiplies two mat4's
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the first operand
         * @param {mat4} b the second operand
         * @returns {mat4} out
         */
        mat4.multiply = function (out, a, b) {
            var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11], a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
            // Cache only the current line of the second matrix
            var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
            out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[4];
            b1 = b[5];
            b2 = b[6];
            b3 = b[7];
            out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[8];
            b1 = b[9];
            b2 = b[10];
            b3 = b[11];
            out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[12];
            b1 = b[13];
            b2 = b[14];
            b3 = b[15];
            out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            return out;
        };
        /**
         * Alias for {@link mat4.multiply}
         * @function
         */
        mat4.mul = mat4.multiply;
        /**
         * Translate a mat4 by the given vector
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the matrix to translate
         * @param {vec3} v vector to translate by
         * @returns {mat4} out
         */
        mat4.translate = function (out, a, v) {
            var x = v[0], y = v[1], z = v[2], a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23;
            if (a === out) {
                out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
            }
            else {
                a00 = a[0];
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a10 = a[4];
                a11 = a[5];
                a12 = a[6];
                a13 = a[7];
                a20 = a[8];
                a21 = a[9];
                a22 = a[10];
                a23 = a[11];
                out[0] = a00;
                out[1] = a01;
                out[2] = a02;
                out[3] = a03;
                out[4] = a10;
                out[5] = a11;
                out[6] = a12;
                out[7] = a13;
                out[8] = a20;
                out[9] = a21;
                out[10] = a22;
                out[11] = a23;
                out[12] = a00 * x + a10 * y + a20 * z + a[12];
                out[13] = a01 * x + a11 * y + a21 * z + a[13];
                out[14] = a02 * x + a12 * y + a22 * z + a[14];
                out[15] = a03 * x + a13 * y + a23 * z + a[15];
            }
            return out;
        };
        /**
         * Scales the mat4 by the dimensions in the given vec3
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the matrix to scale
         * @param {vec3} v the vec3 to scale the matrix by
         * @returns {mat4} out
         **/
        mat4.scale = function (out, a, v) {
            var x = v[0], y = v[1], z = v[2];
            out[0] = a[0] * x;
            out[1] = a[1] * x;
            out[2] = a[2] * x;
            out[3] = a[3] * x;
            out[4] = a[4] * y;
            out[5] = a[5] * y;
            out[6] = a[6] * y;
            out[7] = a[7] * y;
            out[8] = a[8] * z;
            out[9] = a[9] * z;
            out[10] = a[10] * z;
            out[11] = a[11] * z;
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out;
        };
        /**
         * Rotates a mat4 by the given angle
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @param {vec3} axis the axis to rotate around
         * @returns {mat4} out
         */
        mat4.rotate = function (out, a, rad, axis) {
            var x = axis[0], y = axis[1], z = axis[2], len = Math.sqrt(x * x + y * y + z * z), s, c, t, a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, b00, b01, b02, b10, b11, b12, b20, b21, b22;
            if (Math.abs(len) < GLMAT_EPSILON) {
                return null;
            }
            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;
            s = Math.sin(rad);
            c = Math.cos(rad);
            t = 1 - c;
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            // Construct the elements of the rotation matrix
            b00 = x * x * t + c;
            b01 = y * x * t + z * s;
            b02 = z * x * t - y * s;
            b10 = x * y * t - z * s;
            b11 = y * y * t + c;
            b12 = z * y * t + x * s;
            b20 = x * z * t + y * s;
            b21 = y * z * t - x * s;
            b22 = z * z * t + c;
            // Perform rotation-specific matrix multiplication
            out[0] = a00 * b00 + a10 * b01 + a20 * b02;
            out[1] = a01 * b00 + a11 * b01 + a21 * b02;
            out[2] = a02 * b00 + a12 * b01 + a22 * b02;
            out[3] = a03 * b00 + a13 * b01 + a23 * b02;
            out[4] = a00 * b10 + a10 * b11 + a20 * b12;
            out[5] = a01 * b10 + a11 * b11 + a21 * b12;
            out[6] = a02 * b10 + a12 * b11 + a22 * b12;
            out[7] = a03 * b10 + a13 * b11 + a23 * b12;
            out[8] = a00 * b20 + a10 * b21 + a20 * b22;
            out[9] = a01 * b20 + a11 * b21 + a21 * b22;
            out[10] = a02 * b20 + a12 * b21 + a22 * b22;
            out[11] = a03 * b20 + a13 * b21 + a23 * b22;
            if (a !== out) {
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }
            return out;
        };
        /**
         * Rotates a matrix by the given angle around the X axis
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @returns {mat4} out
         */
        mat4.rotateX = function (out, a, rad) {
            var s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
            if (a !== out) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }
            // Perform axis-specific matrix multiplication
            out[4] = a10 * c + a20 * s;
            out[5] = a11 * c + a21 * s;
            out[6] = a12 * c + a22 * s;
            out[7] = a13 * c + a23 * s;
            out[8] = a20 * c - a10 * s;
            out[9] = a21 * c - a11 * s;
            out[10] = a22 * c - a12 * s;
            out[11] = a23 * c - a13 * s;
            return out;
        };
        /**
         * Rotates a matrix by the given angle around the Y axis
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @returns {mat4} out
         */
        mat4.rotateY = function (out, a, rad) {
            var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
            if (a !== out) {
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }
            // Perform axis-specific matrix multiplication
            out[0] = a00 * c - a20 * s;
            out[1] = a01 * c - a21 * s;
            out[2] = a02 * c - a22 * s;
            out[3] = a03 * c - a23 * s;
            out[8] = a00 * s + a20 * c;
            out[9] = a01 * s + a21 * c;
            out[10] = a02 * s + a22 * c;
            out[11] = a03 * s + a23 * c;
            return out;
        };
        /**
         * Rotates a matrix by the given angle around the Z axis
         *
         * @param {mat4} out the receiving matrix
         * @param {mat4} a the matrix to rotate
         * @param {Number} rad the angle to rotate the matrix by
         * @returns {mat4} out
         */
        mat4.rotateZ = function (out, a, rad) {
            var s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
            if (a !== out) {
                out[8] = a[8];
                out[9] = a[9];
                out[10] = a[10];
                out[11] = a[11];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15];
            }
            // Perform axis-specific matrix multiplication
            out[0] = a00 * c + a10 * s;
            out[1] = a01 * c + a11 * s;
            out[2] = a02 * c + a12 * s;
            out[3] = a03 * c + a13 * s;
            out[4] = a10 * c - a00 * s;
            out[5] = a11 * c - a01 * s;
            out[6] = a12 * c - a02 * s;
            out[7] = a13 * c - a03 * s;
            return out;
        };
        /**
         * Creates a matrix from a quaternion rotation and vector translation
         * This is equivalent to (but much faster than):
         *
         *     mat4.identity(dest);
         *     mat4.translate(dest, vec);
         *     var quatMat = mat4.create();
         *     quat4.toMat4(quat, quatMat);
         *     mat4.multiply(dest, quatMat);
         *
         * @param {mat4} out mat4 receiving operation result
         * @param {quat4} q Rotation quaternion
         * @param {vec3} v Translation vector
         * @returns {mat4} out
         */
        mat4.fromRotationTranslation = function (out, q, v) {
            // Quaternion math
            var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
            out[0] = 1 - (yy + zz);
            out[1] = xy + wz;
            out[2] = xz - wy;
            out[3] = 0;
            out[4] = xy - wz;
            out[5] = 1 - (xx + zz);
            out[6] = yz + wx;
            out[7] = 0;
            out[8] = xz + wy;
            out[9] = yz - wx;
            out[10] = 1 - (xx + yy);
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] = v[2];
            out[15] = 1;
            return out;
        };
        /**
        * Calculates a 4x4 matrix from the given quaternion
        *
        * @param {mat4} out mat4 receiving operation result
        * @param {quat} q Quaternion to create matrix from
        *
        * @returns {mat4} out
        */
        mat4.fromQuat = function (out, q) {
            var x = q[0], y = q[1], z = q[2], w = q[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2;
            out[0] = 1 - (yy + zz);
            out[1] = xy + wz;
            out[2] = xz - wy;
            out[3] = 0;
            out[4] = xy - wz;
            out[5] = 1 - (xx + zz);
            out[6] = yz + wx;
            out[7] = 0;
            out[8] = xz + wy;
            out[9] = yz - wx;
            out[10] = 1 - (xx + yy);
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out;
        };
        /**
         * Generates a frustum matrix with the given bounds
         *
         * @param {mat4} out mat4 frustum matrix will be written into
         * @param {Number} left Left bound of the frustum
         * @param {Number} right Right bound of the frustum
         * @param {Number} bottom Bottom bound of the frustum
         * @param {Number} top Top bound of the frustum
         * @param {Number} near Near bound of the frustum
         * @param {Number} far Far bound of the frustum
         * @returns {mat4} out
         */
        mat4.frustum = function (out, left, right, bottom, top, near, far) {
            var rl = 1 / (right - left), tb = 1 / (top - bottom), nf = 1 / (near - far);
            out[0] = (near * 2) * rl;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = (near * 2) * tb;
            out[6] = 0;
            out[7] = 0;
            out[8] = (right + left) * rl;
            out[9] = (top + bottom) * tb;
            out[10] = (far + near) * nf;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[14] = (far * near * 2) * nf;
            out[15] = 0;
            return out;
        };
        /**
         * Generates a perspective projection matrix with the given bounds
         *
         * @param {mat4} out mat4 frustum matrix will be written into
         * @param {number} fovy Vertical field of view in radians
         * @param {number} aspect Aspect ratio. typically viewport width/height
         * @param {number} near Near bound of the frustum
         * @param {number} far Far bound of the frustum
         * @returns {mat4} out
         */
        mat4.perspective = function (out, fovy, aspect, near, far) {
            var f = 1.0 / Math.tan(fovy / 2), nf = 1 / (near - far);
            out[0] = f / aspect;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = f;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = (far + near) * nf;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[14] = (2 * far * near) * nf;
            out[15] = 0;
            return out;
        };
        /**
         * Generates a orthogonal projection matrix with the given bounds
         *
         * @param {mat4} out mat4 frustum matrix will be written into
         * @param {number} left Left bound of the frustum
         * @param {number} right Right bound of the frustum
         * @param {number} bottom Bottom bound of the frustum
         * @param {number} top Top bound of the frustum
         * @param {number} near Near bound of the frustum
         * @param {number} far Far bound of the frustum
         * @returns {mat4} out
         */
        mat4.ortho = function (out, left, right, bottom, top, near, far) {
            var lr = 1 / (left - right), bt = 1 / (bottom - top), nf = 1 / (near - far);
            out[0] = -2 * lr;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = -2 * bt;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 2 * nf;
            out[11] = 0;
            out[12] = (left + right) * lr;
            out[13] = (top + bottom) * bt;
            out[14] = (far + near) * nf;
            out[15] = 1;
            return out;
        };
        /**
         * Generates a look-at matrix with the given eye position, focal point, and up axis
         *
         * @param {mat4} out mat4 frustum matrix will be written into
         * @param {vec3} eye Position of the viewer
         * @param {vec3} center Point the viewer is looking at
         * @param {vec3} up vec3 pointing up
         * @returns {mat4} out
         */
        mat4.lookAt = function (out, eye, center, up) {
            var x0, x1, x2, y0, y1, y2, z0, z1, z2, len, eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2], centerx = center[0], centery = center[1], centerz = center[2];
            if (Math.abs(eyex - centerx) < GLMAT_EPSILON &&
                Math.abs(eyey - centery) < GLMAT_EPSILON &&
                Math.abs(eyez - centerz) < GLMAT_EPSILON) {
                return mat4.identity(out);
            }
            z0 = eyex - centerx;
            z1 = eyey - centery;
            z2 = eyez - centerz;
            len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
            z0 *= len;
            z1 *= len;
            z2 *= len;
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
            if (!len) {
                x0 = 0;
                x1 = 0;
                x2 = 0;
            }
            else {
                len = 1 / len;
                x0 *= len;
                x1 *= len;
                x2 *= len;
            }
            y0 = z1 * x2 - z2 * x1;
            y1 = z2 * x0 - z0 * x2;
            y2 = z0 * x1 - z1 * x0;
            len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
            if (!len) {
                y0 = 0;
                y1 = 0;
                y2 = 0;
            }
            else {
                len = 1 / len;
                y0 *= len;
                y1 *= len;
                y2 *= len;
            }
            out[0] = x0;
            out[1] = y0;
            out[2] = z0;
            out[3] = 0;
            out[4] = x1;
            out[5] = y1;
            out[6] = z1;
            out[7] = 0;
            out[8] = x2;
            out[9] = y2;
            out[10] = z2;
            out[11] = 0;
            out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
            out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
            out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
            out[15] = 1;
            return out;
        };
        /**
         * Returns a string representation of a mat4
         *
         * @param {mat4} mat matrix to represent as a string
         * @returns {String} string representation of the matrix
         */
        mat4.str = function (a) {
            return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
                a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.mat4 = mat4;
        }
        ;
        /* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:
        
          * Redistributions of source code must retain the above copyright notice, this
            list of conditions and the following disclaimer.
          * Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
        ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
        (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
        LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
        ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
        SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
        /**
         * @class Quaternion
         * @name quat
         */
        var quat = {};
        /**
         * Creates a new identity quat
         *
         * @returns {quat} a new quaternion
         */
        quat.create = function () {
            var out = new GLMAT_ARRAY_TYPE(4);
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        };
        /**
         * Sets a quaternion to represent the shortest rotation from one
         * vector to another.
         *
         * Both vectors are assumed to be unit length.
         *
         * @param {quat} out the receiving quaternion.
         * @param {vec3} a the initial vector
         * @param {vec3} b the destination vector
         * @returns {quat} out
         */
        quat.rotationTo = (function () {
            var tmpvec3 = vec3.create();
            var xUnitVec3 = vec3.fromValues(1, 0, 0);
            var yUnitVec3 = vec3.fromValues(0, 1, 0);
            return function (out, a, b) {
                var dot = vec3.dot(a, b);
                if (dot < -0.999999) {
                    vec3.cross(tmpvec3, xUnitVec3, a);
                    if (vec3.length(tmpvec3) < 0.000001)
                        vec3.cross(tmpvec3, yUnitVec3, a);
                    vec3.normalize(tmpvec3, tmpvec3);
                    quat.setAxisAngle(out, tmpvec3, Math.PI);
                    return out;
                }
                else if (dot > 0.999999) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 1;
                    return out;
                }
                else {
                    vec3.cross(tmpvec3, a, b);
                    out[0] = tmpvec3[0];
                    out[1] = tmpvec3[1];
                    out[2] = tmpvec3[2];
                    out[3] = 1 + dot;
                    return quat.normalize(out, out);
                }
            };
        })();
        /**
         * Sets the specified quaternion with values corresponding to the given
         * axes. Each axis is a vec3 and is expected to be unit length and
         * perpendicular to all other specified axes.
         *
         * @param {vec3} view  the vector representing the viewing direction
         * @param {vec3} right the vector representing the local "right" direction
         * @param {vec3} up    the vector representing the local "up" direction
         * @returns {quat} out
         */
        quat.setAxes = (function () {
            var matr = mat3.create();
            return function (out, view, right, up) {
                matr[0] = right[0];
                matr[3] = right[1];
                matr[6] = right[2];
                matr[1] = up[0];
                matr[4] = up[1];
                matr[7] = up[2];
                matr[2] = view[0];
                matr[5] = view[1];
                matr[8] = view[2];
                return quat.normalize(out, quat.fromMat3(out, matr));
            };
        })();
        /**
         * Creates a new quat initialized with values from an existing quaternion
         *
         * @param {quat} a quaternion to clone
         * @returns {quat} a new quaternion
         * @function
         */
        quat.clone = vec4.clone;
        /**
         * Creates a new quat initialized with the given values
         *
         * @param {Number} x X component
         * @param {Number} y Y component
         * @param {Number} z Z component
         * @param {Number} w W component
         * @returns {quat} a new quaternion
         * @function
         */
        quat.fromValues = vec4.fromValues;
        /**
         * Copy the values from one quat to another
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a the source quaternion
         * @returns {quat} out
         * @function
         */
        quat.copy = vec4.copy;
        /**
         * Set the components of a quat to the given values
         *
         * @param {quat} out the receiving quaternion
         * @param {Number} x X component
         * @param {Number} y Y component
         * @param {Number} z Z component
         * @param {Number} w W component
         * @returns {quat} out
         * @function
         */
        quat.set = vec4.set;
        /**
         * Set a quat to the identity quaternion
         *
         * @param {quat} out the receiving quaternion
         * @returns {quat} out
         */
        quat.identity = function (out) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        };
        /**
         * Sets a quat from the given angle and rotation axis,
         * then returns it.
         *
         * @param {quat} out the receiving quaternion
         * @param {vec3} axis the axis around which to rotate
         * @param {Number} rad the angle in radians
         * @returns {quat} out
         **/
        quat.setAxisAngle = function (out, axis, rad) {
            rad = rad * 0.5;
            var s = Math.sin(rad);
            out[0] = s * axis[0];
            out[1] = s * axis[1];
            out[2] = s * axis[2];
            out[3] = Math.cos(rad);
            return out;
        };
        /**
         * Adds two quat's
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a the first operand
         * @param {quat} b the second operand
         * @returns {quat} out
         * @function
         */
        quat.add = vec4.add;
        /**
         * Multiplies two quat's
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a the first operand
         * @param {quat} b the second operand
         * @returns {quat} out
         */
        quat.multiply = function (out, a, b) {
            var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
            out[0] = ax * bw + aw * bx + ay * bz - az * by;
            out[1] = ay * bw + aw * by + az * bx - ax * bz;
            out[2] = az * bw + aw * bz + ax * by - ay * bx;
            out[3] = aw * bw - ax * bx - ay * by - az * bz;
            return out;
        };
        /**
         * Alias for {@link quat.multiply}
         * @function
         */
        quat.mul = quat.multiply;
        /**
         * Scales a quat by a scalar number
         *
         * @param {quat} out the receiving vector
         * @param {quat} a the vector to scale
         * @param {Number} b amount to scale the vector by
         * @returns {quat} out
         * @function
         */
        quat.scale = vec4.scale;
        /**
         * Rotates a quaternion by the given angle about the X axis
         *
         * @param {quat} out quat receiving operation result
         * @param {quat} a quat to rotate
         * @param {number} rad angle (in radians) to rotate
         * @returns {quat} out
         */
        quat.rotateX = function (out, a, rad) {
            rad *= 0.5;
            var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = Math.sin(rad), bw = Math.cos(rad);
            out[0] = ax * bw + aw * bx;
            out[1] = ay * bw + az * bx;
            out[2] = az * bw - ay * bx;
            out[3] = aw * bw - ax * bx;
            return out;
        };
        /**
         * Rotates a quaternion by the given angle about the Y axis
         *
         * @param {quat} out quat receiving operation result
         * @param {quat} a quat to rotate
         * @param {number} rad angle (in radians) to rotate
         * @returns {quat} out
         */
        quat.rotateY = function (out, a, rad) {
            rad *= 0.5;
            var ax = a[0], ay = a[1], az = a[2], aw = a[3], by = Math.sin(rad), bw = Math.cos(rad);
            out[0] = ax * bw - az * by;
            out[1] = ay * bw + aw * by;
            out[2] = az * bw + ax * by;
            out[3] = aw * bw - ay * by;
            return out;
        };
        /**
         * Rotates a quaternion by the given angle about the Z axis
         *
         * @param {quat} out quat receiving operation result
         * @param {quat} a quat to rotate
         * @param {number} rad angle (in radians) to rotate
         * @returns {quat} out
         */
        quat.rotateZ = function (out, a, rad) {
            rad *= 0.5;
            var ax = a[0], ay = a[1], az = a[2], aw = a[3], bz = Math.sin(rad), bw = Math.cos(rad);
            out[0] = ax * bw + ay * bz;
            out[1] = ay * bw - ax * bz;
            out[2] = az * bw + aw * bz;
            out[3] = aw * bw - az * bz;
            return out;
        };
        /**
         * Calculates the W component of a quat from the X, Y, and Z components.
         * Assumes that quaternion is 1 unit in length.
         * Any existing W component will be ignored.
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a quat to calculate W component of
         * @returns {quat} out
         */
        quat.calculateW = function (out, a) {
            var x = a[0], y = a[1], z = a[2];
            out[0] = x;
            out[1] = y;
            out[2] = z;
            out[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
            return out;
        };
        /**
         * Calculates the dot product of two quat's
         *
         * @param {quat} a the first operand
         * @param {quat} b the second operand
         * @returns {Number} dot product of a and b
         * @function
         */
        quat.dot = vec4.dot;
        /**
         * Performs a linear interpolation between two quat's
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a the first operand
         * @param {quat} b the second operand
         * @param {Number} t interpolation amount between the two inputs
         * @returns {quat} out
         * @function
         */
        quat.lerp = vec4.lerp;
        /**
         * Performs a spherical linear interpolation between two quat
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a the first operand
         * @param {quat} b the second operand
         * @param {Number} t interpolation amount between the two inputs
         * @returns {quat} out
         */
        quat.slerp = function (out, a, b, t) {
            // benchmarks:
            //    http://jsperf.com/quaternion-slerp-implementations
            var ax = a[0], ay = a[1], az = a[2], aw = a[3], bx = b[0], by = b[1], bz = b[2], bw = b[3];
            var omega, cosom, sinom, scale0, scale1;
            // calc cosine
            cosom = ax * bx + ay * by + az * bz + aw * bw;
            // adjust signs (if necessary)
            if (cosom < 0.0) {
                cosom = -cosom;
                bx = -bx;
                by = -by;
                bz = -bz;
                bw = -bw;
            }
            // calculate coefficients
            if ((1.0 - cosom) > 0.000001) {
                // standard case (slerp)
                omega = Math.acos(cosom);
                sinom = Math.sin(omega);
                scale0 = Math.sin((1.0 - t) * omega) / sinom;
                scale1 = Math.sin(t * omega) / sinom;
            }
            else {
                // "from" and "to" quaternions are very close 
                //  ... so we can do a linear interpolation
                scale0 = 1.0 - t;
                scale1 = t;
            }
            // calculate final values
            out[0] = scale0 * ax + scale1 * bx;
            out[1] = scale0 * ay + scale1 * by;
            out[2] = scale0 * az + scale1 * bz;
            out[3] = scale0 * aw + scale1 * bw;
            return out;
        };
        /**
         * Calculates the inverse of a quat
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a quat to calculate inverse of
         * @returns {quat} out
         */
        quat.invert = function (out, a) {
            var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3, invDot = dot ? 1.0 / dot : 0;
            // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
            out[0] = -a0 * invDot;
            out[1] = -a1 * invDot;
            out[2] = -a2 * invDot;
            out[3] = a3 * invDot;
            return out;
        };
        /**
         * Calculates the conjugate of a quat
         * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a quat to calculate conjugate of
         * @returns {quat} out
         */
        quat.conjugate = function (out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = a[3];
            return out;
        };
        /**
         * Calculates the length of a quat
         *
         * @param {quat} a vector to calculate length of
         * @returns {Number} length of a
         * @function
         */
        quat.length = vec4.length;
        /**
         * Alias for {@link quat.length}
         * @function
         */
        quat.len = quat.length;
        /**
         * Calculates the squared length of a quat
         *
         * @param {quat} a vector to calculate squared length of
         * @returns {Number} squared length of a
         * @function
         */
        quat.squaredLength = vec4.squaredLength;
        /**
         * Alias for {@link quat.squaredLength}
         * @function
         */
        quat.sqrLen = quat.squaredLength;
        /**
         * Normalize a quat
         *
         * @param {quat} out the receiving quaternion
         * @param {quat} a quaternion to normalize
         * @returns {quat} out
         * @function
         */
        quat.normalize = vec4.normalize;
        /**
         * Creates a quaternion from the given 3x3 rotation matrix.
         *
         * NOTE: The resultant quaternion is not normalized, so you should be sure
         * to renormalize the quaternion yourself where necessary.
         *
         * @param {quat} out the receiving quaternion
         * @param {mat3} m rotation matrix
         * @returns {quat} out
         * @function
         */
        quat.fromMat3 = (function () {
            // benchmarks:
            //    http://jsperf.com/typed-array-access-speed
            //    http://jsperf.com/conversion-of-3x3-matrix-to-quaternion
            var s_iNext = (typeof (Int8Array) !== 'undefined' ? new Int8Array([1, 2, 0]) : [1, 2, 0]);
            return function (out, m) {
                // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
                // article "Quaternion Calculus and Fast Animation".
                var fTrace = m[0] + m[4] + m[8];
                var fRoot;
                if (fTrace > 0.0) {
                    // |w| > 1/2, may as well choose w > 1/2
                    fRoot = Math.sqrt(fTrace + 1.0); // 2w
                    out[3] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot; // 1/(4w)
                    out[0] = (m[7] - m[5]) * fRoot;
                    out[1] = (m[2] - m[6]) * fRoot;
                    out[2] = (m[3] - m[1]) * fRoot;
                }
                else {
                    // |w| <= 1/2
                    var i = 0;
                    if (m[4] > m[0])
                        i = 1;
                    if (m[8] > m[i * 3 + i])
                        i = 2;
                    var j = s_iNext[i];
                    var k = s_iNext[j];
                    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
                    out[i] = 0.5 * fRoot;
                    fRoot = 0.5 / fRoot;
                    out[3] = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;
                    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
                }
                return out;
            };
        })();
        /**
         * Returns a string representation of a quatenion
         *
         * @param {quat} vec vector to represent as a string
         * @returns {String} string representation of the vector
         */
        quat.str = function (a) {
            return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
        };
        if (typeof (exports) !== 'undefined') {
            exports.quat = quat;
        }
        ;
    })(shim.exports);
})(this);

},{}],7:[function(require,module,exports){
// maybe replace pool with a version that handles types of objects too
var pool = require('./object-pool');
var Growable = function (type, initialSize) {
    this.type = type;
    this.size = initialSize;
    this.data = pool.malloc(type, initialSize);
    // The offset to start writing at, also can be used as a count of items in the buffer
    this.offset = 0;
};
// We want to append size amount of data, at the current offset
// Re-allocate the array if necessary
// Returns a handle to the TypedArray to use
Growable.prototype.need = function (size) {
    var needed = this.offset + size;
    if (needed > this.size) {
        var newSize = this.size * 2;
        var data;
        while (needed > newSize) {
            newSize *= 2;
        }
        //console.log('GROWABLE: Reallocating to ' + newSize)
        data = pool.malloc(this.type, newSize);
        data.set(this.data);
        pool.free(this.type, this.data);
        this.data = data;
        this.size = newSize;
    }
    return this.data;
};
Growable.prototype.append = function (arr) {
    this.data.set(arr, this.offset);
    this.offset += arr.length;
};
Growable.prototype.free = function () {
    pool.free(this.type, this.data);
};
module.exports = Growable;

},{"./object-pool":14}],8:[function(require,module,exports){
/*
LineBuffer to hold all the lines we want to draw
*/
var vertexShaderCode = "uniform mat4 u_projection;" +
    "attribute vec4 a_position;" +
    "void main() { gl_Position = (u_projection * a_position); }";
var fragmentShaderCode = "precision mediump float;" +
    "uniform vec4 u_color;" +
    "void main() { gl_FragColor = u_color; }";
var Lines = function (gl, color) {
    this.gl = gl;
    this.glBuffer;
    this.tuples = 0;
    this.shaders = {};
    this.shaderAttributes = {};
    this.shaderUniforms = {};
    this.points = [];
    this.pointOffsets = [];
    this.color = color || [255, 0, 0, 1];
    // Set up shaders
    var shader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(shader, fragmentShaderCode);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        var errmsg = "fragment shader compile failed: " + gl.getShaderInfoLog(shader);
        alert(errmsg);
        throw new Error();
    }
    this.shaders.fragment = shader;
    shader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(shader, vertexShaderCode);
    gl.compileShader(shader);
    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        var errmsg = "vertex shader compile failed : " + gl.getShaderInfoLog(vertShader);
        alert(errmsg);
        throw new Error(errmsg);
    }
    this.shaders.vertex = shader;
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, this.shaders.vertex);
    gl.attachShader(shaderProgram, this.shaders.fragment);
    gl.linkProgram(shaderProgram);
    //gl.useProgram(shaderProgram);
    this.shaderAttributes.position = gl.getAttribLocation(shaderProgram, "a_position");
    this.shaderUniforms.projection = gl.getUniformLocation(shaderProgram, "u_projection");
    this.shaderUniforms.color = gl.getUniformLocation(shaderProgram, "u_color");
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        var errmsg = "failed to initialize shader with data matrices";
        alert(errmsg);
        throw new Error(errmsg);
    }
    this.shaderProgram = shaderProgram;
    this.glBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);
};
/*
Buffer attributes will likely just be:
{
    thickness: 1,
    points: []
}
*/
// BAH, for now, all lines are the same
Lines.prototype.fill = function (points) {
    var gl = this.gl;
    this.skipDraw = false;
    this.tuples = points.length / 3;
    gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);
};
Lines.prototype.render = function (projection) {
    var gl = this.gl;
    if (this.skipDraw) {
        return;
    }
    gl.useProgram(this.shaderProgram);
    gl.lineWidth(3);
    // works!
    gl.uniformMatrix4fv(this.shaderUniforms.projection, false, projection);
    gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuffer);
    gl.enableVertexAttribArray(this.shaderAttributes.position);
    gl.vertexAttribPointer(this.shaderAttributes.position, 3, gl.FLOAT, false, 0, 0);
    gl.uniform4fv(this.shaderUniforms.color, this.color);
    gl.drawArrays(gl.LINES, 0, this.tuples);
};
Lines.prototype.skip = function (yesno) {
    this.skipDraw = yesno;
};
module.exports = Lines;

},{}],9:[function(require,module,exports){
// TODO: clean this up. fewer globals
var Growable = require('../growable');
// TODO: use object pool for vector arrays
var pool = require('../object-pool');
var timer = require('../timer');
var Coordinator;
var chunkCache;
var chunkSize = 2;
var voxelArraySize = chunkSize * chunkSize * chunkSize;
var tab = " ";
var debug = false;
var out = {};
var texturesByValue;
// helps us load a cube with more than 1 texture
var addFace = function (basePosition, face, info) {
    var textureValue = info.textureValue;
    var start = info.start;
    var end = info.end;
    if (!textureValue && debug) {
        console.log('why are we here?');
    }
    var startX = basePosition[0] + start[0], startY = basePosition[1] + start[1], startZ = basePosition[2] + start[2], endX = basePosition[0] + end[0], endY = basePosition[1] + end[1], endZ = basePosition[2] + end[2];
    if (!(textureValue in out)) {
        // Start points Growable at 1/10 of chunk with single texture, 353808 floats
        // nah, 1/20 = 88452 floats
        out[textureValue] = {
            position: new Growable('float32', 256),
            texcoord: new Growable('float32', 256),
            normal: new Growable('float32', 256)
        };
    }
    var points = out[textureValue].position;
    var texcoord = out[textureValue].texcoord;
    var normals = out[textureValue].normal;
    // Is points large enough to fit another batch?
    points.need(18);
    // Is texcoord large enough to fit another batch?
    texcoord.need(12);
    normals.need(18);
    // COUNTER CLOCKWISE
    // no need to translate face, we already have
    switch (face) {
        // front and back are wrong
        case 'back':
            points.append([
                startX, startY, startZ + 1,
                endX + 1, startY, startZ + 1,
                endX + 1, endY + 1, startZ + 1,
                startX, startY, startZ + 1,
                endX + 1, endY + 1, startZ + 1,
                startX, endY + 1, startZ + 1
            ]);
            texcoord.append([
                0, 0,
                endX - startX + 1, 0,
                endX - startX + 1, endY - startY + 1,
                0, 0,
                endX - startX + 1, endY - startY + 1,
                0, endY - startY + 1
            ]);
            normals.append([
                0.0, 0.0, 1.0,
                0.0, 0.0, 1.0,
                0.0, 0.0, 1.0,
                0.0, 0.0, 1.0,
                0.0, 0.0, 1.0,
                0.0, 0.0, 1.0,
            ]);
            break;
        case 'front':
            points.append([
                endX + 1, startY, startZ,
                startX, startY, startZ,
                startX, endY + 1, startZ,
                endX + 1, startY, startZ,
                startX, endY + 1, startZ,
                endX + 1, endY + 1, startZ // D
            ]);
            texcoord.append([
                0, 0,
                endX - startX + 1, 0,
                endX - startX + 1, endY - startY + 1,
                0, 0,
                endX - startX + 1, endY - startY + 1,
                0, endY - startY + 1
            ]);
            normals.append([
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0,
                0.0, 0.0, -1.0
            ]);
            break;
        case 'left':
            points.append([
                startX, startY, startZ,
                startX, startY, endZ + 1,
                startX, endY + 1, endZ + 1,
                startX, startY, startZ,
                startX, endY + 1, endZ + 1,
                startX, startY + 1, startZ
            ]);
            texcoord.append([
                0, 0,
                endZ - startZ + 1, 0,
                endZ - startZ + 1, endY - startY + 1,
                0, 0,
                endZ - startZ + 1, endY - startY + 1,
                0, endY - startY + 1
            ]);
            normals.append([
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0,
                -1.0, 0.0, 0.0
            ]);
            break;
        case 'right':
            points.append([
                startX + 1, startY, endZ + 1,
                startX + 1, startY, startZ,
                startX + 1, startY + 1, startZ,
                startX + 1, startY, endZ + 1,
                startX + 1, startY + 1, startZ,
                startX + 1, endY + 1, endZ + 1
            ]);
            texcoord.append([
                0, 0,
                endZ - startZ + 1, 0,
                endZ - startZ + 1, endY - startY + 1,
                0, 0,
                endZ - startZ + 1, endY - startY + 1,
                0, endY - startY + 1
            ]);
            normals.append([
                1.0, 0.0, 0.0,
                1.0, 0.0, 0.0,
                1.0, 0.0, 0.0,
                1.0, 0.0, 0.0,
                1.0, 0.0, 0.0,
                1.0, 0.0, 0.0
            ]);
            break;
        case 'top':
            points.append([
                startX, startY + 1, endZ + 1,
                endX + 1, startY + 1, endZ + 1,
                endX + 1, startY + 1, startZ,
                startX, startY + 1, endZ + 1,
                endX + 1, startY + 1, startZ,
                startX, startY + 1, startZ
            ]);
            texcoord.append([
                0, 0,
                endX - startX + 1, 0,
                endX - startX + 1, endZ - startZ + 1,
                0, 0,
                endX - startX + 1, endZ - startZ + 1,
                0, endZ - startZ + 1
            ]);
            normals.append([
                0.0, 1.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 1.0, 0.0,
                0.0, 1.0, 0.0
            ]);
            break;
        case 'bottom':
            // bottom is
            points.append([
                startX, startY, startZ,
                endX + 1, startY, startZ,
                endX + 1, startY, endZ + 1,
                startX, startY, startZ,
                endX + 1, startY, endZ + 1,
                startX, startY, endZ + 1
            ]);
            texcoord.append([
                0, 0,
                endX - startX + 1, 0,
                endX - startX + 1, endZ - startZ + 1,
                0, 0,
                endX - startX + 1, endZ - startZ + 1,
                0, endZ - startZ + 1
            ]);
            normals.append([
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0,
                0.0, -1.0, 0.0
            ]);
            break;
    }
};
var addFaces = function (basePosition, current) {
    for (var face in current) {
        if (current[face] != null) {
            addFace(basePosition, face, current[face]);
        }
    }
};
var resetFaces = function (current) {
    for (var face in current) {
        current[face] = null;
    }
};
var isFaceBlocked = function (basePosition, voxels, chunkSize, face, x, y, z, currentVoxelValue) {
    if (debug) {
        console.log('isFaceBlocked', chunkSize, face, x, y, z);
    }
    // Calculate coordinates of opposing block face
    switch (face) {
        case 'front':
            z--;
            break;
        case 'back':
            z++;
            break;
        case 'left':
            x--;
            break;
        case 'right':
            x++;
            break;
        case 'top':
            y++;
            break;
        case 'bottom':
            y--;
            break;
    }
    // Is this in another chunk? Use basePosition to calculate and check voxel from other chunk
    if (x < 0 || x >= chunkSize || y < 0 || y >= chunkSize || z < 0 || z >= chunkSize) {
        // Convert to world-relative position
        x += basePosition[0];
        y += basePosition[1];
        z += basePosition[2];
        // Get chunk those coordinates are within
        var opposingChunkID = Coordinator.coordinatesToChunkID(x, y, z);
        // Get index within that chunk
        var opposingIndex = Coordinator.coordinatesToVoxelIndex(x, y, z);
        //console.log(opposingChunkID, opposingIndex);
        if (opposingChunkID in chunkCache) {
            var opposingChunk = chunkCache[opposingChunkID];
            var opposingVoxelValue = opposingChunk.voxels[opposingIndex];
            return shouldSkipFace(currentVoxelValue, opposingVoxelValue);
        }
        return false;
    }
    var index = Coordinator.coordinatesToVoxelIndex(x, y, z);
    var opposingVoxelValue = voxels[index];
    return shouldSkipFace(currentVoxelValue, opposingVoxelValue);
};
var shouldSkipFace = function (currentVoxelValue, opposingVoxelValue) {
    if (opposingVoxelValue == 0) {
        return false;
    }
    /*
    We don't want to draw the transparent face if it's against an opaque one, but we do want to draw the opaque one
    Don't draw opaque face if opposite opaque face
    Don't draw transparent face if opposite transparent face
    */
    if (currentVoxelValue < 100) {
        if (opposingVoxelValue > 99) {
            return false;
        }
        return true;
    }
    // If we got here, the current face is transparent
    if (opposingVoxelValue > 0) {
        return true;
    }
    return false;
};
var faceIndex = function (face) {
    var map = {
        top: 0,
        front: 1,
        left: 2,
        back: 3,
        right: 4,
        bottom: 5
    };
    return map[face];
};
var calculate = function (basePosition, voxels) {
    var outside = chunkSize - 1;
    // Make position relative ... lower bound to 0 and adjust everything else
    for (var y = 0; y < chunkSize; y++) {
        // points to current start/end object for this face
        var adjacent = {
            front: null,
            back: null,
            top: null,
            bottom: null
        };
        var part = y * chunkSize;
        for (var z = 0; z < chunkSize; z++) {
            var index = part + (z * chunkSize * chunkSize);
            resetFaces(adjacent);
            for (var x = 0; x < chunkSize; x++) {
                var voxelTextureValue = voxels[index + x];
                if (voxelTextureValue == 0) {
                    addFaces(basePosition, adjacent);
                    resetFaces(adjacent);
                    continue;
                }
                if (!(voxelTextureValue in texturesByValue)) {
                    voxelTextureValue = 3;
                    console.log('falling back to 3');
                }
                // handle left and right faces separately
                // is left blocked, add it
                // is right blocked? add it
                // only loop through current pointer faces
                for (var face in adjacent) {
                    var isBlocked = false;
                    var textureValue;
                    if ('sides' in texturesByValue[voxelTextureValue]) {
                        textureValue = texturesByValue[voxelTextureValue].sides[faceIndex(face)];
                    }
                    else {
                        textureValue = voxelTextureValue;
                    }
                    isBlocked = isFaceBlocked(basePosition, voxels, chunkSize, face, x, y, z, textureValue);
                    if (debug) {
                        console.log('face: ' + face);
                    }
                    if (isBlocked) {
                        if (adjacent[face] != null) {
                            addFace(basePosition, face, adjacent[face]);
                            adjacent[face] = null;
                        }
                    }
                    else {
                        // should we create a new face pointer?
                        if (adjacent[face] == null) {
                            if (debug) {
                                console.log('new pointer');
                            }
                            adjacent[face] = {
                                textureValue: textureValue,
                                start: [x, y, z],
                                end: [x, y, z]
                            };
                            if (debug) {
                                console.log(adjacent);
                            }
                        }
                        else if (adjacent[face].textureValue == textureValue) {
                            if (debug) {
                                console.log('same texture');
                            }
                            // yes, update end position
                            adjacent[face].end[0] = x;
                            adjacent[face].end[1] = y;
                            adjacent[face].end[2] = z;
                        }
                        else {
                            if (debug) {
                                console.log('else');
                            }
                            // no, close and create a new pointer for this face
                            addFace(basePosition, face, adjacent[face]);
                            adjacent[face] = {
                                textureValue: textureValue,
                                start: [x, y, z],
                                end: [x, y, z]
                            };
                        }
                    }
                }
            }
            // end X
            // Done with row, do we have any outstanding faces to add?
            addFaces(basePosition, adjacent);
            resetFaces(adjacent);
        } // end Z
        adjacent = {
            left: null,
            right: null
        };
        for (var x = 0; x < chunkSize; x++) {
            var index = part + x;
            resetFaces(adjacent);
            for (var z = 0; z < chunkSize; z++) {
                var voxelTextureValue = voxels[index + (z * chunkSize * chunkSize)];
                if (voxelTextureValue == 0) {
                    addFaces(basePosition, adjacent);
                    resetFaces(adjacent);
                    continue;
                }
                if (!(voxelTextureValue in texturesByValue)) {
                    voxelTextureValue = 3;
                    console.log('falling back to 3');
                }
                // handle left and right faces separately
                // is left blocked, add it
                // is right blocked? add it
                // only loop through current pointer faces
                for (var face in adjacent) {
                    var isBlocked = false;
                    var textureValue;
                    if ('sides' in texturesByValue[voxelTextureValue]) {
                        textureValue = texturesByValue[voxelTextureValue].sides[faceIndex(face)];
                    }
                    else {
                        textureValue = voxelTextureValue;
                    }
                    isBlocked = isFaceBlocked(basePosition, voxels, chunkSize, face, x, y, z, textureValue);
                    if (debug) {
                        console.log('face: ' + face, 'blocked:', isBlocked);
                    }
                    if (isBlocked > 0) {
                        if (adjacent[face] != null) {
                            addFace(basePosition, face, adjacent[face]);
                            adjacent[face] = null;
                        }
                    }
                    else {
                        // should we create a new face pointer?
                        if (adjacent[face] == null) {
                            if (debug) {
                                console.log('new pointer');
                            }
                            adjacent[face] = {
                                textureValue: textureValue,
                                start: [x, y, z],
                                end: [x, y, z]
                            };
                            if (debug) {
                                console.log(adjacent);
                            }
                        }
                        else if (adjacent[face].textureValue == textureValue) {
                            // yes, update end position
                            adjacent[face].end[0] = x;
                            adjacent[face].end[1] = y;
                            adjacent[face].end[2] = z;
                            if (debug) {
                                console.log('same texture', adjacent[face]);
                            }
                        }
                        else {
                            if (debug) {
                                console.log('else');
                            }
                            // no, close and create a new pointer for this face
                            addFace(basePosition, face, adjacent[face]);
                            adjacent[face] = {
                                textureValue: textureValue,
                                start: [x, y, z],
                                end: [x, y, z]
                            };
                        }
                    }
                }
            }
            // end Z
            // Done with row, do we have any outstanding faces to add?
            addFaces(basePosition, adjacent);
            resetFaces(adjacent);
        } // end X
    } // end Y
};
if (!module) {
    var module = {};
}
var Meshing = module.exports = {
    config: function (cs, textures, coordinatorHandle, cache) {
        chunkSize = cs;
        voxelArraySize = chunkSize * chunkSize * chunkSize;
        texturesByValue = textures.byValue;
        Coordinator = coordinatorHandle;
        chunkCache = cache;
    },
    // position is chunk lower boundary
    mesh: function (position, voxels) {
        if (!voxels || voxels.length == 0) {
            console.log('Empty voxels');
            return null;
        }
        // Reset
        out = {};
        var start = Date.now();
        calculate(position, voxels);
        timer.log('mesher', Date.now() - start);
        return out;
    }
};

},{"../growable":7,"../object-pool":14,"../timer":24}],10:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var scratch = require('./scratch');
var Model = function (gl, shader, meshes, texture, movable) {
    this.gl = gl;
    this.shader = shader;
    this.meshes = meshes;
    this.texture = texture;
    this.shaders = {};
    this.shaderAttributes = {};
    this.shaderUniforms = {};
    // Set up movable and the mesh
    this.movable = movable;
    this.initMeshes();
};
Model.prototype.initMeshes = function () {
    var gl = this.gl;
    var meshes = this.meshes;
    for (var i = 0; i < meshes.length; i++) {
        var mesh = meshes[i];
        mesh.buffers = {
            vertices: gl.createBuffer(),
            //indices: gl.createBuffer(),
            normal: gl.createBuffer(),
            texcoord: gl.createBuffer()
        };
        // Fill with points that we'll translate per player
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.vertices);
        gl.bufferData(gl.ARRAY_BUFFER, mesh.vertices, gl.STATIC_DRAW);
        //gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.buffers.indices);
        //gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.indices, gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.normal);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(mesh.normals), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.texcoord);
        gl.bufferData(gl.ARRAY_BUFFER, mesh.texcoords, gl.STATIC_DRAW);
        mesh.tuples = 36;
    }
};
Model.prototype.setTexture = function (texture) {
    this.texture = texture;
};
/*
Buffer attributes will likely just be:
{
    thickness: 1,
    points: []
}
*/
var tempQuat = scratch.quat;
var model = scratch.mat4;
var view = scratch.mat4_0;
var directionalLightVector = vec3.fromValues(0.85, 0.8, 0.75);
var tempVector = scratch.vec3;
var rotation1 = scratch.mat4_0;
var rotation2 = scratch.mat4_1;
Model.prototype.render = function (matrix, ts) {
    var gl = this.gl;
    //gl.clear(gl.COLOR_BUFFER_BIT);
    gl.useProgram(this.shader.program);
    //gl.lineWidth(3);
    var meshes = this.meshes;
    //mat4.translate(model, model, [16, 1, 3]);
    mat4.translate(model, scratch.identityMat4, this.movable.getPosition());
    mat4.rotateY(model, model, this.movable.getYaw());
    // rotate light source
    quat.rotateY(tempQuat, scratch.identityQuat, this.movable.getYaw());
    vec3.transformQuat(tempVector, directionalLightVector, tempQuat);
    gl.uniform3fv(this.shader.uniforms.directionalLightVector, tempVector);
    gl.uniformMatrix4fv(this.shader.uniforms.projection, false, matrix);
    //gl.uniformMatrix4fv(this.shaderUniforms.player, false, model);
    //gl.uniform4fv(this.shaderUniforms.color, [ 0, 255, 255, 1 ]);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, this.texture.glTexture);
    // bind the texture to this handle
    gl.uniform1i(this.shader.uniforms.texture, 0);
    for (var i = 0; i < meshes.length; i++) {
        var mesh = meshes[i];
        mesh.render(ts);
        // Walk animation: http://math.stackexchange.com/questions/652102/rotate-a-point-around-another-point-by-an-angle
        // positiveTranslatedMatrix * rotationMatrix * negativeTranslatedMatrix
        mat4.translate(rotation1, scratch.identityMat4, mesh.rotateAround);
        mat4.translate(rotation2, scratch.identityMat4, [-mesh.rotateAround[0], -mesh.rotateAround[1], -mesh.rotateAround[2]]);
        mat4.multiply(view, rotation1, mesh.view);
        mat4.rotateX(view, view, mesh.rotation[0]);
        mat4.multiply(view, view, rotation2);
        mat4.multiply(view, model, view);
        gl.uniformMatrix4fv(this.shader.uniforms.view, false, view);
        //gl.uniform1i(this.shaderUniforms.part, false, mesh.part);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.vertices);
        gl.enableVertexAttribArray(this.shader.attributes.position);
        gl.vertexAttribPointer(this.shader.attributes.position, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.normal);
        gl.enableVertexAttribArray(this.shader.attributes.normal);
        gl.vertexAttribPointer(this.shader.attributes.normal, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.texcoord);
        gl.enableVertexAttribArray(this.shader.attributes.texcoord);
        gl.vertexAttribPointer(this.shader.attributes.texcoord, 2, gl.FLOAT, false, 0, 0);
        //gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.buffers.indices);
        //gl.drawElements(gl.TRIANGLES, mesh.tuples, gl.UNSIGNED_SHORT, 0);
        gl.drawArrays(gl.TRIANGLES, 0, mesh.tuples);
    }
};
module.exports = Model;

},{"./scratch":18,"gl-matrix":32}],11:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var scratch = require('./scratch');
// Only contains the stuff we need for WebGL drawing
var Model = function (gl, shader, meshes, tick) {
    this.gl = gl;
    this.shader = shader;
    this.meshes = meshes;
    this._tick = tick || null;
    this.localMatrix = mat4.create();
    this.worldMatrix = mat4.create();
    this.initMeshes();
};
Model.prototype.initMeshes = function () {
    var gl = this.gl;
    var meshes = this.meshes;
    // This needs to work for all types and sizes of meshes
    for (var i = 0; i < meshes.length; i++) {
        var mesh = meshes[i];
        mesh.buffers = {
            vertices: gl.createBuffer(),
            //indices: gl.createBuffer(),
            normal: gl.createBuffer(),
            texcoord: gl.createBuffer()
        };
        // Fill with points that we'll translate per player
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.vertices);
        gl.bufferData(gl.ARRAY_BUFFER, mesh.vertices, gl.STATIC_DRAW);
        //gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.buffers.indices);
        //gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, mesh.indices, gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.normal);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(mesh.normals), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.texcoord);
        gl.bufferData(gl.ARRAY_BUFFER, mesh.texcoords, gl.STATIC_DRAW);
        mesh.tuples = 36;
    }
};
Model.prototype.setTexture = function (texture) {
    this.texture = texture;
};
Model.prototype.tick = function (parentWorldMatrix) {
    if (this._tick) {
        this._tick();
    }
    // Flip the order here?
    //mat4.multiply(this.worldMatrix, this.localMatrix, parentWorldMatrix);
    mat4.multiply(this.worldMatrix, parentWorldMatrix, this.localMatrix);
};
/*
Buffer attributes will likely just be:
{
    thickness: 1,
    points: []
}
*/
var tempQuat = scratch.quat;
var directionalLightVector = vec3.fromValues(0.85, 0.8, 0.75);
var tempVector = scratch.vec3;
var rotation1 = scratch.mat4_0;
var rotation2 = scratch.mat4_1;
Model.prototype.render = function (ts) {
    var gl = this.gl;
    //gl.clear(gl.COLOR_BUFFER_BIT);
    //gl.useProgram(this.shader.program);
    //gl.lineWidth(3);
    var meshes = this.meshes;
    // rotate light source
    /*
    quat.rotateY(tempQuat, scratch.identityQuat, this.movable.getYaw());
    vec3.transformQuat(tempVector, directionalLightVector, tempQuat);
    gl.uniform3fv(this.shader.uniforms.directionalLightVector, tempVector);
    */
    gl.uniformMatrix4fv(this.shader.uniforms.view, false, this.worldMatrix);
    for (var i = 0; i < meshes.length; i++) {
        var mesh = meshes[i];
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, mesh.texture.glTexture);
        // bind the texture to this handle
        gl.uniform1i(this.shader.uniforms.texture, 0);
        //gl.uniform1i(this.shaderUniforms.part, false, mesh.part);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.vertices);
        gl.enableVertexAttribArray(this.shader.attributes.position);
        gl.vertexAttribPointer(this.shader.attributes.position, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.normal);
        gl.enableVertexAttribArray(this.shader.attributes.normal);
        gl.vertexAttribPointer(this.shader.attributes.normal, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, mesh.buffers.texcoord);
        gl.enableVertexAttribArray(this.shader.attributes.texcoord);
        gl.vertexAttribPointer(this.shader.attributes.texcoord, 2, gl.FLOAT, false, 0, 0);
        //gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.buffers.indices);
        //gl.drawElements(gl.TRIANGLES, mesh.tuples, gl.UNSIGNED_SHORT, 0);
        gl.drawArrays(gl.TRIANGLES, 0, mesh.tuples);
    }
};
module.exports = Model;

},{"./scratch":18,"gl-matrix":32}],12:[function(require,module,exports){
var glm = require('../gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var scratch = require('../scratch');
var Shapes = require('../shapes2');
var Model = require('../model2');
var Scene = require('../scene-graph');
function Sun(gl, shader, textures, player) {
    var self = this;
    this.sunRotation = 0;
    var meshes = [];
    var d = 6;
    var uv = [
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d
    ];
    var sunMesh = this.sun = Shapes.three.rectangle(d, d, d, uv, 1, textures.byName.lava);
    meshes.push(sunMesh);
    this.model = new Model(gl, shader, meshes, 
    // Tick method for doing movement
    function () {
        var position = player.getPosition();
        //var translation = vec3.fromValues(position[0], position[1] - 20, position[2]);
        mat4.translate(this.localMatrix, scratch.identityMat4, position);
        mat4.rotateZ(this.localMatrix, this.localMatrix, self.sunRotation);
        mat4.translate(this.localMatrix, this.localMatrix, [0, -200, 0]);
    });
    this.hierarchy = new Scene.Node(gl, this.model);
    // Cube orbiting around the sun
    var d = 2;
    var uv = [
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d,
        0, 0, d, d
    ];
    var shape = Shapes.three.rectangle(d, d, d, uv, 1, textures.byName.lava);
    var meshes = [shape];
    var num = 10;
    var circ = Math.PI * 2;
    for (var i = 0; i < num; i++) {
        var orbital = new Model(gl, shader, meshes, 
        // Tick method for doing movement
        function (seconds) {
            var translation = vec3.fromValues(4, 0, 0);
            mat4.rotateY(this.localMatrix, scratch.identityMat4, self.tempSpeed + (this.num * (circ / num)));
            mat4.translate(this.localMatrix, this.localMatrix, translation);
            // Rotate them back for more pointy shimmer
            mat4.rotateY(this.localMatrix, this.localMatrix, -(self.tempSpeed + (this.num * (circ / num))));
        });
        orbital.num = i;
        this.hierarchy.addChild(new Scene.Node(gl, orbital));
    }
    for (var i = 0; i < num; i++) {
        var orbital = new Model(gl, shader, meshes, 
        // Tick method for doing movement
        function (seconds) {
            var translation = vec3.fromValues(0, 4, 0);
            mat4.rotateX(this.localMatrix, scratch.identityMat4, self.tempSpeed + (this.num * (circ / num)));
            mat4.translate(this.localMatrix, this.localMatrix, translation);
            mat4.rotateX(this.localMatrix, this.localMatrix, -(self.tempSpeed + (this.num * (circ / num))));
        });
        orbital.num = i;
        this.hierarchy.addChild(new Scene.Node(gl, orbital));
    }
}
Sun.prototype.tick = function (weatherTime, sunRotation) {
    this.weatherTime = weatherTime;
    this.sunRotation = sunRotation;
    // tick the models hierarchy
    // TODO: calculate self.weatherTime / 300.0 and cache somewhere so child Nodes don't have to repeatedly calculate?
    this.tempSpeed = this.weatherTime / 300.0;
    this.hierarchy.tick(scratch.identityMat4, 0);
};
Sun.prototype.render = function (parentView, ts) {
    this.hierarchy.render(scratch.identityMat4, ts);
};
module.exports = Sun;

},{"../gl-matrix":6,"../model2":11,"../scene-graph":17,"../scratch":18,"../shapes2":20}],13:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, mat4 = glm.mat4, vec4 = glm.vec4, quat = glm.quat;
var Movable = function () {
    this.isMoving = false;
    this.yaw = 0.00;
    this.pitch = 0.00;
    this.bank = 0.00;
    this.rotationQuat = quat.create();
    this.rotationQuatNeedsUpdate = false;
    this.position = vec3.create();
    this.bounds = {
        bottomFrontLeft: [0, 0, 0],
        bottomFrontRight: [0, 0, 0],
        bottomBackLeft: [0, 0, 0],
        bottomBackRight: [0, 0, 0],
        middleFrontLeft: [0, 0, 0],
        middleFrontRight: [0, 0, 0],
        middleBackLeft: [0, 0, 0],
        middleBackRight: [0, 0, 0],
        topFrontLeft: [0, 0, 0],
        topFrontRight: [0, 0, 0],
        topBackLeft: [0, 0, 0],
        topBackRight: [0, 0, 0],
        all: null,
        front: null,
        back: null,
        left: null,
        right: null,
        top: null,
        bottom: null
    };
    this.bounds.all = [this.bounds.bottomFrontLeft, this.bounds.bottomFrontRight, this.bounds.bottomBackLeft, this.bounds.bottomBackRight, this.bounds.middleFrontLeft, this.bounds.middleFrontRight, this.bounds.middleBackLeft, this.bounds.middleBackRight, this.bounds.topFrontLeft, this.bounds.topFrontRight, this.bounds.topBackLeft, this.bounds.topBackRight];
    this.bounds.front = [this.bounds.bottomFrontLeft, this.bounds.bottomFrontRight, this.bounds.middleFrontLeft, this.bounds.middleFrontRight, this.bounds.topFrontLeft, this.bounds.topFrontRight];
    this.bounds.back = [this.bounds.bottomBackLeft, this.bounds.bottomBackRight, this.bounds.middleBackLeft, this.bounds.middleBackRight, this.bounds.topBackLeft, this.bounds.topBackRight];
    this.bounds.left = [this.bounds.bottomFrontLeft, this.bounds.bottomBackLeft, this.bounds.middleFrontLeft, this.bounds.middleBackLeft, this.bounds.topFrontLeft, this.bounds.topBackLeft];
    this.bounds.right = [this.bounds.bottomFrontRight, this.bounds.bottomBackRight, this.bounds.middleFrontRight, this.bounds.middleBackRight, this.bounds.topFrontRight, this.bounds.topBackRight];
    this.bounds.top = [this.bounds.topFrontLeft, this.bounds.topFrontRight, this.bounds.topBackLeft, this.bounds.topBackRight];
    this.bounds.bottom = [this.bounds.bottomFrontLeft, this.bounds.bottomFrontRight, this.bounds.bottomBackLeft, this.bounds.bottomBackRight];
};
Movable.prototype.translate = function (vector) {
    vec3.add(this.position, this.position, vector);
};
Movable.prototype.setTranslation = function (x, y, z) {
    vec3.copy(this.position, arguments);
};
Movable.prototype.rotateY = function (radians) {
    this.yaw += radians;
    if (this.yaw > Math.PI * 2) {
        this.yaw -= (Math.PI * 2);
    }
    else if (this.yaw < 0) {
        this.yaw += (Math.PI * 2);
    }
    this.rotationQuatNeedsUpdate = true;
};
Movable.prototype.rotateX = function (radians) {
    // clamp absolute camera pitch, after applying pitch delta
    this.pitch += radians;
    if (this.pitch > 1.5) {
        this.pitch = 1.5;
    }
    else if (this.pitch < -1.5) {
        this.pitch = -1.5;
    }
    this.rotationQuatNeedsUpdate = true;
};
Movable.prototype.setRotation = function (x, y, z) {
    this.yaw = y;
    this.pitch = x;
    this.bank = z;
    if (this.pitch > 1.5) {
        this.pitch = 1.5;
    }
    else if (this.pitch < -1.5) {
        this.pitch = -1.5;
    }
    this.rotationQuatNeedsUpdate = true;
};
Movable.prototype.getPosition = function () {
    return this.position;
};
Movable.prototype.getX = function () {
    return this.position[0];
};
Movable.prototype.getY = function () {
    return this.position[1];
};
Movable.prototype.getZ = function () {
    return this.position[2];
};
Movable.prototype.getPitch = function () {
    return this.pitch;
};
Movable.prototype.getYaw = function () {
    return this.yaw;
};
Movable.prototype.getRotationQuat = function () {
    if (this.rotationQuatNeedsUpdate) {
        quat.identity(this.rotationQuat);
        quat.rotateY(this.rotationQuat, this.rotationQuat, this.yaw);
        quat.rotateX(this.rotationQuat, this.rotationQuat, this.pitch);
        this.rotationQuatNeedsUpdate = false;
    }
    return this.rotationQuat;
};
Movable.prototype.getBank = function () {
    return this.bank;
};
Movable.prototype.updateBounds = function (position) {
    var x = position[0], y = position[1], z = position[2];
    var width = .6;
    var height = 1.6;
    var w = width / 2;
    var h = height / 2;
    var bounds;
    // x0/y0/z0 - forward + left
    bounds = this.bounds.bottomFrontLeft;
    bounds[0] = x - w;
    bounds[1] = y;
    bounds[2] = z - w;
    // x0/y0/z1 - backward + left
    bounds = this.bounds.bottomBackLeft;
    bounds[0] = x - w;
    bounds[1] = y;
    bounds[2] = z + w;
    // x1/y0/z1 - backward + right
    bounds = this.bounds.bottomBackRight;
    bounds[0] = x + w;
    bounds[1] = y;
    bounds[2] = z + w;
    // x1/y0/z0 - forward + right
    bounds = this.bounds.bottomFrontRight;
    bounds[0] = x + w;
    bounds[1] = y;
    bounds[2] = z - w;
    bounds = this.bounds.middleFrontLeft;
    bounds[0] = x - w;
    bounds[1] = y + h;
    bounds[2] = z - w;
    bounds = this.bounds.middleBackLeft;
    bounds[0] = x - w;
    bounds[1] = y + h;
    bounds[2] = z + w;
    bounds = this.bounds.middleBackRight;
    bounds[0] = x + w;
    bounds[1] = y + h;
    bounds[2] = z + w;
    bounds = this.bounds.middleFrontRight;
    bounds[0] = x + w;
    bounds[1] = y + h;
    bounds[2] = z - w;
    bounds = this.bounds.topFrontLeft;
    bounds[0] = x - w;
    bounds[1] = y + height;
    bounds[2] = z - w;
    bounds = this.bounds.topBackLeft;
    bounds[0] = x - w;
    bounds[1] = y + height;
    bounds[2] = z + w;
    bounds = this.bounds.topBackRight;
    bounds[0] = x + w;
    bounds[1] = y + height;
    bounds[2] = z + w;
    bounds = this.bounds.topFrontRight;
    bounds[0] = x + w;
    bounds[1] = y + height;
    bounds[2] = z - w;
};
module.exports = Movable;

},{"gl-matrix":32}],14:[function(require,module,exports){
var pool = {};
// Don't really need to keep track of those I've allocated, do I?
var bytes = 0;
var mallocs = 0;
var news = 0;
var frees = 0;
var create = function (type, size) {
    news++;
    switch (type) {
        case 'float32':
            return new Float32Array(size);
        case 'uint8':
            return new Uint8Array(size);
        // Generic array of 3 elements
        case 'array':
            return new Array(size);
    }
    throw new Exception('Unexpected type: ' + type);
};
var getSize = function (type, o) {
    switch (type) {
        case 'float32':
        case 'uint8':
        case 'array':
            return o.length;
    }
    // unknown
    return 0;
};
module.exports = {
    malloc: function (type, size) {
        var current;
        var o;
        mallocs++;
        if (type in pool) {
            current = pool[type];
            // Any types of this size available?
            if (size in current && current[size].length > 0) {
                o = current[size].pop();
                bytes -= getSize(type, o);
                return o;
            }
            else {
                current[size] = [];
            }
        }
        else {
            current = pool[type] = {};
            current[size] = [];
        }
        return create(type, size);
    },
    free: function (type, o) {
        var size = getSize(type, o);
        pool[type][size].push(o);
        bytes += size;
        frees++;
    },
    // Return number of bytes in the pool. If it's high, perhaps we want to free these items manually
    bytesAvailable: function () {
        return bytes;
    },
    stats: function () {
        return 'mallocs: ' + mallocs + ' news: ' + news + ' frees: ' + frees + ' bytesInPool: ' + bytes;
    },
    // Give it up to the garbage collector
    clear: function () {
        bytes = 0;
        pool = {};
    }
};

},{}],15:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var raycast = require('voxel-raycast');
var debug = false;
// ticks per second
var tps = 60;
// this gets added to, or subtracted, based on deltaAcceleration
// each is half of what we really want
var accelerations = {
    gravity: -2 / tps,
    // To make jumping less disorienting, fall slower from height of jump
    partialGravity: -0.4 / tps,
    // 9.8 units/blocks per second, per tick
    walk: 1.5 / tps,
    slowdown: 2 / tps,
    fly: 4 / tps
};
var velocities = {
    maxWalk: 9 / tps,
    jump: 20 / tps,
    maxFly: 15 / tps
};
var slowFall = false;
// need to pass in start position
function Physics(movable, controlState, game) {
    this.controlState = controlState;
    this.movable = movable;
    this.game = game;
    this.currentVelocity = vec3.create();
    this.rotatedMovementVector = vec3.create();
    this.rotationQuat = quat.create();
    this.previousVelocity = vec3.create();
}
Physics.prototype.tick = function () {
    this.movable.isMoving = this.controlState.forward || this.controlState.backward;
    // don't tick based on delta milliseconds ... lets always assume our tick rate:
    // much less math, and if we have a pause, the character won't lurch forward
    if (this.controlState.forward == 1) {
        this.currentVelocity[2] += -accelerations.walk;
        this.currentVelocity[2] = Math.max(this.currentVelocity[2], -velocities.maxWalk);
    }
    else if (this.controlState.forward > 0) {
        this.currentVelocity[2] = -velocities.maxWalk * this.controlState.forward;
    }
    else if (this.controlState.backward == 1) {
        this.currentVelocity[2] += accelerations.walk;
        this.currentVelocity[2] = Math.min(this.currentVelocity[2], velocities.maxWalk);
    }
    else if (this.controlState.backward > 0) {
        this.currentVelocity[2] = velocities.maxWalk * this.controlState.backward;
    }
    else {
        // Slowdown
        if (this.currentVelocity[2] > 0) {
            this.currentVelocity[2] -= accelerations.slowdown;
            if (this.currentVelocity[2] < 0) {
                this.currentVelocity[2] = 0.00;
            }
        }
        else if (this.currentVelocity[2] < 0) {
            this.currentVelocity[2] += accelerations.slowdown;
            if (this.currentVelocity[2] > 0) {
                this.currentVelocity[2] = 0.00;
            }
        }
    }
    if (this.controlState.left == 1) {
        // keyboard, accelerate gradually
        this.currentVelocity[0] += -accelerations.walk;
        this.currentVelocity[0] = Math.max(this.currentVelocity[0], -velocities.maxWalk);
    }
    else if (this.controlState.left > 0) {
        // gamepad, no acceleration, use stick percentage
        this.currentVelocity[0] = -velocities.maxWalk * this.controlState.left;
    }
    else if (this.controlState.right == 1) {
        this.currentVelocity[0] += accelerations.walk;
        this.currentVelocity[0] = Math.min(this.currentVelocity[0], velocities.maxWalk);
    }
    else if (this.controlState.right > 0) {
        this.currentVelocity[0] = velocities.maxWalk * this.controlState.right;
    }
    else {
        // Slowdown
        if (this.currentVelocity[0] > 0) {
            this.currentVelocity[0] -= accelerations.slowdown;
            if (this.currentVelocity[0] < 0) {
                this.currentVelocity[0] = 0.00;
            }
        }
        else if (this.currentVelocity[0] < 0) {
            this.currentVelocity[0] += accelerations.slowdown;
            if (this.currentVelocity[0] > 0) {
                this.currentVelocity[0] = 0.00;
            }
        }
    }
    // flying and jumping should fall slowly
    if (this.controlState.jump && this.currentVelocity[1] == 0) {
        // only allow jumping if we're on the ground
        slowFall = true;
        this.currentVelocity[1] = velocities.jump;
    }
    else if (this.controlState.fly) {
        slowFall = true;
        // dont exceed maximum upward velocity
        this.currentVelocity[1] += accelerations.fly;
        if (this.currentVelocity[1] > 0) {
            this.currentVelocity[1] = Math.min(this.currentVelocity[1], velocities.maxFly);
        }
    }
    else {
        if (slowFall && this.currentVelocity[1] < 0) {
            this.currentVelocity[1] += accelerations.partialGravity;
        }
        else {
            this.currentVelocity[1] += accelerations.gravity;
        }
    }
    this.handleCollision(this.currentVelocity);
};
Physics.prototype.handleCollision = function (movementVector) {
    var self = this;
    var currentPosition = this.movable.getPosition();
    var testPosition = vec3.create();
    var direction = vec3.create();
    var direction2 = vec3.create();
    var hit = vec3.create();
    var normals = vec3.create();
    var boundsMap = {
        p0: 'front',
        n0: 'back',
        p1: 'top',
        n1: 'bottom',
        p2: 'right',
        n2: 'left'
    };
    quat.identity(this.rotationQuat);
    quat.rotateY(this.rotationQuat, this.rotationQuat, self.movable.getYaw());
    vec3.transformQuat(direction, movementVector, this.rotationQuat);
    // Try to step up, but only if we're on the ground
    if (this.controlState.forward && this.previousVelocity[1] == 0.00) {
        vec3.copy(testPosition, currentPosition);
        testPosition[1] += 0.8;
        var collision = raycast(self.game, testPosition, direction, 0.5, hit, normals);
        testPosition[1] += 0.2;
        if (collision
            &&
                self.game.getBlock(testPosition[0], testPosition[1], testPosition[2]) == 0) {
            currentPosition[1] += 1.2;
            this.movable.updateBounds(currentPosition);
            vec3.copy(direction2, direction);
            // Did we have any significant collisions? If so, roll back the Y-axis change
            if (this.haggle(this.movable.bounds.all, currentPosition, direction2)) {
                currentPosition[1] -= 1.2;
            }
            else {
                vec3.copy(this.previousVelocity, direction2);
                self.movable.translate(direction2);
                return;
            }
        }
    }
    this.movable.updateBounds(currentPosition);
    this.haggle(this.movable.bounds.all, currentPosition, direction);
    vec3.copy(this.previousVelocity, direction);
    self.movable.translate(direction);
};
// Haggle for a stable, non-colliding position
// Result of this is that direction vec3 gets adjusted in the process
Physics.prototype.haggle = function (bounds, start, direction) {
    var self = this;
    var collided = false;
    var len = vec3.length(direction);
    var hit = vec3.create();
    var normals = vec3.create();
    for (var i = 0; i < bounds.length; i++) {
        var start = bounds[i];
        var adjusted = false;
        // If we've already adjusted the direction to 0 (like when we're up against a wall), skip further dection
        if (len == 0) {
            break;
        }
        var collision = raycast(self.game, start, direction, len, hit, normals);
        // Back off direction up to collision point along collision surface normals
        for (var axis = 0; axis < 3; axis++) {
            if (normals[axis] < 0.00 || 0.00 < normals[axis]) {
                adjusted = true;
                // Snap to voxel boundary upon collision
                if (normals[axis] > 0) {
                    direction[axis] = Math.ceil(hit[axis] - start[axis]);
                }
                else {
                    direction[axis] = Math.floor(hit[axis] - start[axis]);
                }
                this.currentVelocity[axis] = 0.00;
            }
        }
        if (adjusted) {
            collided = true;
            len = vec3.length(direction);
        }
    }
    return collided;
};
module.exports = Physics;

},{"gl-matrix":32,"voxel-raycast":44}],16:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var inherits = require('inherits');
var Movable = require('./movable');
var Shapes = require('./shapes');
var Model = require('./model');
function Player(gl, shader, texture) {
    var self = this;
    Movable.call(this);
    this.eyeOffset = vec3.fromValues(0, 1.25, -0.175);
    this.eyePosition = vec3.create();
    var uvCoordinates = {
        head: [
            //x  y   w   h
            24, 16, 8, 8,
            8, 16, 8, 8,
            8, 24, 8, 8,
            16, 24, 8, 8,
            16, 16, 8, 8,
            0, 16, 8, 8 // right
        ],
        body: [
            32, 0, 8, 12,
            20, 0, 8, 12,
            20, 12, 8, 4,
            28, 12, 8, 4,
            28, 0, 4, 12,
            32, 0, -4, 12 // right
        ],
        rightArm: [
            52, 0, 4, 12,
            44, 0, 4, 12,
            44, 12, 4, 4,
            48, 12, 4, 4,
            48, 0, 4, 12,
            40, 0, 4, 12 // right
        ],
        leftArm: [
            44, 0, 4, 12,
            52, 0, 4, 12,
            44, 12, 4, 4,
            48, 12, 4, 4,
            40, 0, 4, 12,
            48, 0, 4, 12 // right
        ],
        rightLeg: [
            12, 0, 4, 12,
            4, 0, 4, 12,
            12, 12, -4, 4,
            8, 12, -4, 4,
            8, 0, 4, 12,
            0, 0, 4, 12 // right
        ],
        leftLeg: [
            12, 0, 4, 12,
            4, 0, 4, 12,
            12, 12, -4, 4,
            8, 12, -4, 4,
            8, 0, 4, 12,
            0, 0, 4, 12 // right
        ]
    };
    var meshes = [];
    var shape;
    var armRotation = 0.6662;
    var walkAnimationSpeed = 40;
    shape = Shapes.three.rectangle(0.33, 0.35, 0.33, uvCoordinates.head, 64);
    shape.part = 0;
    mat4.translate(shape.view, shape.view, [0, 1.12, 0]);
    meshes.push(shape);
    // 4, 12, 8
    // out of 32
    shape = Shapes.three.rectangle(0.33, 0.5, 0.2, uvCoordinates.body, 64);
    shape.part = 1;
    mat4.translate(shape.view, shape.view, [0, 0.68, 0]);
    meshes.push(shape);
    shape = Shapes.three.rectangle(0.16, 0.5, 0.16, uvCoordinates.leftArm, 64);
    shape.part = 2;
    shape.render = function (ts) {
        if (self.isMoving) {
            this.rotation[0] = Math.cos(0.6662 * (ts / walkAnimationSpeed));
        }
        else {
            this.rotation[0] = 0;
        }
    };
    shape.rotateAround[1] = 0.25;
    mat4.rotateZ(shape.view, shape.view, -0.1);
    mat4.translate(shape.view, shape.view, [-0.33, 0.62, 0]);
    meshes.push(shape);
    shape = Shapes.three.rectangle(0.16, 0.5, 0.16, uvCoordinates.rightArm, 64);
    shape.part = 2;
    shape.render = function (ts) {
        if (self.isMoving) {
            this.rotation[0] = -Math.cos(0.6662 * (ts / walkAnimationSpeed));
        }
        else {
            this.rotation[0] = 0;
        }
    };
    shape.rotateAround[1] = 0.25;
    mat4.rotateZ(shape.view, shape.view, 0.1);
    mat4.translate(shape.view, shape.view, [0.33, 0.62, 0]);
    meshes.push(shape);
    shape = Shapes.three.rectangle(0.16, 0.5, 0.16, uvCoordinates.leftLeg, 64);
    shape.part = 3;
    shape.render = function (ts) {
        if (self.isMoving) {
            this.rotation[0] = -Math.cos(0.6662 * (ts / walkAnimationSpeed));
        }
        else {
            this.rotation[0] = 0;
        }
    };
    shape.rotateAround[1] = 0.25;
    mat4.translate(shape.view, shape.view, [-0.09, 0.2, 0]);
    meshes.push(shape);
    shape = Shapes.three.rectangle(0.16, 0.5, 0.16, uvCoordinates.rightLeg, 64);
    shape.part = 3;
    shape.render = function (ts) {
        if (self.isMoving) {
            this.rotation[0] = Math.cos(0.6662 * (ts / walkAnimationSpeed));
        }
        else {
            this.rotation[0] = 0;
        }
    };
    shape.rotateAround[1] = 0.25;
    mat4.translate(shape.view, shape.view, [0.09, 0.2, 0]);
    meshes.push(shape);
    this.model = new Model(gl, shader, meshes, texture, this);
}
inherits(Player, Movable);
Player.prototype.translate = function (vector) {
    vec3.add(this.position, this.position, vector);
    vec3.add(this.eyePosition, this.position, this.eyeOffset);
};
Player.prototype.setTranslation = function (x, y, z) {
    vec3.copy(this.position, arguments);
    vec3.add(this.eyePosition, this.position, this.eyeOffset);
};
Player.prototype.getEyeOffset = function () {
    return this.eyeOffset;
};
Player.prototype.getEyePosition = function () {
    return this.eyePosition;
};
Player.prototype.setTexture = function (texture) {
    this.model.setTexture(texture);
};
Player.prototype.render = function (projection, ts) {
    this.model.render(projection, ts);
};
module.exports = Player;

},{"./model":10,"./movable":13,"./shapes":19,"gl-matrix":32,"inherits":42}],17:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
// http://webglfundamentals.org/webgl/lessons/webgl-scene-graph.html
var Node = function (gl, model) {
    this.gl = gl;
    this.children = [];
    this.model = model;
    this.localMatrix = mat4.create();
    this.worldMatrix = mat4.create();
};
// setParent helps us prevent a child from being added to multiple parents
/*
Node.prototype.setParent = function(parent) {
    // remove us from our parent
    if (this.parent) {
        var ndx = this.parent.children.indexOf(this);
        if (ndx >= 0) {
            this.parent.children.splice(ndx, 1);
        }
    }

    // Add us to our new parent
    if (parent) {
        parent.children.append(this);
    }
    this.parent = parent;
};
*/
Node.prototype.addChild = function (node) {
    this.children.push(node);
};
// Update 
Node.prototype.tick = function (parentWorldMatrix, ts) {
    this.model.tick(parentWorldMatrix, ts);
    for (var i = 0; i < this.children.length; i++) {
        var child = this.children[i];
        // Don't really like that this reaches in
        child.tick(this.model.worldMatrix, ts);
    }
};
Node.prototype.render = function (ts) {
    // Now render this item?
    this.model.render(ts);
    for (var i = 0; i < this.children.length; i++) {
        var child = this.children[i];
        child.render(ts);
    }
};
module.exports = {
    Node: Node
};

},{"gl-matrix":32}],18:[function(require,module,exports){
var glm = require('gl-matrix');
// place to house commonly used matrices and vectors
module.exports = {
    identityVec3: glm.vec3.create(),
    identityMat4: glm.mat4.create(),
    identityQuat: glm.quat.create(),
    // scratch mat4. can use this as the destination for calulations
    mat4: glm.mat4.create(),
    mat4_0: glm.mat4.create(),
    mat4_1: glm.mat4.create(),
    quat: glm.quat.create(),
    quat_0: glm.quat.create(),
    vec3: glm.vec3.create(),
    vec3_0: glm.vec3.create()
};

},{"gl-matrix":32}],19:[function(require,module,exports){
var glm = require('gl-matrix'), mat4 = glm.mat4, vec3 = glm.vec3;
// NOTE: clean up indentation. uglify-js does lots of compressing.
// Return points for WebGL use
var shapes = module.exports = {
    wire: {
        triangle: function () { },
        cube: function (fromPoint, toPoint) {
            var dims = [
                toPoint[0] - fromPoint[0],
                toPoint[1] - fromPoint[1],
                toPoint[2] - fromPoint[2]
            ];
            // 
            var points = new Float32Array([
                // lower face's outline
                fromPoint[0], fromPoint[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0], fromPoint[1], fromPoint[2],
                // higher face's outine
                toPoint[0], toPoint[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0], toPoint[1], toPoint[2],
                // connectors
                fromPoint[0], fromPoint[1], fromPoint[2],
                toPoint[0] - dims[0], toPoint[1] - dims[1], toPoint[2],
                fromPoint[0] + dims[0], fromPoint[1], fromPoint[2],
                toPoint[0], toPoint[1] - dims[1], toPoint[2],
                fromPoint[0] + dims[0], fromPoint[1] + dims[1], fromPoint[2],
                toPoint[0], toPoint[1], toPoint[2],
                fromPoint[0], fromPoint[1] + dims[1], fromPoint[2],
                toPoint[0] - dims[0], toPoint[1], toPoint[2]
            ]);
            return points;
        },
        mesh: function (fromPoint, width, depth) {
            var points = [];
            var w = width - 1;
            var d = depth - 1;
            for (var i = 1; i < w; i++) {
                points.push(fromPoint[0] + i, fromPoint[1], fromPoint[2]);
                points.push(fromPoint[0] + i, fromPoint[1], fromPoint[2] + depth);
            }
            for (var j = 1; j < d; j++) {
                points.push(fromPoint[0], fromPoint[1], fromPoint[2] + j);
                points.push(fromPoint[0] + width, fromPoint[1], fromPoint[2] + j);
            }
            return new Float32Array(points);
        }
    },
    // A flat triangle
    triangle: function (offset) {
        var points = [0, 0, 0, 1, 0, 0, 1, 1, 0];
        for (var i = 0; i < points.length; i += 3) {
            points[i] += offset[0];
            points[i + 1] += offset[1];
            points[i + 2] += offset[2];
        }
        return {
            vertices: points,
            faces: [0, 1, 2],
            texcoord: [0, 0, 1, 0, 1, 1]
        };
    },
    // A flat square - two triangles
    square: function (offset) {
        var points = [
            0, 0, 0,
            0, 1, 0,
            1, 1, 0,
            1, 0, 0
        ];
        for (var i = 0; i < points.length; i += 3) {
            points[i] += offset[0];
            points[i + 1] += offset[1];
            points[i + 2] += offset[2];
        }
        return {
            vertices: points,
            faces: [
                0, 3, 2,
                0, 2, 1
            ],
            texcoord: [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0]
        };
    },
    two: {
        // start coordinates and end coordinates
        rectangle: function (start, end) {
            var points = [];
            /*
                0, 0, 0,
                0, 1, 0,
                2, 1, 0,
                0, 0, 0,
                2, 1, 0,
                2, 0, 0
            ];
            */
            /*
            Damn, thought I could bake proper rotation into this, with simple addition.
            Not going to work.
            */
            // hmm, it's easy to think about this in 2 dimensions, but hard in 3
            // easy to choose whether to pull from start or end in 2 dims, but hard in 3
            points.push(start[0], start[1], start[2]);
            points.push(end[0], start[1], end[2]);
            points.push(end[0], end[1], end[2]);
            points.push(start[0], start[1], start[2]);
            points.push(end[0], end[1], end[2]);
            points.push(start[0], end[1], end[2]);
            return {
                position: points,
                texcoord: null
            };
        }
    },
    three: {
        multiple: function (sizes, positions, uvCoordinates) {
            var boxes;
        },
        // Being able to pass divideBy helps us specify whole number values,
        // especially with UV maps
        // Idea taken from avatar module
        rectangle: function (width, height, depth, uvCoordinates, divideBy) {
            var w = width / 2;
            var h = height / 2;
            var d = depth / 2;
            divideBy = divideBy || 1;
            var points = [
                // Back face
                -w, -h, d,
                w, -h, d,
                w, h, d,
                -w, -h, d,
                w, h, d,
                -w, h, d,
                // Front face
                w, -h, -d,
                -w, -h, -d,
                -w, h, -d,
                w, -h, -d,
                -w, h, -d,
                w, h, -d,
                // Top
                -w, h, d,
                w, h, d,
                w, h, -d,
                -w, h, d,
                w, h, -d,
                -w, h, -d,
                // Bottom
                -w, -h, -d,
                w, -h, -d,
                w, -h, d,
                -w, -h, -d,
                w, -h, d,
                -w, -h, d,
                // Left
                -w, -h, -d,
                -w, -h, d,
                -w, h, d,
                -w, -h, -d,
                -w, h, d,
                -w, h, -d,
                // Right
                w, -h, d,
                w, -h, -d,
                w, h, -d,
                w, -h, d,
                w, h, -d,
                w, h, d
            ];
            /*
            var indices = new Uint16Array([
                // TODO: FIX THESE FOR PROPER ROTATION
                // Back
                0, 1, 2,
                0, 2, 3,
                // Front
                5, 4, 7,
                5, 7, 6,
                // Top
                3, 2, 6,
                3, 6, 7,
                // Bottom
                4, 5, 1,
                4, 1, 0,
                // Left
                4, 0, 3,
                4, 3, 7,
                // Right
                1, 5, 6,
                1, 6, 2
            ]);
            */
            var texcoord = new Float32Array((points.length / 3) * 2);
            var j = 0;
            for (var i = 0; i < uvCoordinates.length; i += 4) {
                var x = uvCoordinates[i] / divideBy;
                var y = uvCoordinates[i + 1] / divideBy;
                var x2 = x + (uvCoordinates[i + 2] / divideBy);
                var y2 = y + (uvCoordinates[i + 3] / divideBy);
                texcoord[j] = x;
                texcoord[j + 1] = y;
                texcoord[j + 2] = x2;
                texcoord[j + 3] = y;
                texcoord[j + 4] = x2;
                texcoord[j + 5] = y2;
                texcoord[j + 6] = x;
                texcoord[j + 7] = y;
                texcoord[j + 8] = x2;
                texcoord[j + 9] = y2;
                texcoord[j + 10] = x;
                texcoord[j + 11] = y2;
                j += 12;
            }
            var normals = [];
            // back
            normals.push(0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0);
            // front
            normals.push(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0);
            //top
            normals.push(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0);
            // bottom
            normals.push(0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0);
            // left
            normals.push(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0);
            // right
            normals.push(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
            return {
                vertices: new Float32Array(points),
                //indices: indices,
                //faces: faces,
                texcoords: texcoord,
                normals: normals,
                view: mat4.create(),
                rotation: vec3.fromValues(0, 0, 0),
                rotateAround: vec3.fromValues(0, 0, 0),
                render: function (dt) { }
            };
        },
        rectangle2: function (low, width, height, depth, textureX, textureY) {
            var points = [];
            var normals = [];
            var texcoord = [];
            var startX = low[0];
            var startY = low[1];
            var startZ = low[2];
            textureX = textureX || 0;
            textureY = textureY || 0;
            // COUNTER CLOCKWISE
            // back of character
            points.push(startX, startY, startZ + depth, // A
            startX + width, startY, startZ + depth, // B
            startX + width, startY + height, startZ + depth, // C
            startX, startY, startZ + depth, // A
            startX + width, startY + height, startZ + depth, // C
            startX, startY + height, startZ + depth);
            normals.push(0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0);
            texcoord.push(textureX, textureY, textureX + width, textureY, textureX + width, textureY + height, textureX, textureY, textureX + width, textureY + height, textureX, textureY + height);
            // front
            points.push(startX + width, startY, startZ, // A
            startX, startY, startZ, // B
            startX, startY + height, startZ, // C
            startX + width, startY, startZ, // A
            startX, startY + height, startZ, // C
            startX + width, startY + height, startZ // D
            );
            normals.push(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0);
            texcoord.push(textureX, textureY, textureX + width, textureY, textureX + width, textureY + height, textureX, textureY, textureX + width, textureY + height, textureX, textureY + height);
            // left
            points.push(startX, startY, startZ, // A
            startX, startY, startZ + depth, // B
            startX, startY + height, startZ + depth, // C
            startX, startY, startZ, // A
            startX, startY + height, startZ + depth, // C
            startX, startY + height, startZ);
            normals.push(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0);
            texcoord.push(textureX, textureY, textureX + depth, textureY, textureX + depth, textureY + height, textureX, textureY, textureX + depth, textureY + height, textureX, textureY + height);
            // right
            points.push(startX + width, startY, startZ + depth, // A
            startX + width, startY, startZ, // B
            startX + width, startY + height, startZ, // C
            startX + width, startY, startZ + depth, // A
            startX + width, startY + height, startZ, // C
            startX + width, startY + height, startZ + depth);
            normals.push(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
            texcoord.push(textureX, textureY, textureX + depth, textureY, textureX + depth, textureY + height, textureX, textureY, textureX + depth, textureY + height, textureX, textureY + height);
            //top
            points.push(startX, startY + height, startZ + depth, // A
            startX + width, startY + height, startZ + depth, // B
            startX + width, startY + height, startZ, // C
            startX, startY + height, startZ + depth, // A
            startX + width, startY + height, startZ, // C
            startX, startY + height, startZ);
            normals.push(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0);
            texcoord.push(textureX, textureY, textureX + width, textureY, textureX + width, textureY + depth, textureX, textureY, textureX + width, textureY + depth, textureX, textureY + depth);
            // bottom
            points.push(startX, startY, startZ, // A
            startX + width, startY, startZ, // B
            startX + width, startY, startZ + depth, // C
            startX, startY, startZ, // A
            startX + width, startY, startZ + depth, // C
            startX, startY, startZ + depth);
            normals.push(0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0);
            texcoord.push(textureX, textureY, textureX + width, textureY, textureX + width, textureY + depth, textureX, textureY, textureX + width, textureY + depth, textureX, textureY + depth);
            /*
            var faces = [];
            var to = points.length/3;
            for (var i = 0; i < to; i++) {
                faces.push(i);
            }
            */
            return {
                vertices: points,
                //faces: faces,
                texcoords: texcoord,
                normals: normals,
                rotation: [1, 1, 1],
                scale: 1.0
            };
        }
    }
};

},{"gl-matrix":32}],20:[function(require,module,exports){
var glm = require('gl-matrix'), mat4 = glm.mat4, vec3 = glm.vec3;
// NOTE: clean up indentation. uglify-js does lots of compressing.
// Return points for WebGL use
var shapes = module.exports = {
    wire: {
        triangle: function () { },
        cube: function (fromPoint, toPoint) {
            var dims = [
                toPoint[0] - fromPoint[0],
                toPoint[1] - fromPoint[1],
                toPoint[2] - fromPoint[2]
            ];
            // 
            var points = new Float32Array([
                // lower face's outline
                fromPoint[0], fromPoint[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0] + dims[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0], fromPoint[1] + dims[1], fromPoint[2],
                fromPoint[0], fromPoint[1], fromPoint[2],
                // higher face's outine
                toPoint[0], toPoint[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0] - dims[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0], toPoint[1] - dims[1], toPoint[2],
                toPoint[0], toPoint[1], toPoint[2],
                // connectors
                fromPoint[0], fromPoint[1], fromPoint[2],
                toPoint[0] - dims[0], toPoint[1] - dims[1], toPoint[2],
                fromPoint[0] + dims[0], fromPoint[1], fromPoint[2],
                toPoint[0], toPoint[1] - dims[1], toPoint[2],
                fromPoint[0] + dims[0], fromPoint[1] + dims[1], fromPoint[2],
                toPoint[0], toPoint[1], toPoint[2],
                fromPoint[0], fromPoint[1] + dims[1], fromPoint[2],
                toPoint[0] - dims[0], toPoint[1], toPoint[2]
            ]);
            return points;
        },
        mesh: function (fromPoint, width, depth) {
            var points = [];
            var w = width - 1;
            var d = depth - 1;
            for (var i = 1; i < w; i++) {
                points.push(fromPoint[0] + i, fromPoint[1], fromPoint[2]);
                points.push(fromPoint[0] + i, fromPoint[1], fromPoint[2] + depth);
            }
            for (var j = 1; j < d; j++) {
                points.push(fromPoint[0], fromPoint[1], fromPoint[2] + j);
                points.push(fromPoint[0] + width, fromPoint[1], fromPoint[2] + j);
            }
            return new Float32Array(points);
        }
    },
    // A flat triangle
    triangle: function (offset) {
        var points = [0, 0, 0, 1, 0, 0, 1, 1, 0];
        for (var i = 0; i < points.length; i += 3) {
            points[i] += offset[0];
            points[i + 1] += offset[1];
            points[i + 2] += offset[2];
        }
        return {
            vertices: points,
            faces: [0, 1, 2],
            texcoord: [0, 0, 1, 0, 1, 1]
        };
    },
    // A flat square - two triangles
    square: function (offset) {
        var points = [
            0, 0, 0,
            0, 1, 0,
            1, 1, 0,
            1, 0, 0
        ];
        for (var i = 0; i < points.length; i += 3) {
            points[i] += offset[0];
            points[i + 1] += offset[1];
            points[i + 2] += offset[2];
        }
        return {
            vertices: points,
            faces: [
                0, 3, 2,
                0, 2, 1
            ],
            texcoord: [0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0]
        };
    },
    two: {
        // start coordinates and end coordinates
        rectangle: function (start, end) {
            var points = [];
            /*
                0, 0, 0,
                0, 1, 0,
                2, 1, 0,
                0, 0, 0,
                2, 1, 0,
                2, 0, 0
            ];
            */
            /*
            Damn, thought I could bake proper rotation into this, with simple addition.
            Not going to work.
            */
            // hmm, it's easy to think about this in 2 dimensions, but hard in 3
            // easy to choose whether to pull from start or end in 2 dims, but hard in 3
            points.push(start[0], start[1], start[2]);
            points.push(end[0], start[1], end[2]);
            points.push(end[0], end[1], end[2]);
            points.push(start[0], start[1], start[2]);
            points.push(end[0], end[1], end[2]);
            points.push(start[0], end[1], end[2]);
            return {
                position: points,
                texcoord: null,
                normals: null
            };
        }
    },
    three: {
        // Being able to pass divideBy helps us specify whole number values,
        // especially with UV maps
        // Idea taken from avatar module
        rectangle: function (width, height, depth, uvCoordinates, divideBy, texture) {
            var w = width / 2;
            var h = height / 2;
            var d = depth / 2;
            divideBy = divideBy || 1;
            var points = [
                // Back face
                -w, -h, d,
                w, -h, d,
                w, h, d,
                -w, -h, d,
                w, h, d,
                -w, h, d,
                // Front face
                w, -h, -d,
                -w, -h, -d,
                -w, h, -d,
                w, -h, -d,
                -w, h, -d,
                w, h, -d,
                // Top
                -w, h, d,
                w, h, d,
                w, h, -d,
                -w, h, d,
                w, h, -d,
                -w, h, -d,
                // Bottom
                -w, -h, -d,
                w, -h, -d,
                w, -h, d,
                -w, -h, -d,
                w, -h, d,
                -w, -h, d,
                // Left
                -w, -h, -d,
                -w, -h, d,
                -w, h, d,
                -w, -h, -d,
                -w, h, d,
                -w, h, -d,
                // Right
                w, -h, d,
                w, -h, -d,
                w, h, -d,
                w, -h, d,
                w, h, -d,
                w, h, d
            ];
            /*
            var indices = new Uint16Array([
                // TODO: FIX THESE FOR PROPER ROTATION
                // Back
                0, 1, 2,
                0, 2, 3,
                // Front
                5, 4, 7,
                5, 7, 6,
                // Top
                3, 2, 6,
                3, 6, 7,
                // Bottom
                4, 5, 1,
                4, 1, 0,
                // Left
                4, 0, 3,
                4, 3, 7,
                // Right
                1, 5, 6,
                1, 6, 2
            ]);
            */
            var texcoord = new Float32Array((points.length / 3) * 2);
            var j = 0;
            for (var i = 0; i < uvCoordinates.length; i += 4) {
                var x = uvCoordinates[i] / divideBy;
                var y = uvCoordinates[i + 1] / divideBy;
                var x2 = x + (uvCoordinates[i + 2] / divideBy);
                var y2 = y + (uvCoordinates[i + 3] / divideBy);
                texcoord[j] = x;
                texcoord[j + 1] = y;
                texcoord[j + 2] = x2;
                texcoord[j + 3] = y;
                texcoord[j + 4] = x2;
                texcoord[j + 5] = y2;
                texcoord[j + 6] = x;
                texcoord[j + 7] = y;
                texcoord[j + 8] = x2;
                texcoord[j + 9] = y2;
                texcoord[j + 10] = x;
                texcoord[j + 11] = y2;
                j += 12;
            }
            var normals = [];
            // back
            normals.push(0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0);
            // front
            normals.push(0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0);
            //top
            normals.push(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0);
            // bottom
            normals.push(0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0);
            // left
            normals.push(-1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0);
            // right
            normals.push(1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
            return {
                vertices: new Float32Array(points),
                //indices: indices,
                //faces: faces,
                texcoords: texcoord,
                normals: normals,
                texture: texture
            };
        }
    }
};

},{"gl-matrix":32}],21:[function(require,module,exports){
var glm = require('gl-matrix'), vec3 = glm.vec3, vec4 = glm.vec4, mat4 = glm.mat4, quat = glm.quat;
var scratch = require('./scratch');
var Sun = require('./models/sun');
var Weather = function (gl, shader, textures, player) {
    this.gl = gl;
    this.shader = shader;
    this.textures = textures;
    // HELPERS
    // be mindful of the ambient light value and it's affect with full sun
    this.lightTypes = {
        dark: vec3.fromValues(0, 0, 0),
        dawn: vec3.fromValues(0.2, 0.1, 0.1),
        full: vec3.fromValues(0.4, 0.4, 0.4),
        dusk: vec3.fromValues(0.2, 0.1, 0.1)
    };
    this.ambientLightTypes = {
        dark: vec3.fromValues(0.4, 0.4, 0.4),
        dawn: vec3.fromValues(0.5, 0.5, 0.5),
        full: vec3.fromValues(0.6, 0.6, 0.6),
        dusk: vec3.fromValues(0.5, 0.5, 0.5)
    };
    // Seconds from 12 noon
    this.time = 12 * 3600;
    this.light = this.lightTypes.full;
    this.lightAdjustment = vec3.fromValues(0, 0, 0);
    this.ambientLight = this.ambientLightTypes.full;
    this.ambientLightAdjustment = vec3.fromValues(0, 0, 0);
    this.ambientLightColor = vec3.create();
    this.directionalLight = {
        color: vec3.create(),
        start: vec3.fromValues(0, -1000, 0),
        position: vec3.create()
    };
    // Initial setup
    vec3.copy(this.directionalLight.color, this.light);
    vec3.copy(this.ambientLightColor, this.ambientLight);
    this.sun = new Sun(gl, shader, textures, player);
};
Weather.prototype.setLight = function (seconds) {
    var light, ambientLight;
    // Darkness
    if (this.time >= 22 * 3600) {
        // Directional
        this.light = light = this.lightTypes.dark;
        vec3.copy(this.directionalLight.color, light);
        this.lightAdjustment[0] = 0.0;
        this.lightAdjustment[1] = 0.0;
        this.lightAdjustment[2] = 0.0;
        // Ambient
        this.ambientLight = ambientLight = this.ambientLightTypes.dark;
        vec3.copy(this.ambientLightColor, ambientLight);
        this.ambientLightAdjustment[0] = 0.0;
        this.ambientLightAdjustment[1] = 0.0;
        this.ambientLightAdjustment[2] = 0.0;
    }
    else 
    // Transition to dark
    if (this.time >= 20 * 3600) {
        light = this.lightTypes.dark;
        ambientLight = this.ambientLightTypes.dark;
    }
    else 
    // Transition to dusk
    if (this.time >= 18 * 3600) {
        light = this.lightTypes.dusk;
        ambientLight = this.ambientLightTypes.dusk;
    }
    else 
    // Full sunlight
    if (this.time >= 6 * 3600) {
        this.light = light = this.lightTypes.full;
        vec3.copy(this.directionalLight.color, light);
        this.lightAdjustment[0] = 0.0;
        this.lightAdjustment[1] = 0.0;
        this.lightAdjustment[2] = 0.0;
        // Ambient
        this.ambientLight = ambientLight = this.ambientLightTypes.full;
        vec3.copy(this.ambientLightColor, ambientLight);
        this.ambientLightAdjustment[0] = 0.0;
        this.ambientLightAdjustment[1] = 0.0;
        this.ambientLightAdjustment[2] = 0.0;
    }
    else 
    // Transition to full
    if (this.time >= 4 * 3600) {
        light = this.lightTypes.full;
        ambientLight = this.ambientLightTypes.full;
    }
    else 
    // Transition to dawn
    if (this.time >= 2 * 3600) {
        light = this.lightTypes.dawn;
        ambientLight = this.ambientLightTypes.dawn;
    }
    else {
        light = this.lightTypes.dark;
        ambientLight = this.ambientLightTypes.dark;
    }
    if (light != this.light) {
        // Calculate the adjustment
        vec3.sub(this.lightAdjustment, light, this.directionalLight.color);
        vec3.divide(this.lightAdjustment, this.lightAdjustment, [3600, 3600, 3600]);
        vec3.multiply(this.lightAdjustment, this.lightAdjustment, [seconds, seconds, seconds]);
        //vec3.copy(this.directionalLight.color, light);
        this.light = light;
    }
    if (ambientLight != this.ambientLight) {
        // Ambient
        vec3.sub(this.ambientLightAdjustment, ambientLight, this.ambientLightColor);
        vec3.divide(this.ambientLightAdjustment, this.ambientLightAdjustment, [3600, 3600, 3600]);
        vec3.multiply(this.ambientLightAdjustment, this.ambientLightAdjustment, [seconds, seconds, seconds]);
        //vec3.copy(this.directionalLight.color, light);
        this.ambientLight = ambientLight;
    }
    // Do the adjustment
    vec3.add(this.directionalLight.color, this.directionalLight.color, this.lightAdjustment);
    vec3.add(this.ambientLightColor, this.ambientLightColor, this.ambientLightAdjustment);
};
// Currently runs every second
Weather.prototype.tick = function (seconds) {
    // Need to accompany this with a large cube sun travelling overhead
    this.time += seconds;
    if (this.time >= 86400) {
        this.time -= 86400;
    }
    this.setLight(seconds);
    var rotationPerSecond = (2 * Math.PI) / 86400;
    this.sunRotation = rotationPerSecond * this.time;
    // Rotate light source
    quat.rotateZ(scratch.quat, scratch.identityQuat, this.sunRotation);
    vec3.transformQuat(this.directionalLight.position, this.directionalLight.start, scratch.quat);
    this.sun.tick(this.time, this.sunRotation);
};
var full = vec3.fromValues(1.1, 1.1, 1.1);
Weather.prototype.render = function (projection, ts) {
    var gl = this.gl;
    gl.useProgram(this.shader.program);
    gl.uniformMatrix4fv(this.shader.uniforms.projection, false, projection);
    gl.uniform3fv(this.shader.uniforms.ambientLightColor, full);
    this.sun.render(scratch.identityMat4, ts);
};
module.exports = Weather;

},{"./models/sun":12,"./scratch":18,"gl-matrix":32}],22:[function(require,module,exports){
/**
 * @author mrdoob / http://mrdoob.com/
 */
var Stats = function () {
    var startTime = Date.now(), prevTime = startTime;
    var ms = 0, msMin = Infinity, msMax = 0;
    var fps = 0, fpsMin = Infinity, fpsMax = 0;
    var frames = 0, mode = 0;
    var container = document.createElement('div');
    container.id = 'stats';
    container.addEventListener('mousedown', function (event) { event.preventDefault(); setMode(++mode % 2); }, false);
    container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';
    var fpsDiv = document.createElement('div');
    fpsDiv.id = 'fps';
    fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';
    container.appendChild(fpsDiv);
    var fpsText = document.createElement('div');
    fpsText.id = 'fpsText';
    fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
    fpsText.innerHTML = 'FPS';
    fpsDiv.appendChild(fpsText);
    var fpsGraph = document.createElement('div');
    fpsGraph.id = 'fpsGraph';
    fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';
    fpsDiv.appendChild(fpsGraph);
    while (fpsGraph.children.length < 74) {
        var bar = document.createElement('span');
        bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#113';
        fpsGraph.appendChild(bar);
    }
    var msDiv = document.createElement('div');
    msDiv.id = 'ms';
    msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';
    container.appendChild(msDiv);
    var msText = document.createElement('div');
    msText.id = 'msText';
    msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';
    msText.innerHTML = 'MS';
    msDiv.appendChild(msText);
    var msGraph = document.createElement('div');
    msGraph.id = 'msGraph';
    msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';
    msDiv.appendChild(msGraph);
    while (msGraph.children.length < 74) {
        var bar = document.createElement('span');
        bar.style.cssText = 'width:1px;height:30px;float:left;background-color:#131';
        msGraph.appendChild(bar);
    }
    var setMode = function (value) {
        mode = value;
        switch (mode) {
            case 0:
                fpsDiv.style.display = 'block';
                msDiv.style.display = 'none';
                break;
            case 1:
                fpsDiv.style.display = 'none';
                msDiv.style.display = 'block';
                break;
        }
    };
    var updateGraph = function (dom, value) {
        var child = dom.appendChild(dom.firstChild);
        child.style.height = value + 'px';
    };
    return {
        REVISION: 11,
        domElement: container,
        setMode: setMode,
        begin: function () {
            startTime = Date.now();
        },
        end: function () {
            var time = Date.now();
            ms = time - startTime;
            msMin = Math.min(msMin, ms);
            msMax = Math.max(msMax, ms);
            msText.textContent = ms + ' MS (' + msMin + '-' + msMax + ')';
            updateGraph(msGraph, Math.min(30, 30 - (ms / 200) * 30));
            frames++;
            if (time > prevTime + 1000) {
                fps = Math.round((frames * 1000) / (time - prevTime));
                fpsMin = Math.min(fpsMin, fps);
                fpsMax = Math.max(fpsMax, fps);
                fpsText.textContent = fps + ' FPS (' + fpsMin + '-' + fpsMax + ')';
                updateGraph(fpsGraph, Math.min(30, 30 - (fps / 100) * 30));
                prevTime = time;
                frames = 0;
            }
            return time;
        },
        update: function () {
            startTime = this.end();
        }
    };
};
module.exports = Stats;

},{}],23:[function(require,module,exports){
var Textures = function (textureArray) {
    this.textureArray = textureArray;
    this.byName = {};
    this.byValue = {};
    // Prepare name and value mapping
    for (var i = 0; i < textureArray.length; i++) {
        var texture = textureArray[i];
        this.byValue[texture.value] = texture;
        this.byName[texture.name] = texture;
    }
};
// TODO: modify this to annotate the original data structure with buffer and image object
Textures.prototype.load = function (gl, callback) {
    var toLoad = this.textureArray.length;
    // skip null (empty block) texture
    var done = function () {
        toLoad--;
        if (toLoad == 0) {
            callback();
        }
    };
    var textureClosure = function (texture) {
        return function () {
            gl.bindTexture(gl.TEXTURE_2D, texture.glTexture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.image);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
            // mipmap when scaling down
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
            // linear when scaling up
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.generateMipmap(gl.TEXTURE_2D);
            done();
        };
    };
    // Pre-multiply so opacity works correctly
    // http://www.realtimerendering.com/blog/gpus-prefer-premultiplication/
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    // PNGs require this
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
    for (var i = 0; i < this.textureArray.length; i++) {
        var texture = this.textureArray[i];
        // Is this a cube of different textures?
        if ('sides' in texture) {
            // all the sides must be loaded independently
            done();
        }
        else {
            texture.glTexture = gl.createTexture();
            texture.image = new Image();
            // Need closure here, to wrap texture
            texture.image.onload = textureClosure(texture);
            texture.image.crossOrigin = 'Anonymous';
            texture.image.src = texture.src;
        }
    }
};
module.exports = Textures;

},{}],24:[function(require,module,exports){
var items = {};
module.exports = {
    log: function (name, time) {
        var item;
        if (name in items) {
            item = items[name];
            item.min = Math.min(item.min, time);
            item.max = Math.max(item.max, time);
            item.sum += time;
            item.count++;
            item.average = item.sum / item.count;
        }
        else {
            item = {
                min: time,
                max: time,
                sum: time,
                count: 1,
                average: time
            };
            items[name] = item;
        }
    },
    // Called on an interval
    print: function () {
        for (var i in items) {
            var item = items[i];
            console.log(i, 'milliseconds', item);
        }
    }
};

},{}],25:[function(require,module,exports){
/*
WebGL stuff that pertains only to voxels
*/
var timer = require('./timer');
var debug = false;
function Voxels(gl, shader, textures, releaseMeshCallback) {
    var self = this;
    this.gl = gl;
    this.shader = shader;
    this.textures = textures;
    this.releaseMeshCallback = releaseMeshCallback;
    this.nearBuffersByTexture = {};
    this.farBuffersByTexture = {};
    // We re-buffer nearby meshes more frequently than far meshes
    this.nearMeshes = {};
    this.farMeshes = {};
    this.meshDistances = {};
    this.nearPending = false;
    this.farPending = false;
    this.farDistance = 2;
    // Schedule prepareMeshBuffers()
    setInterval(function () {
        if (self.nearPending) {
            self.prepareMeshBuffers(true);
            self.nearPending = false;
        }
    }, 100);
    setInterval(function () {
        if (self.farPending) {
            self.prepareMeshBuffers(false);
            self.farPending = false;
        }
    }, 1000);
}
;
Voxels.prototype.showMesh = function (chunkId, mesh) {
    if (chunkId in this.meshDistances) {
        var distance = this.meshDistances[chunkId];
        if (distance < this.farDistance) {
            this.nearMeshes[chunkId] = mesh;
            this.nearPending = true;
            if (chunkId in this.farMeshes) {
                delete this.farMeshes[chunkId];
                this.farPending = true;
            }
        }
        else {
            this.farMeshes[chunkId] = mesh;
            this.farPending = true;
            if (chunkId in this.nearMeshes) {
                delete this.nearMeshes[chunkId];
                this.nearPending = true;
            }
        }
    }
    if (debug) {
        console.log('Voxels.showMesh ', chunkId);
    }
};
// Due to player's current position, we only need to show these meshes
Voxels.prototype.meshesToShow = function (meshDistances) {
    var self = this;
    this.meshDistances = meshDistances;
    // Clean up nearby meshes
    var chunkIds = Object.keys(self.nearMeshes);
    for (var i = 0; i < chunkIds.length; i++) {
        var chunkId = chunkIds[i];
        // meshDistances contains the meshes we want to draw
        if (chunkId in meshDistances) {
            // If it's no longer nearby, remove it from this.nearMeshes
            if (meshDistances[chunkId] < this.farDistance) {
            }
            else {
                self.farMeshes[chunkId] = self.nearMeshes[chunkId];
                delete self.nearMeshes[chunkId];
            }
            continue;
        }
        // We're not drawing this mesh anymore
        var mesh = self.nearMeshes[chunkId];
        self.releaseMeshCallback(mesh);
        delete self.nearMeshes[chunkId];
    }
    var chunkIds = Object.keys(self.farMeshes);
    for (var i = 0; i < chunkIds.length; i++) {
        var chunkId = chunkIds[i];
        // meshDistances contains the meshes we want to draw
        if (chunkId in meshDistances) {
            // If it's nearby instead of far, remove it from this.farMeshes
            if (meshDistances[chunkId] < this.farDistance) {
                self.nearMeshes[chunkId] = self.farMeshes[chunkId];
                delete self.farMeshes[chunkId];
            }
            continue;
        }
        // We're not drawing this mesh anymore
        var mesh = self.farMeshes[chunkId];
        self.releaseMeshCallback(mesh);
        delete self.farMeshes[chunkId];
    }
    // This that once we change regions we should re-fill all GL buffers
    this.prepareMeshBuffers(true);
    this.prepareMeshBuffers(false);
    this.nearPending = this.farPending = false;
};
Voxels.prototype.prepareMeshBuffers = function (near) {
    var self = this;
    var start = Date.now();
    var gl = this.gl;
    var currentBuffersByTexture;
    var currentMeshes;
    if (near) {
        currentBuffersByTexture = this.nearBuffersByTexture;
        currentMeshes = this.nearMeshes;
    }
    else {
        currentBuffersByTexture = this.farBuffersByTexture;
        currentMeshes = this.farMeshes;
    }
    // Tally up the bytes we need to allocate for each texture's buffer tuple
    var bytesByTexture = {};
    // Queue up texture-specific data so we can push it into GL buffers later
    var attributesByTexture = {};
    for (var chunkId in currentMeshes) {
        var mesh = currentMeshes[chunkId];
        for (var textureValue in mesh) {
            var attributes = mesh[textureValue];
            if (textureValue in bytesByTexture) {
                bytesByTexture[textureValue].position += attributes.position.offsetBytes;
                bytesByTexture[textureValue].texcoord += attributes.texcoord.offsetBytes;
                // Normal bytes is always same as position
                attributesByTexture[textureValue].push(attributes);
            }
            else {
                bytesByTexture[textureValue] = {
                    position: attributes.position.offsetBytes,
                    texcoord: attributes.texcoord.offsetBytes
                };
                attributesByTexture[textureValue] = [
                    attributes
                ];
            }
        }
    }
    // Delete buffers we don't need right now
    // Eventually maybe do something different
    for (var textureValue in currentBuffersByTexture) {
        var bufferBundle = currentBuffersByTexture[textureValue];
        bufferBundle.tuples = 0;
    }
    // Create 3 GL buffers for each texture and allocate the necessary space
    var buffersByTexture = {};
    for (var textureValue in bytesByTexture) {
        var bytes = bytesByTexture[textureValue];
        var offsets = {
            position: 0,
            texcoord: 0
        };
        var buffers;
        if (textureValue in currentBuffersByTexture) {
            var newLength;
            buffers = currentBuffersByTexture[textureValue];
            buffers.tuples = 0;
            // Destroy and re-create as double if not large enough
            if (buffers.positionBytes < bytes.position) {
                newLength = buffers.positionBytes * 2;
                while (newLength < bytes.position) {
                    newLength *= 2;
                }
                gl.deleteBuffer(buffers.position);
                buffers.position = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
                gl.bufferData(gl.ARRAY_BUFFER, newLength, gl.STATIC_DRAW);
                gl.deleteBuffer(buffers.normal);
                buffers.normal = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);
                gl.bufferData(gl.ARRAY_BUFFER, newLength, gl.STATIC_DRAW);
                buffers.positionBytes = newLength;
            }
            if (buffers.texcoordBytes < bytes.texcoord) {
                newLength = buffers.texcoordBytes * 2;
                while (newLength < bytes.texcoord) {
                    newLength *= 2;
                }
                gl.deleteBuffer(buffers.texcoord);
                buffers.texcoord = gl.createBuffer();
                gl.bindBuffer(gl.ARRAY_BUFFER, buffers.texcoord);
                gl.bufferData(gl.ARRAY_BUFFER, newLength, gl.STATIC_DRAW);
                buffers.texcoordBytes = newLength;
            }
        }
        else {
            // Destroy and create if not large enough, otherwise re-use
            buffers = {
                position: gl.createBuffer(),
                texcoord: gl.createBuffer(),
                normal: gl.createBuffer(),
                tuples: 0,
                positionBytes: bytes.position,
                texcoordBytes: bytes.texcoord
            };
            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
            gl.bufferData(gl.ARRAY_BUFFER, bytes.position, gl.STATIC_DRAW);
            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);
            gl.bufferData(gl.ARRAY_BUFFER, bytes.position, gl.STATIC_DRAW);
            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.texcoord);
            gl.bufferData(gl.ARRAY_BUFFER, bytes.texcoord, gl.STATIC_DRAW);
        }
        var attributeQueue = attributesByTexture[textureValue];
        for (var i = 0; i < attributeQueue.length; i++) {
            var attributes = attributeQueue[i];
            var positions = new Float32Array(attributes.position.buffer, 0, attributes.position.offset);
            var texcoords = new Float32Array(attributes.texcoord.buffer, 0, attributes.texcoord.offset);
            var normals = new Float32Array(attributes.normal.buffer, 0, attributes.normal.offset);
            // Fill buffers
            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);
            gl.bufferSubData(gl.ARRAY_BUFFER, offsets.position, positions);
            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.normal);
            gl.bufferSubData(gl.ARRAY_BUFFER, offsets.position, normals);
            offsets.position += attributes.position.offsetBytes;
            gl.bindBuffer(gl.ARRAY_BUFFER, buffers.texcoord);
            gl.bufferSubData(gl.ARRAY_BUFFER, offsets.texcoord, texcoords);
            offsets.texcoord += attributes.texcoord.offsetBytes;
            buffers.tuples += attributes.position.tuples;
        }
        buffersByTexture[textureValue] = buffers;
    }
    // This will replace nearBuffersByTexture or farBuffersByTexture
    if (near) {
        this.nearBuffersByTexture = buffersByTexture;
    }
    else {
        this.farBuffersByTexture = buffersByTexture;
    }
    timer.log('Voxels.prepareMeshBuffers', Date.now() - start);
};
Voxels.prototype.render = function (projection, ts, ambientLight, directionalLight) {
    var start = Date.now();
    var gl = this.gl;
    gl.useProgram(this.shader.program);
    gl.uniformMatrix4fv(this.shader.uniforms.projection, false, projection);
    gl.uniform3fv(this.shader.uniforms.ambientLightColor, ambientLight);
    gl.uniform3fv(this.shader.uniforms.directionalLightColor, directionalLight.color);
    gl.uniform3fv(this.shader.uniforms.directionalLightPosition, directionalLight.position);
    for (var textureValue in this.nearBuffersByTexture) {
        var bufferBundle = this.nearBuffersByTexture[textureValue];
        if (bufferBundle.tuples == 0) {
            continue;
        }
        if (textureValue == 6) {
            // poor man's water animation
            gl.uniform1f(this.shader.uniforms.textureOffset, ts / 10000);
        }
        else if (textureValue < 100) {
            // Don't do face culling when drawing textures with opacity
            gl.enable(gl.CULL_FACE);
            gl.uniform1f(this.shader.uniforms.textureOffset, 0.00);
        }
        else {
            gl.disable(gl.CULL_FACE);
            gl.uniform1f(this.shader.uniforms.textureOffset, 0.00);
            //gl.uniform1f(this.shaderUniforms.textureOffset, ts / 10000);
        }
        // do the texture stuff ourselves ... too convoluted otherwise
        gl.activeTexture(gl.TEXTURE0);
        // set which of the 32 handles we want this bound to
        gl.bindTexture(gl.TEXTURE_2D, this.textures.byValue[textureValue].glTexture);
        // bind the texture to this handle
        gl.uniform1i(this.shader.uniforms.texture, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, bufferBundle.position);
        gl.enableVertexAttribArray(this.shader.attributes.position);
        gl.vertexAttribPointer(this.shader.attributes.position, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, bufferBundle.texcoord);
        gl.enableVertexAttribArray(this.shader.attributes.texcoord);
        gl.vertexAttribPointer(this.shader.attributes.texcoord, 2, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, bufferBundle.normal);
        gl.enableVertexAttribArray(this.shader.attributes.normal);
        gl.vertexAttribPointer(this.shader.attributes.normal, 3, gl.FLOAT, false, 0, 0);
        gl.drawArrays(gl.TRIANGLES, 0, bufferBundle.tuples);
    }
    for (var textureValue in this.farBuffersByTexture) {
        var bufferBundle = this.farBuffersByTexture[textureValue];
        if (bufferBundle.tuples == 0) {
            continue;
        }
        if (textureValue == 6) {
            // poor man's water animation
            gl.uniform1f(this.shader.uniforms.textureOffset, ts / 10000);
        }
        else if (textureValue < 100) {
            // Don't do face culling when drawing textures with opacity
            gl.enable(gl.CULL_FACE);
            gl.uniform1f(this.shader.uniforms.textureOffset, 0.00);
        }
        else {
            gl.disable(gl.CULL_FACE);
            gl.uniform1f(this.shader.uniforms.textureOffset, 0.00);
            //gl.uniform1f(this.shaderUniforms.textureOffset, ts / 10000);
        }
        // do the texture stuff ourselves ... too convoluted otherwise
        gl.activeTexture(gl.TEXTURE0);
        // set which of the 32 handles we want this bound to
        gl.bindTexture(gl.TEXTURE_2D, this.textures.byValue[textureValue].glTexture);
        // bind the texture to this handle
        gl.uniform1i(this.shader.uniforms.texture, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, bufferBundle.position);
        gl.enableVertexAttribArray(this.shader.attributes.position);
        gl.vertexAttribPointer(this.shader.attributes.position, 3, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, bufferBundle.texcoord);
        gl.enableVertexAttribArray(this.shader.attributes.texcoord);
        gl.vertexAttribPointer(this.shader.attributes.texcoord, 2, gl.FLOAT, false, 0, 0);
        gl.bindBuffer(gl.ARRAY_BUFFER, bufferBundle.normal);
        gl.enableVertexAttribArray(this.shader.attributes.normal);
        gl.vertexAttribPointer(this.shader.attributes.normal, 3, gl.FLOAT, false, 0, 0);
        gl.drawArrays(gl.TRIANGLES, 0, bufferBundle.tuples);
    }
    timer.log('Voxels.render', Date.now() - start);
};
module.exports = Voxels;

},{"./timer":24}],26:[function(require,module,exports){
// Helper
var createShader = function (gl, vertexShaderCode, fragmentShaderCode, attributes, uniforms) {
    var out = {
        program: null,
        attributes: {},
        uniforms: {}
    };
    // Set up shaders
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentShaderCode);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        var errmsg = "fragment shader compile failed: " + gl.getShaderInfoLog(fragmentShader);
        alert(errmsg);
        throw new Error();
    }
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexShaderCode);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        var errmsg = "vertex shader compile failed : " + gl.getShaderInfoLog(vertexShader);
        alert(errmsg);
        throw new Error(errmsg);
    }
    var shaderProgram = gl.createProgram();
    gl.attachShader(shaderProgram, vertexShader);
    gl.attachShader(shaderProgram, fragmentShader);
    gl.linkProgram(shaderProgram);
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        var errmsg = "Error in program linking: " + gl.getProgramInfoLog(shaderProgram);
        alert(errmsg);
        throw new Error(errmsg);
    }
    for (var i = 0; i < attributes.length; i++) {
        var name = attributes[i];
        // this hungarian notation seems unnecessary since our shaders are so simple
        out.attributes[name] = gl.getAttribLocation(shaderProgram, "a_" + name);
    }
    for (var i = 0; i < uniforms.length; i++) {
        var name = uniforms[i];
        // this hungarian notation seems unnecessary since our shaders are so simple
        out.uniforms[name] = gl.getUniformLocation(shaderProgram, "u_" + name);
    }
    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
        var errmsg = "failed to initialize shader with data matrices";
        alert(errmsg);
        throw new Error(errmsg);
    }
    out.program = shaderProgram;
    return out;
};
function WebGL(canvas) {
    var gl;
    gl = canvas.getContext("experimental-webgl");
    // If we don't have a GL context, give up now
    if (!gl) {
        alert("Unable to initialize WebGL. Your browser may not support it.");
        return;
    }
    this.canvas = canvas;
    this.gl = gl;
    this.renderCallback = function () { };
    this.shaders = {};
    gl.enable(gl.DEPTH_TEST);
    // if our fragment has a depth value that is less than the one that is currently there, use our new one
    gl.depthFunc(gl.LESS);
    // TODO: resize events might need to call this again
    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    this.createShaders();
}
;
WebGL.prototype.createShaders = function () {
    // Common
    var fragmentShaderCode = "precision mediump float;" +
        "uniform sampler2D u_texture;" +
        "uniform float u_textureOffset;" +
        "uniform vec3 u_ambientLightColor;" +
        "uniform vec3 u_directionalLightColor;" +
        "uniform vec3 u_directionalLightPosition;" +
        "varying vec4 v_position;" +
        "varying vec3 v_normal;" +
        "varying vec2 v_texcoord;" +
        "vec3 fogColor;" +
        "void main() {" +
        "vec4 texelColor = texture2D(u_texture, v_texcoord + vec2(0, u_textureOffset));" +
        "vec3 temp;" +
        "float hazeDistance = 70.0;" +
        "if(texelColor.a < 0.5) " +
        "discard;" +
        //"float distance = length(v_position.xyz);" +
        "vec3 lightDirection = normalize(u_directionalLightPosition - v_position.xyz);" +
        "highp float directionalLightWeight = max(dot(v_normal, lightDirection), 0.0);" +
        "vec3 lightWeight = u_ambientLightColor + (u_directionalLightColor * directionalLightWeight);" +
        // Apply light before we apply the haze?
        "temp = texelColor.rgb * lightWeight;" +
        /*
        "float add = 0.0;" +
        "if (distance > hazeDistance) {" +
            "add = (distance - hazeDistance) / 130.0;" +
            "temp[2] = temp[2] + add;" +
        "}" +
        */
        // Fog calculations from three.js
        "fogColor[0] = 255.0;" +
        "fogColor[1] = 255.0;" +
        "fogColor[2] = 255.0;" +
        "float depth = gl_FragCoord.z / gl_FragCoord.w;" +
        //"float fogFactor = smoothstep( 80.0, 300.0, depth );" +
        "float fogDensity = 0.00025;" +
        "float fogFactor = 1.0 - clamp( exp2( - fogDensity * fogDensity * depth * depth * 1.442695 ), 0.0, 1.0 );" +
        /*
        - apply light color to texel
        - shift to apply haze at a distance
        */
        "gl_FragColor.rgb = mix(temp, fogColor, fogFactor);" +
        "gl_FragColor.a = texelColor.a;" +
        "}";
    // projection * view * position vertex shader
    var vertexShaderCode = "uniform mat4 u_projection;" +
        "uniform mat4 u_view;" +
        "attribute vec4 a_position;" +
        "attribute vec3 a_normal;" +
        "attribute vec2 a_texcoord;" +
        "varying vec4 v_position;" +
        "varying vec3 v_normal;" +
        "varying vec2 v_texcoord;" +
        "void main() {" +
        "v_position = u_projection * u_view * a_position;" +
        "v_normal = a_normal;" +
        "v_texcoord = a_texcoord;" +
        "gl_Position = u_projection * u_view * a_position;" +
        "}";
    this.shaders.projectionViewPosition = createShader(this.gl, vertexShaderCode, fragmentShaderCode, 
    // attributes
    ['position', 'normal', 'texcoord'], 
    // uniforms
    ['projection', 'view', 'texture', 'textureOffset', 'ambientLightColor', 'directionalLightColor', 'directionalLightPosition']);
    vertexShaderCode =
        "uniform mat4 u_projection;" +
            "attribute vec4 a_position;" +
            "attribute vec3 a_normal;" +
            "attribute vec2 a_texcoord;" +
            "varying vec4 v_position;" +
            "varying vec3 v_normal;" +
            "varying vec2 v_texcoord;" +
            "void main() {" +
            "v_position = u_projection * a_position;" +
            "v_normal = a_normal;" +
            "v_texcoord = a_texcoord;" +
            "gl_Position = u_projection * a_position;" +
            "}";
    this.shaders.projectionPosition = createShader(this.gl, vertexShaderCode, fragmentShaderCode, 
    // attributes
    ['position', 'normal', 'texcoord'], 
    // uniforms
    ['projection', 'texture', 'textureOffset', 'ambientLightColor', 'directionalLightColor', 'directionalLightPosition']);
};
WebGL.prototype.start = function () {
    this.render(0);
};
WebGL.prototype.render = function (ts) {
    var self = this;
    var gl = this.gl;
    //this.gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    this.renderCallback(ts);
    requestAnimationFrame(this.render.bind(this));
};
WebGL.prototype.onRender = function (callback) {
    this.renderCallback = callback;
};
WebGL.prototype.addRenderable = function (obj) {
    this.renderables.push(obj);
};
module.exports = WebGL;

},{}],27:[function(require,module,exports){
var distances = require('./distances.js');
module.exports = function (opts) {
    return new Coordinates(opts);
};
//module.exports.Coordinates = Coordinates;
function Coordinates(chunkSize) {
    this.chunkSize = chunkSize || 32;
    if (this.chunkSize & this.chunkSize - 1 !== 0) {
        throw new Error('chunkSize must be a power of 2');
    }
    this.voxelMask = this.chunkSize - 1;
    this.chunkMask = ~this.voxelMask;
}
;
Coordinates.prototype.nearbyChunkIDsEach = function (position, maxDistance, callback) {
    var current = this.positionToChunk(position);
    var x = current[0];
    var y = current[1];
    var z = current[2];
    for (var distanceAway = 0; distanceAway <= maxDistance; distanceAway++) {
        var chunks = distances[distanceAway];
        for (var j = 0; j < chunks.length; j++) {
            // Create a copy so we can modity
            var chunk = chunks[j].slice();
            chunk[0] += x;
            chunk[1] += y;
            chunk[2] += z;
            callback(chunk.join('|'), chunk, distanceAway);
        }
    }
};
// Use lower boundary as the chunk position/ID
Coordinates.prototype.coordinatesToChunkID = function (x, y, z) {
    var mask = this.chunkMask;
    var cx = x & mask;
    var cy = y & mask;
    var cz = z & mask;
    return cx + '|' + cy + '|' + cz;
};
Coordinates.prototype.positionToChunk = function (position) {
    return this.coordinatesToChunk(position[0], position[1], position[2]);
};
Coordinates.prototype.coordinatesToChunk = function (x, y, z) {
    var mask = this.chunkMask;
    var cx = x & mask;
    var cy = y & mask;
    var cz = z & mask;
    return [cx, cy, cz];
};
Coordinates.prototype.positionToChunkID = function (position) {
    return this.coordinatesToChunkID(position[0], position[1], position[2]);
};
Coordinates.prototype.coordinatesToVoxelIndex = function (x, y, z, touching) {
    var voxelMask = this.voxelMask;
    var vx = x & voxelMask;
    var vy = y & voxelMask;
    var vz = z & voxelMask;
    var index = vx + (vy * this.chunkSize) + (vz * this.chunkSize * this.chunkSize);
    return index;
};
Coordinates.prototype.coordinatesToChunkAndVoxelIndex = function (x, y, z, touching) {
    var chunkMask = this.chunkMask;
    var voxelMask = this.voxelMask;
    var cx = x & chunkMask;
    var cy = y & chunkMask;
    var cz = z & chunkMask;
    var chunkId = cx + '|' + cy + '|' + cz;
    var vx = x & voxelMask;
    var vy = y & voxelMask;
    var vz = z & voxelMask;
    //var val = chunk.voxels.get(mx, my, mz)
    var index = vx + (vy * this.chunkSize) + (vz * this.chunkSize * this.chunkSize);
    // Fill touching with chunk ids that this voxel touches
    if (!!touching) {
        if (vx == 0) {
            touching[(cx - 32) + '|' + cy + '|' + cz] = true;
        }
        else if (vx == 31) {
            touching[(cx + 32) + '|' + cy + '|' + cz] = true;
        }
        if (vy == 0) {
            touching[cx + '|' + (cy - 32) + '|' + cz] = true;
        }
        else if (vy == 31) {
            touching[cx + '|' + (cy + 32) + '|' + cz] = true;
        }
        if (vz == 0) {
            touching[cx + '|' + cy + '|' + (cz - 32)] = true;
        }
        else if (vz == 31) {
            touching[cx + '|' + cy + '|' + (cz + 32)] = true;
        }
    }
    return [chunkId, index];
};
Coordinates.prototype.positionToVoxelIndex = function (pos) {
    return this.coordinatesToVoxelIndex(pos[0], pos[1], pos[2]);
};
Coordinates.prototype.lowToHighEach = function (low, high, callback) {
    for (var i = low[0]; i <= high[0]; i++) {
        for (var j = low[1]; j <= high[1]; j++) {
            for (var k = low[2]; k <= high[2]; k++) {
                callback(i, j, k);
            }
        }
    }
};

},{"./distances.js":28}],28:[function(require,module,exports){
module.exports = { '0': [[0, 0, 0], [0, 0, 0]],
    '1': [[-32, -32, -32],
        [-32, -32, 32],
        [-32, 0, -32],
        [-32, 0, 32],
        [-32, 32, -32],
        [-32, 32, 32],
        [-32, -32, 0],
        [-32, 32, 0],
        [0, -32, -32],
        [0, -32, 32],
        [0, 0, -32],
        [0, 0, 32],
        [0, 32, -32],
        [0, 32, 32],
        [0, -32, 0],
        [0, 32, 0],
        [32, -32, -32],
        [32, -32, 32],
        [32, 0, -32],
        [32, 0, 32],
        [32, 32, -32],
        [32, 32, 32],
        [32, -32, 0],
        [32, 32, 0],
        [-32, 0, 0],
        [32, 0, 0]],
    '2': [[-64, -64, -64],
        [-64, -64, 64],
        [-64, -32, -64],
        [-64, -32, 64],
        [-64, 0, -64],
        [-64, 0, 64],
        [-64, 32, -64],
        [-64, 32, 64],
        [-64, 64, -64],
        [-64, 64, 64],
        [-64, -64, -32],
        [-64, 64, -32],
        [-64, -64, 0],
        [-64, 64, 0],
        [-64, -64, 32],
        [-64, 64, 32],
        [-32, -64, -64],
        [-32, -64, 64],
        [-32, -32, -64],
        [-32, -32, 64],
        [-32, 0, -64],
        [-32, 0, 64],
        [-32, 32, -64],
        [-32, 32, 64],
        [-32, 64, -64],
        [-32, 64, 64],
        [-32, -64, -32],
        [-32, 64, -32],
        [-32, -64, 0],
        [-32, 64, 0],
        [-32, -64, 32],
        [-32, 64, 32],
        [0, -64, -64],
        [0, -64, 64],
        [0, -32, -64],
        [0, -32, 64],
        [0, 0, -64],
        [0, 0, 64],
        [0, 32, -64],
        [0, 32, 64],
        [0, 64, -64],
        [0, 64, 64],
        [0, -64, -32],
        [0, 64, -32],
        [0, -64, 0],
        [0, 64, 0],
        [0, -64, 32],
        [0, 64, 32],
        [32, -64, -64],
        [32, -64, 64],
        [32, -32, -64],
        [32, -32, 64],
        [32, 0, -64],
        [32, 0, 64],
        [32, 32, -64],
        [32, 32, 64],
        [32, 64, -64],
        [32, 64, 64],
        [32, -64, -32],
        [32, 64, -32],
        [32, -64, 0],
        [32, 64, 0],
        [32, -64, 32],
        [32, 64, 32],
        [64, -64, -64],
        [64, -64, 64],
        [64, -32, -64],
        [64, -32, 64],
        [64, 0, -64],
        [64, 0, 64],
        [64, 32, -64],
        [64, 32, 64],
        [64, 64, -64],
        [64, 64, 64],
        [64, -64, -32],
        [64, 64, -32],
        [64, -64, 0],
        [64, 64, 0],
        [64, -64, 32],
        [64, 64, 32],
        [-64, -32, -32],
        [64, -32, -32],
        [-64, 0, -32],
        [64, 0, -32],
        [-64, 32, -32],
        [64, 32, -32],
        [-64, -32, 0],
        [64, -32, 0],
        [-64, 0, 0],
        [64, 0, 0],
        [-64, 32, 0],
        [64, 32, 0],
        [-64, -32, 32],
        [64, -32, 32],
        [-64, 0, 32],
        [64, 0, 32],
        [-64, 32, 32],
        [64, 32, 32]],
    '3': [[-96, -96, -96],
        [-96, -96, 96],
        [-96, -64, -96],
        [-96, -64, 96],
        [-96, -32, -96],
        [-96, -32, 96],
        [-96, 0, -96],
        [-96, 0, 96],
        [-96, 32, -96],
        [-96, 32, 96],
        [-96, 64, -96],
        [-96, 64, 96],
        [-96, 96, -96],
        [-96, 96, 96],
        [-96, -96, -64],
        [-96, 96, -64],
        [-96, -96, -32],
        [-96, 96, -32],
        [-96, -96, 0],
        [-96, 96, 0],
        [-96, -96, 32],
        [-96, 96, 32],
        [-96, -96, 64],
        [-96, 96, 64],
        [-64, -96, -96],
        [-64, -96, 96],
        [-64, -64, -96],
        [-64, -64, 96],
        [-64, -32, -96],
        [-64, -32, 96],
        [-64, 0, -96],
        [-64, 0, 96],
        [-64, 32, -96],
        [-64, 32, 96],
        [-64, 64, -96],
        [-64, 64, 96],
        [-64, 96, -96],
        [-64, 96, 96],
        [-64, -96, -64],
        [-64, 96, -64],
        [-64, -96, -32],
        [-64, 96, -32],
        [-64, -96, 0],
        [-64, 96, 0],
        [-64, -96, 32],
        [-64, 96, 32],
        [-64, -96, 64],
        [-64, 96, 64],
        [-32, -96, -96],
        [-32, -96, 96],
        [-32, -64, -96],
        [-32, -64, 96],
        [-32, -32, -96],
        [-32, -32, 96],
        [-32, 0, -96],
        [-32, 0, 96],
        [-32, 32, -96],
        [-32, 32, 96],
        [-32, 64, -96],
        [-32, 64, 96],
        [-32, 96, -96],
        [-32, 96, 96],
        [-32, -96, -64],
        [-32, 96, -64],
        [-32, -96, -32],
        [-32, 96, -32],
        [-32, -96, 0],
        [-32, 96, 0],
        [-32, -96, 32],
        [-32, 96, 32],
        [-32, -96, 64],
        [-32, 96, 64],
        [0, -96, -96],
        [0, -96, 96],
        [0, -64, -96],
        [0, -64, 96],
        [0, -32, -96],
        [0, -32, 96],
        [0, 0, -96],
        [0, 0, 96],
        [0, 32, -96],
        [0, 32, 96],
        [0, 64, -96],
        [0, 64, 96],
        [0, 96, -96],
        [0, 96, 96],
        [0, -96, -64],
        [0, 96, -64],
        [0, -96, -32],
        [0, 96, -32],
        [0, -96, 0],
        [0, 96, 0],
        [0, -96, 32],
        [0, 96, 32],
        [0, -96, 64],
        [0, 96, 64],
        [32, -96, -96],
        [32, -96, 96],
        [32, -64, -96],
        [32, -64, 96],
        [32, -32, -96],
        [32, -32, 96],
        [32, 0, -96],
        [32, 0, 96],
        [32, 32, -96],
        [32, 32, 96],
        [32, 64, -96],
        [32, 64, 96],
        [32, 96, -96],
        [32, 96, 96],
        [32, -96, -64],
        [32, 96, -64],
        [32, -96, -32],
        [32, 96, -32],
        [32, -96, 0],
        [32, 96, 0],
        [32, -96, 32],
        [32, 96, 32],
        [32, -96, 64],
        [32, 96, 64],
        [64, -96, -96],
        [64, -96, 96],
        [64, -64, -96],
        [64, -64, 96],
        [64, -32, -96],
        [64, -32, 96],
        [64, 0, -96],
        [64, 0, 96],
        [64, 32, -96],
        [64, 32, 96],
        [64, 64, -96],
        [64, 64, 96],
        [64, 96, -96],
        [64, 96, 96],
        [64, -96, -64],
        [64, 96, -64],
        [64, -96, -32],
        [64, 96, -32],
        [64, -96, 0],
        [64, 96, 0],
        [64, -96, 32],
        [64, 96, 32],
        [64, -96, 64],
        [64, 96, 64],
        [96, -96, -96],
        [96, -96, 96],
        [96, -64, -96],
        [96, -64, 96],
        [96, -32, -96],
        [96, -32, 96],
        [96, 0, -96],
        [96, 0, 96],
        [96, 32, -96],
        [96, 32, 96],
        [96, 64, -96],
        [96, 64, 96],
        [96, 96, -96],
        [96, 96, 96],
        [96, -96, -64],
        [96, 96, -64],
        [96, -96, -32],
        [96, 96, -32],
        [96, -96, 0],
        [96, 96, 0],
        [96, -96, 32],
        [96, 96, 32],
        [96, -96, 64],
        [96, 96, 64],
        [-96, -64, -64],
        [96, -64, -64],
        [-96, -32, -64],
        [96, -32, -64],
        [-96, 0, -64],
        [96, 0, -64],
        [-96, 32, -64],
        [96, 32, -64],
        [-96, 64, -64],
        [96, 64, -64],
        [-96, -64, -32],
        [96, -64, -32],
        [-96, -32, -32],
        [96, -32, -32],
        [-96, 0, -32],
        [96, 0, -32],
        [-96, 32, -32],
        [96, 32, -32],
        [-96, 64, -32],
        [96, 64, -32],
        [-96, -64, 0],
        [96, -64, 0],
        [-96, -32, 0],
        [96, -32, 0],
        [-96, 0, 0],
        [96, 0, 0],
        [-96, 32, 0],
        [96, 32, 0],
        [-96, 64, 0],
        [96, 64, 0],
        [-96, -64, 32],
        [96, -64, 32],
        [-96, -32, 32],
        [96, -32, 32],
        [-96, 0, 32],
        [96, 0, 32],
        [-96, 32, 32],
        [96, 32, 32],
        [-96, 64, 32],
        [96, 64, 32],
        [-96, -64, 64],
        [96, -64, 64],
        [-96, -32, 64],
        [96, -32, 64],
        [-96, 0, 64],
        [96, 0, 64],
        [-96, 32, 64],
        [96, 32, 64],
        [-96, 64, 64],
        [96, 64, 64]],
    '4': [[-128, -128, -128],
        [-128, -128, 128],
        [-128, -96, -128],
        [-128, -96, 128],
        [-128, -64, -128],
        [-128, -64, 128],
        [-128, -32, -128],
        [-128, -32, 128],
        [-128, 0, -128],
        [-128, 0, 128],
        [-128, 32, -128],
        [-128, 32, 128],
        [-128, 64, -128],
        [-128, 64, 128],
        [-128, 96, -128],
        [-128, 96, 128],
        [-128, 128, -128],
        [-128, 128, 128],
        [-128, -128, -96],
        [-128, 128, -96],
        [-128, -128, -64],
        [-128, 128, -64],
        [-128, -128, -32],
        [-128, 128, -32],
        [-128, -128, 0],
        [-128, 128, 0],
        [-128, -128, 32],
        [-128, 128, 32],
        [-128, -128, 64],
        [-128, 128, 64],
        [-128, -128, 96],
        [-128, 128, 96],
        [-96, -128, -128],
        [-96, -128, 128],
        [-96, -96, -128],
        [-96, -96, 128],
        [-96, -64, -128],
        [-96, -64, 128],
        [-96, -32, -128],
        [-96, -32, 128],
        [-96, 0, -128],
        [-96, 0, 128],
        [-96, 32, -128],
        [-96, 32, 128],
        [-96, 64, -128],
        [-96, 64, 128],
        [-96, 96, -128],
        [-96, 96, 128],
        [-96, 128, -128],
        [-96, 128, 128],
        [-96, -128, -96],
        [-96, 128, -96],
        [-96, -128, -64],
        [-96, 128, -64],
        [-96, -128, -32],
        [-96, 128, -32],
        [-96, -128, 0],
        [-96, 128, 0],
        [-96, -128, 32],
        [-96, 128, 32],
        [-96, -128, 64],
        [-96, 128, 64],
        [-96, -128, 96],
        [-96, 128, 96],
        [-64, -128, -128],
        [-64, -128, 128],
        [-64, -96, -128],
        [-64, -96, 128],
        [-64, -64, -128],
        [-64, -64, 128],
        [-64, -32, -128],
        [-64, -32, 128],
        [-64, 0, -128],
        [-64, 0, 128],
        [-64, 32, -128],
        [-64, 32, 128],
        [-64, 64, -128],
        [-64, 64, 128],
        [-64, 96, -128],
        [-64, 96, 128],
        [-64, 128, -128],
        [-64, 128, 128],
        [-64, -128, -96],
        [-64, 128, -96],
        [-64, -128, -64],
        [-64, 128, -64],
        [-64, -128, -32],
        [-64, 128, -32],
        [-64, -128, 0],
        [-64, 128, 0],
        [-64, -128, 32],
        [-64, 128, 32],
        [-64, -128, 64],
        [-64, 128, 64],
        [-64, -128, 96],
        [-64, 128, 96],
        [-32, -128, -128],
        [-32, -128, 128],
        [-32, -96, -128],
        [-32, -96, 128],
        [-32, -64, -128],
        [-32, -64, 128],
        [-32, -32, -128],
        [-32, -32, 128],
        [-32, 0, -128],
        [-32, 0, 128],
        [-32, 32, -128],
        [-32, 32, 128],
        [-32, 64, -128],
        [-32, 64, 128],
        [-32, 96, -128],
        [-32, 96, 128],
        [-32, 128, -128],
        [-32, 128, 128],
        [-32, -128, -96],
        [-32, 128, -96],
        [-32, -128, -64],
        [-32, 128, -64],
        [-32, -128, -32],
        [-32, 128, -32],
        [-32, -128, 0],
        [-32, 128, 0],
        [-32, -128, 32],
        [-32, 128, 32],
        [-32, -128, 64],
        [-32, 128, 64],
        [-32, -128, 96],
        [-32, 128, 96],
        [0, -128, -128],
        [0, -128, 128],
        [0, -96, -128],
        [0, -96, 128],
        [0, -64, -128],
        [0, -64, 128],
        [0, -32, -128],
        [0, -32, 128],
        [0, 0, -128],
        [0, 0, 128],
        [0, 32, -128],
        [0, 32, 128],
        [0, 64, -128],
        [0, 64, 128],
        [0, 96, -128],
        [0, 96, 128],
        [0, 128, -128],
        [0, 128, 128],
        [0, -128, -96],
        [0, 128, -96],
        [0, -128, -64],
        [0, 128, -64],
        [0, -128, -32],
        [0, 128, -32],
        [0, -128, 0],
        [0, 128, 0],
        [0, -128, 32],
        [0, 128, 32],
        [0, -128, 64],
        [0, 128, 64],
        [0, -128, 96],
        [0, 128, 96],
        [32, -128, -128],
        [32, -128, 128],
        [32, -96, -128],
        [32, -96, 128],
        [32, -64, -128],
        [32, -64, 128],
        [32, -32, -128],
        [32, -32, 128],
        [32, 0, -128],
        [32, 0, 128],
        [32, 32, -128],
        [32, 32, 128],
        [32, 64, -128],
        [32, 64, 128],
        [32, 96, -128],
        [32, 96, 128],
        [32, 128, -128],
        [32, 128, 128],
        [32, -128, -96],
        [32, 128, -96],
        [32, -128, -64],
        [32, 128, -64],
        [32, -128, -32],
        [32, 128, -32],
        [32, -128, 0],
        [32, 128, 0],
        [32, -128, 32],
        [32, 128, 32],
        [32, -128, 64],
        [32, 128, 64],
        [32, -128, 96],
        [32, 128, 96],
        [64, -128, -128],
        [64, -128, 128],
        [64, -96, -128],
        [64, -96, 128],
        [64, -64, -128],
        [64, -64, 128],
        [64, -32, -128],
        [64, -32, 128],
        [64, 0, -128],
        [64, 0, 128],
        [64, 32, -128],
        [64, 32, 128],
        [64, 64, -128],
        [64, 64, 128],
        [64, 96, -128],
        [64, 96, 128],
        [64, 128, -128],
        [64, 128, 128],
        [64, -128, -96],
        [64, 128, -96],
        [64, -128, -64],
        [64, 128, -64],
        [64, -128, -32],
        [64, 128, -32],
        [64, -128, 0],
        [64, 128, 0],
        [64, -128, 32],
        [64, 128, 32],
        [64, -128, 64],
        [64, 128, 64],
        [64, -128, 96],
        [64, 128, 96],
        [96, -128, -128],
        [96, -128, 128],
        [96, -96, -128],
        [96, -96, 128],
        [96, -64, -128],
        [96, -64, 128],
        [96, -32, -128],
        [96, -32, 128],
        [96, 0, -128],
        [96, 0, 128],
        [96, 32, -128],
        [96, 32, 128],
        [96, 64, -128],
        [96, 64, 128],
        [96, 96, -128],
        [96, 96, 128],
        [96, 128, -128],
        [96, 128, 128],
        [96, -128, -96],
        [96, 128, -96],
        [96, -128, -64],
        [96, 128, -64],
        [96, -128, -32],
        [96, 128, -32],
        [96, -128, 0],
        [96, 128, 0],
        [96, -128, 32],
        [96, 128, 32],
        [96, -128, 64],
        [96, 128, 64],
        [96, -128, 96],
        [96, 128, 96],
        [128, -128, -128],
        [128, -128, 128],
        [128, -96, -128],
        [128, -96, 128],
        [128, -64, -128],
        [128, -64, 128],
        [128, -32, -128],
        [128, -32, 128],
        [128, 0, -128],
        [128, 0, 128],
        [128, 32, -128],
        [128, 32, 128],
        [128, 64, -128],
        [128, 64, 128],
        [128, 96, -128],
        [128, 96, 128],
        [128, 128, -128],
        [128, 128, 128],
        [128, -128, -96],
        [128, 128, -96],
        [128, -128, -64],
        [128, 128, -64],
        [128, -128, -32],
        [128, 128, -32],
        [128, -128, 0],
        [128, 128, 0],
        [128, -128, 32],
        [128, 128, 32],
        [128, -128, 64],
        [128, 128, 64],
        [128, -128, 96],
        [128, 128, 96],
        [-128, -96, -96],
        [128, -96, -96],
        [-128, -64, -96],
        [128, -64, -96],
        [-128, -32, -96],
        [128, -32, -96],
        [-128, 0, -96],
        [128, 0, -96],
        [-128, 32, -96],
        [128, 32, -96],
        [-128, 64, -96],
        [128, 64, -96],
        [-128, 96, -96],
        [128, 96, -96],
        [-128, -96, -64],
        [128, -96, -64],
        [-128, -64, -64],
        [128, -64, -64],
        [-128, -32, -64],
        [128, -32, -64],
        [-128, 0, -64],
        [128, 0, -64],
        [-128, 32, -64],
        [128, 32, -64],
        [-128, 64, -64],
        [128, 64, -64],
        [-128, 96, -64],
        [128, 96, -64],
        [-128, -96, -32],
        [128, -96, -32],
        [-128, -64, -32],
        [128, -64, -32],
        [-128, -32, -32],
        [128, -32, -32],
        [-128, 0, -32],
        [128, 0, -32],
        [-128, 32, -32],
        [128, 32, -32],
        [-128, 64, -32],
        [128, 64, -32],
        [-128, 96, -32],
        [128, 96, -32],
        [-128, -96, 0],
        [128, -96, 0],
        [-128, -64, 0],
        [128, -64, 0],
        [-128, -32, 0],
        [128, -32, 0],
        [-128, 0, 0],
        [128, 0, 0],
        [-128, 32, 0],
        [128, 32, 0],
        [-128, 64, 0],
        [128, 64, 0],
        [-128, 96, 0],
        [128, 96, 0],
        [-128, -96, 32],
        [128, -96, 32],
        [-128, -64, 32],
        [128, -64, 32],
        [-128, -32, 32],
        [128, -32, 32],
        [-128, 0, 32],
        [128, 0, 32],
        [-128, 32, 32],
        [128, 32, 32],
        [-128, 64, 32],
        [128, 64, 32],
        [-128, 96, 32],
        [128, 96, 32],
        [-128, -96, 64],
        [128, -96, 64],
        [-128, -64, 64],
        [128, -64, 64],
        [-128, -32, 64],
        [128, -32, 64],
        [-128, 0, 64],
        [128, 0, 64],
        [-128, 32, 64],
        [128, 32, 64],
        [-128, 64, 64],
        [128, 64, 64],
        [-128, 96, 64],
        [128, 96, 64],
        [-128, -96, 96],
        [128, -96, 96],
        [-128, -64, 96],
        [128, -64, 96],
        [-128, -32, 96],
        [128, -32, 96],
        [-128, 0, 96],
        [128, 0, 96],
        [-128, 32, 96],
        [128, 32, 96],
        [-128, 64, 96],
        [128, 64, 96],
        [-128, 96, 96],
        [128, 96, 96]],
    '5': [[-160, -160, -160],
        [-160, -160, 160],
        [-160, -128, -160],
        [-160, -128, 160],
        [-160, -96, -160],
        [-160, -96, 160],
        [-160, -64, -160],
        [-160, -64, 160],
        [-160, -32, -160],
        [-160, -32, 160],
        [-160, 0, -160],
        [-160, 0, 160],
        [-160, 32, -160],
        [-160, 32, 160],
        [-160, 64, -160],
        [-160, 64, 160],
        [-160, 96, -160],
        [-160, 96, 160],
        [-160, 128, -160],
        [-160, 128, 160],
        [-160, 160, -160],
        [-160, 160, 160],
        [-160, -160, -128],
        [-160, 160, -128],
        [-160, -160, -96],
        [-160, 160, -96],
        [-160, -160, -64],
        [-160, 160, -64],
        [-160, -160, -32],
        [-160, 160, -32],
        [-160, -160, 0],
        [-160, 160, 0],
        [-160, -160, 32],
        [-160, 160, 32],
        [-160, -160, 64],
        [-160, 160, 64],
        [-160, -160, 96],
        [-160, 160, 96],
        [-160, -160, 128],
        [-160, 160, 128],
        [-128, -160, -160],
        [-128, -160, 160],
        [-128, -128, -160],
        [-128, -128, 160],
        [-128, -96, -160],
        [-128, -96, 160],
        [-128, -64, -160],
        [-128, -64, 160],
        [-128, -32, -160],
        [-128, -32, 160],
        [-128, 0, -160],
        [-128, 0, 160],
        [-128, 32, -160],
        [-128, 32, 160],
        [-128, 64, -160],
        [-128, 64, 160],
        [-128, 96, -160],
        [-128, 96, 160],
        [-128, 128, -160],
        [-128, 128, 160],
        [-128, 160, -160],
        [-128, 160, 160],
        [-128, -160, -128],
        [-128, 160, -128],
        [-128, -160, -96],
        [-128, 160, -96],
        [-128, -160, -64],
        [-128, 160, -64],
        [-128, -160, -32],
        [-128, 160, -32],
        [-128, -160, 0],
        [-128, 160, 0],
        [-128, -160, 32],
        [-128, 160, 32],
        [-128, -160, 64],
        [-128, 160, 64],
        [-128, -160, 96],
        [-128, 160, 96],
        [-128, -160, 128],
        [-128, 160, 128],
        [-96, -160, -160],
        [-96, -160, 160],
        [-96, -128, -160],
        [-96, -128, 160],
        [-96, -96, -160],
        [-96, -96, 160],
        [-96, -64, -160],
        [-96, -64, 160],
        [-96, -32, -160],
        [-96, -32, 160],
        [-96, 0, -160],
        [-96, 0, 160],
        [-96, 32, -160],
        [-96, 32, 160],
        [-96, 64, -160],
        [-96, 64, 160],
        [-96, 96, -160],
        [-96, 96, 160],
        [-96, 128, -160],
        [-96, 128, 160],
        [-96, 160, -160],
        [-96, 160, 160],
        [-96, -160, -128],
        [-96, 160, -128],
        [-96, -160, -96],
        [-96, 160, -96],
        [-96, -160, -64],
        [-96, 160, -64],
        [-96, -160, -32],
        [-96, 160, -32],
        [-96, -160, 0],
        [-96, 160, 0],
        [-96, -160, 32],
        [-96, 160, 32],
        [-96, -160, 64],
        [-96, 160, 64],
        [-96, -160, 96],
        [-96, 160, 96],
        [-96, -160, 128],
        [-96, 160, 128],
        [-64, -160, -160],
        [-64, -160, 160],
        [-64, -128, -160],
        [-64, -128, 160],
        [-64, -96, -160],
        [-64, -96, 160],
        [-64, -64, -160],
        [-64, -64, 160],
        [-64, -32, -160],
        [-64, -32, 160],
        [-64, 0, -160],
        [-64, 0, 160],
        [-64, 32, -160],
        [-64, 32, 160],
        [-64, 64, -160],
        [-64, 64, 160],
        [-64, 96, -160],
        [-64, 96, 160],
        [-64, 128, -160],
        [-64, 128, 160],
        [-64, 160, -160],
        [-64, 160, 160],
        [-64, -160, -128],
        [-64, 160, -128],
        [-64, -160, -96],
        [-64, 160, -96],
        [-64, -160, -64],
        [-64, 160, -64],
        [-64, -160, -32],
        [-64, 160, -32],
        [-64, -160, 0],
        [-64, 160, 0],
        [-64, -160, 32],
        [-64, 160, 32],
        [-64, -160, 64],
        [-64, 160, 64],
        [-64, -160, 96],
        [-64, 160, 96],
        [-64, -160, 128],
        [-64, 160, 128],
        [-32, -160, -160],
        [-32, -160, 160],
        [-32, -128, -160],
        [-32, -128, 160],
        [-32, -96, -160],
        [-32, -96, 160],
        [-32, -64, -160],
        [-32, -64, 160],
        [-32, -32, -160],
        [-32, -32, 160],
        [-32, 0, -160],
        [-32, 0, 160],
        [-32, 32, -160],
        [-32, 32, 160],
        [-32, 64, -160],
        [-32, 64, 160],
        [-32, 96, -160],
        [-32, 96, 160],
        [-32, 128, -160],
        [-32, 128, 160],
        [-32, 160, -160],
        [-32, 160, 160],
        [-32, -160, -128],
        [-32, 160, -128],
        [-32, -160, -96],
        [-32, 160, -96],
        [-32, -160, -64],
        [-32, 160, -64],
        [-32, -160, -32],
        [-32, 160, -32],
        [-32, -160, 0],
        [-32, 160, 0],
        [-32, -160, 32],
        [-32, 160, 32],
        [-32, -160, 64],
        [-32, 160, 64],
        [-32, -160, 96],
        [-32, 160, 96],
        [-32, -160, 128],
        [-32, 160, 128],
        [0, -160, -160],
        [0, -160, 160],
        [0, -128, -160],
        [0, -128, 160],
        [0, -96, -160],
        [0, -96, 160],
        [0, -64, -160],
        [0, -64, 160],
        [0, -32, -160],
        [0, -32, 160],
        [0, 0, -160],
        [0, 0, 160],
        [0, 32, -160],
        [0, 32, 160],
        [0, 64, -160],
        [0, 64, 160],
        [0, 96, -160],
        [0, 96, 160],
        [0, 128, -160],
        [0, 128, 160],
        [0, 160, -160],
        [0, 160, 160],
        [0, -160, -128],
        [0, 160, -128],
        [0, -160, -96],
        [0, 160, -96],
        [0, -160, -64],
        [0, 160, -64],
        [0, -160, -32],
        [0, 160, -32],
        [0, -160, 0],
        [0, 160, 0],
        [0, -160, 32],
        [0, 160, 32],
        [0, -160, 64],
        [0, 160, 64],
        [0, -160, 96],
        [0, 160, 96],
        [0, -160, 128],
        [0, 160, 128],
        [32, -160, -160],
        [32, -160, 160],
        [32, -128, -160],
        [32, -128, 160],
        [32, -96, -160],
        [32, -96, 160],
        [32, -64, -160],
        [32, -64, 160],
        [32, -32, -160],
        [32, -32, 160],
        [32, 0, -160],
        [32, 0, 160],
        [32, 32, -160],
        [32, 32, 160],
        [32, 64, -160],
        [32, 64, 160],
        [32, 96, -160],
        [32, 96, 160],
        [32, 128, -160],
        [32, 128, 160],
        [32, 160, -160],
        [32, 160, 160],
        [32, -160, -128],
        [32, 160, -128],
        [32, -160, -96],
        [32, 160, -96],
        [32, -160, -64],
        [32, 160, -64],
        [32, -160, -32],
        [32, 160, -32],
        [32, -160, 0],
        [32, 160, 0],
        [32, -160, 32],
        [32, 160, 32],
        [32, -160, 64],
        [32, 160, 64],
        [32, -160, 96],
        [32, 160, 96],
        [32, -160, 128],
        [32, 160, 128],
        [64, -160, -160],
        [64, -160, 160],
        [64, -128, -160],
        [64, -128, 160],
        [64, -96, -160],
        [64, -96, 160],
        [64, -64, -160],
        [64, -64, 160],
        [64, -32, -160],
        [64, -32, 160],
        [64, 0, -160],
        [64, 0, 160],
        [64, 32, -160],
        [64, 32, 160],
        [64, 64, -160],
        [64, 64, 160],
        [64, 96, -160],
        [64, 96, 160],
        [64, 128, -160],
        [64, 128, 160],
        [64, 160, -160],
        [64, 160, 160],
        [64, -160, -128],
        [64, 160, -128],
        [64, -160, -96],
        [64, 160, -96],
        [64, -160, -64],
        [64, 160, -64],
        [64, -160, -32],
        [64, 160, -32],
        [64, -160, 0],
        [64, 160, 0],
        [64, -160, 32],
        [64, 160, 32],
        [64, -160, 64],
        [64, 160, 64],
        [64, -160, 96],
        [64, 160, 96],
        [64, -160, 128],
        [64, 160, 128],
        [96, -160, -160],
        [96, -160, 160],
        [96, -128, -160],
        [96, -128, 160],
        [96, -96, -160],
        [96, -96, 160],
        [96, -64, -160],
        [96, -64, 160],
        [96, -32, -160],
        [96, -32, 160],
        [96, 0, -160],
        [96, 0, 160],
        [96, 32, -160],
        [96, 32, 160],
        [96, 64, -160],
        [96, 64, 160],
        [96, 96, -160],
        [96, 96, 160],
        [96, 128, -160],
        [96, 128, 160],
        [96, 160, -160],
        [96, 160, 160],
        [96, -160, -128],
        [96, 160, -128],
        [96, -160, -96],
        [96, 160, -96],
        [96, -160, -64],
        [96, 160, -64],
        [96, -160, -32],
        [96, 160, -32],
        [96, -160, 0],
        [96, 160, 0],
        [96, -160, 32],
        [96, 160, 32],
        [96, -160, 64],
        [96, 160, 64],
        [96, -160, 96],
        [96, 160, 96],
        [96, -160, 128],
        [96, 160, 128],
        [128, -160, -160],
        [128, -160, 160],
        [128, -128, -160],
        [128, -128, 160],
        [128, -96, -160],
        [128, -96, 160],
        [128, -64, -160],
        [128, -64, 160],
        [128, -32, -160],
        [128, -32, 160],
        [128, 0, -160],
        [128, 0, 160],
        [128, 32, -160],
        [128, 32, 160],
        [128, 64, -160],
        [128, 64, 160],
        [128, 96, -160],
        [128, 96, 160],
        [128, 128, -160],
        [128, 128, 160],
        [128, 160, -160],
        [128, 160, 160],
        [128, -160, -128],
        [128, 160, -128],
        [128, -160, -96],
        [128, 160, -96],
        [128, -160, -64],
        [128, 160, -64],
        [128, -160, -32],
        [128, 160, -32],
        [128, -160, 0],
        [128, 160, 0],
        [128, -160, 32],
        [128, 160, 32],
        [128, -160, 64],
        [128, 160, 64],
        [128, -160, 96],
        [128, 160, 96],
        [128, -160, 128],
        [128, 160, 128],
        [160, -160, -160],
        [160, -160, 160],
        [160, -128, -160],
        [160, -128, 160],
        [160, -96, -160],
        [160, -96, 160],
        [160, -64, -160],
        [160, -64, 160],
        [160, -32, -160],
        [160, -32, 160],
        [160, 0, -160],
        [160, 0, 160],
        [160, 32, -160],
        [160, 32, 160],
        [160, 64, -160],
        [160, 64, 160],
        [160, 96, -160],
        [160, 96, 160],
        [160, 128, -160],
        [160, 128, 160],
        [160, 160, -160],
        [160, 160, 160],
        [160, -160, -128],
        [160, 160, -128],
        [160, -160, -96],
        [160, 160, -96],
        [160, -160, -64],
        [160, 160, -64],
        [160, -160, -32],
        [160, 160, -32],
        [160, -160, 0],
        [160, 160, 0],
        [160, -160, 32],
        [160, 160, 32],
        [160, -160, 64],
        [160, 160, 64],
        [160, -160, 96],
        [160, 160, 96],
        [160, -160, 128],
        [160, 160, 128],
        [-160, -128, -128],
        [160, -128, -128],
        [-160, -96, -128],
        [160, -96, -128],
        [-160, -64, -128],
        [160, -64, -128],
        [-160, -32, -128],
        [160, -32, -128],
        [-160, 0, -128],
        [160, 0, -128],
        [-160, 32, -128],
        [160, 32, -128],
        [-160, 64, -128],
        [160, 64, -128],
        [-160, 96, -128],
        [160, 96, -128],
        [-160, 128, -128],
        [160, 128, -128],
        [-160, -128, -96],
        [160, -128, -96],
        [-160, -96, -96],
        [160, -96, -96],
        [-160, -64, -96],
        [160, -64, -96],
        [-160, -32, -96],
        [160, -32, -96],
        [-160, 0, -96],
        [160, 0, -96],
        [-160, 32, -96],
        [160, 32, -96],
        [-160, 64, -96],
        [160, 64, -96],
        [-160, 96, -96],
        [160, 96, -96],
        [-160, 128, -96],
        [160, 128, -96],
        [-160, -128, -64],
        [160, -128, -64],
        [-160, -96, -64],
        [160, -96, -64],
        [-160, -64, -64],
        [160, -64, -64],
        [-160, -32, -64],
        [160, -32, -64],
        [-160, 0, -64],
        [160, 0, -64],
        [-160, 32, -64],
        [160, 32, -64],
        [-160, 64, -64],
        [160, 64, -64],
        [-160, 96, -64],
        [160, 96, -64],
        [-160, 128, -64],
        [160, 128, -64],
        [-160, -128, -32],
        [160, -128, -32],
        [-160, -96, -32],
        [160, -96, -32],
        [-160, -64, -32],
        [160, -64, -32],
        [-160, -32, -32],
        [160, -32, -32],
        [-160, 0, -32],
        [160, 0, -32],
        [-160, 32, -32],
        [160, 32, -32],
        [-160, 64, -32],
        [160, 64, -32],
        [-160, 96, -32],
        [160, 96, -32],
        [-160, 128, -32],
        [160, 128, -32],
        [-160, -128, 0],
        [160, -128, 0],
        [-160, -96, 0],
        [160, -96, 0],
        [-160, -64, 0],
        [160, -64, 0],
        [-160, -32, 0],
        [160, -32, 0],
        [-160, 0, 0],
        [160, 0, 0],
        [-160, 32, 0],
        [160, 32, 0],
        [-160, 64, 0],
        [160, 64, 0],
        [-160, 96, 0],
        [160, 96, 0],
        [-160, 128, 0],
        [160, 128, 0],
        [-160, -128, 32],
        [160, -128, 32],
        [-160, -96, 32],
        [160, -96, 32],
        [-160, -64, 32],
        [160, -64, 32],
        [-160, -32, 32],
        [160, -32, 32],
        [-160, 0, 32],
        [160, 0, 32],
        [-160, 32, 32],
        [160, 32, 32],
        [-160, 64, 32],
        [160, 64, 32],
        [-160, 96, 32],
        [160, 96, 32],
        [-160, 128, 32],
        [160, 128, 32],
        [-160, -128, 64],
        [160, -128, 64],
        [-160, -96, 64],
        [160, -96, 64],
        [-160, -64, 64],
        [160, -64, 64],
        [-160, -32, 64],
        [160, -32, 64],
        [-160, 0, 64],
        [160, 0, 64],
        [-160, 32, 64],
        [160, 32, 64],
        [-160, 64, 64],
        [160, 64, 64],
        [-160, 96, 64],
        [160, 96, 64],
        [-160, 128, 64],
        [160, 128, 64],
        [-160, -128, 96],
        [160, -128, 96],
        [-160, -96, 96],
        [160, -96, 96],
        [-160, -64, 96],
        [160, -64, 96],
        [-160, -32, 96],
        [160, -32, 96],
        [-160, 0, 96],
        [160, 0, 96],
        [-160, 32, 96],
        [160, 32, 96],
        [-160, 64, 96],
        [160, 64, 96],
        [-160, 96, 96],
        [160, 96, 96],
        [-160, 128, 96],
        [160, 128, 96],
        [-160, -128, 128],
        [160, -128, 128],
        [-160, -96, 128],
        [160, -96, 128],
        [-160, -64, 128],
        [160, -64, 128],
        [-160, -32, 128],
        [160, -32, 128],
        [-160, 0, 128],
        [160, 0, 128],
        [-160, 32, 128],
        [160, 32, 128],
        [-160, 64, 128],
        [160, 64, 128],
        [-160, 96, 128],
        [160, 96, 128],
        [-160, 128, 128],
        [160, 128, 128]],
    '6': [[-192, -192, -192],
        [-192, -192, 192],
        [-192, -160, -192],
        [-192, -160, 192],
        [-192, -128, -192],
        [-192, -128, 192],
        [-192, -96, -192],
        [-192, -96, 192],
        [-192, -64, -192],
        [-192, -64, 192],
        [-192, -32, -192],
        [-192, -32, 192],
        [-192, 0, -192],
        [-192, 0, 192],
        [-192, 32, -192],
        [-192, 32, 192],
        [-192, 64, -192],
        [-192, 64, 192],
        [-192, 96, -192],
        [-192, 96, 192],
        [-192, 128, -192],
        [-192, 128, 192],
        [-192, 160, -192],
        [-192, 160, 192],
        [-192, 192, -192],
        [-192, 192, 192],
        [-192, -192, -160],
        [-192, 192, -160],
        [-192, -192, -128],
        [-192, 192, -128],
        [-192, -192, -96],
        [-192, 192, -96],
        [-192, -192, -64],
        [-192, 192, -64],
        [-192, -192, -32],
        [-192, 192, -32],
        [-192, -192, 0],
        [-192, 192, 0],
        [-192, -192, 32],
        [-192, 192, 32],
        [-192, -192, 64],
        [-192, 192, 64],
        [-192, -192, 96],
        [-192, 192, 96],
        [-192, -192, 128],
        [-192, 192, 128],
        [-192, -192, 160],
        [-192, 192, 160],
        [-160, -192, -192],
        [-160, -192, 192],
        [-160, -160, -192],
        [-160, -160, 192],
        [-160, -128, -192],
        [-160, -128, 192],
        [-160, -96, -192],
        [-160, -96, 192],
        [-160, -64, -192],
        [-160, -64, 192],
        [-160, -32, -192],
        [-160, -32, 192],
        [-160, 0, -192],
        [-160, 0, 192],
        [-160, 32, -192],
        [-160, 32, 192],
        [-160, 64, -192],
        [-160, 64, 192],
        [-160, 96, -192],
        [-160, 96, 192],
        [-160, 128, -192],
        [-160, 128, 192],
        [-160, 160, -192],
        [-160, 160, 192],
        [-160, 192, -192],
        [-160, 192, 192],
        [-160, -192, -160],
        [-160, 192, -160],
        [-160, -192, -128],
        [-160, 192, -128],
        [-160, -192, -96],
        [-160, 192, -96],
        [-160, -192, -64],
        [-160, 192, -64],
        [-160, -192, -32],
        [-160, 192, -32],
        [-160, -192, 0],
        [-160, 192, 0],
        [-160, -192, 32],
        [-160, 192, 32],
        [-160, -192, 64],
        [-160, 192, 64],
        [-160, -192, 96],
        [-160, 192, 96],
        [-160, -192, 128],
        [-160, 192, 128],
        [-160, -192, 160],
        [-160, 192, 160],
        [-128, -192, -192],
        [-128, -192, 192],
        [-128, -160, -192],
        [-128, -160, 192],
        [-128, -128, -192],
        [-128, -128, 192],
        [-128, -96, -192],
        [-128, -96, 192],
        [-128, -64, -192],
        [-128, -64, 192],
        [-128, -32, -192],
        [-128, -32, 192],
        [-128, 0, -192],
        [-128, 0, 192],
        [-128, 32, -192],
        [-128, 32, 192],
        [-128, 64, -192],
        [-128, 64, 192],
        [-128, 96, -192],
        [-128, 96, 192],
        [-128, 128, -192],
        [-128, 128, 192],
        [-128, 160, -192],
        [-128, 160, 192],
        [-128, 192, -192],
        [-128, 192, 192],
        [-128, -192, -160],
        [-128, 192, -160],
        [-128, -192, -128],
        [-128, 192, -128],
        [-128, -192, -96],
        [-128, 192, -96],
        [-128, -192, -64],
        [-128, 192, -64],
        [-128, -192, -32],
        [-128, 192, -32],
        [-128, -192, 0],
        [-128, 192, 0],
        [-128, -192, 32],
        [-128, 192, 32],
        [-128, -192, 64],
        [-128, 192, 64],
        [-128, -192, 96],
        [-128, 192, 96],
        [-128, -192, 128],
        [-128, 192, 128],
        [-128, -192, 160],
        [-128, 192, 160],
        [-96, -192, -192],
        [-96, -192, 192],
        [-96, -160, -192],
        [-96, -160, 192],
        [-96, -128, -192],
        [-96, -128, 192],
        [-96, -96, -192],
        [-96, -96, 192],
        [-96, -64, -192],
        [-96, -64, 192],
        [-96, -32, -192],
        [-96, -32, 192],
        [-96, 0, -192],
        [-96, 0, 192],
        [-96, 32, -192],
        [-96, 32, 192],
        [-96, 64, -192],
        [-96, 64, 192],
        [-96, 96, -192],
        [-96, 96, 192],
        [-96, 128, -192],
        [-96, 128, 192],
        [-96, 160, -192],
        [-96, 160, 192],
        [-96, 192, -192],
        [-96, 192, 192],
        [-96, -192, -160],
        [-96, 192, -160],
        [-96, -192, -128],
        [-96, 192, -128],
        [-96, -192, -96],
        [-96, 192, -96],
        [-96, -192, -64],
        [-96, 192, -64],
        [-96, -192, -32],
        [-96, 192, -32],
        [-96, -192, 0],
        [-96, 192, 0],
        [-96, -192, 32],
        [-96, 192, 32],
        [-96, -192, 64],
        [-96, 192, 64],
        [-96, -192, 96],
        [-96, 192, 96],
        [-96, -192, 128],
        [-96, 192, 128],
        [-96, -192, 160],
        [-96, 192, 160],
        [-64, -192, -192],
        [-64, -192, 192],
        [-64, -160, -192],
        [-64, -160, 192],
        [-64, -128, -192],
        [-64, -128, 192],
        [-64, -96, -192],
        [-64, -96, 192],
        [-64, -64, -192],
        [-64, -64, 192],
        [-64, -32, -192],
        [-64, -32, 192],
        [-64, 0, -192],
        [-64, 0, 192],
        [-64, 32, -192],
        [-64, 32, 192],
        [-64, 64, -192],
        [-64, 64, 192],
        [-64, 96, -192],
        [-64, 96, 192],
        [-64, 128, -192],
        [-64, 128, 192],
        [-64, 160, -192],
        [-64, 160, 192],
        [-64, 192, -192],
        [-64, 192, 192],
        [-64, -192, -160],
        [-64, 192, -160],
        [-64, -192, -128],
        [-64, 192, -128],
        [-64, -192, -96],
        [-64, 192, -96],
        [-64, -192, -64],
        [-64, 192, -64],
        [-64, -192, -32],
        [-64, 192, -32],
        [-64, -192, 0],
        [-64, 192, 0],
        [-64, -192, 32],
        [-64, 192, 32],
        [-64, -192, 64],
        [-64, 192, 64],
        [-64, -192, 96],
        [-64, 192, 96],
        [-64, -192, 128],
        [-64, 192, 128],
        [-64, -192, 160],
        [-64, 192, 160],
        [-32, -192, -192],
        [-32, -192, 192],
        [-32, -160, -192],
        [-32, -160, 192],
        [-32, -128, -192],
        [-32, -128, 192],
        [-32, -96, -192],
        [-32, -96, 192],
        [-32, -64, -192],
        [-32, -64, 192],
        [-32, -32, -192],
        [-32, -32, 192],
        [-32, 0, -192],
        [-32, 0, 192],
        [-32, 32, -192],
        [-32, 32, 192],
        [-32, 64, -192],
        [-32, 64, 192],
        [-32, 96, -192],
        [-32, 96, 192],
        [-32, 128, -192],
        [-32, 128, 192],
        [-32, 160, -192],
        [-32, 160, 192],
        [-32, 192, -192],
        [-32, 192, 192],
        [-32, -192, -160],
        [-32, 192, -160],
        [-32, -192, -128],
        [-32, 192, -128],
        [-32, -192, -96],
        [-32, 192, -96],
        [-32, -192, -64],
        [-32, 192, -64],
        [-32, -192, -32],
        [-32, 192, -32],
        [-32, -192, 0],
        [-32, 192, 0],
        [-32, -192, 32],
        [-32, 192, 32],
        [-32, -192, 64],
        [-32, 192, 64],
        [-32, -192, 96],
        [-32, 192, 96],
        [-32, -192, 128],
        [-32, 192, 128],
        [-32, -192, 160],
        [-32, 192, 160],
        [0, -192, -192],
        [0, -192, 192],
        [0, -160, -192],
        [0, -160, 192],
        [0, -128, -192],
        [0, -128, 192],
        [0, -96, -192],
        [0, -96, 192],
        [0, -64, -192],
        [0, -64, 192],
        [0, -32, -192],
        [0, -32, 192],
        [0, 0, -192],
        [0, 0, 192],
        [0, 32, -192],
        [0, 32, 192],
        [0, 64, -192],
        [0, 64, 192],
        [0, 96, -192],
        [0, 96, 192],
        [0, 128, -192],
        [0, 128, 192],
        [0, 160, -192],
        [0, 160, 192],
        [0, 192, -192],
        [0, 192, 192],
        [0, -192, -160],
        [0, 192, -160],
        [0, -192, -128],
        [0, 192, -128],
        [0, -192, -96],
        [0, 192, -96],
        [0, -192, -64],
        [0, 192, -64],
        [0, -192, -32],
        [0, 192, -32],
        [0, -192, 0],
        [0, 192, 0],
        [0, -192, 32],
        [0, 192, 32],
        [0, -192, 64],
        [0, 192, 64],
        [0, -192, 96],
        [0, 192, 96],
        [0, -192, 128],
        [0, 192, 128],
        [0, -192, 160],
        [0, 192, 160],
        [32, -192, -192],
        [32, -192, 192],
        [32, -160, -192],
        [32, -160, 192],
        [32, -128, -192],
        [32, -128, 192],
        [32, -96, -192],
        [32, -96, 192],
        [32, -64, -192],
        [32, -64, 192],
        [32, -32, -192],
        [32, -32, 192],
        [32, 0, -192],
        [32, 0, 192],
        [32, 32, -192],
        [32, 32, 192],
        [32, 64, -192],
        [32, 64, 192],
        [32, 96, -192],
        [32, 96, 192],
        [32, 128, -192],
        [32, 128, 192],
        [32, 160, -192],
        [32, 160, 192],
        [32, 192, -192],
        [32, 192, 192],
        [32, -192, -160],
        [32, 192, -160],
        [32, -192, -128],
        [32, 192, -128],
        [32, -192, -96],
        [32, 192, -96],
        [32, -192, -64],
        [32, 192, -64],
        [32, -192, -32],
        [32, 192, -32],
        [32, -192, 0],
        [32, 192, 0],
        [32, -192, 32],
        [32, 192, 32],
        [32, -192, 64],
        [32, 192, 64],
        [32, -192, 96],
        [32, 192, 96],
        [32, -192, 128],
        [32, 192, 128],
        [32, -192, 160],
        [32, 192, 160],
        [64, -192, -192],
        [64, -192, 192],
        [64, -160, -192],
        [64, -160, 192],
        [64, -128, -192],
        [64, -128, 192],
        [64, -96, -192],
        [64, -96, 192],
        [64, -64, -192],
        [64, -64, 192],
        [64, -32, -192],
        [64, -32, 192],
        [64, 0, -192],
        [64, 0, 192],
        [64, 32, -192],
        [64, 32, 192],
        [64, 64, -192],
        [64, 64, 192],
        [64, 96, -192],
        [64, 96, 192],
        [64, 128, -192],
        [64, 128, 192],
        [64, 160, -192],
        [64, 160, 192],
        [64, 192, -192],
        [64, 192, 192],
        [64, -192, -160],
        [64, 192, -160],
        [64, -192, -128],
        [64, 192, -128],
        [64, -192, -96],
        [64, 192, -96],
        [64, -192, -64],
        [64, 192, -64],
        [64, -192, -32],
        [64, 192, -32],
        [64, -192, 0],
        [64, 192, 0],
        [64, -192, 32],
        [64, 192, 32],
        [64, -192, 64],
        [64, 192, 64],
        [64, -192, 96],
        [64, 192, 96],
        [64, -192, 128],
        [64, 192, 128],
        [64, -192, 160],
        [64, 192, 160],
        [96, -192, -192],
        [96, -192, 192],
        [96, -160, -192],
        [96, -160, 192],
        [96, -128, -192],
        [96, -128, 192],
        [96, -96, -192],
        [96, -96, 192],
        [96, -64, -192],
        [96, -64, 192],
        [96, -32, -192],
        [96, -32, 192],
        [96, 0, -192],
        [96, 0, 192],
        [96, 32, -192],
        [96, 32, 192],
        [96, 64, -192],
        [96, 64, 192],
        [96, 96, -192],
        [96, 96, 192],
        [96, 128, -192],
        [96, 128, 192],
        [96, 160, -192],
        [96, 160, 192],
        [96, 192, -192],
        [96, 192, 192],
        [96, -192, -160],
        [96, 192, -160],
        [96, -192, -128],
        [96, 192, -128],
        [96, -192, -96],
        [96, 192, -96],
        [96, -192, -64],
        [96, 192, -64],
        [96, -192, -32],
        [96, 192, -32],
        [96, -192, 0],
        [96, 192, 0],
        [96, -192, 32],
        [96, 192, 32],
        [96, -192, 64],
        [96, 192, 64],
        [96, -192, 96],
        [96, 192, 96],
        [96, -192, 128],
        [96, 192, 128],
        [96, -192, 160],
        [96, 192, 160],
        [128, -192, -192],
        [128, -192, 192],
        [128, -160, -192],
        [128, -160, 192],
        [128, -128, -192],
        [128, -128, 192],
        [128, -96, -192],
        [128, -96, 192],
        [128, -64, -192],
        [128, -64, 192],
        [128, -32, -192],
        [128, -32, 192],
        [128, 0, -192],
        [128, 0, 192],
        [128, 32, -192],
        [128, 32, 192],
        [128, 64, -192],
        [128, 64, 192],
        [128, 96, -192],
        [128, 96, 192],
        [128, 128, -192],
        [128, 128, 192],
        [128, 160, -192],
        [128, 160, 192],
        [128, 192, -192],
        [128, 192, 192],
        [128, -192, -160],
        [128, 192, -160],
        [128, -192, -128],
        [128, 192, -128],
        [128, -192, -96],
        [128, 192, -96],
        [128, -192, -64],
        [128, 192, -64],
        [128, -192, -32],
        [128, 192, -32],
        [128, -192, 0],
        [128, 192, 0],
        [128, -192, 32],
        [128, 192, 32],
        [128, -192, 64],
        [128, 192, 64],
        [128, -192, 96],
        [128, 192, 96],
        [128, -192, 128],
        [128, 192, 128],
        [128, -192, 160],
        [128, 192, 160],
        [160, -192, -192],
        [160, -192, 192],
        [160, -160, -192],
        [160, -160, 192],
        [160, -128, -192],
        [160, -128, 192],
        [160, -96, -192],
        [160, -96, 192],
        [160, -64, -192],
        [160, -64, 192],
        [160, -32, -192],
        [160, -32, 192],
        [160, 0, -192],
        [160, 0, 192],
        [160, 32, -192],
        [160, 32, 192],
        [160, 64, -192],
        [160, 64, 192],
        [160, 96, -192],
        [160, 96, 192],
        [160, 128, -192],
        [160, 128, 192],
        [160, 160, -192],
        [160, 160, 192],
        [160, 192, -192],
        [160, 192, 192],
        [160, -192, -160],
        [160, 192, -160],
        [160, -192, -128],
        [160, 192, -128],
        [160, -192, -96],
        [160, 192, -96],
        [160, -192, -64],
        [160, 192, -64],
        [160, -192, -32],
        [160, 192, -32],
        [160, -192, 0],
        [160, 192, 0],
        [160, -192, 32],
        [160, 192, 32],
        [160, -192, 64],
        [160, 192, 64],
        [160, -192, 96],
        [160, 192, 96],
        [160, -192, 128],
        [160, 192, 128],
        [160, -192, 160],
        [160, 192, 160],
        [192, -192, -192],
        [192, -192, 192],
        [192, -160, -192],
        [192, -160, 192],
        [192, -128, -192],
        [192, -128, 192],
        [192, -96, -192],
        [192, -96, 192],
        [192, -64, -192],
        [192, -64, 192],
        [192, -32, -192],
        [192, -32, 192],
        [192, 0, -192],
        [192, 0, 192],
        [192, 32, -192],
        [192, 32, 192],
        [192, 64, -192],
        [192, 64, 192],
        [192, 96, -192],
        [192, 96, 192],
        [192, 128, -192],
        [192, 128, 192],
        [192, 160, -192],
        [192, 160, 192],
        [192, 192, -192],
        [192, 192, 192],
        [192, -192, -160],
        [192, 192, -160],
        [192, -192, -128],
        [192, 192, -128],
        [192, -192, -96],
        [192, 192, -96],
        [192, -192, -64],
        [192, 192, -64],
        [192, -192, -32],
        [192, 192, -32],
        [192, -192, 0],
        [192, 192, 0],
        [192, -192, 32],
        [192, 192, 32],
        [192, -192, 64],
        [192, 192, 64],
        [192, -192, 96],
        [192, 192, 96],
        [192, -192, 128],
        [192, 192, 128],
        [192, -192, 160],
        [192, 192, 160],
        [-192, -160, -160],
        [192, -160, -160],
        [-192, -128, -160],
        [192, -128, -160],
        [-192, -96, -160],
        [192, -96, -160],
        [-192, -64, -160],
        [192, -64, -160],
        [-192, -32, -160],
        [192, -32, -160],
        [-192, 0, -160],
        [192, 0, -160],
        [-192, 32, -160],
        [192, 32, -160],
        [-192, 64, -160],
        [192, 64, -160],
        [-192, 96, -160],
        [192, 96, -160],
        [-192, 128, -160],
        [192, 128, -160],
        [-192, 160, -160],
        [192, 160, -160],
        [-192, -160, -128],
        [192, -160, -128],
        [-192, -128, -128],
        [192, -128, -128],
        [-192, -96, -128],
        [192, -96, -128],
        [-192, -64, -128],
        [192, -64, -128],
        [-192, -32, -128],
        [192, -32, -128],
        [-192, 0, -128],
        [192, 0, -128],
        [-192, 32, -128],
        [192, 32, -128],
        [-192, 64, -128],
        [192, 64, -128],
        [-192, 96, -128],
        [192, 96, -128],
        [-192, 128, -128],
        [192, 128, -128],
        [-192, 160, -128],
        [192, 160, -128],
        [-192, -160, -96],
        [192, -160, -96],
        [-192, -128, -96],
        [192, -128, -96],
        [-192, -96, -96],
        [192, -96, -96],
        [-192, -64, -96],
        [192, -64, -96],
        [-192, -32, -96],
        [192, -32, -96],
        [-192, 0, -96],
        [192, 0, -96],
        [-192, 32, -96],
        [192, 32, -96],
        [-192, 64, -96],
        [192, 64, -96],
        [-192, 96, -96],
        [192, 96, -96],
        [-192, 128, -96],
        [192, 128, -96],
        [-192, 160, -96],
        [192, 160, -96],
        [-192, -160, -64],
        [192, -160, -64],
        [-192, -128, -64],
        [192, -128, -64],
        [-192, -96, -64],
        [192, -96, -64],
        [-192, -64, -64],
        [192, -64, -64],
        [-192, -32, -64],
        [192, -32, -64],
        [-192, 0, -64],
        [192, 0, -64],
        [-192, 32, -64],
        [192, 32, -64],
        [-192, 64, -64],
        [192, 64, -64],
        [-192, 96, -64],
        [192, 96, -64],
        [-192, 128, -64],
        [192, 128, -64],
        [-192, 160, -64],
        [192, 160, -64],
        [-192, -160, -32],
        [192, -160, -32],
        [-192, -128, -32],
        [192, -128, -32],
        [-192, -96, -32],
        [192, -96, -32],
        [-192, -64, -32],
        [192, -64, -32],
        [-192, -32, -32],
        [192, -32, -32],
        [-192, 0, -32],
        [192, 0, -32],
        [-192, 32, -32],
        [192, 32, -32],
        [-192, 64, -32],
        [192, 64, -32],
        [-192, 96, -32],
        [192, 96, -32],
        [-192, 128, -32],
        [192, 128, -32],
        [-192, 160, -32],
        [192, 160, -32],
        [-192, -160, 0],
        [192, -160, 0],
        [-192, -128, 0],
        [192, -128, 0],
        [-192, -96, 0],
        [192, -96, 0],
        [-192, -64, 0],
        [192, -64, 0],
        [-192, -32, 0],
        [192, -32, 0],
        [-192, 0, 0],
        [192, 0, 0],
        [-192, 32, 0],
        [192, 32, 0],
        [-192, 64, 0],
        [192, 64, 0],
        [-192, 96, 0],
        [192, 96, 0],
        [-192, 128, 0],
        [192, 128, 0],
        [-192, 160, 0],
        [192, 160, 0],
        [-192, -160, 32],
        [192, -160, 32],
        [-192, -128, 32],
        [192, -128, 32],
        [-192, -96, 32],
        [192, -96, 32],
        [-192, -64, 32],
        [192, -64, 32],
        [-192, -32, 32],
        [192, -32, 32],
        [-192, 0, 32],
        [192, 0, 32],
        [-192, 32, 32],
        [192, 32, 32],
        [-192, 64, 32],
        [192, 64, 32],
        [-192, 96, 32],
        [192, 96, 32],
        [-192, 128, 32],
        [192, 128, 32],
        [-192, 160, 32],
        [192, 160, 32],
        [-192, -160, 64],
        [192, -160, 64],
        [-192, -128, 64],
        [192, -128, 64],
        [-192, -96, 64],
        [192, -96, 64],
        [-192, -64, 64],
        [192, -64, 64],
        [-192, -32, 64],
        [192, -32, 64],
        [-192, 0, 64],
        [192, 0, 64],
        [-192, 32, 64],
        [192, 32, 64],
        [-192, 64, 64],
        [192, 64, 64],
        [-192, 96, 64],
        [192, 96, 64],
        [-192, 128, 64],
        [192, 128, 64],
        [-192, 160, 64],
        [192, 160, 64],
        [-192, -160, 96],
        [192, -160, 96],
        [-192, -128, 96],
        [192, -128, 96],
        [-192, -96, 96],
        [192, -96, 96],
        [-192, -64, 96],
        [192, -64, 96],
        [-192, -32, 96],
        [192, -32, 96],
        [-192, 0, 96],
        [192, 0, 96],
        [-192, 32, 96],
        [192, 32, 96],
        [-192, 64, 96],
        [192, 64, 96],
        [-192, 96, 96],
        [192, 96, 96],
        [-192, 128, 96],
        [192, 128, 96],
        [-192, 160, 96],
        [192, 160, 96],
        [-192, -160, 128],
        [192, -160, 128],
        [-192, -128, 128],
        [192, -128, 128],
        [-192, -96, 128],
        [192, -96, 128],
        [-192, -64, 128],
        [192, -64, 128],
        [-192, -32, 128],
        [192, -32, 128],
        [-192, 0, 128],
        [192, 0, 128],
        [-192, 32, 128],
        [192, 32, 128],
        [-192, 64, 128],
        [192, 64, 128],
        [-192, 96, 128],
        [192, 96, 128],
        [-192, 128, 128],
        [192, 128, 128],
        [-192, 160, 128],
        [192, 160, 128],
        [-192, -160, 160],
        [192, -160, 160],
        [-192, -128, 160],
        [192, -128, 160],
        [-192, -96, 160],
        [192, -96, 160],
        [-192, -64, 160],
        [192, -64, 160],
        [-192, -32, 160],
        [192, -32, 160],
        [-192, 0, 160],
        [192, 0, 160],
        [-192, 32, 160],
        [192, 32, 160],
        [-192, 64, 160],
        [192, 64, 160],
        [-192, 96, 160],
        [192, 96, 160],
        [-192, 128, 160],
        [192, 128, 160],
        [-192, 160, 160],
        [192, 160, 160]],
    '7': [[-224, -224, -224],
        [-224, -224, 224],
        [-224, -192, -224],
        [-224, -192, 224],
        [-224, -160, -224],
        [-224, -160, 224],
        [-224, -128, -224],
        [-224, -128, 224],
        [-224, -96, -224],
        [-224, -96, 224],
        [-224, -64, -224],
        [-224, -64, 224],
        [-224, -32, -224],
        [-224, -32, 224],
        [-224, 0, -224],
        [-224, 0, 224],
        [-224, 32, -224],
        [-224, 32, 224],
        [-224, 64, -224],
        [-224, 64, 224],
        [-224, 96, -224],
        [-224, 96, 224],
        [-224, 128, -224],
        [-224, 128, 224],
        [-224, 160, -224],
        [-224, 160, 224],
        [-224, 192, -224],
        [-224, 192, 224],
        [-224, 224, -224],
        [-224, 224, 224],
        [-224, -224, -192],
        [-224, 224, -192],
        [-224, -224, -160],
        [-224, 224, -160],
        [-224, -224, -128],
        [-224, 224, -128],
        [-224, -224, -96],
        [-224, 224, -96],
        [-224, -224, -64],
        [-224, 224, -64],
        [-224, -224, -32],
        [-224, 224, -32],
        [-224, -224, 0],
        [-224, 224, 0],
        [-224, -224, 32],
        [-224, 224, 32],
        [-224, -224, 64],
        [-224, 224, 64],
        [-224, -224, 96],
        [-224, 224, 96],
        [-224, -224, 128],
        [-224, 224, 128],
        [-224, -224, 160],
        [-224, 224, 160],
        [-224, -224, 192],
        [-224, 224, 192],
        [-192, -224, -224],
        [-192, -224, 224],
        [-192, -192, -224],
        [-192, -192, 224],
        [-192, -160, -224],
        [-192, -160, 224],
        [-192, -128, -224],
        [-192, -128, 224],
        [-192, -96, -224],
        [-192, -96, 224],
        [-192, -64, -224],
        [-192, -64, 224],
        [-192, -32, -224],
        [-192, -32, 224],
        [-192, 0, -224],
        [-192, 0, 224],
        [-192, 32, -224],
        [-192, 32, 224],
        [-192, 64, -224],
        [-192, 64, 224],
        [-192, 96, -224],
        [-192, 96, 224],
        [-192, 128, -224],
        [-192, 128, 224],
        [-192, 160, -224],
        [-192, 160, 224],
        [-192, 192, -224],
        [-192, 192, 224],
        [-192, 224, -224],
        [-192, 224, 224],
        [-192, -224, -192],
        [-192, 224, -192],
        [-192, -224, -160],
        [-192, 224, -160],
        [-192, -224, -128],
        [-192, 224, -128],
        [-192, -224, -96],
        [-192, 224, -96],
        [-192, -224, -64],
        [-192, 224, -64],
        [-192, -224, -32],
        [-192, 224, -32],
        [-192, -224, 0],
        [-192, 224, 0],
        [-192, -224, 32],
        [-192, 224, 32],
        [-192, -224, 64],
        [-192, 224, 64],
        [-192, -224, 96],
        [-192, 224, 96],
        [-192, -224, 128],
        [-192, 224, 128],
        [-192, -224, 160],
        [-192, 224, 160],
        [-192, -224, 192],
        [-192, 224, 192],
        [-160, -224, -224],
        [-160, -224, 224],
        [-160, -192, -224],
        [-160, -192, 224],
        [-160, -160, -224],
        [-160, -160, 224],
        [-160, -128, -224],
        [-160, -128, 224],
        [-160, -96, -224],
        [-160, -96, 224],
        [-160, -64, -224],
        [-160, -64, 224],
        [-160, -32, -224],
        [-160, -32, 224],
        [-160, 0, -224],
        [-160, 0, 224],
        [-160, 32, -224],
        [-160, 32, 224],
        [-160, 64, -224],
        [-160, 64, 224],
        [-160, 96, -224],
        [-160, 96, 224],
        [-160, 128, -224],
        [-160, 128, 224],
        [-160, 160, -224],
        [-160, 160, 224],
        [-160, 192, -224],
        [-160, 192, 224],
        [-160, 224, -224],
        [-160, 224, 224],
        [-160, -224, -192],
        [-160, 224, -192],
        [-160, -224, -160],
        [-160, 224, -160],
        [-160, -224, -128],
        [-160, 224, -128],
        [-160, -224, -96],
        [-160, 224, -96],
        [-160, -224, -64],
        [-160, 224, -64],
        [-160, -224, -32],
        [-160, 224, -32],
        [-160, -224, 0],
        [-160, 224, 0],
        [-160, -224, 32],
        [-160, 224, 32],
        [-160, -224, 64],
        [-160, 224, 64],
        [-160, -224, 96],
        [-160, 224, 96],
        [-160, -224, 128],
        [-160, 224, 128],
        [-160, -224, 160],
        [-160, 224, 160],
        [-160, -224, 192],
        [-160, 224, 192],
        [-128, -224, -224],
        [-128, -224, 224],
        [-128, -192, -224],
        [-128, -192, 224],
        [-128, -160, -224],
        [-128, -160, 224],
        [-128, -128, -224],
        [-128, -128, 224],
        [-128, -96, -224],
        [-128, -96, 224],
        [-128, -64, -224],
        [-128, -64, 224],
        [-128, -32, -224],
        [-128, -32, 224],
        [-128, 0, -224],
        [-128, 0, 224],
        [-128, 32, -224],
        [-128, 32, 224],
        [-128, 64, -224],
        [-128, 64, 224],
        [-128, 96, -224],
        [-128, 96, 224],
        [-128, 128, -224],
        [-128, 128, 224],
        [-128, 160, -224],
        [-128, 160, 224],
        [-128, 192, -224],
        [-128, 192, 224],
        [-128, 224, -224],
        [-128, 224, 224],
        [-128, -224, -192],
        [-128, 224, -192],
        [-128, -224, -160],
        [-128, 224, -160],
        [-128, -224, -128],
        [-128, 224, -128],
        [-128, -224, -96],
        [-128, 224, -96],
        [-128, -224, -64],
        [-128, 224, -64],
        [-128, -224, -32],
        [-128, 224, -32],
        [-128, -224, 0],
        [-128, 224, 0],
        [-128, -224, 32],
        [-128, 224, 32],
        [-128, -224, 64],
        [-128, 224, 64],
        [-128, -224, 96],
        [-128, 224, 96],
        [-128, -224, 128],
        [-128, 224, 128],
        [-128, -224, 160],
        [-128, 224, 160],
        [-128, -224, 192],
        [-128, 224, 192],
        [-96, -224, -224],
        [-96, -224, 224],
        [-96, -192, -224],
        [-96, -192, 224],
        [-96, -160, -224],
        [-96, -160, 224],
        [-96, -128, -224],
        [-96, -128, 224],
        [-96, -96, -224],
        [-96, -96, 224],
        [-96, -64, -224],
        [-96, -64, 224],
        [-96, -32, -224],
        [-96, -32, 224],
        [-96, 0, -224],
        [-96, 0, 224],
        [-96, 32, -224],
        [-96, 32, 224],
        [-96, 64, -224],
        [-96, 64, 224],
        [-96, 96, -224],
        [-96, 96, 224],
        [-96, 128, -224],
        [-96, 128, 224],
        [-96, 160, -224],
        [-96, 160, 224],
        [-96, 192, -224],
        [-96, 192, 224],
        [-96, 224, -224],
        [-96, 224, 224],
        [-96, -224, -192],
        [-96, 224, -192],
        [-96, -224, -160],
        [-96, 224, -160],
        [-96, -224, -128],
        [-96, 224, -128],
        [-96, -224, -96],
        [-96, 224, -96],
        [-96, -224, -64],
        [-96, 224, -64],
        [-96, -224, -32],
        [-96, 224, -32],
        [-96, -224, 0],
        [-96, 224, 0],
        [-96, -224, 32],
        [-96, 224, 32],
        [-96, -224, 64],
        [-96, 224, 64],
        [-96, -224, 96],
        [-96, 224, 96],
        [-96, -224, 128],
        [-96, 224, 128],
        [-96, -224, 160],
        [-96, 224, 160],
        [-96, -224, 192],
        [-96, 224, 192],
        [-64, -224, -224],
        [-64, -224, 224],
        [-64, -192, -224],
        [-64, -192, 224],
        [-64, -160, -224],
        [-64, -160, 224],
        [-64, -128, -224],
        [-64, -128, 224],
        [-64, -96, -224],
        [-64, -96, 224],
        [-64, -64, -224],
        [-64, -64, 224],
        [-64, -32, -224],
        [-64, -32, 224],
        [-64, 0, -224],
        [-64, 0, 224],
        [-64, 32, -224],
        [-64, 32, 224],
        [-64, 64, -224],
        [-64, 64, 224],
        [-64, 96, -224],
        [-64, 96, 224],
        [-64, 128, -224],
        [-64, 128, 224],
        [-64, 160, -224],
        [-64, 160, 224],
        [-64, 192, -224],
        [-64, 192, 224],
        [-64, 224, -224],
        [-64, 224, 224],
        [-64, -224, -192],
        [-64, 224, -192],
        [-64, -224, -160],
        [-64, 224, -160],
        [-64, -224, -128],
        [-64, 224, -128],
        [-64, -224, -96],
        [-64, 224, -96],
        [-64, -224, -64],
        [-64, 224, -64],
        [-64, -224, -32],
        [-64, 224, -32],
        [-64, -224, 0],
        [-64, 224, 0],
        [-64, -224, 32],
        [-64, 224, 32],
        [-64, -224, 64],
        [-64, 224, 64],
        [-64, -224, 96],
        [-64, 224, 96],
        [-64, -224, 128],
        [-64, 224, 128],
        [-64, -224, 160],
        [-64, 224, 160],
        [-64, -224, 192],
        [-64, 224, 192],
        [-32, -224, -224],
        [-32, -224, 224],
        [-32, -192, -224],
        [-32, -192, 224],
        [-32, -160, -224],
        [-32, -160, 224],
        [-32, -128, -224],
        [-32, -128, 224],
        [-32, -96, -224],
        [-32, -96, 224],
        [-32, -64, -224],
        [-32, -64, 224],
        [-32, -32, -224],
        [-32, -32, 224],
        [-32, 0, -224],
        [-32, 0, 224],
        [-32, 32, -224],
        [-32, 32, 224],
        [-32, 64, -224],
        [-32, 64, 224],
        [-32, 96, -224],
        [-32, 96, 224],
        [-32, 128, -224],
        [-32, 128, 224],
        [-32, 160, -224],
        [-32, 160, 224],
        [-32, 192, -224],
        [-32, 192, 224],
        [-32, 224, -224],
        [-32, 224, 224],
        [-32, -224, -192],
        [-32, 224, -192],
        [-32, -224, -160],
        [-32, 224, -160],
        [-32, -224, -128],
        [-32, 224, -128],
        [-32, -224, -96],
        [-32, 224, -96],
        [-32, -224, -64],
        [-32, 224, -64],
        [-32, -224, -32],
        [-32, 224, -32],
        [-32, -224, 0],
        [-32, 224, 0],
        [-32, -224, 32],
        [-32, 224, 32],
        [-32, -224, 64],
        [-32, 224, 64],
        [-32, -224, 96],
        [-32, 224, 96],
        [-32, -224, 128],
        [-32, 224, 128],
        [-32, -224, 160],
        [-32, 224, 160],
        [-32, -224, 192],
        [-32, 224, 192],
        [0, -224, -224],
        [0, -224, 224],
        [0, -192, -224],
        [0, -192, 224],
        [0, -160, -224],
        [0, -160, 224],
        [0, -128, -224],
        [0, -128, 224],
        [0, -96, -224],
        [0, -96, 224],
        [0, -64, -224],
        [0, -64, 224],
        [0, -32, -224],
        [0, -32, 224],
        [0, 0, -224],
        [0, 0, 224],
        [0, 32, -224],
        [0, 32, 224],
        [0, 64, -224],
        [0, 64, 224],
        [0, 96, -224],
        [0, 96, 224],
        [0, 128, -224],
        [0, 128, 224],
        [0, 160, -224],
        [0, 160, 224],
        [0, 192, -224],
        [0, 192, 224],
        [0, 224, -224],
        [0, 224, 224],
        [0, -224, -192],
        [0, 224, -192],
        [0, -224, -160],
        [0, 224, -160],
        [0, -224, -128],
        [0, 224, -128],
        [0, -224, -96],
        [0, 224, -96],
        [0, -224, -64],
        [0, 224, -64],
        [0, -224, -32],
        [0, 224, -32],
        [0, -224, 0],
        [0, 224, 0],
        [0, -224, 32],
        [0, 224, 32],
        [0, -224, 64],
        [0, 224, 64],
        [0, -224, 96],
        [0, 224, 96],
        [0, -224, 128],
        [0, 224, 128],
        [0, -224, 160],
        [0, 224, 160],
        [0, -224, 192],
        [0, 224, 192],
        [32, -224, -224],
        [32, -224, 224],
        [32, -192, -224],
        [32, -192, 224],
        [32, -160, -224],
        [32, -160, 224],
        [32, -128, -224],
        [32, -128, 224],
        [32, -96, -224],
        [32, -96, 224],
        [32, -64, -224],
        [32, -64, 224],
        [32, -32, -224],
        [32, -32, 224],
        [32, 0, -224],
        [32, 0, 224],
        [32, 32, -224],
        [32, 32, 224],
        [32, 64, -224],
        [32, 64, 224],
        [32, 96, -224],
        [32, 96, 224],
        [32, 128, -224],
        [32, 128, 224],
        [32, 160, -224],
        [32, 160, 224],
        [32, 192, -224],
        [32, 192, 224],
        [32, 224, -224],
        [32, 224, 224],
        [32, -224, -192],
        [32, 224, -192],
        [32, -224, -160],
        [32, 224, -160],
        [32, -224, -128],
        [32, 224, -128],
        [32, -224, -96],
        [32, 224, -96],
        [32, -224, -64],
        [32, 224, -64],
        [32, -224, -32],
        [32, 224, -32],
        [32, -224, 0],
        [32, 224, 0],
        [32, -224, 32],
        [32, 224, 32],
        [32, -224, 64],
        [32, 224, 64],
        [32, -224, 96],
        [32, 224, 96],
        [32, -224, 128],
        [32, 224, 128],
        [32, -224, 160],
        [32, 224, 160],
        [32, -224, 192],
        [32, 224, 192],
        [64, -224, -224],
        [64, -224, 224],
        [64, -192, -224],
        [64, -192, 224],
        [64, -160, -224],
        [64, -160, 224],
        [64, -128, -224],
        [64, -128, 224],
        [64, -96, -224],
        [64, -96, 224],
        [64, -64, -224],
        [64, -64, 224],
        [64, -32, -224],
        [64, -32, 224],
        [64, 0, -224],
        [64, 0, 224],
        [64, 32, -224],
        [64, 32, 224],
        [64, 64, -224],
        [64, 64, 224],
        [64, 96, -224],
        [64, 96, 224],
        [64, 128, -224],
        [64, 128, 224],
        [64, 160, -224],
        [64, 160, 224],
        [64, 192, -224],
        [64, 192, 224],
        [64, 224, -224],
        [64, 224, 224],
        [64, -224, -192],
        [64, 224, -192],
        [64, -224, -160],
        [64, 224, -160],
        [64, -224, -128],
        [64, 224, -128],
        [64, -224, -96],
        [64, 224, -96],
        [64, -224, -64],
        [64, 224, -64],
        [64, -224, -32],
        [64, 224, -32],
        [64, -224, 0],
        [64, 224, 0],
        [64, -224, 32],
        [64, 224, 32],
        [64, -224, 64],
        [64, 224, 64],
        [64, -224, 96],
        [64, 224, 96],
        [64, -224, 128],
        [64, 224, 128],
        [64, -224, 160],
        [64, 224, 160],
        [64, -224, 192],
        [64, 224, 192],
        [96, -224, -224],
        [96, -224, 224],
        [96, -192, -224],
        [96, -192, 224],
        [96, -160, -224],
        [96, -160, 224],
        [96, -128, -224],
        [96, -128, 224],
        [96, -96, -224],
        [96, -96, 224],
        [96, -64, -224],
        [96, -64, 224],
        [96, -32, -224],
        [96, -32, 224],
        [96, 0, -224],
        [96, 0, 224],
        [96, 32, -224],
        [96, 32, 224],
        [96, 64, -224],
        [96, 64, 224],
        [96, 96, -224],
        [96, 96, 224],
        [96, 128, -224],
        [96, 128, 224],
        [96, 160, -224],
        [96, 160, 224],
        [96, 192, -224],
        [96, 192, 224],
        [96, 224, -224],
        [96, 224, 224],
        [96, -224, -192],
        [96, 224, -192],
        [96, -224, -160],
        [96, 224, -160],
        [96, -224, -128],
        [96, 224, -128],
        [96, -224, -96],
        [96, 224, -96],
        [96, -224, -64],
        [96, 224, -64],
        [96, -224, -32],
        [96, 224, -32],
        [96, -224, 0],
        [96, 224, 0],
        [96, -224, 32],
        [96, 224, 32],
        [96, -224, 64],
        [96, 224, 64],
        [96, -224, 96],
        [96, 224, 96],
        [96, -224, 128],
        [96, 224, 128],
        [96, -224, 160],
        [96, 224, 160],
        [96, -224, 192],
        [96, 224, 192],
        [128, -224, -224],
        [128, -224, 224],
        [128, -192, -224],
        [128, -192, 224],
        [128, -160, -224],
        [128, -160, 224],
        [128, -128, -224],
        [128, -128, 224],
        [128, -96, -224],
        [128, -96, 224],
        [128, -64, -224],
        [128, -64, 224],
        [128, -32, -224],
        [128, -32, 224],
        [128, 0, -224],
        [128, 0, 224],
        [128, 32, -224],
        [128, 32, 224],
        [128, 64, -224],
        [128, 64, 224],
        [128, 96, -224],
        [128, 96, 224],
        [128, 128, -224],
        [128, 128, 224],
        [128, 160, -224],
        [128, 160, 224],
        [128, 192, -224],
        [128, 192, 224],
        [128, 224, -224],
        [128, 224, 224],
        [128, -224, -192],
        [128, 224, -192],
        [128, -224, -160],
        [128, 224, -160],
        [128, -224, -128],
        [128, 224, -128],
        [128, -224, -96],
        [128, 224, -96],
        [128, -224, -64],
        [128, 224, -64],
        [128, -224, -32],
        [128, 224, -32],
        [128, -224, 0],
        [128, 224, 0],
        [128, -224, 32],
        [128, 224, 32],
        [128, -224, 64],
        [128, 224, 64],
        [128, -224, 96],
        [128, 224, 96],
        [128, -224, 128],
        [128, 224, 128],
        [128, -224, 160],
        [128, 224, 160],
        [128, -224, 192],
        [128, 224, 192],
        [160, -224, -224],
        [160, -224, 224],
        [160, -192, -224],
        [160, -192, 224],
        [160, -160, -224],
        [160, -160, 224],
        [160, -128, -224],
        [160, -128, 224],
        [160, -96, -224],
        [160, -96, 224],
        [160, -64, -224],
        [160, -64, 224],
        [160, -32, -224],
        [160, -32, 224],
        [160, 0, -224],
        [160, 0, 224],
        [160, 32, -224],
        [160, 32, 224],
        [160, 64, -224],
        [160, 64, 224],
        [160, 96, -224],
        [160, 96, 224],
        [160, 128, -224],
        [160, 128, 224],
        [160, 160, -224],
        [160, 160, 224],
        [160, 192, -224],
        [160, 192, 224],
        [160, 224, -224],
        [160, 224, 224],
        [160, -224, -192],
        [160, 224, -192],
        [160, -224, -160],
        [160, 224, -160],
        [160, -224, -128],
        [160, 224, -128],
        [160, -224, -96],
        [160, 224, -96],
        [160, -224, -64],
        [160, 224, -64],
        [160, -224, -32],
        [160, 224, -32],
        [160, -224, 0],
        [160, 224, 0],
        [160, -224, 32],
        [160, 224, 32],
        [160, -224, 64],
        [160, 224, 64],
        [160, -224, 96],
        [160, 224, 96],
        [160, -224, 128],
        [160, 224, 128],
        [160, -224, 160],
        [160, 224, 160],
        [160, -224, 192],
        [160, 224, 192],
        [192, -224, -224],
        [192, -224, 224],
        [192, -192, -224],
        [192, -192, 224],
        [192, -160, -224],
        [192, -160, 224],
        [192, -128, -224],
        [192, -128, 224],
        [192, -96, -224],
        [192, -96, 224],
        [192, -64, -224],
        [192, -64, 224],
        [192, -32, -224],
        [192, -32, 224],
        [192, 0, -224],
        [192, 0, 224],
        [192, 32, -224],
        [192, 32, 224],
        [192, 64, -224],
        [192, 64, 224],
        [192, 96, -224],
        [192, 96, 224],
        [192, 128, -224],
        [192, 128, 224],
        [192, 160, -224],
        [192, 160, 224],
        [192, 192, -224],
        [192, 192, 224],
        [192, 224, -224],
        [192, 224, 224],
        [192, -224, -192],
        [192, 224, -192],
        [192, -224, -160],
        [192, 224, -160],
        [192, -224, -128],
        [192, 224, -128],
        [192, -224, -96],
        [192, 224, -96],
        [192, -224, -64],
        [192, 224, -64],
        [192, -224, -32],
        [192, 224, -32],
        [192, -224, 0],
        [192, 224, 0],
        [192, -224, 32],
        [192, 224, 32],
        [192, -224, 64],
        [192, 224, 64],
        [192, -224, 96],
        [192, 224, 96],
        [192, -224, 128],
        [192, 224, 128],
        [192, -224, 160],
        [192, 224, 160],
        [192, -224, 192],
        [192, 224, 192],
        [224, -224, -224],
        [224, -224, 224],
        [224, -192, -224],
        [224, -192, 224],
        [224, -160, -224],
        [224, -160, 224],
        [224, -128, -224],
        [224, -128, 224],
        [224, -96, -224],
        [224, -96, 224],
        [224, -64, -224],
        [224, -64, 224],
        [224, -32, -224],
        [224, -32, 224],
        [224, 0, -224],
        [224, 0, 224],
        [224, 32, -224],
        [224, 32, 224],
        [224, 64, -224],
        [224, 64, 224],
        [224, 96, -224],
        [224, 96, 224],
        [224, 128, -224],
        [224, 128, 224],
        [224, 160, -224],
        [224, 160, 224],
        [224, 192, -224],
        [224, 192, 224],
        [224, 224, -224],
        [224, 224, 224],
        [224, -224, -192],
        [224, 224, -192],
        [224, -224, -160],
        [224, 224, -160],
        [224, -224, -128],
        [224, 224, -128],
        [224, -224, -96],
        [224, 224, -96],
        [224, -224, -64],
        [224, 224, -64],
        [224, -224, -32],
        [224, 224, -32],
        [224, -224, 0],
        [224, 224, 0],
        [224, -224, 32],
        [224, 224, 32],
        [224, -224, 64],
        [224, 224, 64],
        [224, -224, 96],
        [224, 224, 96],
        [224, -224, 128],
        [224, 224, 128],
        [224, -224, 160],
        [224, 224, 160],
        [224, -224, 192],
        [224, 224, 192],
        [-224, -192, -192],
        [224, -192, -192],
        [-224, -160, -192],
        [224, -160, -192],
        [-224, -128, -192],
        [224, -128, -192],
        [-224, -96, -192],
        [224, -96, -192],
        [-224, -64, -192],
        [224, -64, -192],
        [-224, -32, -192],
        [224, -32, -192],
        [-224, 0, -192],
        [224, 0, -192],
        [-224, 32, -192],
        [224, 32, -192],
        [-224, 64, -192],
        [224, 64, -192],
        [-224, 96, -192],
        [224, 96, -192],
        [-224, 128, -192],
        [224, 128, -192],
        [-224, 160, -192],
        [224, 160, -192],
        [-224, 192, -192],
        [224, 192, -192],
        [-224, -192, -160],
        [224, -192, -160],
        [-224, -160, -160],
        [224, -160, -160],
        [-224, -128, -160],
        [224, -128, -160],
        [-224, -96, -160],
        [224, -96, -160],
        [-224, -64, -160],
        [224, -64, -160],
        [-224, -32, -160],
        [224, -32, -160],
        [-224, 0, -160],
        [224, 0, -160],
        [-224, 32, -160],
        [224, 32, -160],
        [-224, 64, -160],
        [224, 64, -160],
        [-224, 96, -160],
        [224, 96, -160],
        [-224, 128, -160],
        [224, 128, -160],
        [-224, 160, -160],
        [224, 160, -160],
        [-224, 192, -160],
        [224, 192, -160],
        [-224, -192, -128],
        [224, -192, -128],
        [-224, -160, -128],
        [224, -160, -128],
        [-224, -128, -128],
        [224, -128, -128],
        [-224, -96, -128],
        [224, -96, -128],
        [-224, -64, -128],
        [224, -64, -128],
        [-224, -32, -128],
        [224, -32, -128],
        [-224, 0, -128],
        [224, 0, -128],
        [-224, 32, -128],
        [224, 32, -128],
        [-224, 64, -128],
        [224, 64, -128],
        [-224, 96, -128],
        [224, 96, -128],
        [-224, 128, -128],
        [224, 128, -128],
        [-224, 160, -128],
        [224, 160, -128],
        [-224, 192, -128],
        [224, 192, -128],
        [-224, -192, -96],
        [224, -192, -96],
        [-224, -160, -96],
        [224, -160, -96],
        [-224, -128, -96],
        [224, -128, -96],
        [-224, -96, -96],
        [224, -96, -96],
        [-224, -64, -96],
        [224, -64, -96],
        [-224, -32, -96],
        [224, -32, -96],
        [-224, 0, -96],
        [224, 0, -96],
        [-224, 32, -96],
        [224, 32, -96],
        [-224, 64, -96],
        [224, 64, -96],
        [-224, 96, -96],
        [224, 96, -96],
        [-224, 128, -96],
        [224, 128, -96],
        [-224, 160, -96],
        [224, 160, -96],
        [-224, 192, -96],
        [224, 192, -96],
        [-224, -192, -64],
        [224, -192, -64],
        [-224, -160, -64],
        [224, -160, -64],
        [-224, -128, -64],
        [224, -128, -64],
        [-224, -96, -64],
        [224, -96, -64],
        [-224, -64, -64],
        [224, -64, -64],
        [-224, -32, -64],
        [224, -32, -64],
        [-224, 0, -64],
        [224, 0, -64],
        [-224, 32, -64],
        [224, 32, -64],
        [-224, 64, -64],
        [224, 64, -64],
        [-224, 96, -64],
        [224, 96, -64],
        [-224, 128, -64],
        [224, 128, -64],
        [-224, 160, -64],
        [224, 160, -64],
        [-224, 192, -64],
        [224, 192, -64],
        [-224, -192, -32],
        [224, -192, -32],
        [-224, -160, -32],
        [224, -160, -32],
        [-224, -128, -32],
        [224, -128, -32],
        [-224, -96, -32],
        [224, -96, -32],
        [-224, -64, -32],
        [224, -64, -32],
        [-224, -32, -32],
        [224, -32, -32],
        [-224, 0, -32],
        [224, 0, -32],
        [-224, 32, -32],
        [224, 32, -32],
        [-224, 64, -32],
        [224, 64, -32],
        [-224, 96, -32],
        [224, 96, -32],
        [-224, 128, -32],
        [224, 128, -32],
        [-224, 160, -32],
        [224, 160, -32],
        [-224, 192, -32],
        [224, 192, -32],
        [-224, -192, 0],
        [224, -192, 0],
        [-224, -160, 0],
        [224, -160, 0],
        [-224, -128, 0],
        [224, -128, 0],
        [-224, -96, 0],
        [224, -96, 0],
        [-224, -64, 0],
        [224, -64, 0],
        [-224, -32, 0],
        [224, -32, 0],
        [-224, 0, 0],
        [224, 0, 0],
        [-224, 32, 0],
        [224, 32, 0],
        [-224, 64, 0],
        [224, 64, 0],
        [-224, 96, 0],
        [224, 96, 0],
        [-224, 128, 0],
        [224, 128, 0],
        [-224, 160, 0],
        [224, 160, 0],
        [-224, 192, 0],
        [224, 192, 0],
        [-224, -192, 32],
        [224, -192, 32],
        [-224, -160, 32],
        [224, -160, 32],
        [-224, -128, 32],
        [224, -128, 32],
        [-224, -96, 32],
        [224, -96, 32],
        [-224, -64, 32],
        [224, -64, 32],
        [-224, -32, 32],
        [224, -32, 32],
        [-224, 0, 32],
        [224, 0, 32],
        [-224, 32, 32],
        [224, 32, 32],
        [-224, 64, 32],
        [224, 64, 32],
        [-224, 96, 32],
        [224, 96, 32],
        [-224, 128, 32],
        [224, 128, 32],
        [-224, 160, 32],
        [224, 160, 32],
        [-224, 192, 32],
        [224, 192, 32],
        [-224, -192, 64],
        [224, -192, 64],
        [-224, -160, 64],
        [224, -160, 64],
        [-224, -128, 64],
        [224, -128, 64],
        [-224, -96, 64],
        [224, -96, 64],
        [-224, -64, 64],
        [224, -64, 64],
        [-224, -32, 64],
        [224, -32, 64],
        [-224, 0, 64],
        [224, 0, 64],
        [-224, 32, 64],
        [224, 32, 64],
        [-224, 64, 64],
        [224, 64, 64],
        [-224, 96, 64],
        [224, 96, 64],
        [-224, 128, 64],
        [224, 128, 64],
        [-224, 160, 64],
        [224, 160, 64],
        [-224, 192, 64],
        [224, 192, 64],
        [-224, -192, 96],
        [224, -192, 96],
        [-224, -160, 96],
        [224, -160, 96],
        [-224, -128, 96],
        [224, -128, 96],
        [-224, -96, 96],
        [224, -96, 96],
        [-224, -64, 96],
        [224, -64, 96],
        [-224, -32, 96],
        [224, -32, 96],
        [-224, 0, 96],
        [224, 0, 96],
        [-224, 32, 96],
        [224, 32, 96],
        [-224, 64, 96],
        [224, 64, 96],
        [-224, 96, 96],
        [224, 96, 96],
        [-224, 128, 96],
        [224, 128, 96],
        [-224, 160, 96],
        [224, 160, 96],
        [-224, 192, 96],
        [224, 192, 96],
        [-224, -192, 128],
        [224, -192, 128],
        [-224, -160, 128],
        [224, -160, 128],
        [-224, -128, 128],
        [224, -128, 128],
        [-224, -96, 128],
        [224, -96, 128],
        [-224, -64, 128],
        [224, -64, 128],
        [-224, -32, 128],
        [224, -32, 128],
        [-224, 0, 128],
        [224, 0, 128],
        [-224, 32, 128],
        [224, 32, 128],
        [-224, 64, 128],
        [224, 64, 128],
        [-224, 96, 128],
        [224, 96, 128],
        [-224, 128, 128],
        [224, 128, 128],
        [-224, 160, 128],
        [224, 160, 128],
        [-224, 192, 128],
        [224, 192, 128],
        [-224, -192, 160],
        [224, -192, 160],
        [-224, -160, 160],
        [224, -160, 160],
        [-224, -128, 160],
        [224, -128, 160],
        [-224, -96, 160],
        [224, -96, 160],
        [-224, -64, 160],
        [224, -64, 160],
        [-224, -32, 160],
        [224, -32, 160],
        [-224, 0, 160],
        [224, 0, 160],
        [-224, 32, 160],
        [224, 32, 160],
        [-224, 64, 160],
        [224, 64, 160],
        [-224, 96, 160],
        [224, 96, 160],
        [-224, 128, 160],
        [224, 128, 160],
        [-224, 160, 160],
        [224, 160, 160],
        [-224, 192, 160],
        [224, 192, 160],
        [-224, -192, 192],
        [224, -192, 192],
        [-224, -160, 192],
        [224, -160, 192],
        [-224, -128, 192],
        [224, -128, 192],
        [-224, -96, 192],
        [224, -96, 192],
        [-224, -64, 192],
        [224, -64, 192],
        [-224, -32, 192],
        [224, -32, 192],
        [-224, 0, 192],
        [224, 0, 192],
        [-224, 32, 192],
        [224, 32, 192],
        [-224, 64, 192],
        [224, 64, 192],
        [-224, 96, 192],
        [224, 96, 192],
        [-224, 128, 192],
        [224, 128, 192],
        [-224, 160, 192],
        [224, 160, 192],
        [-224, 192, 192],
        [224, 192, 192]],
    '8': [[-256, -256, -256],
        [-256, -256, 256],
        [-256, -224, -256],
        [-256, -224, 256],
        [-256, -192, -256],
        [-256, -192, 256],
        [-256, -160, -256],
        [-256, -160, 256],
        [-256, -128, -256],
        [-256, -128, 256],
        [-256, -96, -256],
        [-256, -96, 256],
        [-256, -64, -256],
        [-256, -64, 256],
        [-256, -32, -256],
        [-256, -32, 256],
        [-256, 0, -256],
        [-256, 0, 256],
        [-256, 32, -256],
        [-256, 32, 256],
        [-256, 64, -256],
        [-256, 64, 256],
        [-256, 96, -256],
        [-256, 96, 256],
        [-256, 128, -256],
        [-256, 128, 256],
        [-256, 160, -256],
        [-256, 160, 256],
        [-256, 192, -256],
        [-256, 192, 256],
        [-256, 224, -256],
        [-256, 224, 256],
        [-256, 256, -256],
        [-256, 256, 256],
        [-256, -256, -224],
        [-256, 256, -224],
        [-256, -256, -192],
        [-256, 256, -192],
        [-256, -256, -160],
        [-256, 256, -160],
        [-256, -256, -128],
        [-256, 256, -128],
        [-256, -256, -96],
        [-256, 256, -96],
        [-256, -256, -64],
        [-256, 256, -64],
        [-256, -256, -32],
        [-256, 256, -32],
        [-256, -256, 0],
        [-256, 256, 0],
        [-256, -256, 32],
        [-256, 256, 32],
        [-256, -256, 64],
        [-256, 256, 64],
        [-256, -256, 96],
        [-256, 256, 96],
        [-256, -256, 128],
        [-256, 256, 128],
        [-256, -256, 160],
        [-256, 256, 160],
        [-256, -256, 192],
        [-256, 256, 192],
        [-256, -256, 224],
        [-256, 256, 224],
        [-224, -256, -256],
        [-224, -256, 256],
        [-224, -224, -256],
        [-224, -224, 256],
        [-224, -192, -256],
        [-224, -192, 256],
        [-224, -160, -256],
        [-224, -160, 256],
        [-224, -128, -256],
        [-224, -128, 256],
        [-224, -96, -256],
        [-224, -96, 256],
        [-224, -64, -256],
        [-224, -64, 256],
        [-224, -32, -256],
        [-224, -32, 256],
        [-224, 0, -256],
        [-224, 0, 256],
        [-224, 32, -256],
        [-224, 32, 256],
        [-224, 64, -256],
        [-224, 64, 256],
        [-224, 96, -256],
        [-224, 96, 256],
        [-224, 128, -256],
        [-224, 128, 256],
        [-224, 160, -256],
        [-224, 160, 256],
        [-224, 192, -256],
        [-224, 192, 256],
        [-224, 224, -256],
        [-224, 224, 256],
        [-224, 256, -256],
        [-224, 256, 256],
        [-224, -256, -224],
        [-224, 256, -224],
        [-224, -256, -192],
        [-224, 256, -192],
        [-224, -256, -160],
        [-224, 256, -160],
        [-224, -256, -128],
        [-224, 256, -128],
        [-224, -256, -96],
        [-224, 256, -96],
        [-224, -256, -64],
        [-224, 256, -64],
        [-224, -256, -32],
        [-224, 256, -32],
        [-224, -256, 0],
        [-224, 256, 0],
        [-224, -256, 32],
        [-224, 256, 32],
        [-224, -256, 64],
        [-224, 256, 64],
        [-224, -256, 96],
        [-224, 256, 96],
        [-224, -256, 128],
        [-224, 256, 128],
        [-224, -256, 160],
        [-224, 256, 160],
        [-224, -256, 192],
        [-224, 256, 192],
        [-224, -256, 224],
        [-224, 256, 224],
        [-192, -256, -256],
        [-192, -256, 256],
        [-192, -224, -256],
        [-192, -224, 256],
        [-192, -192, -256],
        [-192, -192, 256],
        [-192, -160, -256],
        [-192, -160, 256],
        [-192, -128, -256],
        [-192, -128, 256],
        [-192, -96, -256],
        [-192, -96, 256],
        [-192, -64, -256],
        [-192, -64, 256],
        [-192, -32, -256],
        [-192, -32, 256],
        [-192, 0, -256],
        [-192, 0, 256],
        [-192, 32, -256],
        [-192, 32, 256],
        [-192, 64, -256],
        [-192, 64, 256],
        [-192, 96, -256],
        [-192, 96, 256],
        [-192, 128, -256],
        [-192, 128, 256],
        [-192, 160, -256],
        [-192, 160, 256],
        [-192, 192, -256],
        [-192, 192, 256],
        [-192, 224, -256],
        [-192, 224, 256],
        [-192, 256, -256],
        [-192, 256, 256],
        [-192, -256, -224],
        [-192, 256, -224],
        [-192, -256, -192],
        [-192, 256, -192],
        [-192, -256, -160],
        [-192, 256, -160],
        [-192, -256, -128],
        [-192, 256, -128],
        [-192, -256, -96],
        [-192, 256, -96],
        [-192, -256, -64],
        [-192, 256, -64],
        [-192, -256, -32],
        [-192, 256, -32],
        [-192, -256, 0],
        [-192, 256, 0],
        [-192, -256, 32],
        [-192, 256, 32],
        [-192, -256, 64],
        [-192, 256, 64],
        [-192, -256, 96],
        [-192, 256, 96],
        [-192, -256, 128],
        [-192, 256, 128],
        [-192, -256, 160],
        [-192, 256, 160],
        [-192, -256, 192],
        [-192, 256, 192],
        [-192, -256, 224],
        [-192, 256, 224],
        [-160, -256, -256],
        [-160, -256, 256],
        [-160, -224, -256],
        [-160, -224, 256],
        [-160, -192, -256],
        [-160, -192, 256],
        [-160, -160, -256],
        [-160, -160, 256],
        [-160, -128, -256],
        [-160, -128, 256],
        [-160, -96, -256],
        [-160, -96, 256],
        [-160, -64, -256],
        [-160, -64, 256],
        [-160, -32, -256],
        [-160, -32, 256],
        [-160, 0, -256],
        [-160, 0, 256],
        [-160, 32, -256],
        [-160, 32, 256],
        [-160, 64, -256],
        [-160, 64, 256],
        [-160, 96, -256],
        [-160, 96, 256],
        [-160, 128, -256],
        [-160, 128, 256],
        [-160, 160, -256],
        [-160, 160, 256],
        [-160, 192, -256],
        [-160, 192, 256],
        [-160, 224, -256],
        [-160, 224, 256],
        [-160, 256, -256],
        [-160, 256, 256],
        [-160, -256, -224],
        [-160, 256, -224],
        [-160, -256, -192],
        [-160, 256, -192],
        [-160, -256, -160],
        [-160, 256, -160],
        [-160, -256, -128],
        [-160, 256, -128],
        [-160, -256, -96],
        [-160, 256, -96],
        [-160, -256, -64],
        [-160, 256, -64],
        [-160, -256, -32],
        [-160, 256, -32],
        [-160, -256, 0],
        [-160, 256, 0],
        [-160, -256, 32],
        [-160, 256, 32],
        [-160, -256, 64],
        [-160, 256, 64],
        [-160, -256, 96],
        [-160, 256, 96],
        [-160, -256, 128],
        [-160, 256, 128],
        [-160, -256, 160],
        [-160, 256, 160],
        [-160, -256, 192],
        [-160, 256, 192],
        [-160, -256, 224],
        [-160, 256, 224],
        [-128, -256, -256],
        [-128, -256, 256],
        [-128, -224, -256],
        [-128, -224, 256],
        [-128, -192, -256],
        [-128, -192, 256],
        [-128, -160, -256],
        [-128, -160, 256],
        [-128, -128, -256],
        [-128, -128, 256],
        [-128, -96, -256],
        [-128, -96, 256],
        [-128, -64, -256],
        [-128, -64, 256],
        [-128, -32, -256],
        [-128, -32, 256],
        [-128, 0, -256],
        [-128, 0, 256],
        [-128, 32, -256],
        [-128, 32, 256],
        [-128, 64, -256],
        [-128, 64, 256],
        [-128, 96, -256],
        [-128, 96, 256],
        [-128, 128, -256],
        [-128, 128, 256],
        [-128, 160, -256],
        [-128, 160, 256],
        [-128, 192, -256],
        [-128, 192, 256],
        [-128, 224, -256],
        [-128, 224, 256],
        [-128, 256, -256],
        [-128, 256, 256],
        [-128, -256, -224],
        [-128, 256, -224],
        [-128, -256, -192],
        [-128, 256, -192],
        [-128, -256, -160],
        [-128, 256, -160],
        [-128, -256, -128],
        [-128, 256, -128],
        [-128, -256, -96],
        [-128, 256, -96],
        [-128, -256, -64],
        [-128, 256, -64],
        [-128, -256, -32],
        [-128, 256, -32],
        [-128, -256, 0],
        [-128, 256, 0],
        [-128, -256, 32],
        [-128, 256, 32],
        [-128, -256, 64],
        [-128, 256, 64],
        [-128, -256, 96],
        [-128, 256, 96],
        [-128, -256, 128],
        [-128, 256, 128],
        [-128, -256, 160],
        [-128, 256, 160],
        [-128, -256, 192],
        [-128, 256, 192],
        [-128, -256, 224],
        [-128, 256, 224],
        [-96, -256, -256],
        [-96, -256, 256],
        [-96, -224, -256],
        [-96, -224, 256],
        [-96, -192, -256],
        [-96, -192, 256],
        [-96, -160, -256],
        [-96, -160, 256],
        [-96, -128, -256],
        [-96, -128, 256],
        [-96, -96, -256],
        [-96, -96, 256],
        [-96, -64, -256],
        [-96, -64, 256],
        [-96, -32, -256],
        [-96, -32, 256],
        [-96, 0, -256],
        [-96, 0, 256],
        [-96, 32, -256],
        [-96, 32, 256],
        [-96, 64, -256],
        [-96, 64, 256],
        [-96, 96, -256],
        [-96, 96, 256],
        [-96, 128, -256],
        [-96, 128, 256],
        [-96, 160, -256],
        [-96, 160, 256],
        [-96, 192, -256],
        [-96, 192, 256],
        [-96, 224, -256],
        [-96, 224, 256],
        [-96, 256, -256],
        [-96, 256, 256],
        [-96, -256, -224],
        [-96, 256, -224],
        [-96, -256, -192],
        [-96, 256, -192],
        [-96, -256, -160],
        [-96, 256, -160],
        [-96, -256, -128],
        [-96, 256, -128],
        [-96, -256, -96],
        [-96, 256, -96],
        [-96, -256, -64],
        [-96, 256, -64],
        [-96, -256, -32],
        [-96, 256, -32],
        [-96, -256, 0],
        [-96, 256, 0],
        [-96, -256, 32],
        [-96, 256, 32],
        [-96, -256, 64],
        [-96, 256, 64],
        [-96, -256, 96],
        [-96, 256, 96],
        [-96, -256, 128],
        [-96, 256, 128],
        [-96, -256, 160],
        [-96, 256, 160],
        [-96, -256, 192],
        [-96, 256, 192],
        [-96, -256, 224],
        [-96, 256, 224],
        [-64, -256, -256],
        [-64, -256, 256],
        [-64, -224, -256],
        [-64, -224, 256],
        [-64, -192, -256],
        [-64, -192, 256],
        [-64, -160, -256],
        [-64, -160, 256],
        [-64, -128, -256],
        [-64, -128, 256],
        [-64, -96, -256],
        [-64, -96, 256],
        [-64, -64, -256],
        [-64, -64, 256],
        [-64, -32, -256],
        [-64, -32, 256],
        [-64, 0, -256],
        [-64, 0, 256],
        [-64, 32, -256],
        [-64, 32, 256],
        [-64, 64, -256],
        [-64, 64, 256],
        [-64, 96, -256],
        [-64, 96, 256],
        [-64, 128, -256],
        [-64, 128, 256],
        [-64, 160, -256],
        [-64, 160, 256],
        [-64, 192, -256],
        [-64, 192, 256],
        [-64, 224, -256],
        [-64, 224, 256],
        [-64, 256, -256],
        [-64, 256, 256],
        [-64, -256, -224],
        [-64, 256, -224],
        [-64, -256, -192],
        [-64, 256, -192],
        [-64, -256, -160],
        [-64, 256, -160],
        [-64, -256, -128],
        [-64, 256, -128],
        [-64, -256, -96],
        [-64, 256, -96],
        [-64, -256, -64],
        [-64, 256, -64],
        [-64, -256, -32],
        [-64, 256, -32],
        [-64, -256, 0],
        [-64, 256, 0],
        [-64, -256, 32],
        [-64, 256, 32],
        [-64, -256, 64],
        [-64, 256, 64],
        [-64, -256, 96],
        [-64, 256, 96],
        [-64, -256, 128],
        [-64, 256, 128],
        [-64, -256, 160],
        [-64, 256, 160],
        [-64, -256, 192],
        [-64, 256, 192],
        [-64, -256, 224],
        [-64, 256, 224],
        [-32, -256, -256],
        [-32, -256, 256],
        [-32, -224, -256],
        [-32, -224, 256],
        [-32, -192, -256],
        [-32, -192, 256],
        [-32, -160, -256],
        [-32, -160, 256],
        [-32, -128, -256],
        [-32, -128, 256],
        [-32, -96, -256],
        [-32, -96, 256],
        [-32, -64, -256],
        [-32, -64, 256],
        [-32, -32, -256],
        [-32, -32, 256],
        [-32, 0, -256],
        [-32, 0, 256],
        [-32, 32, -256],
        [-32, 32, 256],
        [-32, 64, -256],
        [-32, 64, 256],
        [-32, 96, -256],
        [-32, 96, 256],
        [-32, 128, -256],
        [-32, 128, 256],
        [-32, 160, -256],
        [-32, 160, 256],
        [-32, 192, -256],
        [-32, 192, 256],
        [-32, 224, -256],
        [-32, 224, 256],
        [-32, 256, -256],
        [-32, 256, 256],
        [-32, -256, -224],
        [-32, 256, -224],
        [-32, -256, -192],
        [-32, 256, -192],
        [-32, -256, -160],
        [-32, 256, -160],
        [-32, -256, -128],
        [-32, 256, -128],
        [-32, -256, -96],
        [-32, 256, -96],
        [-32, -256, -64],
        [-32, 256, -64],
        [-32, -256, -32],
        [-32, 256, -32],
        [-32, -256, 0],
        [-32, 256, 0],
        [-32, -256, 32],
        [-32, 256, 32],
        [-32, -256, 64],
        [-32, 256, 64],
        [-32, -256, 96],
        [-32, 256, 96],
        [-32, -256, 128],
        [-32, 256, 128],
        [-32, -256, 160],
        [-32, 256, 160],
        [-32, -256, 192],
        [-32, 256, 192],
        [-32, -256, 224],
        [-32, 256, 224],
        [0, -256, -256],
        [0, -256, 256],
        [0, -224, -256],
        [0, -224, 256],
        [0, -192, -256],
        [0, -192, 256],
        [0, -160, -256],
        [0, -160, 256],
        [0, -128, -256],
        [0, -128, 256],
        [0, -96, -256],
        [0, -96, 256],
        [0, -64, -256],
        [0, -64, 256],
        [0, -32, -256],
        [0, -32, 256],
        [0, 0, -256],
        [0, 0, 256],
        [0, 32, -256],
        [0, 32, 256],
        [0, 64, -256],
        [0, 64, 256],
        [0, 96, -256],
        [0, 96, 256],
        [0, 128, -256],
        [0, 128, 256],
        [0, 160, -256],
        [0, 160, 256],
        [0, 192, -256],
        [0, 192, 256],
        [0, 224, -256],
        [0, 224, 256],
        [0, 256, -256],
        [0, 256, 256],
        [0, -256, -224],
        [0, 256, -224],
        [0, -256, -192],
        [0, 256, -192],
        [0, -256, -160],
        [0, 256, -160],
        [0, -256, -128],
        [0, 256, -128],
        [0, -256, -96],
        [0, 256, -96],
        [0, -256, -64],
        [0, 256, -64],
        [0, -256, -32],
        [0, 256, -32],
        [0, -256, 0],
        [0, 256, 0],
        [0, -256, 32],
        [0, 256, 32],
        [0, -256, 64],
        [0, 256, 64],
        [0, -256, 96],
        [0, 256, 96],
        [0, -256, 128],
        [0, 256, 128],
        [0, -256, 160],
        [0, 256, 160],
        [0, -256, 192],
        [0, 256, 192],
        [0, -256, 224],
        [0, 256, 224],
        [32, -256, -256],
        [32, -256, 256],
        [32, -224, -256],
        [32, -224, 256],
        [32, -192, -256],
        [32, -192, 256],
        [32, -160, -256],
        [32, -160, 256],
        [32, -128, -256],
        [32, -128, 256],
        [32, -96, -256],
        [32, -96, 256],
        [32, -64, -256],
        [32, -64, 256],
        [32, -32, -256],
        [32, -32, 256],
        [32, 0, -256],
        [32, 0, 256],
        [32, 32, -256],
        [32, 32, 256],
        [32, 64, -256],
        [32, 64, 256],
        [32, 96, -256],
        [32, 96, 256],
        [32, 128, -256],
        [32, 128, 256],
        [32, 160, -256],
        [32, 160, 256],
        [32, 192, -256],
        [32, 192, 256],
        [32, 224, -256],
        [32, 224, 256],
        [32, 256, -256],
        [32, 256, 256],
        [32, -256, -224],
        [32, 256, -224],
        [32, -256, -192],
        [32, 256, -192],
        [32, -256, -160],
        [32, 256, -160],
        [32, -256, -128],
        [32, 256, -128],
        [32, -256, -96],
        [32, 256, -96],
        [32, -256, -64],
        [32, 256, -64],
        [32, -256, -32],
        [32, 256, -32],
        [32, -256, 0],
        [32, 256, 0],
        [32, -256, 32],
        [32, 256, 32],
        [32, -256, 64],
        [32, 256, 64],
        [32, -256, 96],
        [32, 256, 96],
        [32, -256, 128],
        [32, 256, 128],
        [32, -256, 160],
        [32, 256, 160],
        [32, -256, 192],
        [32, 256, 192],
        [32, -256, 224],
        [32, 256, 224],
        [64, -256, -256],
        [64, -256, 256],
        [64, -224, -256],
        [64, -224, 256],
        [64, -192, -256],
        [64, -192, 256],
        [64, -160, -256],
        [64, -160, 256],
        [64, -128, -256],
        [64, -128, 256],
        [64, -96, -256],
        [64, -96, 256],
        [64, -64, -256],
        [64, -64, 256],
        [64, -32, -256],
        [64, -32, 256],
        [64, 0, -256],
        [64, 0, 256],
        [64, 32, -256],
        [64, 32, 256],
        [64, 64, -256],
        [64, 64, 256],
        [64, 96, -256],
        [64, 96, 256],
        [64, 128, -256],
        [64, 128, 256],
        [64, 160, -256],
        [64, 160, 256],
        [64, 192, -256],
        [64, 192, 256],
        [64, 224, -256],
        [64, 224, 256],
        [64, 256, -256],
        [64, 256, 256],
        [64, -256, -224],
        [64, 256, -224],
        [64, -256, -192],
        [64, 256, -192],
        [64, -256, -160],
        [64, 256, -160],
        [64, -256, -128],
        [64, 256, -128],
        [64, -256, -96],
        [64, 256, -96],
        [64, -256, -64],
        [64, 256, -64],
        [64, -256, -32],
        [64, 256, -32],
        [64, -256, 0],
        [64, 256, 0],
        [64, -256, 32],
        [64, 256, 32],
        [64, -256, 64],
        [64, 256, 64],
        [64, -256, 96],
        [64, 256, 96],
        [64, -256, 128],
        [64, 256, 128],
        [64, -256, 160],
        [64, 256, 160],
        [64, -256, 192],
        [64, 256, 192],
        [64, -256, 224],
        [64, 256, 224],
        [96, -256, -256],
        [96, -256, 256],
        [96, -224, -256],
        [96, -224, 256],
        [96, -192, -256],
        [96, -192, 256],
        [96, -160, -256],
        [96, -160, 256],
        [96, -128, -256],
        [96, -128, 256],
        [96, -96, -256],
        [96, -96, 256],
        [96, -64, -256],
        [96, -64, 256],
        [96, -32, -256],
        [96, -32, 256],
        [96, 0, -256],
        [96, 0, 256],
        [96, 32, -256],
        [96, 32, 256],
        [96, 64, -256],
        [96, 64, 256],
        [96, 96, -256],
        [96, 96, 256],
        [96, 128, -256],
        [96, 128, 256],
        [96, 160, -256],
        [96, 160, 256],
        [96, 192, -256],
        [96, 192, 256],
        [96, 224, -256],
        [96, 224, 256],
        [96, 256, -256],
        [96, 256, 256],
        [96, -256, -224],
        [96, 256, -224],
        [96, -256, -192],
        [96, 256, -192],
        [96, -256, -160],
        [96, 256, -160],
        [96, -256, -128],
        [96, 256, -128],
        [96, -256, -96],
        [96, 256, -96],
        [96, -256, -64],
        [96, 256, -64],
        [96, -256, -32],
        [96, 256, -32],
        [96, -256, 0],
        [96, 256, 0],
        [96, -256, 32],
        [96, 256, 32],
        [96, -256, 64],
        [96, 256, 64],
        [96, -256, 96],
        [96, 256, 96],
        [96, -256, 128],
        [96, 256, 128],
        [96, -256, 160],
        [96, 256, 160],
        [96, -256, 192],
        [96, 256, 192],
        [96, -256, 224],
        [96, 256, 224],
        [128, -256, -256],
        [128, -256, 256],
        [128, -224, -256],
        [128, -224, 256],
        [128, -192, -256],
        [128, -192, 256],
        [128, -160, -256],
        [128, -160, 256],
        [128, -128, -256],
        [128, -128, 256],
        [128, -96, -256],
        [128, -96, 256],
        [128, -64, -256],
        [128, -64, 256],
        [128, -32, -256],
        [128, -32, 256],
        [128, 0, -256],
        [128, 0, 256],
        [128, 32, -256],
        [128, 32, 256],
        [128, 64, -256],
        [128, 64, 256],
        [128, 96, -256],
        [128, 96, 256],
        [128, 128, -256],
        [128, 128, 256],
        [128, 160, -256],
        [128, 160, 256],
        [128, 192, -256],
        [128, 192, 256],
        [128, 224, -256],
        [128, 224, 256],
        [128, 256, -256],
        [128, 256, 256],
        [128, -256, -224],
        [128, 256, -224],
        [128, -256, -192],
        [128, 256, -192],
        [128, -256, -160],
        [128, 256, -160],
        [128, -256, -128],
        [128, 256, -128],
        [128, -256, -96],
        [128, 256, -96],
        [128, -256, -64],
        [128, 256, -64],
        [128, -256, -32],
        [128, 256, -32],
        [128, -256, 0],
        [128, 256, 0],
        [128, -256, 32],
        [128, 256, 32],
        [128, -256, 64],
        [128, 256, 64],
        [128, -256, 96],
        [128, 256, 96],
        [128, -256, 128],
        [128, 256, 128],
        [128, -256, 160],
        [128, 256, 160],
        [128, -256, 192],
        [128, 256, 192],
        [128, -256, 224],
        [128, 256, 224],
        [160, -256, -256],
        [160, -256, 256],
        [160, -224, -256],
        [160, -224, 256],
        [160, -192, -256],
        [160, -192, 256],
        [160, -160, -256],
        [160, -160, 256],
        [160, -128, -256],
        [160, -128, 256],
        [160, -96, -256],
        [160, -96, 256],
        [160, -64, -256],
        [160, -64, 256],
        [160, -32, -256],
        [160, -32, 256],
        [160, 0, -256],
        [160, 0, 256],
        [160, 32, -256],
        [160, 32, 256],
        [160, 64, -256],
        [160, 64, 256],
        [160, 96, -256],
        [160, 96, 256],
        [160, 128, -256],
        [160, 128, 256],
        [160, 160, -256],
        [160, 160, 256],
        [160, 192, -256],
        [160, 192, 256],
        [160, 224, -256],
        [160, 224, 256],
        [160, 256, -256],
        [160, 256, 256],
        [160, -256, -224],
        [160, 256, -224],
        [160, -256, -192],
        [160, 256, -192],
        [160, -256, -160],
        [160, 256, -160],
        [160, -256, -128],
        [160, 256, -128],
        [160, -256, -96],
        [160, 256, -96],
        [160, -256, -64],
        [160, 256, -64],
        [160, -256, -32],
        [160, 256, -32],
        [160, -256, 0],
        [160, 256, 0],
        [160, -256, 32],
        [160, 256, 32],
        [160, -256, 64],
        [160, 256, 64],
        [160, -256, 96],
        [160, 256, 96],
        [160, -256, 128],
        [160, 256, 128],
        [160, -256, 160],
        [160, 256, 160],
        [160, -256, 192],
        [160, 256, 192],
        [160, -256, 224],
        [160, 256, 224],
        [192, -256, -256],
        [192, -256, 256],
        [192, -224, -256],
        [192, -224, 256],
        [192, -192, -256],
        [192, -192, 256],
        [192, -160, -256],
        [192, -160, 256],
        [192, -128, -256],
        [192, -128, 256],
        [192, -96, -256],
        [192, -96, 256],
        [192, -64, -256],
        [192, -64, 256],
        [192, -32, -256],
        [192, -32, 256],
        [192, 0, -256],
        [192, 0, 256],
        [192, 32, -256],
        [192, 32, 256],
        [192, 64, -256],
        [192, 64, 256],
        [192, 96, -256],
        [192, 96, 256],
        [192, 128, -256],
        [192, 128, 256],
        [192, 160, -256],
        [192, 160, 256],
        [192, 192, -256],
        [192, 192, 256],
        [192, 224, -256],
        [192, 224, 256],
        [192, 256, -256],
        [192, 256, 256],
        [192, -256, -224],
        [192, 256, -224],
        [192, -256, -192],
        [192, 256, -192],
        [192, -256, -160],
        [192, 256, -160],
        [192, -256, -128],
        [192, 256, -128],
        [192, -256, -96],
        [192, 256, -96],
        [192, -256, -64],
        [192, 256, -64],
        [192, -256, -32],
        [192, 256, -32],
        [192, -256, 0],
        [192, 256, 0],
        [192, -256, 32],
        [192, 256, 32],
        [192, -256, 64],
        [192, 256, 64],
        [192, -256, 96],
        [192, 256, 96],
        [192, -256, 128],
        [192, 256, 128],
        [192, -256, 160],
        [192, 256, 160],
        [192, -256, 192],
        [192, 256, 192],
        [192, -256, 224],
        [192, 256, 224],
        [224, -256, -256],
        [224, -256, 256],
        [224, -224, -256],
        [224, -224, 256],
        [224, -192, -256],
        [224, -192, 256],
        [224, -160, -256],
        [224, -160, 256],
        [224, -128, -256],
        [224, -128, 256],
        [224, -96, -256],
        [224, -96, 256],
        [224, -64, -256],
        [224, -64, 256],
        [224, -32, -256],
        [224, -32, 256],
        [224, 0, -256],
        [224, 0, 256],
        [224, 32, -256],
        [224, 32, 256],
        [224, 64, -256],
        [224, 64, 256],
        [224, 96, -256],
        [224, 96, 256],
        [224, 128, -256],
        [224, 128, 256],
        [224, 160, -256],
        [224, 160, 256],
        [224, 192, -256],
        [224, 192, 256],
        [224, 224, -256],
        [224, 224, 256],
        [224, 256, -256],
        [224, 256, 256],
        [224, -256, -224],
        [224, 256, -224],
        [224, -256, -192],
        [224, 256, -192],
        [224, -256, -160],
        [224, 256, -160],
        [224, -256, -128],
        [224, 256, -128],
        [224, -256, -96],
        [224, 256, -96],
        [224, -256, -64],
        [224, 256, -64],
        [224, -256, -32],
        [224, 256, -32],
        [224, -256, 0],
        [224, 256, 0],
        [224, -256, 32],
        [224, 256, 32],
        [224, -256, 64],
        [224, 256, 64],
        [224, -256, 96],
        [224, 256, 96],
        [224, -256, 128],
        [224, 256, 128],
        [224, -256, 160],
        [224, 256, 160],
        [224, -256, 192],
        [224, 256, 192],
        [224, -256, 224],
        [224, 256, 224],
        [256, -256, -256],
        [256, -256, 256],
        [256, -224, -256],
        [256, -224, 256],
        [256, -192, -256],
        [256, -192, 256],
        [256, -160, -256],
        [256, -160, 256],
        [256, -128, -256],
        [256, -128, 256],
        [256, -96, -256],
        [256, -96, 256],
        [256, -64, -256],
        [256, -64, 256],
        [256, -32, -256],
        [256, -32, 256],
        [256, 0, -256],
        [256, 0, 256],
        [256, 32, -256],
        [256, 32, 256],
        [256, 64, -256],
        [256, 64, 256],
        [256, 96, -256],
        [256, 96, 256],
        [256, 128, -256],
        [256, 128, 256],
        [256, 160, -256],
        [256, 160, 256],
        [256, 192, -256],
        [256, 192, 256],
        [256, 224, -256],
        [256, 224, 256],
        [256, 256, -256],
        [256, 256, 256],
        [256, -256, -224],
        [256, 256, -224],
        [256, -256, -192],
        [256, 256, -192],
        [256, -256, -160],
        [256, 256, -160],
        [256, -256, -128],
        [256, 256, -128],
        [256, -256, -96],
        [256, 256, -96],
        [256, -256, -64],
        [256, 256, -64],
        [256, -256, -32],
        [256, 256, -32],
        [256, -256, 0],
        [256, 256, 0],
        [256, -256, 32],
        [256, 256, 32],
        [256, -256, 64],
        [256, 256, 64],
        [256, -256, 96],
        [256, 256, 96],
        [256, -256, 128],
        [256, 256, 128],
        [256, -256, 160],
        [256, 256, 160],
        [256, -256, 192],
        [256, 256, 192],
        [256, -256, 224],
        [256, 256, 224],
        [-256, -224, -224],
        [256, -224, -224],
        [-256, -192, -224],
        [256, -192, -224],
        [-256, -160, -224],
        [256, -160, -224],
        [-256, -128, -224],
        [256, -128, -224],
        [-256, -96, -224],
        [256, -96, -224],
        [-256, -64, -224],
        [256, -64, -224],
        [-256, -32, -224],
        [256, -32, -224],
        [-256, 0, -224],
        [256, 0, -224],
        [-256, 32, -224],
        [256, 32, -224],
        [-256, 64, -224],
        [256, 64, -224],
        [-256, 96, -224],
        [256, 96, -224],
        [-256, 128, -224],
        [256, 128, -224],
        [-256, 160, -224],
        [256, 160, -224],
        [-256, 192, -224],
        [256, 192, -224],
        [-256, 224, -224],
        [256, 224, -224],
        [-256, -224, -192],
        [256, -224, -192],
        [-256, -192, -192],
        [256, -192, -192],
        [-256, -160, -192],
        [256, -160, -192],
        [-256, -128, -192],
        [256, -128, -192],
        [-256, -96, -192],
        [256, -96, -192],
        [-256, -64, -192],
        [256, -64, -192],
        [-256, -32, -192],
        [256, -32, -192],
        [-256, 0, -192],
        [256, 0, -192],
        [-256, 32, -192],
        [256, 32, -192],
        [-256, 64, -192],
        [256, 64, -192],
        [-256, 96, -192],
        [256, 96, -192],
        [-256, 128, -192],
        [256, 128, -192],
        [-256, 160, -192],
        [256, 160, -192],
        [-256, 192, -192],
        [256, 192, -192],
        [-256, 224, -192],
        [256, 224, -192],
        [-256, -224, -160],
        [256, -224, -160],
        [-256, -192, -160],
        [256, -192, -160],
        [-256, -160, -160],
        [256, -160, -160],
        [-256, -128, -160],
        [256, -128, -160],
        [-256, -96, -160],
        [256, -96, -160],
        [-256, -64, -160],
        [256, -64, -160],
        [-256, -32, -160],
        [256, -32, -160],
        [-256, 0, -160],
        [256, 0, -160],
        [-256, 32, -160],
        [256, 32, -160],
        [-256, 64, -160],
        [256, 64, -160],
        [-256, 96, -160],
        [256, 96, -160],
        [-256, 128, -160],
        [256, 128, -160],
        [-256, 160, -160],
        [256, 160, -160],
        [-256, 192, -160],
        [256, 192, -160],
        [-256, 224, -160],
        [256, 224, -160],
        [-256, -224, -128],
        [256, -224, -128],
        [-256, -192, -128],
        [256, -192, -128],
        [-256, -160, -128],
        [256, -160, -128],
        [-256, -128, -128],
        [256, -128, -128],
        [-256, -96, -128],
        [256, -96, -128],
        [-256, -64, -128],
        [256, -64, -128],
        [-256, -32, -128],
        [256, -32, -128],
        [-256, 0, -128],
        [256, 0, -128],
        [-256, 32, -128],
        [256, 32, -128],
        [-256, 64, -128],
        [256, 64, -128],
        [-256, 96, -128],
        [256, 96, -128],
        [-256, 128, -128],
        [256, 128, -128],
        [-256, 160, -128],
        [256, 160, -128],
        [-256, 192, -128],
        [256, 192, -128],
        [-256, 224, -128],
        [256, 224, -128],
        [-256, -224, -96],
        [256, -224, -96],
        [-256, -192, -96],
        [256, -192, -96],
        [-256, -160, -96],
        [256, -160, -96],
        [-256, -128, -96],
        [256, -128, -96],
        [-256, -96, -96],
        [256, -96, -96],
        [-256, -64, -96],
        [256, -64, -96],
        [-256, -32, -96],
        [256, -32, -96],
        [-256, 0, -96],
        [256, 0, -96],
        [-256, 32, -96],
        [256, 32, -96],
        [-256, 64, -96],
        [256, 64, -96],
        [-256, 96, -96],
        [256, 96, -96],
        [-256, 128, -96],
        [256, 128, -96],
        [-256, 160, -96],
        [256, 160, -96],
        [-256, 192, -96],
        [256, 192, -96],
        [-256, 224, -96],
        [256, 224, -96],
        [-256, -224, -64],
        [256, -224, -64],
        [-256, -192, -64],
        [256, -192, -64],
        [-256, -160, -64],
        [256, -160, -64],
        [-256, -128, -64],
        [256, -128, -64],
        [-256, -96, -64],
        [256, -96, -64],
        [-256, -64, -64],
        [256, -64, -64],
        [-256, -32, -64],
        [256, -32, -64],
        [-256, 0, -64],
        [256, 0, -64],
        [-256, 32, -64],
        [256, 32, -64],
        [-256, 64, -64],
        [256, 64, -64],
        [-256, 96, -64],
        [256, 96, -64],
        [-256, 128, -64],
        [256, 128, -64],
        [-256, 160, -64],
        [256, 160, -64],
        [-256, 192, -64],
        [256, 192, -64],
        [-256, 224, -64],
        [256, 224, -64],
        [-256, -224, -32],
        [256, -224, -32],
        [-256, -192, -32],
        [256, -192, -32],
        [-256, -160, -32],
        [256, -160, -32],
        [-256, -128, -32],
        [256, -128, -32],
        [-256, -96, -32],
        [256, -96, -32],
        [-256, -64, -32],
        [256, -64, -32],
        [-256, -32, -32],
        [256, -32, -32],
        [-256, 0, -32],
        [256, 0, -32],
        [-256, 32, -32],
        [256, 32, -32],
        [-256, 64, -32],
        [256, 64, -32],
        [-256, 96, -32],
        [256, 96, -32],
        [-256, 128, -32],
        [256, 128, -32],
        [-256, 160, -32],
        [256, 160, -32],
        [-256, 192, -32],
        [256, 192, -32],
        [-256, 224, -32],
        [256, 224, -32],
        [-256, -224, 0],
        [256, -224, 0],
        [-256, -192, 0],
        [256, -192, 0],
        [-256, -160, 0],
        [256, -160, 0],
        [-256, -128, 0],
        [256, -128, 0],
        [-256, -96, 0],
        [256, -96, 0],
        [-256, -64, 0],
        [256, -64, 0],
        [-256, -32, 0],
        [256, -32, 0],
        [-256, 0, 0],
        [256, 0, 0],
        [-256, 32, 0],
        [256, 32, 0],
        [-256, 64, 0],
        [256, 64, 0],
        [-256, 96, 0],
        [256, 96, 0],
        [-256, 128, 0],
        [256, 128, 0],
        [-256, 160, 0],
        [256, 160, 0],
        [-256, 192, 0],
        [256, 192, 0],
        [-256, 224, 0],
        [256, 224, 0],
        [-256, -224, 32],
        [256, -224, 32],
        [-256, -192, 32],
        [256, -192, 32],
        [-256, -160, 32],
        [256, -160, 32],
        [-256, -128, 32],
        [256, -128, 32],
        [-256, -96, 32],
        [256, -96, 32],
        [-256, -64, 32],
        [256, -64, 32],
        [-256, -32, 32],
        [256, -32, 32],
        [-256, 0, 32],
        [256, 0, 32],
        [-256, 32, 32],
        [256, 32, 32],
        [-256, 64, 32],
        [256, 64, 32],
        [-256, 96, 32],
        [256, 96, 32],
        [-256, 128, 32],
        [256, 128, 32],
        [-256, 160, 32],
        [256, 160, 32],
        [-256, 192, 32],
        [256, 192, 32],
        [-256, 224, 32],
        [256, 224, 32],
        [-256, -224, 64],
        [256, -224, 64],
        [-256, -192, 64],
        [256, -192, 64],
        [-256, -160, 64],
        [256, -160, 64],
        [-256, -128, 64],
        [256, -128, 64],
        [-256, -96, 64],
        [256, -96, 64],
        [-256, -64, 64],
        [256, -64, 64],
        [-256, -32, 64],
        [256, -32, 64],
        [-256, 0, 64],
        [256, 0, 64],
        [-256, 32, 64],
        [256, 32, 64],
        [-256, 64, 64],
        [256, 64, 64],
        [-256, 96, 64],
        [256, 96, 64],
        [-256, 128, 64],
        [256, 128, 64],
        [-256, 160, 64],
        [256, 160, 64],
        [-256, 192, 64],
        [256, 192, 64],
        [-256, 224, 64],
        [256, 224, 64],
        [-256, -224, 96],
        [256, -224, 96],
        [-256, -192, 96],
        [256, -192, 96],
        [-256, -160, 96],
        [256, -160, 96],
        [-256, -128, 96],
        [256, -128, 96],
        [-256, -96, 96],
        [256, -96, 96],
        [-256, -64, 96],
        [256, -64, 96],
        [-256, -32, 96],
        [256, -32, 96],
        [-256, 0, 96],
        [256, 0, 96],
        [-256, 32, 96],
        [256, 32, 96],
        [-256, 64, 96],
        [256, 64, 96],
        [-256, 96, 96],
        [256, 96, 96],
        [-256, 128, 96],
        [256, 128, 96],
        [-256, 160, 96],
        [256, 160, 96],
        [-256, 192, 96],
        [256, 192, 96],
        [-256, 224, 96],
        [256, 224, 96],
        [-256, -224, 128],
        [256, -224, 128],
        [-256, -192, 128],
        [256, -192, 128],
        [-256, -160, 128],
        [256, -160, 128],
        [-256, -128, 128],
        [256, -128, 128],
        [-256, -96, 128],
        [256, -96, 128],
        [-256, -64, 128],
        [256, -64, 128],
        [-256, -32, 128],
        [256, -32, 128],
        [-256, 0, 128],
        [256, 0, 128],
        [-256, 32, 128],
        [256, 32, 128],
        [-256, 64, 128],
        [256, 64, 128],
        [-256, 96, 128],
        [256, 96, 128],
        [-256, 128, 128],
        [256, 128, 128],
        [-256, 160, 128],
        [256, 160, 128],
        [-256, 192, 128],
        [256, 192, 128],
        [-256, 224, 128],
        [256, 224, 128],
        [-256, -224, 160],
        [256, -224, 160],
        [-256, -192, 160],
        [256, -192, 160],
        [-256, -160, 160],
        [256, -160, 160],
        [-256, -128, 160],
        [256, -128, 160],
        [-256, -96, 160],
        [256, -96, 160],
        [-256, -64, 160],
        [256, -64, 160],
        [-256, -32, 160],
        [256, -32, 160],
        [-256, 0, 160],
        [256, 0, 160],
        [-256, 32, 160],
        [256, 32, 160],
        [-256, 64, 160],
        [256, 64, 160],
        [-256, 96, 160],
        [256, 96, 160],
        [-256, 128, 160],
        [256, 128, 160],
        [-256, 160, 160],
        [256, 160, 160],
        [-256, 192, 160],
        [256, 192, 160],
        [-256, 224, 160],
        [256, 224, 160],
        [-256, -224, 192],
        [256, -224, 192],
        [-256, -192, 192],
        [256, -192, 192],
        [-256, -160, 192],
        [256, -160, 192],
        [-256, -128, 192],
        [256, -128, 192],
        [-256, -96, 192],
        [256, -96, 192],
        [-256, -64, 192],
        [256, -64, 192],
        [-256, -32, 192],
        [256, -32, 192],
        [-256, 0, 192],
        [256, 0, 192],
        [-256, 32, 192],
        [256, 32, 192],
        [-256, 64, 192],
        [256, 64, 192],
        [-256, 96, 192],
        [256, 96, 192],
        [-256, 128, 192],
        [256, 128, 192],
        [-256, 160, 192],
        [256, 160, 192],
        [-256, 192, 192],
        [256, 192, 192],
        [-256, 224, 192],
        [256, 224, 192],
        [-256, -224, 224],
        [256, -224, 224],
        [-256, -192, 224],
        [256, -192, 224],
        [-256, -160, 224],
        [256, -160, 224],
        [-256, -128, 224],
        [256, -128, 224],
        [-256, -96, 224],
        [256, -96, 224],
        [-256, -64, 224],
        [256, -64, 224],
        [-256, -32, 224],
        [256, -32, 224],
        [-256, 0, 224],
        [256, 0, 224],
        [-256, 32, 224],
        [256, 32, 224],
        [-256, 64, 224],
        [256, 64, 224],
        [-256, 96, 224],
        [256, 96, 224],
        [-256, 128, 224],
        [256, 128, 224],
        [-256, 160, 224],
        [256, 160, 224],
        [-256, 192, 224],
        [256, 192, 224],
        [-256, 224, 224],
        [256, 224, 224]],
    '9': [[-288, -288, -288],
        [-288, -288, 288],
        [-288, -256, -288],
        [-288, -256, 288],
        [-288, -224, -288],
        [-288, -224, 288],
        [-288, -192, -288],
        [-288, -192, 288],
        [-288, -160, -288],
        [-288, -160, 288],
        [-288, -128, -288],
        [-288, -128, 288],
        [-288, -96, -288],
        [-288, -96, 288],
        [-288, -64, -288],
        [-288, -64, 288],
        [-288, -32, -288],
        [-288, -32, 288],
        [-288, 0, -288],
        [-288, 0, 288],
        [-288, 32, -288],
        [-288, 32, 288],
        [-288, 64, -288],
        [-288, 64, 288],
        [-288, 96, -288],
        [-288, 96, 288],
        [-288, 128, -288],
        [-288, 128, 288],
        [-288, 160, -288],
        [-288, 160, 288],
        [-288, 192, -288],
        [-288, 192, 288],
        [-288, 224, -288],
        [-288, 224, 288],
        [-288, 256, -288],
        [-288, 256, 288],
        [-288, 288, -288],
        [-288, 288, 288],
        [-288, -288, -256],
        [-288, 288, -256],
        [-288, -288, -224],
        [-288, 288, -224],
        [-288, -288, -192],
        [-288, 288, -192],
        [-288, -288, -160],
        [-288, 288, -160],
        [-288, -288, -128],
        [-288, 288, -128],
        [-288, -288, -96],
        [-288, 288, -96],
        [-288, -288, -64],
        [-288, 288, -64],
        [-288, -288, -32],
        [-288, 288, -32],
        [-288, -288, 0],
        [-288, 288, 0],
        [-288, -288, 32],
        [-288, 288, 32],
        [-288, -288, 64],
        [-288, 288, 64],
        [-288, -288, 96],
        [-288, 288, 96],
        [-288, -288, 128],
        [-288, 288, 128],
        [-288, -288, 160],
        [-288, 288, 160],
        [-288, -288, 192],
        [-288, 288, 192],
        [-288, -288, 224],
        [-288, 288, 224],
        [-288, -288, 256],
        [-288, 288, 256],
        [-256, -288, -288],
        [-256, -288, 288],
        [-256, -256, -288],
        [-256, -256, 288],
        [-256, -224, -288],
        [-256, -224, 288],
        [-256, -192, -288],
        [-256, -192, 288],
        [-256, -160, -288],
        [-256, -160, 288],
        [-256, -128, -288],
        [-256, -128, 288],
        [-256, -96, -288],
        [-256, -96, 288],
        [-256, -64, -288],
        [-256, -64, 288],
        [-256, -32, -288],
        [-256, -32, 288],
        [-256, 0, -288],
        [-256, 0, 288],
        [-256, 32, -288],
        [-256, 32, 288],
        [-256, 64, -288],
        [-256, 64, 288],
        [-256, 96, -288],
        [-256, 96, 288],
        [-256, 128, -288],
        [-256, 128, 288],
        [-256, 160, -288],
        [-256, 160, 288],
        [-256, 192, -288],
        [-256, 192, 288],
        [-256, 224, -288],
        [-256, 224, 288],
        [-256, 256, -288],
        [-256, 256, 288],
        [-256, 288, -288],
        [-256, 288, 288],
        [-256, -288, -256],
        [-256, 288, -256],
        [-256, -288, -224],
        [-256, 288, -224],
        [-256, -288, -192],
        [-256, 288, -192],
        [-256, -288, -160],
        [-256, 288, -160],
        [-256, -288, -128],
        [-256, 288, -128],
        [-256, -288, -96],
        [-256, 288, -96],
        [-256, -288, -64],
        [-256, 288, -64],
        [-256, -288, -32],
        [-256, 288, -32],
        [-256, -288, 0],
        [-256, 288, 0],
        [-256, -288, 32],
        [-256, 288, 32],
        [-256, -288, 64],
        [-256, 288, 64],
        [-256, -288, 96],
        [-256, 288, 96],
        [-256, -288, 128],
        [-256, 288, 128],
        [-256, -288, 160],
        [-256, 288, 160],
        [-256, -288, 192],
        [-256, 288, 192],
        [-256, -288, 224],
        [-256, 288, 224],
        [-256, -288, 256],
        [-256, 288, 256],
        [-224, -288, -288],
        [-224, -288, 288],
        [-224, -256, -288],
        [-224, -256, 288],
        [-224, -224, -288],
        [-224, -224, 288],
        [-224, -192, -288],
        [-224, -192, 288],
        [-224, -160, -288],
        [-224, -160, 288],
        [-224, -128, -288],
        [-224, -128, 288],
        [-224, -96, -288],
        [-224, -96, 288],
        [-224, -64, -288],
        [-224, -64, 288],
        [-224, -32, -288],
        [-224, -32, 288],
        [-224, 0, -288],
        [-224, 0, 288],
        [-224, 32, -288],
        [-224, 32, 288],
        [-224, 64, -288],
        [-224, 64, 288],
        [-224, 96, -288],
        [-224, 96, 288],
        [-224, 128, -288],
        [-224, 128, 288],
        [-224, 160, -288],
        [-224, 160, 288],
        [-224, 192, -288],
        [-224, 192, 288],
        [-224, 224, -288],
        [-224, 224, 288],
        [-224, 256, -288],
        [-224, 256, 288],
        [-224, 288, -288],
        [-224, 288, 288],
        [-224, -288, -256],
        [-224, 288, -256],
        [-224, -288, -224],
        [-224, 288, -224],
        [-224, -288, -192],
        [-224, 288, -192],
        [-224, -288, -160],
        [-224, 288, -160],
        [-224, -288, -128],
        [-224, 288, -128],
        [-224, -288, -96],
        [-224, 288, -96],
        [-224, -288, -64],
        [-224, 288, -64],
        [-224, -288, -32],
        [-224, 288, -32],
        [-224, -288, 0],
        [-224, 288, 0],
        [-224, -288, 32],
        [-224, 288, 32],
        [-224, -288, 64],
        [-224, 288, 64],
        [-224, -288, 96],
        [-224, 288, 96],
        [-224, -288, 128],
        [-224, 288, 128],
        [-224, -288, 160],
        [-224, 288, 160],
        [-224, -288, 192],
        [-224, 288, 192],
        [-224, -288, 224],
        [-224, 288, 224],
        [-224, -288, 256],
        [-224, 288, 256],
        [-192, -288, -288],
        [-192, -288, 288],
        [-192, -256, -288],
        [-192, -256, 288],
        [-192, -224, -288],
        [-192, -224, 288],
        [-192, -192, -288],
        [-192, -192, 288],
        [-192, -160, -288],
        [-192, -160, 288],
        [-192, -128, -288],
        [-192, -128, 288],
        [-192, -96, -288],
        [-192, -96, 288],
        [-192, -64, -288],
        [-192, -64, 288],
        [-192, -32, -288],
        [-192, -32, 288],
        [-192, 0, -288],
        [-192, 0, 288],
        [-192, 32, -288],
        [-192, 32, 288],
        [-192, 64, -288],
        [-192, 64, 288],
        [-192, 96, -288],
        [-192, 96, 288],
        [-192, 128, -288],
        [-192, 128, 288],
        [-192, 160, -288],
        [-192, 160, 288],
        [-192, 192, -288],
        [-192, 192, 288],
        [-192, 224, -288],
        [-192, 224, 288],
        [-192, 256, -288],
        [-192, 256, 288],
        [-192, 288, -288],
        [-192, 288, 288],
        [-192, -288, -256],
        [-192, 288, -256],
        [-192, -288, -224],
        [-192, 288, -224],
        [-192, -288, -192],
        [-192, 288, -192],
        [-192, -288, -160],
        [-192, 288, -160],
        [-192, -288, -128],
        [-192, 288, -128],
        [-192, -288, -96],
        [-192, 288, -96],
        [-192, -288, -64],
        [-192, 288, -64],
        [-192, -288, -32],
        [-192, 288, -32],
        [-192, -288, 0],
        [-192, 288, 0],
        [-192, -288, 32],
        [-192, 288, 32],
        [-192, -288, 64],
        [-192, 288, 64],
        [-192, -288, 96],
        [-192, 288, 96],
        [-192, -288, 128],
        [-192, 288, 128],
        [-192, -288, 160],
        [-192, 288, 160],
        [-192, -288, 192],
        [-192, 288, 192],
        [-192, -288, 224],
        [-192, 288, 224],
        [-192, -288, 256],
        [-192, 288, 256],
        [-160, -288, -288],
        [-160, -288, 288],
        [-160, -256, -288],
        [-160, -256, 288],
        [-160, -224, -288],
        [-160, -224, 288],
        [-160, -192, -288],
        [-160, -192, 288],
        [-160, -160, -288],
        [-160, -160, 288],
        [-160, -128, -288],
        [-160, -128, 288],
        [-160, -96, -288],
        [-160, -96, 288],
        [-160, -64, -288],
        [-160, -64, 288],
        [-160, -32, -288],
        [-160, -32, 288],
        [-160, 0, -288],
        [-160, 0, 288],
        [-160, 32, -288],
        [-160, 32, 288],
        [-160, 64, -288],
        [-160, 64, 288],
        [-160, 96, -288],
        [-160, 96, 288],
        [-160, 128, -288],
        [-160, 128, 288],
        [-160, 160, -288],
        [-160, 160, 288],
        [-160, 192, -288],
        [-160, 192, 288],
        [-160, 224, -288],
        [-160, 224, 288],
        [-160, 256, -288],
        [-160, 256, 288],
        [-160, 288, -288],
        [-160, 288, 288],
        [-160, -288, -256],
        [-160, 288, -256],
        [-160, -288, -224],
        [-160, 288, -224],
        [-160, -288, -192],
        [-160, 288, -192],
        [-160, -288, -160],
        [-160, 288, -160],
        [-160, -288, -128],
        [-160, 288, -128],
        [-160, -288, -96],
        [-160, 288, -96],
        [-160, -288, -64],
        [-160, 288, -64],
        [-160, -288, -32],
        [-160, 288, -32],
        [-160, -288, 0],
        [-160, 288, 0],
        [-160, -288, 32],
        [-160, 288, 32],
        [-160, -288, 64],
        [-160, 288, 64],
        [-160, -288, 96],
        [-160, 288, 96],
        [-160, -288, 128],
        [-160, 288, 128],
        [-160, -288, 160],
        [-160, 288, 160],
        [-160, -288, 192],
        [-160, 288, 192],
        [-160, -288, 224],
        [-160, 288, 224],
        [-160, -288, 256],
        [-160, 288, 256],
        [-128, -288, -288],
        [-128, -288, 288],
        [-128, -256, -288],
        [-128, -256, 288],
        [-128, -224, -288],
        [-128, -224, 288],
        [-128, -192, -288],
        [-128, -192, 288],
        [-128, -160, -288],
        [-128, -160, 288],
        [-128, -128, -288],
        [-128, -128, 288],
        [-128, -96, -288],
        [-128, -96, 288],
        [-128, -64, -288],
        [-128, -64, 288],
        [-128, -32, -288],
        [-128, -32, 288],
        [-128, 0, -288],
        [-128, 0, 288],
        [-128, 32, -288],
        [-128, 32, 288],
        [-128, 64, -288],
        [-128, 64, 288],
        [-128, 96, -288],
        [-128, 96, 288],
        [-128, 128, -288],
        [-128, 128, 288],
        [-128, 160, -288],
        [-128, 160, 288],
        [-128, 192, -288],
        [-128, 192, 288],
        [-128, 224, -288],
        [-128, 224, 288],
        [-128, 256, -288],
        [-128, 256, 288],
        [-128, 288, -288],
        [-128, 288, 288],
        [-128, -288, -256],
        [-128, 288, -256],
        [-128, -288, -224],
        [-128, 288, -224],
        [-128, -288, -192],
        [-128, 288, -192],
        [-128, -288, -160],
        [-128, 288, -160],
        [-128, -288, -128],
        [-128, 288, -128],
        [-128, -288, -96],
        [-128, 288, -96],
        [-128, -288, -64],
        [-128, 288, -64],
        [-128, -288, -32],
        [-128, 288, -32],
        [-128, -288, 0],
        [-128, 288, 0],
        [-128, -288, 32],
        [-128, 288, 32],
        [-128, -288, 64],
        [-128, 288, 64],
        [-128, -288, 96],
        [-128, 288, 96],
        [-128, -288, 128],
        [-128, 288, 128],
        [-128, -288, 160],
        [-128, 288, 160],
        [-128, -288, 192],
        [-128, 288, 192],
        [-128, -288, 224],
        [-128, 288, 224],
        [-128, -288, 256],
        [-128, 288, 256],
        [-96, -288, -288],
        [-96, -288, 288],
        [-96, -256, -288],
        [-96, -256, 288],
        [-96, -224, -288],
        [-96, -224, 288],
        [-96, -192, -288],
        [-96, -192, 288],
        [-96, -160, -288],
        [-96, -160, 288],
        [-96, -128, -288],
        [-96, -128, 288],
        [-96, -96, -288],
        [-96, -96, 288],
        [-96, -64, -288],
        [-96, -64, 288],
        [-96, -32, -288],
        [-96, -32, 288],
        [-96, 0, -288],
        [-96, 0, 288],
        [-96, 32, -288],
        [-96, 32, 288],
        [-96, 64, -288],
        [-96, 64, 288],
        [-96, 96, -288],
        [-96, 96, 288],
        [-96, 128, -288],
        [-96, 128, 288],
        [-96, 160, -288],
        [-96, 160, 288],
        [-96, 192, -288],
        [-96, 192, 288],
        [-96, 224, -288],
        [-96, 224, 288],
        [-96, 256, -288],
        [-96, 256, 288],
        [-96, 288, -288],
        [-96, 288, 288],
        [-96, -288, -256],
        [-96, 288, -256],
        [-96, -288, -224],
        [-96, 288, -224],
        [-96, -288, -192],
        [-96, 288, -192],
        [-96, -288, -160],
        [-96, 288, -160],
        [-96, -288, -128],
        [-96, 288, -128],
        [-96, -288, -96],
        [-96, 288, -96],
        [-96, -288, -64],
        [-96, 288, -64],
        [-96, -288, -32],
        [-96, 288, -32],
        [-96, -288, 0],
        [-96, 288, 0],
        [-96, -288, 32],
        [-96, 288, 32],
        [-96, -288, 64],
        [-96, 288, 64],
        [-96, -288, 96],
        [-96, 288, 96],
        [-96, -288, 128],
        [-96, 288, 128],
        [-96, -288, 160],
        [-96, 288, 160],
        [-96, -288, 192],
        [-96, 288, 192],
        [-96, -288, 224],
        [-96, 288, 224],
        [-96, -288, 256],
        [-96, 288, 256],
        [-64, -288, -288],
        [-64, -288, 288],
        [-64, -256, -288],
        [-64, -256, 288],
        [-64, -224, -288],
        [-64, -224, 288],
        [-64, -192, -288],
        [-64, -192, 288],
        [-64, -160, -288],
        [-64, -160, 288],
        [-64, -128, -288],
        [-64, -128, 288],
        [-64, -96, -288],
        [-64, -96, 288],
        [-64, -64, -288],
        [-64, -64, 288],
        [-64, -32, -288],
        [-64, -32, 288],
        [-64, 0, -288],
        [-64, 0, 288],
        [-64, 32, -288],
        [-64, 32, 288],
        [-64, 64, -288],
        [-64, 64, 288],
        [-64, 96, -288],
        [-64, 96, 288],
        [-64, 128, -288],
        [-64, 128, 288],
        [-64, 160, -288],
        [-64, 160, 288],
        [-64, 192, -288],
        [-64, 192, 288],
        [-64, 224, -288],
        [-64, 224, 288],
        [-64, 256, -288],
        [-64, 256, 288],
        [-64, 288, -288],
        [-64, 288, 288],
        [-64, -288, -256],
        [-64, 288, -256],
        [-64, -288, -224],
        [-64, 288, -224],
        [-64, -288, -192],
        [-64, 288, -192],
        [-64, -288, -160],
        [-64, 288, -160],
        [-64, -288, -128],
        [-64, 288, -128],
        [-64, -288, -96],
        [-64, 288, -96],
        [-64, -288, -64],
        [-64, 288, -64],
        [-64, -288, -32],
        [-64, 288, -32],
        [-64, -288, 0],
        [-64, 288, 0],
        [-64, -288, 32],
        [-64, 288, 32],
        [-64, -288, 64],
        [-64, 288, 64],
        [-64, -288, 96],
        [-64, 288, 96],
        [-64, -288, 128],
        [-64, 288, 128],
        [-64, -288, 160],
        [-64, 288, 160],
        [-64, -288, 192],
        [-64, 288, 192],
        [-64, -288, 224],
        [-64, 288, 224],
        [-64, -288, 256],
        [-64, 288, 256],
        [-32, -288, -288],
        [-32, -288, 288],
        [-32, -256, -288],
        [-32, -256, 288],
        [-32, -224, -288],
        [-32, -224, 288],
        [-32, -192, -288],
        [-32, -192, 288],
        [-32, -160, -288],
        [-32, -160, 288],
        [-32, -128, -288],
        [-32, -128, 288],
        [-32, -96, -288],
        [-32, -96, 288],
        [-32, -64, -288],
        [-32, -64, 288],
        [-32, -32, -288],
        [-32, -32, 288],
        [-32, 0, -288],
        [-32, 0, 288],
        [-32, 32, -288],
        [-32, 32, 288],
        [-32, 64, -288],
        [-32, 64, 288],
        [-32, 96, -288],
        [-32, 96, 288],
        [-32, 128, -288],
        [-32, 128, 288],
        [-32, 160, -288],
        [-32, 160, 288],
        [-32, 192, -288],
        [-32, 192, 288],
        [-32, 224, -288],
        [-32, 224, 288],
        [-32, 256, -288],
        [-32, 256, 288],
        [-32, 288, -288],
        [-32, 288, 288],
        [-32, -288, -256],
        [-32, 288, -256],
        [-32, -288, -224],
        [-32, 288, -224],
        [-32, -288, -192],
        [-32, 288, -192],
        [-32, -288, -160],
        [-32, 288, -160],
        [-32, -288, -128],
        [-32, 288, -128],
        [-32, -288, -96],
        [-32, 288, -96],
        [-32, -288, -64],
        [-32, 288, -64],
        [-32, -288, -32],
        [-32, 288, -32],
        [-32, -288, 0],
        [-32, 288, 0],
        [-32, -288, 32],
        [-32, 288, 32],
        [-32, -288, 64],
        [-32, 288, 64],
        [-32, -288, 96],
        [-32, 288, 96],
        [-32, -288, 128],
        [-32, 288, 128],
        [-32, -288, 160],
        [-32, 288, 160],
        [-32, -288, 192],
        [-32, 288, 192],
        [-32, -288, 224],
        [-32, 288, 224],
        [-32, -288, 256],
        [-32, 288, 256],
        [0, -288, -288],
        [0, -288, 288],
        [0, -256, -288],
        [0, -256, 288],
        [0, -224, -288],
        [0, -224, 288],
        [0, -192, -288],
        [0, -192, 288],
        [0, -160, -288],
        [0, -160, 288],
        [0, -128, -288],
        [0, -128, 288],
        [0, -96, -288],
        [0, -96, 288],
        [0, -64, -288],
        [0, -64, 288],
        [0, -32, -288],
        [0, -32, 288],
        [0, 0, -288],
        [0, 0, 288],
        [0, 32, -288],
        [0, 32, 288],
        [0, 64, -288],
        [0, 64, 288],
        [0, 96, -288],
        [0, 96, 288],
        [0, 128, -288],
        [0, 128, 288],
        [0, 160, -288],
        [0, 160, 288],
        [0, 192, -288],
        [0, 192, 288],
        [0, 224, -288],
        [0, 224, 288],
        [0, 256, -288],
        [0, 256, 288],
        [0, 288, -288],
        [0, 288, 288],
        [0, -288, -256],
        [0, 288, -256],
        [0, -288, -224],
        [0, 288, -224],
        [0, -288, -192],
        [0, 288, -192],
        [0, -288, -160],
        [0, 288, -160],
        [0, -288, -128],
        [0, 288, -128],
        [0, -288, -96],
        [0, 288, -96],
        [0, -288, -64],
        [0, 288, -64],
        [0, -288, -32],
        [0, 288, -32],
        [0, -288, 0],
        [0, 288, 0],
        [0, -288, 32],
        [0, 288, 32],
        [0, -288, 64],
        [0, 288, 64],
        [0, -288, 96],
        [0, 288, 96],
        [0, -288, 128],
        [0, 288, 128],
        [0, -288, 160],
        [0, 288, 160],
        [0, -288, 192],
        [0, 288, 192],
        [0, -288, 224],
        [0, 288, 224],
        [0, -288, 256],
        [0, 288, 256],
        [32, -288, -288],
        [32, -288, 288],
        [32, -256, -288],
        [32, -256, 288],
        [32, -224, -288],
        [32, -224, 288],
        [32, -192, -288],
        [32, -192, 288],
        [32, -160, -288],
        [32, -160, 288],
        [32, -128, -288],
        [32, -128, 288],
        [32, -96, -288],
        [32, -96, 288],
        [32, -64, -288],
        [32, -64, 288],
        [32, -32, -288],
        [32, -32, 288],
        [32, 0, -288],
        [32, 0, 288],
        [32, 32, -288],
        [32, 32, 288],
        [32, 64, -288],
        [32, 64, 288],
        [32, 96, -288],
        [32, 96, 288],
        [32, 128, -288],
        [32, 128, 288],
        [32, 160, -288],
        [32, 160, 288],
        [32, 192, -288],
        [32, 192, 288],
        [32, 224, -288],
        [32, 224, 288],
        [32, 256, -288],
        [32, 256, 288],
        [32, 288, -288],
        [32, 288, 288],
        [32, -288, -256],
        [32, 288, -256],
        [32, -288, -224],
        [32, 288, -224],
        [32, -288, -192],
        [32, 288, -192],
        [32, -288, -160],
        [32, 288, -160],
        [32, -288, -128],
        [32, 288, -128],
        [32, -288, -96],
        [32, 288, -96],
        [32, -288, -64],
        [32, 288, -64],
        [32, -288, -32],
        [32, 288, -32],
        [32, -288, 0],
        [32, 288, 0],
        [32, -288, 32],
        [32, 288, 32],
        [32, -288, 64],
        [32, 288, 64],
        [32, -288, 96],
        [32, 288, 96],
        [32, -288, 128],
        [32, 288, 128],
        [32, -288, 160],
        [32, 288, 160],
        [32, -288, 192],
        [32, 288, 192],
        [32, -288, 224],
        [32, 288, 224],
        [32, -288, 256],
        [32, 288, 256],
        [64, -288, -288],
        [64, -288, 288],
        [64, -256, -288],
        [64, -256, 288],
        [64, -224, -288],
        [64, -224, 288],
        [64, -192, -288],
        [64, -192, 288],
        [64, -160, -288],
        [64, -160, 288],
        [64, -128, -288],
        [64, -128, 288],
        [64, -96, -288],
        [64, -96, 288],
        [64, -64, -288],
        [64, -64, 288],
        [64, -32, -288],
        [64, -32, 288],
        [64, 0, -288],
        [64, 0, 288],
        [64, 32, -288],
        [64, 32, 288],
        [64, 64, -288],
        [64, 64, 288],
        [64, 96, -288],
        [64, 96, 288],
        [64, 128, -288],
        [64, 128, 288],
        [64, 160, -288],
        [64, 160, 288],
        [64, 192, -288],
        [64, 192, 288],
        [64, 224, -288],
        [64, 224, 288],
        [64, 256, -288],
        [64, 256, 288],
        [64, 288, -288],
        [64, 288, 288],
        [64, -288, -256],
        [64, 288, -256],
        [64, -288, -224],
        [64, 288, -224],
        [64, -288, -192],
        [64, 288, -192],
        [64, -288, -160],
        [64, 288, -160],
        [64, -288, -128],
        [64, 288, -128],
        [64, -288, -96],
        [64, 288, -96],
        [64, -288, -64],
        [64, 288, -64],
        [64, -288, -32],
        [64, 288, -32],
        [64, -288, 0],
        [64, 288, 0],
        [64, -288, 32],
        [64, 288, 32],
        [64, -288, 64],
        [64, 288, 64],
        [64, -288, 96],
        [64, 288, 96],
        [64, -288, 128],
        [64, 288, 128],
        [64, -288, 160],
        [64, 288, 160],
        [64, -288, 192],
        [64, 288, 192],
        [64, -288, 224],
        [64, 288, 224],
        [64, -288, 256],
        [64, 288, 256],
        [96, -288, -288],
        [96, -288, 288],
        [96, -256, -288],
        [96, -256, 288],
        [96, -224, -288],
        [96, -224, 288],
        [96, -192, -288],
        [96, -192, 288],
        [96, -160, -288],
        [96, -160, 288],
        [96, -128, -288],
        [96, -128, 288],
        [96, -96, -288],
        [96, -96, 288],
        [96, -64, -288],
        [96, -64, 288],
        [96, -32, -288],
        [96, -32, 288],
        [96, 0, -288],
        [96, 0, 288],
        [96, 32, -288],
        [96, 32, 288],
        [96, 64, -288],
        [96, 64, 288],
        [96, 96, -288],
        [96, 96, 288],
        [96, 128, -288],
        [96, 128, 288],
        [96, 160, -288],
        [96, 160, 288],
        [96, 192, -288],
        [96, 192, 288],
        [96, 224, -288],
        [96, 224, 288],
        [96, 256, -288],
        [96, 256, 288],
        [96, 288, -288],
        [96, 288, 288],
        [96, -288, -256],
        [96, 288, -256],
        [96, -288, -224],
        [96, 288, -224],
        [96, -288, -192],
        [96, 288, -192],
        [96, -288, -160],
        [96, 288, -160],
        [96, -288, -128],
        [96, 288, -128],
        [96, -288, -96],
        [96, 288, -96],
        [96, -288, -64],
        [96, 288, -64],
        [96, -288, -32],
        [96, 288, -32],
        [96, -288, 0],
        [96, 288, 0],
        [96, -288, 32],
        [96, 288, 32],
        [96, -288, 64],
        [96, 288, 64],
        [96, -288, 96],
        [96, 288, 96],
        [96, -288, 128],
        [96, 288, 128],
        [96, -288, 160],
        [96, 288, 160],
        [96, -288, 192],
        [96, 288, 192],
        [96, -288, 224],
        [96, 288, 224],
        [96, -288, 256],
        [96, 288, 256],
        [128, -288, -288],
        [128, -288, 288],
        [128, -256, -288],
        [128, -256, 288],
        [128, -224, -288],
        [128, -224, 288],
        [128, -192, -288],
        [128, -192, 288],
        [128, -160, -288],
        [128, -160, 288],
        [128, -128, -288],
        [128, -128, 288],
        [128, -96, -288],
        [128, -96, 288],
        [128, -64, -288],
        [128, -64, 288],
        [128, -32, -288],
        [128, -32, 288],
        [128, 0, -288],
        [128, 0, 288],
        [128, 32, -288],
        [128, 32, 288],
        [128, 64, -288],
        [128, 64, 288],
        [128, 96, -288],
        [128, 96, 288],
        [128, 128, -288],
        [128, 128, 288],
        [128, 160, -288],
        [128, 160, 288],
        [128, 192, -288],
        [128, 192, 288],
        [128, 224, -288],
        [128, 224, 288],
        [128, 256, -288],
        [128, 256, 288],
        [128, 288, -288],
        [128, 288, 288],
        [128, -288, -256],
        [128, 288, -256],
        [128, -288, -224],
        [128, 288, -224],
        [128, -288, -192],
        [128, 288, -192],
        [128, -288, -160],
        [128, 288, -160],
        [128, -288, -128],
        [128, 288, -128],
        [128, -288, -96],
        [128, 288, -96],
        [128, -288, -64],
        [128, 288, -64],
        [128, -288, -32],
        [128, 288, -32],
        [128, -288, 0],
        [128, 288, 0],
        [128, -288, 32],
        [128, 288, 32],
        [128, -288, 64],
        [128, 288, 64],
        [128, -288, 96],
        [128, 288, 96],
        [128, -288, 128],
        [128, 288, 128],
        [128, -288, 160],
        [128, 288, 160],
        [128, -288, 192],
        [128, 288, 192],
        [128, -288, 224],
        [128, 288, 224],
        [128, -288, 256],
        [128, 288, 256],
        [160, -288, -288],
        [160, -288, 288],
        [160, -256, -288],
        [160, -256, 288],
        [160, -224, -288],
        [160, -224, 288],
        [160, -192, -288],
        [160, -192, 288],
        [160, -160, -288],
        [160, -160, 288],
        [160, -128, -288],
        [160, -128, 288],
        [160, -96, -288],
        [160, -96, 288],
        [160, -64, -288],
        [160, -64, 288],
        [160, -32, -288],
        [160, -32, 288],
        [160, 0, -288],
        [160, 0, 288],
        [160, 32, -288],
        [160, 32, 288],
        [160, 64, -288],
        [160, 64, 288],
        [160, 96, -288],
        [160, 96, 288],
        [160, 128, -288],
        [160, 128, 288],
        [160, 160, -288],
        [160, 160, 288],
        [160, 192, -288],
        [160, 192, 288],
        [160, 224, -288],
        [160, 224, 288],
        [160, 256, -288],
        [160, 256, 288],
        [160, 288, -288],
        [160, 288, 288],
        [160, -288, -256],
        [160, 288, -256],
        [160, -288, -224],
        [160, 288, -224],
        [160, -288, -192],
        [160, 288, -192],
        [160, -288, -160],
        [160, 288, -160],
        [160, -288, -128],
        [160, 288, -128],
        [160, -288, -96],
        [160, 288, -96],
        [160, -288, -64],
        [160, 288, -64],
        [160, -288, -32],
        [160, 288, -32],
        [160, -288, 0],
        [160, 288, 0],
        [160, -288, 32],
        [160, 288, 32],
        [160, -288, 64],
        [160, 288, 64],
        [160, -288, 96],
        [160, 288, 96],
        [160, -288, 128],
        [160, 288, 128],
        [160, -288, 160],
        [160, 288, 160],
        [160, -288, 192],
        [160, 288, 192],
        [160, -288, 224],
        [160, 288, 224],
        [160, -288, 256],
        [160, 288, 256],
        [192, -288, -288],
        [192, -288, 288],
        [192, -256, -288],
        [192, -256, 288],
        [192, -224, -288],
        [192, -224, 288],
        [192, -192, -288],
        [192, -192, 288],
        [192, -160, -288],
        [192, -160, 288],
        [192, -128, -288],
        [192, -128, 288],
        [192, -96, -288],
        [192, -96, 288],
        [192, -64, -288],
        [192, -64, 288],
        [192, -32, -288],
        [192, -32, 288],
        [192, 0, -288],
        [192, 0, 288],
        [192, 32, -288],
        [192, 32, 288],
        [192, 64, -288],
        [192, 64, 288],
        [192, 96, -288],
        [192, 96, 288],
        [192, 128, -288],
        [192, 128, 288],
        [192, 160, -288],
        [192, 160, 288],
        [192, 192, -288],
        [192, 192, 288],
        [192, 224, -288],
        [192, 224, 288],
        [192, 256, -288],
        [192, 256, 288],
        [192, 288, -288],
        [192, 288, 288],
        [192, -288, -256],
        [192, 288, -256],
        [192, -288, -224],
        [192, 288, -224],
        [192, -288, -192],
        [192, 288, -192],
        [192, -288, -160],
        [192, 288, -160],
        [192, -288, -128],
        [192, 288, -128],
        [192, -288, -96],
        [192, 288, -96],
        [192, -288, -64],
        [192, 288, -64],
        [192, -288, -32],
        [192, 288, -32],
        [192, -288, 0],
        [192, 288, 0],
        [192, -288, 32],
        [192, 288, 32],
        [192, -288, 64],
        [192, 288, 64],
        [192, -288, 96],
        [192, 288, 96],
        [192, -288, 128],
        [192, 288, 128],
        [192, -288, 160],
        [192, 288, 160],
        [192, -288, 192],
        [192, 288, 192],
        [192, -288, 224],
        [192, 288, 224],
        [192, -288, 256],
        [192, 288, 256],
        [224, -288, -288],
        [224, -288, 288],
        [224, -256, -288],
        [224, -256, 288],
        [224, -224, -288],
        [224, -224, 288],
        [224, -192, -288],
        [224, -192, 288],
        [224, -160, -288],
        [224, -160, 288],
        [224, -128, -288],
        [224, -128, 288],
        [224, -96, -288],
        [224, -96, 288],
        [224, -64, -288],
        [224, -64, 288],
        [224, -32, -288],
        [224, -32, 288],
        [224, 0, -288],
        [224, 0, 288],
        [224, 32, -288],
        [224, 32, 288],
        [224, 64, -288],
        [224, 64, 288],
        [224, 96, -288],
        [224, 96, 288],
        [224, 128, -288],
        [224, 128, 288],
        [224, 160, -288],
        [224, 160, 288],
        [224, 192, -288],
        [224, 192, 288],
        [224, 224, -288],
        [224, 224, 288],
        [224, 256, -288],
        [224, 256, 288],
        [224, 288, -288],
        [224, 288, 288],
        [224, -288, -256],
        [224, 288, -256],
        [224, -288, -224],
        [224, 288, -224],
        [224, -288, -192],
        [224, 288, -192],
        [224, -288, -160],
        [224, 288, -160],
        [224, -288, -128],
        [224, 288, -128],
        [224, -288, -96],
        [224, 288, -96],
        [224, -288, -64],
        [224, 288, -64],
        [224, -288, -32],
        [224, 288, -32],
        [224, -288, 0],
        [224, 288, 0],
        [224, -288, 32],
        [224, 288, 32],
        [224, -288, 64],
        [224, 288, 64],
        [224, -288, 96],
        [224, 288, 96],
        [224, -288, 128],
        [224, 288, 128],
        [224, -288, 160],
        [224, 288, 160],
        [224, -288, 192],
        [224, 288, 192],
        [224, -288, 224],
        [224, 288, 224],
        [224, -288, 256],
        [224, 288, 256],
        [256, -288, -288],
        [256, -288, 288],
        [256, -256, -288],
        [256, -256, 288],
        [256, -224, -288],
        [256, -224, 288],
        [256, -192, -288],
        [256, -192, 288],
        [256, -160, -288],
        [256, -160, 288],
        [256, -128, -288],
        [256, -128, 288],
        [256, -96, -288],
        [256, -96, 288],
        [256, -64, -288],
        [256, -64, 288],
        [256, -32, -288],
        [256, -32, 288],
        [256, 0, -288],
        [256, 0, 288],
        [256, 32, -288],
        [256, 32, 288],
        [256, 64, -288],
        [256, 64, 288],
        [256, 96, -288],
        [256, 96, 288],
        [256, 128, -288],
        [256, 128, 288],
        [256, 160, -288],
        [256, 160, 288],
        [256, 192, -288],
        [256, 192, 288],
        [256, 224, -288],
        [256, 224, 288],
        [256, 256, -288],
        [256, 256, 288],
        [256, 288, -288],
        [256, 288, 288],
        [256, -288, -256],
        [256, 288, -256],
        [256, -288, -224],
        [256, 288, -224],
        [256, -288, -192],
        [256, 288, -192],
        [256, -288, -160],
        [256, 288, -160],
        [256, -288, -128],
        [256, 288, -128],
        [256, -288, -96],
        [256, 288, -96],
        [256, -288, -64],
        [256, 288, -64],
        [256, -288, -32],
        [256, 288, -32],
        [256, -288, 0],
        [256, 288, 0],
        [256, -288, 32],
        [256, 288, 32],
        [256, -288, 64],
        [256, 288, 64],
        [256, -288, 96],
        [256, 288, 96],
        [256, -288, 128],
        [256, 288, 128],
        [256, -288, 160],
        [256, 288, 160],
        [256, -288, 192],
        [256, 288, 192],
        [256, -288, 224],
        [256, 288, 224],
        [256, -288, 256],
        [256, 288, 256],
        [288, -288, -288],
        [288, -288, 288],
        [288, -256, -288],
        [288, -256, 288],
        [288, -224, -288],
        [288, -224, 288],
        [288, -192, -288],
        [288, -192, 288],
        [288, -160, -288],
        [288, -160, 288],
        [288, -128, -288],
        [288, -128, 288],
        [288, -96, -288],
        [288, -96, 288],
        [288, -64, -288],
        [288, -64, 288],
        [288, -32, -288],
        [288, -32, 288],
        [288, 0, -288],
        [288, 0, 288],
        [288, 32, -288],
        [288, 32, 288],
        [288, 64, -288],
        [288, 64, 288],
        [288, 96, -288],
        [288, 96, 288],
        [288, 128, -288],
        [288, 128, 288],
        [288, 160, -288],
        [288, 160, 288],
        [288, 192, -288],
        [288, 192, 288],
        [288, 224, -288],
        [288, 224, 288],
        [288, 256, -288],
        [288, 256, 288],
        [288, 288, -288],
        [288, 288, 288],
        [288, -288, -256],
        [288, 288, -256],
        [288, -288, -224],
        [288, 288, -224],
        [288, -288, -192],
        [288, 288, -192],
        [288, -288, -160],
        [288, 288, -160],
        [288, -288, -128],
        [288, 288, -128],
        [288, -288, -96],
        [288, 288, -96],
        [288, -288, -64],
        [288, 288, -64],
        [288, -288, -32],
        [288, 288, -32],
        [288, -288, 0],
        [288, 288, 0],
        [288, -288, 32],
        [288, 288, 32],
        [288, -288, 64],
        [288, 288, 64],
        [288, -288, 96],
        [288, 288, 96],
        [288, -288, 128],
        [288, 288, 128],
        [288, -288, 160],
        [288, 288, 160],
        [288, -288, 192],
        [288, 288, 192],
        [288, -288, 224],
        [288, 288, 224],
        [288, -288, 256],
        [288, 288, 256],
        [-288, -256, -256],
        [288, -256, -256],
        [-288, -224, -256],
        [288, -224, -256],
        [-288, -192, -256],
        [288, -192, -256],
        [-288, -160, -256],
        [288, -160, -256],
        [-288, -128, -256],
        [288, -128, -256],
        [-288, -96, -256],
        [288, -96, -256],
        [-288, -64, -256],
        [288, -64, -256],
        [-288, -32, -256],
        [288, -32, -256],
        [-288, 0, -256],
        [288, 0, -256],
        [-288, 32, -256],
        [288, 32, -256],
        [-288, 64, -256],
        [288, 64, -256],
        [-288, 96, -256],
        [288, 96, -256],
        [-288, 128, -256],
        [288, 128, -256],
        [-288, 160, -256],
        [288, 160, -256],
        [-288, 192, -256],
        [288, 192, -256],
        [-288, 224, -256],
        [288, 224, -256],
        [-288, 256, -256],
        [288, 256, -256],
        [-288, -256, -224],
        [288, -256, -224],
        [-288, -224, -224],
        [288, -224, -224],
        [-288, -192, -224],
        [288, -192, -224],
        [-288, -160, -224],
        [288, -160, -224],
        [-288, -128, -224],
        [288, -128, -224],
        [-288, -96, -224],
        [288, -96, -224],
        [-288, -64, -224],
        [288, -64, -224],
        [-288, -32, -224],
        [288, -32, -224],
        [-288, 0, -224],
        [288, 0, -224],
        [-288, 32, -224],
        [288, 32, -224],
        [-288, 64, -224],
        [288, 64, -224],
        [-288, 96, -224],
        [288, 96, -224],
        [-288, 128, -224],
        [288, 128, -224],
        [-288, 160, -224],
        [288, 160, -224],
        [-288, 192, -224],
        [288, 192, -224],
        [-288, 224, -224],
        [288, 224, -224],
        [-288, 256, -224],
        [288, 256, -224],
        [-288, -256, -192],
        [288, -256, -192],
        [-288, -224, -192],
        [288, -224, -192],
        [-288, -192, -192],
        [288, -192, -192],
        [-288, -160, -192],
        [288, -160, -192],
        [-288, -128, -192],
        [288, -128, -192],
        [-288, -96, -192],
        [288, -96, -192],
        [-288, -64, -192],
        [288, -64, -192],
        [-288, -32, -192],
        [288, -32, -192],
        [-288, 0, -192],
        [288, 0, -192],
        [-288, 32, -192],
        [288, 32, -192],
        [-288, 64, -192],
        [288, 64, -192],
        [-288, 96, -192],
        [288, 96, -192],
        [-288, 128, -192],
        [288, 128, -192],
        [-288, 160, -192],
        [288, 160, -192],
        [-288, 192, -192],
        [288, 192, -192],
        [-288, 224, -192],
        [288, 224, -192],
        [-288, 256, -192],
        [288, 256, -192],
        [-288, -256, -160],
        [288, -256, -160],
        [-288, -224, -160],
        [288, -224, -160],
        [-288, -192, -160],
        [288, -192, -160],
        [-288, -160, -160],
        [288, -160, -160],
        [-288, -128, -160],
        [288, -128, -160],
        [-288, -96, -160],
        [288, -96, -160],
        [-288, -64, -160],
        [288, -64, -160],
        [-288, -32, -160],
        [288, -32, -160],
        [-288, 0, -160],
        [288, 0, -160],
        [-288, 32, -160],
        [288, 32, -160],
        [-288, 64, -160],
        [288, 64, -160],
        [-288, 96, -160],
        [288, 96, -160],
        [-288, 128, -160],
        [288, 128, -160],
        [-288, 160, -160],
        [288, 160, -160],
        [-288, 192, -160],
        [288, 192, -160],
        [-288, 224, -160],
        [288, 224, -160],
        [-288, 256, -160],
        [288, 256, -160],
        [-288, -256, -128],
        [288, -256, -128],
        [-288, -224, -128],
        [288, -224, -128],
        [-288, -192, -128],
        [288, -192, -128],
        [-288, -160, -128],
        [288, -160, -128],
        [-288, -128, -128],
        [288, -128, -128],
        [-288, -96, -128],
        [288, -96, -128],
        [-288, -64, -128],
        [288, -64, -128],
        [-288, -32, -128],
        [288, -32, -128],
        [-288, 0, -128],
        [288, 0, -128],
        [-288, 32, -128],
        [288, 32, -128],
        [-288, 64, -128],
        [288, 64, -128],
        [-288, 96, -128],
        [288, 96, -128],
        [-288, 128, -128],
        [288, 128, -128],
        [-288, 160, -128],
        [288, 160, -128],
        [-288, 192, -128],
        [288, 192, -128],
        [-288, 224, -128],
        [288, 224, -128],
        [-288, 256, -128],
        [288, 256, -128],
        [-288, -256, -96],
        [288, -256, -96],
        [-288, -224, -96],
        [288, -224, -96],
        [-288, -192, -96],
        [288, -192, -96],
        [-288, -160, -96],
        [288, -160, -96],
        [-288, -128, -96],
        [288, -128, -96],
        [-288, -96, -96],
        [288, -96, -96],
        [-288, -64, -96],
        [288, -64, -96],
        [-288, -32, -96],
        [288, -32, -96],
        [-288, 0, -96],
        [288, 0, -96],
        [-288, 32, -96],
        [288, 32, -96],
        [-288, 64, -96],
        [288, 64, -96],
        [-288, 96, -96],
        [288, 96, -96],
        [-288, 128, -96],
        [288, 128, -96],
        [-288, 160, -96],
        [288, 160, -96],
        [-288, 192, -96],
        [288, 192, -96],
        [-288, 224, -96],
        [288, 224, -96],
        [-288, 256, -96],
        [288, 256, -96],
        [-288, -256, -64],
        [288, -256, -64],
        [-288, -224, -64],
        [288, -224, -64],
        [-288, -192, -64],
        [288, -192, -64],
        [-288, -160, -64],
        [288, -160, -64],
        [-288, -128, -64],
        [288, -128, -64],
        [-288, -96, -64],
        [288, -96, -64],
        [-288, -64, -64],
        [288, -64, -64],
        [-288, -32, -64],
        [288, -32, -64],
        [-288, 0, -64],
        [288, 0, -64],
        [-288, 32, -64],
        [288, 32, -64],
        [-288, 64, -64],
        [288, 64, -64],
        [-288, 96, -64],
        [288, 96, -64],
        [-288, 128, -64],
        [288, 128, -64],
        [-288, 160, -64],
        [288, 160, -64],
        [-288, 192, -64],
        [288, 192, -64],
        [-288, 224, -64],
        [288, 224, -64],
        [-288, 256, -64],
        [288, 256, -64],
        [-288, -256, -32],
        [288, -256, -32],
        [-288, -224, -32],
        [288, -224, -32],
        [-288, -192, -32],
        [288, -192, -32],
        [-288, -160, -32],
        [288, -160, -32],
        [-288, -128, -32],
        [288, -128, -32],
        [-288, -96, -32],
        [288, -96, -32],
        [-288, -64, -32],
        [288, -64, -32],
        [-288, -32, -32],
        [288, -32, -32],
        [-288, 0, -32],
        [288, 0, -32],
        [-288, 32, -32],
        [288, 32, -32],
        [-288, 64, -32],
        [288, 64, -32],
        [-288, 96, -32],
        [288, 96, -32],
        [-288, 128, -32],
        [288, 128, -32],
        [-288, 160, -32],
        [288, 160, -32],
        [-288, 192, -32],
        [288, 192, -32],
        [-288, 224, -32],
        [288, 224, -32],
        [-288, 256, -32],
        [288, 256, -32],
        [-288, -256, 0],
        [288, -256, 0],
        [-288, -224, 0],
        [288, -224, 0],
        [-288, -192, 0],
        [288, -192, 0],
        [-288, -160, 0],
        [288, -160, 0],
        [-288, -128, 0],
        [288, -128, 0],
        [-288, -96, 0],
        [288, -96, 0],
        [-288, -64, 0],
        [288, -64, 0],
        [-288, -32, 0],
        [288, -32, 0],
        [-288, 0, 0],
        [288, 0, 0],
        [-288, 32, 0],
        [288, 32, 0],
        [-288, 64, 0],
        [288, 64, 0],
        [-288, 96, 0],
        [288, 96, 0],
        [-288, 128, 0],
        [288, 128, 0],
        [-288, 160, 0],
        [288, 160, 0],
        [-288, 192, 0],
        [288, 192, 0],
        [-288, 224, 0],
        [288, 224, 0],
        [-288, 256, 0],
        [288, 256, 0],
        [-288, -256, 32],
        [288, -256, 32],
        [-288, -224, 32],
        [288, -224, 32],
        [-288, -192, 32],
        [288, -192, 32],
        [-288, -160, 32],
        [288, -160, 32],
        [-288, -128, 32],
        [288, -128, 32],
        [-288, -96, 32],
        [288, -96, 32],
        [-288, -64, 32],
        [288, -64, 32],
        [-288, -32, 32],
        [288, -32, 32],
        [-288, 0, 32],
        [288, 0, 32],
        [-288, 32, 32],
        [288, 32, 32],
        [-288, 64, 32],
        [288, 64, 32],
        [-288, 96, 32],
        [288, 96, 32],
        [-288, 128, 32],
        [288, 128, 32],
        [-288, 160, 32],
        [288, 160, 32],
        [-288, 192, 32],
        [288, 192, 32],
        [-288, 224, 32],
        [288, 224, 32],
        [-288, 256, 32],
        [288, 256, 32],
        [-288, -256, 64],
        [288, -256, 64],
        [-288, -224, 64],
        [288, -224, 64],
        [-288, -192, 64],
        [288, -192, 64],
        [-288, -160, 64],
        [288, -160, 64],
        [-288, -128, 64],
        [288, -128, 64],
        [-288, -96, 64],
        [288, -96, 64],
        [-288, -64, 64],
        [288, -64, 64],
        [-288, -32, 64],
        [288, -32, 64],
        [-288, 0, 64],
        [288, 0, 64],
        [-288, 32, 64],
        [288, 32, 64],
        [-288, 64, 64],
        [288, 64, 64],
        [-288, 96, 64],
        [288, 96, 64],
        [-288, 128, 64],
        [288, 128, 64],
        [-288, 160, 64],
        [288, 160, 64],
        [-288, 192, 64],
        [288, 192, 64],
        [-288, 224, 64],
        [288, 224, 64],
        [-288, 256, 64],
        [288, 256, 64],
        [-288, -256, 96],
        [288, -256, 96],
        [-288, -224, 96],
        [288, -224, 96],
        [-288, -192, 96],
        [288, -192, 96],
        [-288, -160, 96],
        [288, -160, 96],
        [-288, -128, 96],
        [288, -128, 96],
        [-288, -96, 96],
        [288, -96, 96],
        [-288, -64, 96],
        [288, -64, 96],
        [-288, -32, 96],
        [288, -32, 96],
        [-288, 0, 96],
        [288, 0, 96],
        [-288, 32, 96],
        [288, 32, 96],
        [-288, 64, 96],
        [288, 64, 96],
        [-288, 96, 96],
        [288, 96, 96],
        [-288, 128, 96],
        [288, 128, 96],
        [-288, 160, 96],
        [288, 160, 96],
        [-288, 192, 96],
        [288, 192, 96],
        [-288, 224, 96],
        [288, 224, 96],
        [-288, 256, 96],
        [288, 256, 96],
        [-288, -256, 128],
        [288, -256, 128],
        [-288, -224, 128],
        [288, -224, 128],
        [-288, -192, 128],
        [288, -192, 128],
        [-288, -160, 128],
        [288, -160, 128],
        [-288, -128, 128],
        [288, -128, 128],
        [-288, -96, 128],
        [288, -96, 128],
        [-288, -64, 128],
        [288, -64, 128],
        [-288, -32, 128],
        [288, -32, 128],
        [-288, 0, 128],
        [288, 0, 128],
        [-288, 32, 128],
        [288, 32, 128],
        [-288, 64, 128],
        [288, 64, 128],
        [-288, 96, 128],
        [288, 96, 128],
        [-288, 128, 128],
        [288, 128, 128],
        [-288, 160, 128],
        [288, 160, 128],
        [-288, 192, 128],
        [288, 192, 128],
        [-288, 224, 128],
        [288, 224, 128],
        [-288, 256, 128],
        [288, 256, 128],
        [-288, -256, 160],
        [288, -256, 160],
        [-288, -224, 160],
        [288, -224, 160],
        [-288, -192, 160],
        [288, -192, 160],
        [-288, -160, 160],
        [288, -160, 160],
        [-288, -128, 160],
        [288, -128, 160],
        [-288, -96, 160],
        [288, -96, 160],
        [-288, -64, 160],
        [288, -64, 160],
        [-288, -32, 160],
        [288, -32, 160],
        [-288, 0, 160],
        [288, 0, 160],
        [-288, 32, 160],
        [288, 32, 160],
        [-288, 64, 160],
        [288, 64, 160],
        [-288, 96, 160],
        [288, 96, 160],
        [-288, 128, 160],
        [288, 128, 160],
        [-288, 160, 160],
        [288, 160, 160],
        [-288, 192, 160],
        [288, 192, 160],
        [-288, 224, 160],
        [288, 224, 160],
        [-288, 256, 160],
        [288, 256, 160],
        [-288, -256, 192],
        [288, -256, 192],
        [-288, -224, 192],
        [288, -224, 192],
        [-288, -192, 192],
        [288, -192, 192],
        [-288, -160, 192],
        [288, -160, 192],
        [-288, -128, 192],
        [288, -128, 192],
        [-288, -96, 192],
        [288, -96, 192],
        [-288, -64, 192],
        [288, -64, 192],
        [-288, -32, 192],
        [288, -32, 192],
        [-288, 0, 192],
        [288, 0, 192],
        [-288, 32, 192],
        [288, 32, 192],
        [-288, 64, 192],
        [288, 64, 192],
        [-288, 96, 192],
        [288, 96, 192],
        [-288, 128, 192],
        [288, 128, 192],
        [-288, 160, 192],
        [288, 160, 192],
        [-288, 192, 192],
        [288, 192, 192],
        [-288, 224, 192],
        [288, 224, 192],
        [-288, 256, 192],
        [288, 256, 192],
        [-288, -256, 224],
        [288, -256, 224],
        [-288, -224, 224],
        [288, -224, 224],
        [-288, -192, 224],
        [288, -192, 224],
        [-288, -160, 224],
        [288, -160, 224],
        [-288, -128, 224],
        [288, -128, 224],
        [-288, -96, 224],
        [288, -96, 224],
        [-288, -64, 224],
        [288, -64, 224],
        [-288, -32, 224],
        [288, -32, 224],
        [-288, 0, 224],
        [288, 0, 224],
        [-288, 32, 224],
        [288, 32, 224],
        [-288, 64, 224],
        [288, 64, 224],
        [-288, 96, 224],
        [288, 96, 224],
        [-288, 128, 224],
        [288, 128, 224],
        [-288, 160, 224],
        [288, 160, 224],
        [-288, 192, 224],
        [288, 192, 224],
        [-288, 224, 224],
        [288, 224, 224],
        [-288, 256, 224],
        [288, 256, 224],
        [-288, -256, 256],
        [288, -256, 256],
        [-288, -224, 256],
        [288, -224, 256],
        [-288, -192, 256],
        [288, -192, 256],
        [-288, -160, 256],
        [288, -160, 256],
        [-288, -128, 256],
        [288, -128, 256],
        [-288, -96, 256],
        [288, -96, 256],
        [-288, -64, 256],
        [288, -64, 256],
        [-288, -32, 256],
        [288, -32, 256],
        [-288, 0, 256],
        [288, 0, 256],
        [-288, 32, 256],
        [288, 32, 256],
        [-288, 64, 256],
        [288, 64, 256],
        [-288, 96, 256],
        [288, 96, 256],
        [-288, 128, 256],
        [288, 128, 256],
        [-288, 160, 256],
        [288, 160, 256],
        [-288, 192, 256],
        [288, 192, 256],
        [-288, 224, 256],
        [288, 224, 256],
        [-288, 256, 256],
        [288, 256, 256]],
    '10': [[-320, -320, -320],
        [-320, -320, 320],
        [-320, -288, -320],
        [-320, -288, 320],
        [-320, -256, -320],
        [-320, -256, 320],
        [-320, -224, -320],
        [-320, -224, 320],
        [-320, -192, -320],
        [-320, -192, 320],
        [-320, -160, -320],
        [-320, -160, 320],
        [-320, -128, -320],
        [-320, -128, 320],
        [-320, -96, -320],
        [-320, -96, 320],
        [-320, -64, -320],
        [-320, -64, 320],
        [-320, -32, -320],
        [-320, -32, 320],
        [-320, 0, -320],
        [-320, 0, 320],
        [-320, 32, -320],
        [-320, 32, 320],
        [-320, 64, -320],
        [-320, 64, 320],
        [-320, 96, -320],
        [-320, 96, 320],
        [-320, 128, -320],
        [-320, 128, 320],
        [-320, 160, -320],
        [-320, 160, 320],
        [-320, 192, -320],
        [-320, 192, 320],
        [-320, 224, -320],
        [-320, 224, 320],
        [-320, 256, -320],
        [-320, 256, 320],
        [-320, 288, -320],
        [-320, 288, 320],
        [-320, 320, -320],
        [-320, 320, 320],
        [-320, -320, -288],
        [-320, 320, -288],
        [-320, -320, -256],
        [-320, 320, -256],
        [-320, -320, -224],
        [-320, 320, -224],
        [-320, -320, -192],
        [-320, 320, -192],
        [-320, -320, -160],
        [-320, 320, -160],
        [-320, -320, -128],
        [-320, 320, -128],
        [-320, -320, -96],
        [-320, 320, -96],
        [-320, -320, -64],
        [-320, 320, -64],
        [-320, -320, -32],
        [-320, 320, -32],
        [-320, -320, 0],
        [-320, 320, 0],
        [-320, -320, 32],
        [-320, 320, 32],
        [-320, -320, 64],
        [-320, 320, 64],
        [-320, -320, 96],
        [-320, 320, 96],
        [-320, -320, 128],
        [-320, 320, 128],
        [-320, -320, 160],
        [-320, 320, 160],
        [-320, -320, 192],
        [-320, 320, 192],
        [-320, -320, 224],
        [-320, 320, 224],
        [-320, -320, 256],
        [-320, 320, 256],
        [-320, -320, 288],
        [-320, 320, 288],
        [-288, -320, -320],
        [-288, -320, 320],
        [-288, -288, -320],
        [-288, -288, 320],
        [-288, -256, -320],
        [-288, -256, 320],
        [-288, -224, -320],
        [-288, -224, 320],
        [-288, -192, -320],
        [-288, -192, 320],
        [-288, -160, -320],
        [-288, -160, 320],
        [-288, -128, -320],
        [-288, -128, 320],
        [-288, -96, -320],
        [-288, -96, 320],
        [-288, -64, -320],
        [-288, -64, 320],
        [-288, -32, -320],
        [-288, -32, 320],
        [-288, 0, -320],
        [-288, 0, 320],
        [-288, 32, -320],
        [-288, 32, 320],
        [-288, 64, -320],
        [-288, 64, 320],
        [-288, 96, -320],
        [-288, 96, 320],
        [-288, 128, -320],
        [-288, 128, 320],
        [-288, 160, -320],
        [-288, 160, 320],
        [-288, 192, -320],
        [-288, 192, 320],
        [-288, 224, -320],
        [-288, 224, 320],
        [-288, 256, -320],
        [-288, 256, 320],
        [-288, 288, -320],
        [-288, 288, 320],
        [-288, 320, -320],
        [-288, 320, 320],
        [-288, -320, -288],
        [-288, 320, -288],
        [-288, -320, -256],
        [-288, 320, -256],
        [-288, -320, -224],
        [-288, 320, -224],
        [-288, -320, -192],
        [-288, 320, -192],
        [-288, -320, -160],
        [-288, 320, -160],
        [-288, -320, -128],
        [-288, 320, -128],
        [-288, -320, -96],
        [-288, 320, -96],
        [-288, -320, -64],
        [-288, 320, -64],
        [-288, -320, -32],
        [-288, 320, -32],
        [-288, -320, 0],
        [-288, 320, 0],
        [-288, -320, 32],
        [-288, 320, 32],
        [-288, -320, 64],
        [-288, 320, 64],
        [-288, -320, 96],
        [-288, 320, 96],
        [-288, -320, 128],
        [-288, 320, 128],
        [-288, -320, 160],
        [-288, 320, 160],
        [-288, -320, 192],
        [-288, 320, 192],
        [-288, -320, 224],
        [-288, 320, 224],
        [-288, -320, 256],
        [-288, 320, 256],
        [-288, -320, 288],
        [-288, 320, 288],
        [-256, -320, -320],
        [-256, -320, 320],
        [-256, -288, -320],
        [-256, -288, 320],
        [-256, -256, -320],
        [-256, -256, 320],
        [-256, -224, -320],
        [-256, -224, 320],
        [-256, -192, -320],
        [-256, -192, 320],
        [-256, -160, -320],
        [-256, -160, 320],
        [-256, -128, -320],
        [-256, -128, 320],
        [-256, -96, -320],
        [-256, -96, 320],
        [-256, -64, -320],
        [-256, -64, 320],
        [-256, -32, -320],
        [-256, -32, 320],
        [-256, 0, -320],
        [-256, 0, 320],
        [-256, 32, -320],
        [-256, 32, 320],
        [-256, 64, -320],
        [-256, 64, 320],
        [-256, 96, -320],
        [-256, 96, 320],
        [-256, 128, -320],
        [-256, 128, 320],
        [-256, 160, -320],
        [-256, 160, 320],
        [-256, 192, -320],
        [-256, 192, 320],
        [-256, 224, -320],
        [-256, 224, 320],
        [-256, 256, -320],
        [-256, 256, 320],
        [-256, 288, -320],
        [-256, 288, 320],
        [-256, 320, -320],
        [-256, 320, 320],
        [-256, -320, -288],
        [-256, 320, -288],
        [-256, -320, -256],
        [-256, 320, -256],
        [-256, -320, -224],
        [-256, 320, -224],
        [-256, -320, -192],
        [-256, 320, -192],
        [-256, -320, -160],
        [-256, 320, -160],
        [-256, -320, -128],
        [-256, 320, -128],
        [-256, -320, -96],
        [-256, 320, -96],
        [-256, -320, -64],
        [-256, 320, -64],
        [-256, -320, -32],
        [-256, 320, -32],
        [-256, -320, 0],
        [-256, 320, 0],
        [-256, -320, 32],
        [-256, 320, 32],
        [-256, -320, 64],
        [-256, 320, 64],
        [-256, -320, 96],
        [-256, 320, 96],
        [-256, -320, 128],
        [-256, 320, 128],
        [-256, -320, 160],
        [-256, 320, 160],
        [-256, -320, 192],
        [-256, 320, 192],
        [-256, -320, 224],
        [-256, 320, 224],
        [-256, -320, 256],
        [-256, 320, 256],
        [-256, -320, 288],
        [-256, 320, 288],
        [-224, -320, -320],
        [-224, -320, 320],
        [-224, -288, -320],
        [-224, -288, 320],
        [-224, -256, -320],
        [-224, -256, 320],
        [-224, -224, -320],
        [-224, -224, 320],
        [-224, -192, -320],
        [-224, -192, 320],
        [-224, -160, -320],
        [-224, -160, 320],
        [-224, -128, -320],
        [-224, -128, 320],
        [-224, -96, -320],
        [-224, -96, 320],
        [-224, -64, -320],
        [-224, -64, 320],
        [-224, -32, -320],
        [-224, -32, 320],
        [-224, 0, -320],
        [-224, 0, 320],
        [-224, 32, -320],
        [-224, 32, 320],
        [-224, 64, -320],
        [-224, 64, 320],
        [-224, 96, -320],
        [-224, 96, 320],
        [-224, 128, -320],
        [-224, 128, 320],
        [-224, 160, -320],
        [-224, 160, 320],
        [-224, 192, -320],
        [-224, 192, 320],
        [-224, 224, -320],
        [-224, 224, 320],
        [-224, 256, -320],
        [-224, 256, 320],
        [-224, 288, -320],
        [-224, 288, 320],
        [-224, 320, -320],
        [-224, 320, 320],
        [-224, -320, -288],
        [-224, 320, -288],
        [-224, -320, -256],
        [-224, 320, -256],
        [-224, -320, -224],
        [-224, 320, -224],
        [-224, -320, -192],
        [-224, 320, -192],
        [-224, -320, -160],
        [-224, 320, -160],
        [-224, -320, -128],
        [-224, 320, -128],
        [-224, -320, -96],
        [-224, 320, -96],
        [-224, -320, -64],
        [-224, 320, -64],
        [-224, -320, -32],
        [-224, 320, -32],
        [-224, -320, 0],
        [-224, 320, 0],
        [-224, -320, 32],
        [-224, 320, 32],
        [-224, -320, 64],
        [-224, 320, 64],
        [-224, -320, 96],
        [-224, 320, 96],
        [-224, -320, 128],
        [-224, 320, 128],
        [-224, -320, 160],
        [-224, 320, 160],
        [-224, -320, 192],
        [-224, 320, 192],
        [-224, -320, 224],
        [-224, 320, 224],
        [-224, -320, 256],
        [-224, 320, 256],
        [-224, -320, 288],
        [-224, 320, 288],
        [-192, -320, -320],
        [-192, -320, 320],
        [-192, -288, -320],
        [-192, -288, 320],
        [-192, -256, -320],
        [-192, -256, 320],
        [-192, -224, -320],
        [-192, -224, 320],
        [-192, -192, -320],
        [-192, -192, 320],
        [-192, -160, -320],
        [-192, -160, 320],
        [-192, -128, -320],
        [-192, -128, 320],
        [-192, -96, -320],
        [-192, -96, 320],
        [-192, -64, -320],
        [-192, -64, 320],
        [-192, -32, -320],
        [-192, -32, 320],
        [-192, 0, -320],
        [-192, 0, 320],
        [-192, 32, -320],
        [-192, 32, 320],
        [-192, 64, -320],
        [-192, 64, 320],
        [-192, 96, -320],
        [-192, 96, 320],
        [-192, 128, -320],
        [-192, 128, 320],
        [-192, 160, -320],
        [-192, 160, 320],
        [-192, 192, -320],
        [-192, 192, 320],
        [-192, 224, -320],
        [-192, 224, 320],
        [-192, 256, -320],
        [-192, 256, 320],
        [-192, 288, -320],
        [-192, 288, 320],
        [-192, 320, -320],
        [-192, 320, 320],
        [-192, -320, -288],
        [-192, 320, -288],
        [-192, -320, -256],
        [-192, 320, -256],
        [-192, -320, -224],
        [-192, 320, -224],
        [-192, -320, -192],
        [-192, 320, -192],
        [-192, -320, -160],
        [-192, 320, -160],
        [-192, -320, -128],
        [-192, 320, -128],
        [-192, -320, -96],
        [-192, 320, -96],
        [-192, -320, -64],
        [-192, 320, -64],
        [-192, -320, -32],
        [-192, 320, -32],
        [-192, -320, 0],
        [-192, 320, 0],
        [-192, -320, 32],
        [-192, 320, 32],
        [-192, -320, 64],
        [-192, 320, 64],
        [-192, -320, 96],
        [-192, 320, 96],
        [-192, -320, 128],
        [-192, 320, 128],
        [-192, -320, 160],
        [-192, 320, 160],
        [-192, -320, 192],
        [-192, 320, 192],
        [-192, -320, 224],
        [-192, 320, 224],
        [-192, -320, 256],
        [-192, 320, 256],
        [-192, -320, 288],
        [-192, 320, 288],
        [-160, -320, -320],
        [-160, -320, 320],
        [-160, -288, -320],
        [-160, -288, 320],
        [-160, -256, -320],
        [-160, -256, 320],
        [-160, -224, -320],
        [-160, -224, 320],
        [-160, -192, -320],
        [-160, -192, 320],
        [-160, -160, -320],
        [-160, -160, 320],
        [-160, -128, -320],
        [-160, -128, 320],
        [-160, -96, -320],
        [-160, -96, 320],
        [-160, -64, -320],
        [-160, -64, 320],
        [-160, -32, -320],
        [-160, -32, 320],
        [-160, 0, -320],
        [-160, 0, 320],
        [-160, 32, -320],
        [-160, 32, 320],
        [-160, 64, -320],
        [-160, 64, 320],
        [-160, 96, -320],
        [-160, 96, 320],
        [-160, 128, -320],
        [-160, 128, 320],
        [-160, 160, -320],
        [-160, 160, 320],
        [-160, 192, -320],
        [-160, 192, 320],
        [-160, 224, -320],
        [-160, 224, 320],
        [-160, 256, -320],
        [-160, 256, 320],
        [-160, 288, -320],
        [-160, 288, 320],
        [-160, 320, -320],
        [-160, 320, 320],
        [-160, -320, -288],
        [-160, 320, -288],
        [-160, -320, -256],
        [-160, 320, -256],
        [-160, -320, -224],
        [-160, 320, -224],
        [-160, -320, -192],
        [-160, 320, -192],
        [-160, -320, -160],
        [-160, 320, -160],
        [-160, -320, -128],
        [-160, 320, -128],
        [-160, -320, -96],
        [-160, 320, -96],
        [-160, -320, -64],
        [-160, 320, -64],
        [-160, -320, -32],
        [-160, 320, -32],
        [-160, -320, 0],
        [-160, 320, 0],
        [-160, -320, 32],
        [-160, 320, 32],
        [-160, -320, 64],
        [-160, 320, 64],
        [-160, -320, 96],
        [-160, 320, 96],
        [-160, -320, 128],
        [-160, 320, 128],
        [-160, -320, 160],
        [-160, 320, 160],
        [-160, -320, 192],
        [-160, 320, 192],
        [-160, -320, 224],
        [-160, 320, 224],
        [-160, -320, 256],
        [-160, 320, 256],
        [-160, -320, 288],
        [-160, 320, 288],
        [-128, -320, -320],
        [-128, -320, 320],
        [-128, -288, -320],
        [-128, -288, 320],
        [-128, -256, -320],
        [-128, -256, 320],
        [-128, -224, -320],
        [-128, -224, 320],
        [-128, -192, -320],
        [-128, -192, 320],
        [-128, -160, -320],
        [-128, -160, 320],
        [-128, -128, -320],
        [-128, -128, 320],
        [-128, -96, -320],
        [-128, -96, 320],
        [-128, -64, -320],
        [-128, -64, 320],
        [-128, -32, -320],
        [-128, -32, 320],
        [-128, 0, -320],
        [-128, 0, 320],
        [-128, 32, -320],
        [-128, 32, 320],
        [-128, 64, -320],
        [-128, 64, 320],
        [-128, 96, -320],
        [-128, 96, 320],
        [-128, 128, -320],
        [-128, 128, 320],
        [-128, 160, -320],
        [-128, 160, 320],
        [-128, 192, -320],
        [-128, 192, 320],
        [-128, 224, -320],
        [-128, 224, 320],
        [-128, 256, -320],
        [-128, 256, 320],
        [-128, 288, -320],
        [-128, 288, 320],
        [-128, 320, -320],
        [-128, 320, 320],
        [-128, -320, -288],
        [-128, 320, -288],
        [-128, -320, -256],
        [-128, 320, -256],
        [-128, -320, -224],
        [-128, 320, -224],
        [-128, -320, -192],
        [-128, 320, -192],
        [-128, -320, -160],
        [-128, 320, -160],
        [-128, -320, -128],
        [-128, 320, -128],
        [-128, -320, -96],
        [-128, 320, -96],
        [-128, -320, -64],
        [-128, 320, -64],
        [-128, -320, -32],
        [-128, 320, -32],
        [-128, -320, 0],
        [-128, 320, 0],
        [-128, -320, 32],
        [-128, 320, 32],
        [-128, -320, 64],
        [-128, 320, 64],
        [-128, -320, 96],
        [-128, 320, 96],
        [-128, -320, 128],
        [-128, 320, 128],
        [-128, -320, 160],
        [-128, 320, 160],
        [-128, -320, 192],
        [-128, 320, 192],
        [-128, -320, 224],
        [-128, 320, 224],
        [-128, -320, 256],
        [-128, 320, 256],
        [-128, -320, 288],
        [-128, 320, 288],
        [-96, -320, -320],
        [-96, -320, 320],
        [-96, -288, -320],
        [-96, -288, 320],
        [-96, -256, -320],
        [-96, -256, 320],
        [-96, -224, -320],
        [-96, -224, 320],
        [-96, -192, -320],
        [-96, -192, 320],
        [-96, -160, -320],
        [-96, -160, 320],
        [-96, -128, -320],
        [-96, -128, 320],
        [-96, -96, -320],
        [-96, -96, 320],
        [-96, -64, -320],
        [-96, -64, 320],
        [-96, -32, -320],
        [-96, -32, 320],
        [-96, 0, -320],
        [-96, 0, 320],
        [-96, 32, -320],
        [-96, 32, 320],
        [-96, 64, -320],
        [-96, 64, 320],
        [-96, 96, -320],
        [-96, 96, 320],
        [-96, 128, -320],
        [-96, 128, 320],
        [-96, 160, -320],
        [-96, 160, 320],
        [-96, 192, -320],
        [-96, 192, 320],
        [-96, 224, -320],
        [-96, 224, 320],
        [-96, 256, -320],
        [-96, 256, 320],
        [-96, 288, -320],
        [-96, 288, 320],
        [-96, 320, -320],
        [-96, 320, 320],
        [-96, -320, -288],
        [-96, 320, -288],
        [-96, -320, -256],
        [-96, 320, -256],
        [-96, -320, -224],
        [-96, 320, -224],
        [-96, -320, -192],
        [-96, 320, -192],
        [-96, -320, -160],
        [-96, 320, -160],
        [-96, -320, -128],
        [-96, 320, -128],
        [-96, -320, -96],
        [-96, 320, -96],
        [-96, -320, -64],
        [-96, 320, -64],
        [-96, -320, -32],
        [-96, 320, -32],
        [-96, -320, 0],
        [-96, 320, 0],
        [-96, -320, 32],
        [-96, 320, 32],
        [-96, -320, 64],
        [-96, 320, 64],
        [-96, -320, 96],
        [-96, 320, 96],
        [-96, -320, 128],
        [-96, 320, 128],
        [-96, -320, 160],
        [-96, 320, 160],
        [-96, -320, 192],
        [-96, 320, 192],
        [-96, -320, 224],
        [-96, 320, 224],
        [-96, -320, 256],
        [-96, 320, 256],
        [-96, -320, 288],
        [-96, 320, 288],
        [-64, -320, -320],
        [-64, -320, 320],
        [-64, -288, -320],
        [-64, -288, 320],
        [-64, -256, -320],
        [-64, -256, 320],
        [-64, -224, -320],
        [-64, -224, 320],
        [-64, -192, -320],
        [-64, -192, 320],
        [-64, -160, -320],
        [-64, -160, 320],
        [-64, -128, -320],
        [-64, -128, 320],
        [-64, -96, -320],
        [-64, -96, 320],
        [-64, -64, -320],
        [-64, -64, 320],
        [-64, -32, -320],
        [-64, -32, 320],
        [-64, 0, -320],
        [-64, 0, 320],
        [-64, 32, -320],
        [-64, 32, 320],
        [-64, 64, -320],
        [-64, 64, 320],
        [-64, 96, -320],
        [-64, 96, 320],
        [-64, 128, -320],
        [-64, 128, 320],
        [-64, 160, -320],
        [-64, 160, 320],
        [-64, 192, -320],
        [-64, 192, 320],
        [-64, 224, -320],
        [-64, 224, 320],
        [-64, 256, -320],
        [-64, 256, 320],
        [-64, 288, -320],
        [-64, 288, 320],
        [-64, 320, -320],
        [-64, 320, 320],
        [-64, -320, -288],
        [-64, 320, -288],
        [-64, -320, -256],
        [-64, 320, -256],
        [-64, -320, -224],
        [-64, 320, -224],
        [-64, -320, -192],
        [-64, 320, -192],
        [-64, -320, -160],
        [-64, 320, -160],
        [-64, -320, -128],
        [-64, 320, -128],
        [-64, -320, -96],
        [-64, 320, -96],
        [-64, -320, -64],
        [-64, 320, -64],
        [-64, -320, -32],
        [-64, 320, -32],
        [-64, -320, 0],
        [-64, 320, 0],
        [-64, -320, 32],
        [-64, 320, 32],
        [-64, -320, 64],
        [-64, 320, 64],
        [-64, -320, 96],
        [-64, 320, 96],
        [-64, -320, 128],
        [-64, 320, 128],
        [-64, -320, 160],
        [-64, 320, 160],
        [-64, -320, 192],
        [-64, 320, 192],
        [-64, -320, 224],
        [-64, 320, 224],
        [-64, -320, 256],
        [-64, 320, 256],
        [-64, -320, 288],
        [-64, 320, 288],
        [-32, -320, -320],
        [-32, -320, 320],
        [-32, -288, -320],
        [-32, -288, 320],
        [-32, -256, -320],
        [-32, -256, 320],
        [-32, -224, -320],
        [-32, -224, 320],
        [-32, -192, -320],
        [-32, -192, 320],
        [-32, -160, -320],
        [-32, -160, 320],
        [-32, -128, -320],
        [-32, -128, 320],
        [-32, -96, -320],
        [-32, -96, 320],
        [-32, -64, -320],
        [-32, -64, 320],
        [-32, -32, -320],
        [-32, -32, 320],
        [-32, 0, -320],
        [-32, 0, 320],
        [-32, 32, -320],
        [-32, 32, 320],
        [-32, 64, -320],
        [-32, 64, 320],
        [-32, 96, -320],
        [-32, 96, 320],
        [-32, 128, -320],
        [-32, 128, 320],
        [-32, 160, -320],
        [-32, 160, 320],
        [-32, 192, -320],
        [-32, 192, 320],
        [-32, 224, -320],
        [-32, 224, 320],
        [-32, 256, -320],
        [-32, 256, 320],
        [-32, 288, -320],
        [-32, 288, 320],
        [-32, 320, -320],
        [-32, 320, 320],
        [-32, -320, -288],
        [-32, 320, -288],
        [-32, -320, -256],
        [-32, 320, -256],
        [-32, -320, -224],
        [-32, 320, -224],
        [-32, -320, -192],
        [-32, 320, -192],
        [-32, -320, -160],
        [-32, 320, -160],
        [-32, -320, -128],
        [-32, 320, -128],
        [-32, -320, -96],
        [-32, 320, -96],
        [-32, -320, -64],
        [-32, 320, -64],
        [-32, -320, -32],
        [-32, 320, -32],
        [-32, -320, 0],
        [-32, 320, 0],
        [-32, -320, 32],
        [-32, 320, 32],
        [-32, -320, 64],
        [-32, 320, 64],
        [-32, -320, 96],
        [-32, 320, 96],
        [-32, -320, 128],
        [-32, 320, 128],
        [-32, -320, 160],
        [-32, 320, 160],
        [-32, -320, 192],
        [-32, 320, 192],
        [-32, -320, 224],
        [-32, 320, 224],
        [-32, -320, 256],
        [-32, 320, 256],
        [-32, -320, 288],
        [-32, 320, 288],
        [0, -320, -320],
        [0, -320, 320],
        [0, -288, -320],
        [0, -288, 320],
        [0, -256, -320],
        [0, -256, 320],
        [0, -224, -320],
        [0, -224, 320],
        [0, -192, -320],
        [0, -192, 320],
        [0, -160, -320],
        [0, -160, 320],
        [0, -128, -320],
        [0, -128, 320],
        [0, -96, -320],
        [0, -96, 320],
        [0, -64, -320],
        [0, -64, 320],
        [0, -32, -320],
        [0, -32, 320],
        [0, 0, -320],
        [0, 0, 320],
        [0, 32, -320],
        [0, 32, 320],
        [0, 64, -320],
        [0, 64, 320],
        [0, 96, -320],
        [0, 96, 320],
        [0, 128, -320],
        [0, 128, 320],
        [0, 160, -320],
        [0, 160, 320],
        [0, 192, -320],
        [0, 192, 320],
        [0, 224, -320],
        [0, 224, 320],
        [0, 256, -320],
        [0, 256, 320],
        [0, 288, -320],
        [0, 288, 320],
        [0, 320, -320],
        [0, 320, 320],
        [0, -320, -288],
        [0, 320, -288],
        [0, -320, -256],
        [0, 320, -256],
        [0, -320, -224],
        [0, 320, -224],
        [0, -320, -192],
        [0, 320, -192],
        [0, -320, -160],
        [0, 320, -160],
        [0, -320, -128],
        [0, 320, -128],
        [0, -320, -96],
        [0, 320, -96],
        [0, -320, -64],
        [0, 320, -64],
        [0, -320, -32],
        [0, 320, -32],
        [0, -320, 0],
        [0, 320, 0],
        [0, -320, 32],
        [0, 320, 32],
        [0, -320, 64],
        [0, 320, 64],
        [0, -320, 96],
        [0, 320, 96],
        [0, -320, 128],
        [0, 320, 128],
        [0, -320, 160],
        [0, 320, 160],
        [0, -320, 192],
        [0, 320, 192],
        [0, -320, 224],
        [0, 320, 224],
        [0, -320, 256],
        [0, 320, 256],
        [0, -320, 288],
        [0, 320, 288],
        [32, -320, -320],
        [32, -320, 320],
        [32, -288, -320],
        [32, -288, 320],
        [32, -256, -320],
        [32, -256, 320],
        [32, -224, -320],
        [32, -224, 320],
        [32, -192, -320],
        [32, -192, 320],
        [32, -160, -320],
        [32, -160, 320],
        [32, -128, -320],
        [32, -128, 320],
        [32, -96, -320],
        [32, -96, 320],
        [32, -64, -320],
        [32, -64, 320],
        [32, -32, -320],
        [32, -32, 320],
        [32, 0, -320],
        [32, 0, 320],
        [32, 32, -320],
        [32, 32, 320],
        [32, 64, -320],
        [32, 64, 320],
        [32, 96, -320],
        [32, 96, 320],
        [32, 128, -320],
        [32, 128, 320],
        [32, 160, -320],
        [32, 160, 320],
        [32, 192, -320],
        [32, 192, 320],
        [32, 224, -320],
        [32, 224, 320],
        [32, 256, -320],
        [32, 256, 320],
        [32, 288, -320],
        [32, 288, 320],
        [32, 320, -320],
        [32, 320, 320],
        [32, -320, -288],
        [32, 320, -288],
        [32, -320, -256],
        [32, 320, -256],
        [32, -320, -224],
        [32, 320, -224],
        [32, -320, -192],
        [32, 320, -192],
        [32, -320, -160],
        [32, 320, -160],
        [32, -320, -128],
        [32, 320, -128],
        [32, -320, -96],
        [32, 320, -96],
        [32, -320, -64],
        [32, 320, -64],
        [32, -320, -32],
        [32, 320, -32],
        [32, -320, 0],
        [32, 320, 0],
        [32, -320, 32],
        [32, 320, 32],
        [32, -320, 64],
        [32, 320, 64],
        [32, -320, 96],
        [32, 320, 96],
        [32, -320, 128],
        [32, 320, 128],
        [32, -320, 160],
        [32, 320, 160],
        [32, -320, 192],
        [32, 320, 192],
        [32, -320, 224],
        [32, 320, 224],
        [32, -320, 256],
        [32, 320, 256],
        [32, -320, 288],
        [32, 320, 288],
        [64, -320, -320],
        [64, -320, 320],
        [64, -288, -320],
        [64, -288, 320],
        [64, -256, -320],
        [64, -256, 320],
        [64, -224, -320],
        [64, -224, 320],
        [64, -192, -320],
        [64, -192, 320],
        [64, -160, -320],
        [64, -160, 320],
        [64, -128, -320],
        [64, -128, 320],
        [64, -96, -320],
        [64, -96, 320],
        [64, -64, -320],
        [64, -64, 320],
        [64, -32, -320],
        [64, -32, 320],
        [64, 0, -320],
        [64, 0, 320],
        [64, 32, -320],
        [64, 32, 320],
        [64, 64, -320],
        [64, 64, 320],
        [64, 96, -320],
        [64, 96, 320],
        [64, 128, -320],
        [64, 128, 320],
        [64, 160, -320],
        [64, 160, 320],
        [64, 192, -320],
        [64, 192, 320],
        [64, 224, -320],
        [64, 224, 320],
        [64, 256, -320],
        [64, 256, 320],
        [64, 288, -320],
        [64, 288, 320],
        [64, 320, -320],
        [64, 320, 320],
        [64, -320, -288],
        [64, 320, -288],
        [64, -320, -256],
        [64, 320, -256],
        [64, -320, -224],
        [64, 320, -224],
        [64, -320, -192],
        [64, 320, -192],
        [64, -320, -160],
        [64, 320, -160],
        [64, -320, -128],
        [64, 320, -128],
        [64, -320, -96],
        [64, 320, -96],
        [64, -320, -64],
        [64, 320, -64],
        [64, -320, -32],
        [64, 320, -32],
        [64, -320, 0],
        [64, 320, 0],
        [64, -320, 32],
        [64, 320, 32],
        [64, -320, 64],
        [64, 320, 64],
        [64, -320, 96],
        [64, 320, 96],
        [64, -320, 128],
        [64, 320, 128],
        [64, -320, 160],
        [64, 320, 160],
        [64, -320, 192],
        [64, 320, 192],
        [64, -320, 224],
        [64, 320, 224],
        [64, -320, 256],
        [64, 320, 256],
        [64, -320, 288],
        [64, 320, 288],
        [96, -320, -320],
        [96, -320, 320],
        [96, -288, -320],
        [96, -288, 320],
        [96, -256, -320],
        [96, -256, 320],
        [96, -224, -320],
        [96, -224, 320],
        [96, -192, -320],
        [96, -192, 320],
        [96, -160, -320],
        [96, -160, 320],
        [96, -128, -320],
        [96, -128, 320],
        [96, -96, -320],
        [96, -96, 320],
        [96, -64, -320],
        [96, -64, 320],
        [96, -32, -320],
        [96, -32, 320],
        [96, 0, -320],
        [96, 0, 320],
        [96, 32, -320],
        [96, 32, 320],
        [96, 64, -320],
        [96, 64, 320],
        [96, 96, -320],
        [96, 96, 320],
        [96, 128, -320],
        [96, 128, 320],
        [96, 160, -320],
        [96, 160, 320],
        [96, 192, -320],
        [96, 192, 320],
        [96, 224, -320],
        [96, 224, 320],
        [96, 256, -320],
        [96, 256, 320],
        [96, 288, -320],
        [96, 288, 320],
        [96, 320, -320],
        [96, 320, 320],
        [96, -320, -288],
        [96, 320, -288],
        [96, -320, -256],
        [96, 320, -256],
        [96, -320, -224],
        [96, 320, -224],
        [96, -320, -192],
        [96, 320, -192],
        [96, -320, -160],
        [96, 320, -160],
        [96, -320, -128],
        [96, 320, -128],
        [96, -320, -96],
        [96, 320, -96],
        [96, -320, -64],
        [96, 320, -64],
        [96, -320, -32],
        [96, 320, -32],
        [96, -320, 0],
        [96, 320, 0],
        [96, -320, 32],
        [96, 320, 32],
        [96, -320, 64],
        [96, 320, 64],
        [96, -320, 96],
        [96, 320, 96],
        [96, -320, 128],
        [96, 320, 128],
        [96, -320, 160],
        [96, 320, 160],
        [96, -320, 192],
        [96, 320, 192],
        [96, -320, 224],
        [96, 320, 224],
        [96, -320, 256],
        [96, 320, 256],
        [96, -320, 288],
        [96, 320, 288],
        [128, -320, -320],
        [128, -320, 320],
        [128, -288, -320],
        [128, -288, 320],
        [128, -256, -320],
        [128, -256, 320],
        [128, -224, -320],
        [128, -224, 320],
        [128, -192, -320],
        [128, -192, 320],
        [128, -160, -320],
        [128, -160, 320],
        [128, -128, -320],
        [128, -128, 320],
        [128, -96, -320],
        [128, -96, 320],
        [128, -64, -320],
        [128, -64, 320],
        [128, -32, -320],
        [128, -32, 320],
        [128, 0, -320],
        [128, 0, 320],
        [128, 32, -320],
        [128, 32, 320],
        [128, 64, -320],
        [128, 64, 320],
        [128, 96, -320],
        [128, 96, 320],
        [128, 128, -320],
        [128, 128, 320],
        [128, 160, -320],
        [128, 160, 320],
        [128, 192, -320],
        [128, 192, 320],
        [128, 224, -320],
        [128, 224, 320],
        [128, 256, -320],
        [128, 256, 320],
        [128, 288, -320],
        [128, 288, 320],
        [128, 320, -320],
        [128, 320, 320],
        [128, -320, -288],
        [128, 320, -288],
        [128, -320, -256],
        [128, 320, -256],
        [128, -320, -224],
        [128, 320, -224],
        [128, -320, -192],
        [128, 320, -192],
        [128, -320, -160],
        [128, 320, -160],
        [128, -320, -128],
        [128, 320, -128],
        [128, -320, -96],
        [128, 320, -96],
        [128, -320, -64],
        [128, 320, -64],
        [128, -320, -32],
        [128, 320, -32],
        [128, -320, 0],
        [128, 320, 0],
        [128, -320, 32],
        [128, 320, 32],
        [128, -320, 64],
        [128, 320, 64],
        [128, -320, 96],
        [128, 320, 96],
        [128, -320, 128],
        [128, 320, 128],
        [128, -320, 160],
        [128, 320, 160],
        [128, -320, 192],
        [128, 320, 192],
        [128, -320, 224],
        [128, 320, 224],
        [128, -320, 256],
        [128, 320, 256],
        [128, -320, 288],
        [128, 320, 288],
        [160, -320, -320],
        [160, -320, 320],
        [160, -288, -320],
        [160, -288, 320],
        [160, -256, -320],
        [160, -256, 320],
        [160, -224, -320],
        [160, -224, 320],
        [160, -192, -320],
        [160, -192, 320],
        [160, -160, -320],
        [160, -160, 320],
        [160, -128, -320],
        [160, -128, 320],
        [160, -96, -320],
        [160, -96, 320],
        [160, -64, -320],
        [160, -64, 320],
        [160, -32, -320],
        [160, -32, 320],
        [160, 0, -320],
        [160, 0, 320],
        [160, 32, -320],
        [160, 32, 320],
        [160, 64, -320],
        [160, 64, 320],
        [160, 96, -320],
        [160, 96, 320],
        [160, 128, -320],
        [160, 128, 320],
        [160, 160, -320],
        [160, 160, 320],
        [160, 192, -320],
        [160, 192, 320],
        [160, 224, -320],
        [160, 224, 320],
        [160, 256, -320],
        [160, 256, 320],
        [160, 288, -320],
        [160, 288, 320],
        [160, 320, -320],
        [160, 320, 320],
        [160, -320, -288],
        [160, 320, -288],
        [160, -320, -256],
        [160, 320, -256],
        [160, -320, -224],
        [160, 320, -224],
        [160, -320, -192],
        [160, 320, -192],
        [160, -320, -160],
        [160, 320, -160],
        [160, -320, -128],
        [160, 320, -128],
        [160, -320, -96],
        [160, 320, -96],
        [160, -320, -64],
        [160, 320, -64],
        [160, -320, -32],
        [160, 320, -32],
        [160, -320, 0],
        [160, 320, 0],
        [160, -320, 32],
        [160, 320, 32],
        [160, -320, 64],
        [160, 320, 64],
        [160, -320, 96],
        [160, 320, 96],
        [160, -320, 128],
        [160, 320, 128],
        [160, -320, 160],
        [160, 320, 160],
        [160, -320, 192],
        [160, 320, 192],
        [160, -320, 224],
        [160, 320, 224],
        [160, -320, 256],
        [160, 320, 256],
        [160, -320, 288],
        [160, 320, 288],
        [192, -320, -320],
        [192, -320, 320],
        [192, -288, -320],
        [192, -288, 320],
        [192, -256, -320],
        [192, -256, 320],
        [192, -224, -320],
        [192, -224, 320],
        [192, -192, -320],
        [192, -192, 320],
        [192, -160, -320],
        [192, -160, 320],
        [192, -128, -320],
        [192, -128, 320],
        [192, -96, -320],
        [192, -96, 320],
        [192, -64, -320],
        [192, -64, 320],
        [192, -32, -320],
        [192, -32, 320],
        [192, 0, -320],
        [192, 0, 320],
        [192, 32, -320],
        [192, 32, 320],
        [192, 64, -320],
        [192, 64, 320],
        [192, 96, -320],
        [192, 96, 320],
        [192, 128, -320],
        [192, 128, 320],
        [192, 160, -320],
        [192, 160, 320],
        [192, 192, -320],
        [192, 192, 320],
        [192, 224, -320],
        [192, 224, 320],
        [192, 256, -320],
        [192, 256, 320],
        [192, 288, -320],
        [192, 288, 320],
        [192, 320, -320],
        [192, 320, 320],
        [192, -320, -288],
        [192, 320, -288],
        [192, -320, -256],
        [192, 320, -256],
        [192, -320, -224],
        [192, 320, -224],
        [192, -320, -192],
        [192, 320, -192],
        [192, -320, -160],
        [192, 320, -160],
        [192, -320, -128],
        [192, 320, -128],
        [192, -320, -96],
        [192, 320, -96],
        [192, -320, -64],
        [192, 320, -64],
        [192, -320, -32],
        [192, 320, -32],
        [192, -320, 0],
        [192, 320, 0],
        [192, -320, 32],
        [192, 320, 32],
        [192, -320, 64],
        [192, 320, 64],
        [192, -320, 96],
        [192, 320, 96],
        [192, -320, 128],
        [192, 320, 128],
        [192, -320, 160],
        [192, 320, 160],
        [192, -320, 192],
        [192, 320, 192],
        [192, -320, 224],
        [192, 320, 224],
        [192, -320, 256],
        [192, 320, 256],
        [192, -320, 288],
        [192, 320, 288],
        [224, -320, -320],
        [224, -320, 320],
        [224, -288, -320],
        [224, -288, 320],
        [224, -256, -320],
        [224, -256, 320],
        [224, -224, -320],
        [224, -224, 320],
        [224, -192, -320],
        [224, -192, 320],
        [224, -160, -320],
        [224, -160, 320],
        [224, -128, -320],
        [224, -128, 320],
        [224, -96, -320],
        [224, -96, 320],
        [224, -64, -320],
        [224, -64, 320],
        [224, -32, -320],
        [224, -32, 320],
        [224, 0, -320],
        [224, 0, 320],
        [224, 32, -320],
        [224, 32, 320],
        [224, 64, -320],
        [224, 64, 320],
        [224, 96, -320],
        [224, 96, 320],
        [224, 128, -320],
        [224, 128, 320],
        [224, 160, -320],
        [224, 160, 320],
        [224, 192, -320],
        [224, 192, 320],
        [224, 224, -320],
        [224, 224, 320],
        [224, 256, -320],
        [224, 256, 320],
        [224, 288, -320],
        [224, 288, 320],
        [224, 320, -320],
        [224, 320, 320],
        [224, -320, -288],
        [224, 320, -288],
        [224, -320, -256],
        [224, 320, -256],
        [224, -320, -224],
        [224, 320, -224],
        [224, -320, -192],
        [224, 320, -192],
        [224, -320, -160],
        [224, 320, -160],
        [224, -320, -128],
        [224, 320, -128],
        [224, -320, -96],
        [224, 320, -96],
        [224, -320, -64],
        [224, 320, -64],
        [224, -320, -32],
        [224, 320, -32],
        [224, -320, 0],
        [224, 320, 0],
        [224, -320, 32],
        [224, 320, 32],
        [224, -320, 64],
        [224, 320, 64],
        [224, -320, 96],
        [224, 320, 96],
        [224, -320, 128],
        [224, 320, 128],
        [224, -320, 160],
        [224, 320, 160],
        [224, -320, 192],
        [224, 320, 192],
        [224, -320, 224],
        [224, 320, 224],
        [224, -320, 256],
        [224, 320, 256],
        [224, -320, 288],
        [224, 320, 288],
        [256, -320, -320],
        [256, -320, 320],
        [256, -288, -320],
        [256, -288, 320],
        [256, -256, -320],
        [256, -256, 320],
        [256, -224, -320],
        [256, -224, 320],
        [256, -192, -320],
        [256, -192, 320],
        [256, -160, -320],
        [256, -160, 320],
        [256, -128, -320],
        [256, -128, 320],
        [256, -96, -320],
        [256, -96, 320],
        [256, -64, -320],
        [256, -64, 320],
        [256, -32, -320],
        [256, -32, 320],
        [256, 0, -320],
        [256, 0, 320],
        [256, 32, -320],
        [256, 32, 320],
        [256, 64, -320],
        [256, 64, 320],
        [256, 96, -320],
        [256, 96, 320],
        [256, 128, -320],
        [256, 128, 320],
        [256, 160, -320],
        [256, 160, 320],
        [256, 192, -320],
        [256, 192, 320],
        [256, 224, -320],
        [256, 224, 320],
        [256, 256, -320],
        [256, 256, 320],
        [256, 288, -320],
        [256, 288, 320],
        [256, 320, -320],
        [256, 320, 320],
        [256, -320, -288],
        [256, 320, -288],
        [256, -320, -256],
        [256, 320, -256],
        [256, -320, -224],
        [256, 320, -224],
        [256, -320, -192],
        [256, 320, -192],
        [256, -320, -160],
        [256, 320, -160],
        [256, -320, -128],
        [256, 320, -128],
        [256, -320, -96],
        [256, 320, -96],
        [256, -320, -64],
        [256, 320, -64],
        [256, -320, -32],
        [256, 320, -32],
        [256, -320, 0],
        [256, 320, 0],
        [256, -320, 32],
        [256, 320, 32],
        [256, -320, 64],
        [256, 320, 64],
        [256, -320, 96],
        [256, 320, 96],
        [256, -320, 128],
        [256, 320, 128],
        [256, -320, 160],
        [256, 320, 160],
        [256, -320, 192],
        [256, 320, 192],
        [256, -320, 224],
        [256, 320, 224],
        [256, -320, 256],
        [256, 320, 256],
        [256, -320, 288],
        [256, 320, 288],
        [288, -320, -320],
        [288, -320, 320],
        [288, -288, -320],
        [288, -288, 320],
        [288, -256, -320],
        [288, -256, 320],
        [288, -224, -320],
        [288, -224, 320],
        [288, -192, -320],
        [288, -192, 320],
        [288, -160, -320],
        [288, -160, 320],
        [288, -128, -320],
        [288, -128, 320],
        [288, -96, -320],
        [288, -96, 320],
        [288, -64, -320],
        [288, -64, 320],
        [288, -32, -320],
        [288, -32, 320],
        [288, 0, -320],
        [288, 0, 320],
        [288, 32, -320],
        [288, 32, 320],
        [288, 64, -320],
        [288, 64, 320],
        [288, 96, -320],
        [288, 96, 320],
        [288, 128, -320],
        [288, 128, 320],
        [288, 160, -320],
        [288, 160, 320],
        [288, 192, -320],
        [288, 192, 320],
        [288, 224, -320],
        [288, 224, 320],
        [288, 256, -320],
        [288, 256, 320],
        [288, 288, -320],
        [288, 288, 320],
        [288, 320, -320],
        [288, 320, 320],
        [288, -320, -288],
        [288, 320, -288],
        [288, -320, -256],
        [288, 320, -256],
        [288, -320, -224],
        [288, 320, -224],
        [288, -320, -192],
        [288, 320, -192],
        [288, -320, -160],
        [288, 320, -160],
        [288, -320, -128],
        [288, 320, -128],
        [288, -320, -96],
        [288, 320, -96],
        [288, -320, -64],
        [288, 320, -64],
        [288, -320, -32],
        [288, 320, -32],
        [288, -320, 0],
        [288, 320, 0],
        [288, -320, 32],
        [288, 320, 32],
        [288, -320, 64],
        [288, 320, 64],
        [288, -320, 96],
        [288, 320, 96],
        [288, -320, 128],
        [288, 320, 128],
        [288, -320, 160],
        [288, 320, 160],
        [288, -320, 192],
        [288, 320, 192],
        [288, -320, 224],
        [288, 320, 224],
        [288, -320, 256],
        [288, 320, 256],
        [288, -320, 288],
        [288, 320, 288],
        [320, -320, -320],
        [320, -320, 320],
        [320, -288, -320],
        [320, -288, 320],
        [320, -256, -320],
        [320, -256, 320],
        [320, -224, -320],
        [320, -224, 320],
        [320, -192, -320],
        [320, -192, 320],
        [320, -160, -320],
        [320, -160, 320],
        [320, -128, -320],
        [320, -128, 320],
        [320, -96, -320],
        [320, -96, 320],
        [320, -64, -320],
        [320, -64, 320],
        [320, -32, -320],
        [320, -32, 320],
        [320, 0, -320],
        [320, 0, 320],
        [320, 32, -320],
        [320, 32, 320],
        [320, 64, -320],
        [320, 64, 320],
        [320, 96, -320],
        [320, 96, 320],
        [320, 128, -320],
        [320, 128, 320],
        [320, 160, -320],
        [320, 160, 320],
        [320, 192, -320],
        [320, 192, 320],
        [320, 224, -320],
        [320, 224, 320],
        [320, 256, -320],
        [320, 256, 320],
        [320, 288, -320],
        [320, 288, 320],
        [320, 320, -320],
        [320, 320, 320],
        [320, -320, -288],
        [320, 320, -288],
        [320, -320, -256],
        [320, 320, -256],
        [320, -320, -224],
        [320, 320, -224],
        [320, -320, -192],
        [320, 320, -192],
        [320, -320, -160],
        [320, 320, -160],
        [320, -320, -128],
        [320, 320, -128],
        [320, -320, -96],
        [320, 320, -96],
        [320, -320, -64],
        [320, 320, -64],
        [320, -320, -32],
        [320, 320, -32],
        [320, -320, 0],
        [320, 320, 0],
        [320, -320, 32],
        [320, 320, 32],
        [320, -320, 64],
        [320, 320, 64],
        [320, -320, 96],
        [320, 320, 96],
        [320, -320, 128],
        [320, 320, 128],
        [320, -320, 160],
        [320, 320, 160],
        [320, -320, 192],
        [320, 320, 192],
        [320, -320, 224],
        [320, 320, 224],
        [320, -320, 256],
        [320, 320, 256],
        [320, -320, 288],
        [320, 320, 288],
        [-320, -288, -288],
        [320, -288, -288],
        [-320, -256, -288],
        [320, -256, -288],
        [-320, -224, -288],
        [320, -224, -288],
        [-320, -192, -288],
        [320, -192, -288],
        [-320, -160, -288],
        [320, -160, -288],
        [-320, -128, -288],
        [320, -128, -288],
        [-320, -96, -288],
        [320, -96, -288],
        [-320, -64, -288],
        [320, -64, -288],
        [-320, -32, -288],
        [320, -32, -288],
        [-320, 0, -288],
        [320, 0, -288],
        [-320, 32, -288],
        [320, 32, -288],
        [-320, 64, -288],
        [320, 64, -288],
        [-320, 96, -288],
        [320, 96, -288],
        [-320, 128, -288],
        [320, 128, -288],
        [-320, 160, -288],
        [320, 160, -288],
        [-320, 192, -288],
        [320, 192, -288],
        [-320, 224, -288],
        [320, 224, -288],
        [-320, 256, -288],
        [320, 256, -288],
        [-320, 288, -288],
        [320, 288, -288],
        [-320, -288, -256],
        [320, -288, -256],
        [-320, -256, -256],
        [320, -256, -256],
        [-320, -224, -256],
        [320, -224, -256],
        [-320, -192, -256],
        [320, -192, -256],
        [-320, -160, -256],
        [320, -160, -256],
        [-320, -128, -256],
        [320, -128, -256],
        [-320, -96, -256],
        [320, -96, -256],
        [-320, -64, -256],
        [320, -64, -256],
        [-320, -32, -256],
        [320, -32, -256],
        [-320, 0, -256],
        [320, 0, -256],
        [-320, 32, -256],
        [320, 32, -256],
        [-320, 64, -256],
        [320, 64, -256],
        [-320, 96, -256],
        [320, 96, -256],
        [-320, 128, -256],
        [320, 128, -256],
        [-320, 160, -256],
        [320, 160, -256],
        [-320, 192, -256],
        [320, 192, -256],
        [-320, 224, -256],
        [320, 224, -256],
        [-320, 256, -256],
        [320, 256, -256],
        [-320, 288, -256],
        [320, 288, -256],
        [-320, -288, -224],
        [320, -288, -224],
        [-320, -256, -224],
        [320, -256, -224],
        [-320, -224, -224],
        [320, -224, -224],
        [-320, -192, -224],
        [320, -192, -224],
        [-320, -160, -224],
        [320, -160, -224],
        [-320, -128, -224],
        [320, -128, -224],
        [-320, -96, -224],
        [320, -96, -224],
        [-320, -64, -224],
        [320, -64, -224],
        [-320, -32, -224],
        [320, -32, -224],
        [-320, 0, -224],
        [320, 0, -224],
        [-320, 32, -224],
        [320, 32, -224],
        [-320, 64, -224],
        [320, 64, -224],
        [-320, 96, -224],
        [320, 96, -224],
        [-320, 128, -224],
        [320, 128, -224],
        [-320, 160, -224],
        [320, 160, -224],
        [-320, 192, -224],
        [320, 192, -224],
        [-320, 224, -224],
        [320, 224, -224],
        [-320, 256, -224],
        [320, 256, -224],
        [-320, 288, -224],
        [320, 288, -224],
        [-320, -288, -192],
        [320, -288, -192],
        [-320, -256, -192],
        [320, -256, -192],
        [-320, -224, -192],
        [320, -224, -192],
        [-320, -192, -192],
        [320, -192, -192],
        [-320, -160, -192],
        [320, -160, -192],
        [-320, -128, -192],
        [320, -128, -192],
        [-320, -96, -192],
        [320, -96, -192],
        [-320, -64, -192],
        [320, -64, -192],
        [-320, -32, -192],
        [320, -32, -192],
        [-320, 0, -192],
        [320, 0, -192],
        [-320, 32, -192],
        [320, 32, -192],
        [-320, 64, -192],
        [320, 64, -192],
        [-320, 96, -192],
        [320, 96, -192],
        [-320, 128, -192],
        [320, 128, -192],
        [-320, 160, -192],
        [320, 160, -192],
        [-320, 192, -192],
        [320, 192, -192],
        [-320, 224, -192],
        [320, 224, -192],
        [-320, 256, -192],
        [320, 256, -192],
        [-320, 288, -192],
        [320, 288, -192],
        [-320, -288, -160],
        [320, -288, -160],
        [-320, -256, -160],
        [320, -256, -160],
        [-320, -224, -160],
        [320, -224, -160],
        [-320, -192, -160],
        [320, -192, -160],
        [-320, -160, -160],
        [320, -160, -160],
        [-320, -128, -160],
        [320, -128, -160],
        [-320, -96, -160],
        [320, -96, -160],
        [-320, -64, -160],
        [320, -64, -160],
        [-320, -32, -160],
        [320, -32, -160],
        [-320, 0, -160],
        [320, 0, -160],
        [-320, 32, -160],
        [320, 32, -160],
        [-320, 64, -160],
        [320, 64, -160],
        [-320, 96, -160],
        [320, 96, -160],
        [-320, 128, -160],
        [320, 128, -160],
        [-320, 160, -160],
        [320, 160, -160],
        [-320, 192, -160],
        [320, 192, -160],
        [-320, 224, -160],
        [320, 224, -160],
        [-320, 256, -160],
        [320, 256, -160],
        [-320, 288, -160],
        [320, 288, -160],
        [-320, -288, -128],
        [320, -288, -128],
        [-320, -256, -128],
        [320, -256, -128],
        [-320, -224, -128],
        [320, -224, -128],
        [-320, -192, -128],
        [320, -192, -128],
        [-320, -160, -128],
        [320, -160, -128],
        [-320, -128, -128],
        [320, -128, -128],
        [-320, -96, -128],
        [320, -96, -128],
        [-320, -64, -128],
        [320, -64, -128],
        [-320, -32, -128],
        [320, -32, -128],
        [-320, 0, -128],
        [320, 0, -128],
        [-320, 32, -128],
        [320, 32, -128],
        [-320, 64, -128],
        [320, 64, -128],
        [-320, 96, -128],
        [320, 96, -128],
        [-320, 128, -128],
        [320, 128, -128],
        [-320, 160, -128],
        [320, 160, -128],
        [-320, 192, -128],
        [320, 192, -128],
        [-320, 224, -128],
        [320, 224, -128],
        [-320, 256, -128],
        [320, 256, -128],
        [-320, 288, -128],
        [320, 288, -128],
        [-320, -288, -96],
        [320, -288, -96],
        [-320, -256, -96],
        [320, -256, -96],
        [-320, -224, -96],
        [320, -224, -96],
        [-320, -192, -96],
        [320, -192, -96],
        [-320, -160, -96],
        [320, -160, -96],
        [-320, -128, -96],
        [320, -128, -96],
        [-320, -96, -96],
        [320, -96, -96],
        [-320, -64, -96],
        [320, -64, -96],
        [-320, -32, -96],
        [320, -32, -96],
        [-320, 0, -96],
        [320, 0, -96],
        [-320, 32, -96],
        [320, 32, -96],
        [-320, 64, -96],
        [320, 64, -96],
        [-320, 96, -96],
        [320, 96, -96],
        [-320, 128, -96],
        [320, 128, -96],
        [-320, 160, -96],
        [320, 160, -96],
        [-320, 192, -96],
        [320, 192, -96],
        [-320, 224, -96],
        [320, 224, -96],
        [-320, 256, -96],
        [320, 256, -96],
        [-320, 288, -96],
        [320, 288, -96],
        [-320, -288, -64],
        [320, -288, -64],
        [-320, -256, -64],
        [320, -256, -64],
        [-320, -224, -64],
        [320, -224, -64],
        [-320, -192, -64],
        [320, -192, -64],
        [-320, -160, -64],
        [320, -160, -64],
        [-320, -128, -64],
        [320, -128, -64],
        [-320, -96, -64],
        [320, -96, -64],
        [-320, -64, -64],
        [320, -64, -64],
        [-320, -32, -64],
        [320, -32, -64],
        [-320, 0, -64],
        [320, 0, -64],
        [-320, 32, -64],
        [320, 32, -64],
        [-320, 64, -64],
        [320, 64, -64],
        [-320, 96, -64],
        [320, 96, -64],
        [-320, 128, -64],
        [320, 128, -64],
        [-320, 160, -64],
        [320, 160, -64],
        [-320, 192, -64],
        [320, 192, -64],
        [-320, 224, -64],
        [320, 224, -64],
        [-320, 256, -64],
        [320, 256, -64],
        [-320, 288, -64],
        [320, 288, -64],
        [-320, -288, -32],
        [320, -288, -32],
        [-320, -256, -32],
        [320, -256, -32],
        [-320, -224, -32],
        [320, -224, -32],
        [-320, -192, -32],
        [320, -192, -32],
        [-320, -160, -32],
        [320, -160, -32],
        [-320, -128, -32],
        [320, -128, -32],
        [-320, -96, -32],
        [320, -96, -32],
        [-320, -64, -32],
        [320, -64, -32],
        [-320, -32, -32],
        [320, -32, -32],
        [-320, 0, -32],
        [320, 0, -32],
        [-320, 32, -32],
        [320, 32, -32],
        [-320, 64, -32],
        [320, 64, -32],
        [-320, 96, -32],
        [320, 96, -32],
        [-320, 128, -32],
        [320, 128, -32],
        [-320, 160, -32],
        [320, 160, -32],
        [-320, 192, -32],
        [320, 192, -32],
        [-320, 224, -32],
        [320, 224, -32],
        [-320, 256, -32],
        [320, 256, -32],
        [-320, 288, -32],
        [320, 288, -32],
        [-320, -288, 0],
        [320, -288, 0],
        [-320, -256, 0],
        [320, -256, 0],
        [-320, -224, 0],
        [320, -224, 0],
        [-320, -192, 0],
        [320, -192, 0],
        [-320, -160, 0],
        [320, -160, 0],
        [-320, -128, 0],
        [320, -128, 0],
        [-320, -96, 0],
        [320, -96, 0],
        [-320, -64, 0],
        [320, -64, 0],
        [-320, -32, 0],
        [320, -32, 0],
        [-320, 0, 0],
        [320, 0, 0],
        [-320, 32, 0],
        [320, 32, 0],
        [-320, 64, 0],
        [320, 64, 0],
        [-320, 96, 0],
        [320, 96, 0],
        [-320, 128, 0],
        [320, 128, 0],
        [-320, 160, 0],
        [320, 160, 0],
        [-320, 192, 0],
        [320, 192, 0],
        [-320, 224, 0],
        [320, 224, 0],
        [-320, 256, 0],
        [320, 256, 0],
        [-320, 288, 0],
        [320, 288, 0],
        [-320, -288, 32],
        [320, -288, 32],
        [-320, -256, 32],
        [320, -256, 32],
        [-320, -224, 32],
        [320, -224, 32],
        [-320, -192, 32],
        [320, -192, 32],
        [-320, -160, 32],
        [320, -160, 32],
        [-320, -128, 32],
        [320, -128, 32],
        [-320, -96, 32],
        [320, -96, 32],
        [-320, -64, 32],
        [320, -64, 32],
        [-320, -32, 32],
        [320, -32, 32],
        [-320, 0, 32],
        [320, 0, 32],
        [-320, 32, 32],
        [320, 32, 32],
        [-320, 64, 32],
        [320, 64, 32],
        [-320, 96, 32],
        [320, 96, 32],
        [-320, 128, 32],
        [320, 128, 32],
        [-320, 160, 32],
        [320, 160, 32],
        [-320, 192, 32],
        [320, 192, 32],
        [-320, 224, 32],
        [320, 224, 32],
        [-320, 256, 32],
        [320, 256, 32],
        [-320, 288, 32],
        [320, 288, 32],
        [-320, -288, 64],
        [320, -288, 64],
        [-320, -256, 64],
        [320, -256, 64],
        [-320, -224, 64],
        [320, -224, 64],
        [-320, -192, 64],
        [320, -192, 64],
        [-320, -160, 64],
        [320, -160, 64],
        [-320, -128, 64],
        [320, -128, 64],
        [-320, -96, 64],
        [320, -96, 64],
        [-320, -64, 64],
        [320, -64, 64],
        [-320, -32, 64],
        [320, -32, 64],
        [-320, 0, 64],
        [320, 0, 64],
        [-320, 32, 64],
        [320, 32, 64],
        [-320, 64, 64],
        [320, 64, 64],
        [-320, 96, 64],
        [320, 96, 64],
        [-320, 128, 64],
        [320, 128, 64],
        [-320, 160, 64],
        [320, 160, 64],
        [-320, 192, 64],
        [320, 192, 64],
        [-320, 224, 64],
        [320, 224, 64],
        [-320, 256, 64],
        [320, 256, 64],
        [-320, 288, 64],
        [320, 288, 64],
        [-320, -288, 96],
        [320, -288, 96],
        [-320, -256, 96],
        [320, -256, 96],
        [-320, -224, 96],
        [320, -224, 96],
        [-320, -192, 96],
        [320, -192, 96],
        [-320, -160, 96],
        [320, -160, 96],
        [-320, -128, 96],
        [320, -128, 96],
        [-320, -96, 96],
        [320, -96, 96],
        [-320, -64, 96],
        [320, -64, 96],
        [-320, -32, 96],
        [320, -32, 96],
        [-320, 0, 96],
        [320, 0, 96],
        [-320, 32, 96],
        [320, 32, 96],
        [-320, 64, 96],
        [320, 64, 96],
        [-320, 96, 96],
        [320, 96, 96],
        [-320, 128, 96],
        [320, 128, 96],
        [-320, 160, 96],
        [320, 160, 96],
        [-320, 192, 96],
        [320, 192, 96],
        [-320, 224, 96],
        [320, 224, 96],
        [-320, 256, 96],
        [320, 256, 96],
        [-320, 288, 96],
        [320, 288, 96],
        [-320, -288, 128],
        [320, -288, 128],
        [-320, -256, 128],
        [320, -256, 128],
        [-320, -224, 128],
        [320, -224, 128],
        [-320, -192, 128],
        [320, -192, 128],
        [-320, -160, 128],
        [320, -160, 128],
        [-320, -128, 128],
        [320, -128, 128],
        [-320, -96, 128],
        [320, -96, 128],
        [-320, -64, 128],
        [320, -64, 128],
        [-320, -32, 128],
        [320, -32, 128],
        [-320, 0, 128],
        [320, 0, 128],
        [-320, 32, 128],
        [320, 32, 128],
        [-320, 64, 128],
        [320, 64, 128],
        [-320, 96, 128],
        [320, 96, 128],
        [-320, 128, 128],
        [320, 128, 128],
        [-320, 160, 128],
        [320, 160, 128],
        [-320, 192, 128],
        [320, 192, 128],
        [-320, 224, 128],
        [320, 224, 128],
        [-320, 256, 128],
        [320, 256, 128],
        [-320, 288, 128],
        [320, 288, 128],
        [-320, -288, 160],
        [320, -288, 160],
        [-320, -256, 160],
        [320, -256, 160],
        [-320, -224, 160],
        [320, -224, 160],
        [-320, -192, 160],
        [320, -192, 160],
        [-320, -160, 160],
        [320, -160, 160],
        [-320, -128, 160],
        [320, -128, 160],
        [-320, -96, 160],
        [320, -96, 160],
        [-320, -64, 160],
        [320, -64, 160],
        [-320, -32, 160],
        [320, -32, 160],
        [-320, 0, 160],
        [320, 0, 160],
        [-320, 32, 160],
        [320, 32, 160],
        [-320, 64, 160],
        [320, 64, 160],
        [-320, 96, 160],
        [320, 96, 160],
        [-320, 128, 160],
        [320, 128, 160],
        [-320, 160, 160],
        [320, 160, 160],
        [-320, 192, 160],
        [320, 192, 160],
        [-320, 224, 160],
        [320, 224, 160],
        [-320, 256, 160],
        [320, 256, 160],
        [-320, 288, 160],
        [320, 288, 160],
        [-320, -288, 192],
        [320, -288, 192],
        [-320, -256, 192],
        [320, -256, 192],
        [-320, -224, 192],
        [320, -224, 192],
        [-320, -192, 192],
        [320, -192, 192],
        [-320, -160, 192],
        [320, -160, 192],
        [-320, -128, 192],
        [320, -128, 192],
        [-320, -96, 192],
        [320, -96, 192],
        [-320, -64, 192],
        [320, -64, 192],
        [-320, -32, 192],
        [320, -32, 192],
        [-320, 0, 192],
        [320, 0, 192],
        [-320, 32, 192],
        [320, 32, 192],
        [-320, 64, 192],
        [320, 64, 192],
        [-320, 96, 192],
        [320, 96, 192],
        [-320, 128, 192],
        [320, 128, 192],
        [-320, 160, 192],
        [320, 160, 192],
        [-320, 192, 192],
        [320, 192, 192],
        [-320, 224, 192],
        [320, 224, 192],
        [-320, 256, 192],
        [320, 256, 192],
        [-320, 288, 192],
        [320, 288, 192],
        [-320, -288, 224],
        [320, -288, 224],
        [-320, -256, 224],
        [320, -256, 224],
        [-320, -224, 224],
        [320, -224, 224],
        [-320, -192, 224],
        [320, -192, 224],
        [-320, -160, 224],
        [320, -160, 224],
        [-320, -128, 224],
        [320, -128, 224],
        [-320, -96, 224],
        [320, -96, 224],
        [-320, -64, 224],
        [320, -64, 224],
        [-320, -32, 224],
        [320, -32, 224],
        [-320, 0, 224],
        [320, 0, 224],
        [-320, 32, 224],
        [320, 32, 224],
        [-320, 64, 224],
        [320, 64, 224],
        [-320, 96, 224],
        [320, 96, 224],
        [-320, 128, 224],
        [320, 128, 224],
        [-320, 160, 224],
        [320, 160, 224],
        [-320, 192, 224],
        [320, 192, 224],
        [-320, 224, 224],
        [320, 224, 224],
        [-320, 256, 224],
        [320, 256, 224],
        [-320, 288, 224],
        [320, 288, 224],
        [-320, -288, 256],
        [320, -288, 256],
        [-320, -256, 256],
        [320, -256, 256],
        [-320, -224, 256],
        [320, -224, 256],
        [-320, -192, 256],
        [320, -192, 256],
        [-320, -160, 256],
        [320, -160, 256],
        [-320, -128, 256],
        [320, -128, 256],
        [-320, -96, 256],
        [320, -96, 256],
        [-320, -64, 256],
        [320, -64, 256],
        [-320, -32, 256],
        [320, -32, 256],
        [-320, 0, 256],
        [320, 0, 256],
        [-320, 32, 256],
        [320, 32, 256],
        [-320, 64, 256],
        [320, 64, 256],
        [-320, 96, 256],
        [320, 96, 256],
        [-320, 128, 256],
        [320, 128, 256],
        [-320, 160, 256],
        [320, 160, 256],
        [-320, 192, 256],
        [320, 192, 256],
        [-320, 224, 256],
        [320, 224, 256],
        [-320, 256, 256],
        [320, 256, 256],
        [-320, 288, 256],
        [320, 288, 256],
        [-320, -288, 288],
        [320, -288, 288],
        [-320, -256, 288],
        [320, -256, 288],
        [-320, -224, 288],
        [320, -224, 288],
        [-320, -192, 288],
        [320, -192, 288],
        [-320, -160, 288],
        [320, -160, 288],
        [-320, -128, 288],
        [320, -128, 288],
        [-320, -96, 288],
        [320, -96, 288],
        [-320, -64, 288],
        [320, -64, 288],
        [-320, -32, 288],
        [320, -32, 288],
        [-320, 0, 288],
        [320, 0, 288],
        [-320, 32, 288],
        [320, 32, 288],
        [-320, 64, 288],
        [320, 64, 288],
        [-320, 96, 288],
        [320, 96, 288],
        [-320, 128, 288],
        [320, 128, 288],
        [-320, 160, 288],
        [320, 160, 288],
        [-320, 192, 288],
        [320, 192, 288],
        [-320, 224, 288],
        [320, 224, 288],
        [-320, 256, 288],
        [320, 256, 288],
        [-320, 288, 288],
        [320, 288, 288]],
    '11': [[-352, -352, -352],
        [-352, -352, 352],
        [-352, -320, -352],
        [-352, -320, 352],
        [-352, -288, -352],
        [-352, -288, 352],
        [-352, -256, -352],
        [-352, -256, 352],
        [-352, -224, -352],
        [-352, -224, 352],
        [-352, -192, -352],
        [-352, -192, 352],
        [-352, -160, -352],
        [-352, -160, 352],
        [-352, -128, -352],
        [-352, -128, 352],
        [-352, -96, -352],
        [-352, -96, 352],
        [-352, -64, -352],
        [-352, -64, 352],
        [-352, -32, -352],
        [-352, -32, 352],
        [-352, 0, -352],
        [-352, 0, 352],
        [-352, 32, -352],
        [-352, 32, 352],
        [-352, 64, -352],
        [-352, 64, 352],
        [-352, 96, -352],
        [-352, 96, 352],
        [-352, 128, -352],
        [-352, 128, 352],
        [-352, 160, -352],
        [-352, 160, 352],
        [-352, 192, -352],
        [-352, 192, 352],
        [-352, 224, -352],
        [-352, 224, 352],
        [-352, 256, -352],
        [-352, 256, 352],
        [-352, 288, -352],
        [-352, 288, 352],
        [-352, 320, -352],
        [-352, 320, 352],
        [-352, 352, -352],
        [-352, 352, 352],
        [-352, -352, -320],
        [-352, 352, -320],
        [-352, -352, -288],
        [-352, 352, -288],
        [-352, -352, -256],
        [-352, 352, -256],
        [-352, -352, -224],
        [-352, 352, -224],
        [-352, -352, -192],
        [-352, 352, -192],
        [-352, -352, -160],
        [-352, 352, -160],
        [-352, -352, -128],
        [-352, 352, -128],
        [-352, -352, -96],
        [-352, 352, -96],
        [-352, -352, -64],
        [-352, 352, -64],
        [-352, -352, -32],
        [-352, 352, -32],
        [-352, -352, 0],
        [-352, 352, 0],
        [-352, -352, 32],
        [-352, 352, 32],
        [-352, -352, 64],
        [-352, 352, 64],
        [-352, -352, 96],
        [-352, 352, 96],
        [-352, -352, 128],
        [-352, 352, 128],
        [-352, -352, 160],
        [-352, 352, 160],
        [-352, -352, 192],
        [-352, 352, 192],
        [-352, -352, 224],
        [-352, 352, 224],
        [-352, -352, 256],
        [-352, 352, 256],
        [-352, -352, 288],
        [-352, 352, 288],
        [-352, -352, 320],
        [-352, 352, 320],
        [-320, -352, -352],
        [-320, -352, 352],
        [-320, -320, -352],
        [-320, -320, 352],
        [-320, -288, -352],
        [-320, -288, 352],
        [-320, -256, -352],
        [-320, -256, 352],
        [-320, -224, -352],
        [-320, -224, 352],
        [-320, -192, -352],
        [-320, -192, 352],
        [-320, -160, -352],
        [-320, -160, 352],
        [-320, -128, -352],
        [-320, -128, 352],
        [-320, -96, -352],
        [-320, -96, 352],
        [-320, -64, -352],
        [-320, -64, 352],
        [-320, -32, -352],
        [-320, -32, 352],
        [-320, 0, -352],
        [-320, 0, 352],
        [-320, 32, -352],
        [-320, 32, 352],
        [-320, 64, -352],
        [-320, 64, 352],
        [-320, 96, -352],
        [-320, 96, 352],
        [-320, 128, -352],
        [-320, 128, 352],
        [-320, 160, -352],
        [-320, 160, 352],
        [-320, 192, -352],
        [-320, 192, 352],
        [-320, 224, -352],
        [-320, 224, 352],
        [-320, 256, -352],
        [-320, 256, 352],
        [-320, 288, -352],
        [-320, 288, 352],
        [-320, 320, -352],
        [-320, 320, 352],
        [-320, 352, -352],
        [-320, 352, 352],
        [-320, -352, -320],
        [-320, 352, -320],
        [-320, -352, -288],
        [-320, 352, -288],
        [-320, -352, -256],
        [-320, 352, -256],
        [-320, -352, -224],
        [-320, 352, -224],
        [-320, -352, -192],
        [-320, 352, -192],
        [-320, -352, -160],
        [-320, 352, -160],
        [-320, -352, -128],
        [-320, 352, -128],
        [-320, -352, -96],
        [-320, 352, -96],
        [-320, -352, -64],
        [-320, 352, -64],
        [-320, -352, -32],
        [-320, 352, -32],
        [-320, -352, 0],
        [-320, 352, 0],
        [-320, -352, 32],
        [-320, 352, 32],
        [-320, -352, 64],
        [-320, 352, 64],
        [-320, -352, 96],
        [-320, 352, 96],
        [-320, -352, 128],
        [-320, 352, 128],
        [-320, -352, 160],
        [-320, 352, 160],
        [-320, -352, 192],
        [-320, 352, 192],
        [-320, -352, 224],
        [-320, 352, 224],
        [-320, -352, 256],
        [-320, 352, 256],
        [-320, -352, 288],
        [-320, 352, 288],
        [-320, -352, 320],
        [-320, 352, 320],
        [-288, -352, -352],
        [-288, -352, 352],
        [-288, -320, -352],
        [-288, -320, 352],
        [-288, -288, -352],
        [-288, -288, 352],
        [-288, -256, -352],
        [-288, -256, 352],
        [-288, -224, -352],
        [-288, -224, 352],
        [-288, -192, -352],
        [-288, -192, 352],
        [-288, -160, -352],
        [-288, -160, 352],
        [-288, -128, -352],
        [-288, -128, 352],
        [-288, -96, -352],
        [-288, -96, 352],
        [-288, -64, -352],
        [-288, -64, 352],
        [-288, -32, -352],
        [-288, -32, 352],
        [-288, 0, -352],
        [-288, 0, 352],
        [-288, 32, -352],
        [-288, 32, 352],
        [-288, 64, -352],
        [-288, 64, 352],
        [-288, 96, -352],
        [-288, 96, 352],
        [-288, 128, -352],
        [-288, 128, 352],
        [-288, 160, -352],
        [-288, 160, 352],
        [-288, 192, -352],
        [-288, 192, 352],
        [-288, 224, -352],
        [-288, 224, 352],
        [-288, 256, -352],
        [-288, 256, 352],
        [-288, 288, -352],
        [-288, 288, 352],
        [-288, 320, -352],
        [-288, 320, 352],
        [-288, 352, -352],
        [-288, 352, 352],
        [-288, -352, -320],
        [-288, 352, -320],
        [-288, -352, -288],
        [-288, 352, -288],
        [-288, -352, -256],
        [-288, 352, -256],
        [-288, -352, -224],
        [-288, 352, -224],
        [-288, -352, -192],
        [-288, 352, -192],
        [-288, -352, -160],
        [-288, 352, -160],
        [-288, -352, -128],
        [-288, 352, -128],
        [-288, -352, -96],
        [-288, 352, -96],
        [-288, -352, -64],
        [-288, 352, -64],
        [-288, -352, -32],
        [-288, 352, -32],
        [-288, -352, 0],
        [-288, 352, 0],
        [-288, -352, 32],
        [-288, 352, 32],
        [-288, -352, 64],
        [-288, 352, 64],
        [-288, -352, 96],
        [-288, 352, 96],
        [-288, -352, 128],
        [-288, 352, 128],
        [-288, -352, 160],
        [-288, 352, 160],
        [-288, -352, 192],
        [-288, 352, 192],
        [-288, -352, 224],
        [-288, 352, 224],
        [-288, -352, 256],
        [-288, 352, 256],
        [-288, -352, 288],
        [-288, 352, 288],
        [-288, -352, 320],
        [-288, 352, 320],
        [-256, -352, -352],
        [-256, -352, 352],
        [-256, -320, -352],
        [-256, -320, 352],
        [-256, -288, -352],
        [-256, -288, 352],
        [-256, -256, -352],
        [-256, -256, 352],
        [-256, -224, -352],
        [-256, -224, 352],
        [-256, -192, -352],
        [-256, -192, 352],
        [-256, -160, -352],
        [-256, -160, 352],
        [-256, -128, -352],
        [-256, -128, 352],
        [-256, -96, -352],
        [-256, -96, 352],
        [-256, -64, -352],
        [-256, -64, 352],
        [-256, -32, -352],
        [-256, -32, 352],
        [-256, 0, -352],
        [-256, 0, 352],
        [-256, 32, -352],
        [-256, 32, 352],
        [-256, 64, -352],
        [-256, 64, 352],
        [-256, 96, -352],
        [-256, 96, 352],
        [-256, 128, -352],
        [-256, 128, 352],
        [-256, 160, -352],
        [-256, 160, 352],
        [-256, 192, -352],
        [-256, 192, 352],
        [-256, 224, -352],
        [-256, 224, 352],
        [-256, 256, -352],
        [-256, 256, 352],
        [-256, 288, -352],
        [-256, 288, 352],
        [-256, 320, -352],
        [-256, 320, 352],
        [-256, 352, -352],
        [-256, 352, 352],
        [-256, -352, -320],
        [-256, 352, -320],
        [-256, -352, -288],
        [-256, 352, -288],
        [-256, -352, -256],
        [-256, 352, -256],
        [-256, -352, -224],
        [-256, 352, -224],
        [-256, -352, -192],
        [-256, 352, -192],
        [-256, -352, -160],
        [-256, 352, -160],
        [-256, -352, -128],
        [-256, 352, -128],
        [-256, -352, -96],
        [-256, 352, -96],
        [-256, -352, -64],
        [-256, 352, -64],
        [-256, -352, -32],
        [-256, 352, -32],
        [-256, -352, 0],
        [-256, 352, 0],
        [-256, -352, 32],
        [-256, 352, 32],
        [-256, -352, 64],
        [-256, 352, 64],
        [-256, -352, 96],
        [-256, 352, 96],
        [-256, -352, 128],
        [-256, 352, 128],
        [-256, -352, 160],
        [-256, 352, 160],
        [-256, -352, 192],
        [-256, 352, 192],
        [-256, -352, 224],
        [-256, 352, 224],
        [-256, -352, 256],
        [-256, 352, 256],
        [-256, -352, 288],
        [-256, 352, 288],
        [-256, -352, 320],
        [-256, 352, 320],
        [-224, -352, -352],
        [-224, -352, 352],
        [-224, -320, -352],
        [-224, -320, 352],
        [-224, -288, -352],
        [-224, -288, 352],
        [-224, -256, -352],
        [-224, -256, 352],
        [-224, -224, -352],
        [-224, -224, 352],
        [-224, -192, -352],
        [-224, -192, 352],
        [-224, -160, -352],
        [-224, -160, 352],
        [-224, -128, -352],
        [-224, -128, 352],
        [-224, -96, -352],
        [-224, -96, 352],
        [-224, -64, -352],
        [-224, -64, 352],
        [-224, -32, -352],
        [-224, -32, 352],
        [-224, 0, -352],
        [-224, 0, 352],
        [-224, 32, -352],
        [-224, 32, 352],
        [-224, 64, -352],
        [-224, 64, 352],
        [-224, 96, -352],
        [-224, 96, 352],
        [-224, 128, -352],
        [-224, 128, 352],
        [-224, 160, -352],
        [-224, 160, 352],
        [-224, 192, -352],
        [-224, 192, 352],
        [-224, 224, -352],
        [-224, 224, 352],
        [-224, 256, -352],
        [-224, 256, 352],
        [-224, 288, -352],
        [-224, 288, 352],
        [-224, 320, -352],
        [-224, 320, 352],
        [-224, 352, -352],
        [-224, 352, 352],
        [-224, -352, -320],
        [-224, 352, -320],
        [-224, -352, -288],
        [-224, 352, -288],
        [-224, -352, -256],
        [-224, 352, -256],
        [-224, -352, -224],
        [-224, 352, -224],
        [-224, -352, -192],
        [-224, 352, -192],
        [-224, -352, -160],
        [-224, 352, -160],
        [-224, -352, -128],
        [-224, 352, -128],
        [-224, -352, -96],
        [-224, 352, -96],
        [-224, -352, -64],
        [-224, 352, -64],
        [-224, -352, -32],
        [-224, 352, -32],
        [-224, -352, 0],
        [-224, 352, 0],
        [-224, -352, 32],
        [-224, 352, 32],
        [-224, -352, 64],
        [-224, 352, 64],
        [-224, -352, 96],
        [-224, 352, 96],
        [-224, -352, 128],
        [-224, 352, 128],
        [-224, -352, 160],
        [-224, 352, 160],
        [-224, -352, 192],
        [-224, 352, 192],
        [-224, -352, 224],
        [-224, 352, 224],
        [-224, -352, 256],
        [-224, 352, 256],
        [-224, -352, 288],
        [-224, 352, 288],
        [-224, -352, 320],
        [-224, 352, 320],
        [-192, -352, -352],
        [-192, -352, 352],
        [-192, -320, -352],
        [-192, -320, 352],
        [-192, -288, -352],
        [-192, -288, 352],
        [-192, -256, -352],
        [-192, -256, 352],
        [-192, -224, -352],
        [-192, -224, 352],
        [-192, -192, -352],
        [-192, -192, 352],
        [-192, -160, -352],
        [-192, -160, 352],
        [-192, -128, -352],
        [-192, -128, 352],
        [-192, -96, -352],
        [-192, -96, 352],
        [-192, -64, -352],
        [-192, -64, 352],
        [-192, -32, -352],
        [-192, -32, 352],
        [-192, 0, -352],
        [-192, 0, 352],
        [-192, 32, -352],
        [-192, 32, 352],
        [-192, 64, -352],
        [-192, 64, 352],
        [-192, 96, -352],
        [-192, 96, 352],
        [-192, 128, -352],
        [-192, 128, 352],
        [-192, 160, -352],
        [-192, 160, 352],
        [-192, 192, -352],
        [-192, 192, 352],
        [-192, 224, -352],
        [-192, 224, 352],
        [-192, 256, -352],
        [-192, 256, 352],
        [-192, 288, -352],
        [-192, 288, 352],
        [-192, 320, -352],
        [-192, 320, 352],
        [-192, 352, -352],
        [-192, 352, 352],
        [-192, -352, -320],
        [-192, 352, -320],
        [-192, -352, -288],
        [-192, 352, -288],
        [-192, -352, -256],
        [-192, 352, -256],
        [-192, -352, -224],
        [-192, 352, -224],
        [-192, -352, -192],
        [-192, 352, -192],
        [-192, -352, -160],
        [-192, 352, -160],
        [-192, -352, -128],
        [-192, 352, -128],
        [-192, -352, -96],
        [-192, 352, -96],
        [-192, -352, -64],
        [-192, 352, -64],
        [-192, -352, -32],
        [-192, 352, -32],
        [-192, -352, 0],
        [-192, 352, 0],
        [-192, -352, 32],
        [-192, 352, 32],
        [-192, -352, 64],
        [-192, 352, 64],
        [-192, -352, 96],
        [-192, 352, 96],
        [-192, -352, 128],
        [-192, 352, 128],
        [-192, -352, 160],
        [-192, 352, 160],
        [-192, -352, 192],
        [-192, 352, 192],
        [-192, -352, 224],
        [-192, 352, 224],
        [-192, -352, 256],
        [-192, 352, 256],
        [-192, -352, 288],
        [-192, 352, 288],
        [-192, -352, 320],
        [-192, 352, 320],
        [-160, -352, -352],
        [-160, -352, 352],
        [-160, -320, -352],
        [-160, -320, 352],
        [-160, -288, -352],
        [-160, -288, 352],
        [-160, -256, -352],
        [-160, -256, 352],
        [-160, -224, -352],
        [-160, -224, 352],
        [-160, -192, -352],
        [-160, -192, 352],
        [-160, -160, -352],
        [-160, -160, 352],
        [-160, -128, -352],
        [-160, -128, 352],
        [-160, -96, -352],
        [-160, -96, 352],
        [-160, -64, -352],
        [-160, -64, 352],
        [-160, -32, -352],
        [-160, -32, 352],
        [-160, 0, -352],
        [-160, 0, 352],
        [-160, 32, -352],
        [-160, 32, 352],
        [-160, 64, -352],
        [-160, 64, 352],
        [-160, 96, -352],
        [-160, 96, 352],
        [-160, 128, -352],
        [-160, 128, 352],
        [-160, 160, -352],
        [-160, 160, 352],
        [-160, 192, -352],
        [-160, 192, 352],
        [-160, 224, -352],
        [-160, 224, 352],
        [-160, 256, -352],
        [-160, 256, 352],
        [-160, 288, -352],
        [-160, 288, 352],
        [-160, 320, -352],
        [-160, 320, 352],
        [-160, 352, -352],
        [-160, 352, 352],
        [-160, -352, -320],
        [-160, 352, -320],
        [-160, -352, -288],
        [-160, 352, -288],
        [-160, -352, -256],
        [-160, 352, -256],
        [-160, -352, -224],
        [-160, 352, -224],
        [-160, -352, -192],
        [-160, 352, -192],
        [-160, -352, -160],
        [-160, 352, -160],
        [-160, -352, -128],
        [-160, 352, -128],
        [-160, -352, -96],
        [-160, 352, -96],
        [-160, -352, -64],
        [-160, 352, -64],
        [-160, -352, -32],
        [-160, 352, -32],
        [-160, -352, 0],
        [-160, 352, 0],
        [-160, -352, 32],
        [-160, 352, 32],
        [-160, -352, 64],
        [-160, 352, 64],
        [-160, -352, 96],
        [-160, 352, 96],
        [-160, -352, 128],
        [-160, 352, 128],
        [-160, -352, 160],
        [-160, 352, 160],
        [-160, -352, 192],
        [-160, 352, 192],
        [-160, -352, 224],
        [-160, 352, 224],
        [-160, -352, 256],
        [-160, 352, 256],
        [-160, -352, 288],
        [-160, 352, 288],
        [-160, -352, 320],
        [-160, 352, 320],
        [-128, -352, -352],
        [-128, -352, 352],
        [-128, -320, -352],
        [-128, -320, 352],
        [-128, -288, -352],
        [-128, -288, 352],
        [-128, -256, -352],
        [-128, -256, 352],
        [-128, -224, -352],
        [-128, -224, 352],
        [-128, -192, -352],
        [-128, -192, 352],
        [-128, -160, -352],
        [-128, -160, 352],
        [-128, -128, -352],
        [-128, -128, 352],
        [-128, -96, -352],
        [-128, -96, 352],
        [-128, -64, -352],
        [-128, -64, 352],
        [-128, -32, -352],
        [-128, -32, 352],
        [-128, 0, -352],
        [-128, 0, 352],
        [-128, 32, -352],
        [-128, 32, 352],
        [-128, 64, -352],
        [-128, 64, 352],
        [-128, 96, -352],
        [-128, 96, 352],
        [-128, 128, -352],
        [-128, 128, 352],
        [-128, 160, -352],
        [-128, 160, 352],
        [-128, 192, -352],
        [-128, 192, 352],
        [-128, 224, -352],
        [-128, 224, 352],
        [-128, 256, -352],
        [-128, 256, 352],
        [-128, 288, -352],
        [-128, 288, 352],
        [-128, 320, -352],
        [-128, 320, 352],
        [-128, 352, -352],
        [-128, 352, 352],
        [-128, -352, -320],
        [-128, 352, -320],
        [-128, -352, -288],
        [-128, 352, -288],
        [-128, -352, -256],
        [-128, 352, -256],
        [-128, -352, -224],
        [-128, 352, -224],
        [-128, -352, -192],
        [-128, 352, -192],
        [-128, -352, -160],
        [-128, 352, -160],
        [-128, -352, -128],
        [-128, 352, -128],
        [-128, -352, -96],
        [-128, 352, -96],
        [-128, -352, -64],
        [-128, 352, -64],
        [-128, -352, -32],
        [-128, 352, -32],
        [-128, -352, 0],
        [-128, 352, 0],
        [-128, -352, 32],
        [-128, 352, 32],
        [-128, -352, 64],
        [-128, 352, 64],
        [-128, -352, 96],
        [-128, 352, 96],
        [-128, -352, 128],
        [-128, 352, 128],
        [-128, -352, 160],
        [-128, 352, 160],
        [-128, -352, 192],
        [-128, 352, 192],
        [-128, -352, 224],
        [-128, 352, 224],
        [-128, -352, 256],
        [-128, 352, 256],
        [-128, -352, 288],
        [-128, 352, 288],
        [-128, -352, 320],
        [-128, 352, 320],
        [-96, -352, -352],
        [-96, -352, 352],
        [-96, -320, -352],
        [-96, -320, 352],
        [-96, -288, -352],
        [-96, -288, 352],
        [-96, -256, -352],
        [-96, -256, 352],
        [-96, -224, -352],
        [-96, -224, 352],
        [-96, -192, -352],
        [-96, -192, 352],
        [-96, -160, -352],
        [-96, -160, 352],
        [-96, -128, -352],
        [-96, -128, 352],
        [-96, -96, -352],
        [-96, -96, 352],
        [-96, -64, -352],
        [-96, -64, 352],
        [-96, -32, -352],
        [-96, -32, 352],
        [-96, 0, -352],
        [-96, 0, 352],
        [-96, 32, -352],
        [-96, 32, 352],
        [-96, 64, -352],
        [-96, 64, 352],
        [-96, 96, -352],
        [-96, 96, 352],
        [-96, 128, -352],
        [-96, 128, 352],
        [-96, 160, -352],
        [-96, 160, 352],
        [-96, 192, -352],
        [-96, 192, 352],
        [-96, 224, -352],
        [-96, 224, 352],
        [-96, 256, -352],
        [-96, 256, 352],
        [-96, 288, -352],
        [-96, 288, 352],
        [-96, 320, -352],
        [-96, 320, 352],
        [-96, 352, -352],
        [-96, 352, 352],
        [-96, -352, -320],
        [-96, 352, -320],
        [-96, -352, -288],
        [-96, 352, -288],
        [-96, -352, -256],
        [-96, 352, -256],
        [-96, -352, -224],
        [-96, 352, -224],
        [-96, -352, -192],
        [-96, 352, -192],
        [-96, -352, -160],
        [-96, 352, -160],
        [-96, -352, -128],
        [-96, 352, -128],
        [-96, -352, -96],
        [-96, 352, -96],
        [-96, -352, -64],
        [-96, 352, -64],
        [-96, -352, -32],
        [-96, 352, -32],
        [-96, -352, 0],
        [-96, 352, 0],
        [-96, -352, 32],
        [-96, 352, 32],
        [-96, -352, 64],
        [-96, 352, 64],
        [-96, -352, 96],
        [-96, 352, 96],
        [-96, -352, 128],
        [-96, 352, 128],
        [-96, -352, 160],
        [-96, 352, 160],
        [-96, -352, 192],
        [-96, 352, 192],
        [-96, -352, 224],
        [-96, 352, 224],
        [-96, -352, 256],
        [-96, 352, 256],
        [-96, -352, 288],
        [-96, 352, 288],
        [-96, -352, 320],
        [-96, 352, 320],
        [-64, -352, -352],
        [-64, -352, 352],
        [-64, -320, -352],
        [-64, -320, 352],
        [-64, -288, -352],
        [-64, -288, 352],
        [-64, -256, -352],
        [-64, -256, 352],
        [-64, -224, -352],
        [-64, -224, 352],
        [-64, -192, -352],
        [-64, -192, 352],
        [-64, -160, -352],
        [-64, -160, 352],
        [-64, -128, -352],
        [-64, -128, 352],
        [-64, -96, -352],
        [-64, -96, 352],
        [-64, -64, -352],
        [-64, -64, 352],
        [-64, -32, -352],
        [-64, -32, 352],
        [-64, 0, -352],
        [-64, 0, 352],
        [-64, 32, -352],
        [-64, 32, 352],
        [-64, 64, -352],
        [-64, 64, 352],
        [-64, 96, -352],
        [-64, 96, 352],
        [-64, 128, -352],
        [-64, 128, 352],
        [-64, 160, -352],
        [-64, 160, 352],
        [-64, 192, -352],
        [-64, 192, 352],
        [-64, 224, -352],
        [-64, 224, 352],
        [-64, 256, -352],
        [-64, 256, 352],
        [-64, 288, -352],
        [-64, 288, 352],
        [-64, 320, -352],
        [-64, 320, 352],
        [-64, 352, -352],
        [-64, 352, 352],
        [-64, -352, -320],
        [-64, 352, -320],
        [-64, -352, -288],
        [-64, 352, -288],
        [-64, -352, -256],
        [-64, 352, -256],
        [-64, -352, -224],
        [-64, 352, -224],
        [-64, -352, -192],
        [-64, 352, -192],
        [-64, -352, -160],
        [-64, 352, -160],
        [-64, -352, -128],
        [-64, 352, -128],
        [-64, -352, -96],
        [-64, 352, -96],
        [-64, -352, -64],
        [-64, 352, -64],
        [-64, -352, -32],
        [-64, 352, -32],
        [-64, -352, 0],
        [-64, 352, 0],
        [-64, -352, 32],
        [-64, 352, 32],
        [-64, -352, 64],
        [-64, 352, 64],
        [-64, -352, 96],
        [-64, 352, 96],
        [-64, -352, 128],
        [-64, 352, 128],
        [-64, -352, 160],
        [-64, 352, 160],
        [-64, -352, 192],
        [-64, 352, 192],
        [-64, -352, 224],
        [-64, 352, 224],
        [-64, -352, 256],
        [-64, 352, 256],
        [-64, -352, 288],
        [-64, 352, 288],
        [-64, -352, 320],
        [-64, 352, 320],
        [-32, -352, -352],
        [-32, -352, 352],
        [-32, -320, -352],
        [-32, -320, 352],
        [-32, -288, -352],
        [-32, -288, 352],
        [-32, -256, -352],
        [-32, -256, 352],
        [-32, -224, -352],
        [-32, -224, 352],
        [-32, -192, -352],
        [-32, -192, 352],
        [-32, -160, -352],
        [-32, -160, 352],
        [-32, -128, -352],
        [-32, -128, 352],
        [-32, -96, -352],
        [-32, -96, 352],
        [-32, -64, -352],
        [-32, -64, 352],
        [-32, -32, -352],
        [-32, -32, 352],
        [-32, 0, -352],
        [-32, 0, 352],
        [-32, 32, -352],
        [-32, 32, 352],
        [-32, 64, -352],
        [-32, 64, 352],
        [-32, 96, -352],
        [-32, 96, 352],
        [-32, 128, -352],
        [-32, 128, 352],
        [-32, 160, -352],
        [-32, 160, 352],
        [-32, 192, -352],
        [-32, 192, 352],
        [-32, 224, -352],
        [-32, 224, 352],
        [-32, 256, -352],
        [-32, 256, 352],
        [-32, 288, -352],
        [-32, 288, 352],
        [-32, 320, -352],
        [-32, 320, 352],
        [-32, 352, -352],
        [-32, 352, 352],
        [-32, -352, -320],
        [-32, 352, -320],
        [-32, -352, -288],
        [-32, 352, -288],
        [-32, -352, -256],
        [-32, 352, -256],
        [-32, -352, -224],
        [-32, 352, -224],
        [-32, -352, -192],
        [-32, 352, -192],
        [-32, -352, -160],
        [-32, 352, -160],
        [-32, -352, -128],
        [-32, 352, -128],
        [-32, -352, -96],
        [-32, 352, -96],
        [-32, -352, -64],
        [-32, 352, -64],
        [-32, -352, -32],
        [-32, 352, -32],
        [-32, -352, 0],
        [-32, 352, 0],
        [-32, -352, 32],
        [-32, 352, 32],
        [-32, -352, 64],
        [-32, 352, 64],
        [-32, -352, 96],
        [-32, 352, 96],
        [-32, -352, 128],
        [-32, 352, 128],
        [-32, -352, 160],
        [-32, 352, 160],
        [-32, -352, 192],
        [-32, 352, 192],
        [-32, -352, 224],
        [-32, 352, 224],
        [-32, -352, 256],
        [-32, 352, 256],
        [-32, -352, 288],
        [-32, 352, 288],
        [-32, -352, 320],
        [-32, 352, 320],
        [0, -352, -352],
        [0, -352, 352],
        [0, -320, -352],
        [0, -320, 352],
        [0, -288, -352],
        [0, -288, 352],
        [0, -256, -352],
        [0, -256, 352],
        [0, -224, -352],
        [0, -224, 352],
        [0, -192, -352],
        [0, -192, 352],
        [0, -160, -352],
        [0, -160, 352],
        [0, -128, -352],
        [0, -128, 352],
        [0, -96, -352],
        [0, -96, 352],
        [0, -64, -352],
        [0, -64, 352],
        [0, -32, -352],
        [0, -32, 352],
        [0, 0, -352],
        [0, 0, 352],
        [0, 32, -352],
        [0, 32, 352],
        [0, 64, -352],
        [0, 64, 352],
        [0, 96, -352],
        [0, 96, 352],
        [0, 128, -352],
        [0, 128, 352],
        [0, 160, -352],
        [0, 160, 352],
        [0, 192, -352],
        [0, 192, 352],
        [0, 224, -352],
        [0, 224, 352],
        [0, 256, -352],
        [0, 256, 352],
        [0, 288, -352],
        [0, 288, 352],
        [0, 320, -352],
        [0, 320, 352],
        [0, 352, -352],
        [0, 352, 352],
        [0, -352, -320],
        [0, 352, -320],
        [0, -352, -288],
        [0, 352, -288],
        [0, -352, -256],
        [0, 352, -256],
        [0, -352, -224],
        [0, 352, -224],
        [0, -352, -192],
        [0, 352, -192],
        [0, -352, -160],
        [0, 352, -160],
        [0, -352, -128],
        [0, 352, -128],
        [0, -352, -96],
        [0, 352, -96],
        [0, -352, -64],
        [0, 352, -64],
        [0, -352, -32],
        [0, 352, -32],
        [0, -352, 0],
        [0, 352, 0],
        [0, -352, 32],
        [0, 352, 32],
        [0, -352, 64],
        [0, 352, 64],
        [0, -352, 96],
        [0, 352, 96],
        [0, -352, 128],
        [0, 352, 128],
        [0, -352, 160],
        [0, 352, 160],
        [0, -352, 192],
        [0, 352, 192],
        [0, -352, 224],
        [0, 352, 224],
        [0, -352, 256],
        [0, 352, 256],
        [0, -352, 288],
        [0, 352, 288],
        [0, -352, 320],
        [0, 352, 320],
        [32, -352, -352],
        [32, -352, 352],
        [32, -320, -352],
        [32, -320, 352],
        [32, -288, -352],
        [32, -288, 352],
        [32, -256, -352],
        [32, -256, 352],
        [32, -224, -352],
        [32, -224, 352],
        [32, -192, -352],
        [32, -192, 352],
        [32, -160, -352],
        [32, -160, 352],
        [32, -128, -352],
        [32, -128, 352],
        [32, -96, -352],
        [32, -96, 352],
        [32, -64, -352],
        [32, -64, 352],
        [32, -32, -352],
        [32, -32, 352],
        [32, 0, -352],
        [32, 0, 352],
        [32, 32, -352],
        [32, 32, 352],
        [32, 64, -352],
        [32, 64, 352],
        [32, 96, -352],
        [32, 96, 352],
        [32, 128, -352],
        [32, 128, 352],
        [32, 160, -352],
        [32, 160, 352],
        [32, 192, -352],
        [32, 192, 352],
        [32, 224, -352],
        [32, 224, 352],
        [32, 256, -352],
        [32, 256, 352],
        [32, 288, -352],
        [32, 288, 352],
        [32, 320, -352],
        [32, 320, 352],
        [32, 352, -352],
        [32, 352, 352],
        [32, -352, -320],
        [32, 352, -320],
        [32, -352, -288],
        [32, 352, -288],
        [32, -352, -256],
        [32, 352, -256],
        [32, -352, -224],
        [32, 352, -224],
        [32, -352, -192],
        [32, 352, -192],
        [32, -352, -160],
        [32, 352, -160],
        [32, -352, -128],
        [32, 352, -128],
        [32, -352, -96],
        [32, 352, -96],
        [32, -352, -64],
        [32, 352, -64],
        [32, -352, -32],
        [32, 352, -32],
        [32, -352, 0],
        [32, 352, 0],
        [32, -352, 32],
        [32, 352, 32],
        [32, -352, 64],
        [32, 352, 64],
        [32, -352, 96],
        [32, 352, 96],
        [32, -352, 128],
        [32, 352, 128],
        [32, -352, 160],
        [32, 352, 160],
        [32, -352, 192],
        [32, 352, 192],
        [32, -352, 224],
        [32, 352, 224],
        [32, -352, 256],
        [32, 352, 256],
        [32, -352, 288],
        [32, 352, 288],
        [32, -352, 320],
        [32, 352, 320],
        [64, -352, -352],
        [64, -352, 352],
        [64, -320, -352],
        [64, -320, 352],
        [64, -288, -352],
        [64, -288, 352],
        [64, -256, -352],
        [64, -256, 352],
        [64, -224, -352],
        [64, -224, 352],
        [64, -192, -352],
        [64, -192, 352],
        [64, -160, -352],
        [64, -160, 352],
        [64, -128, -352],
        [64, -128, 352],
        [64, -96, -352],
        [64, -96, 352],
        [64, -64, -352],
        [64, -64, 352],
        [64, -32, -352],
        [64, -32, 352],
        [64, 0, -352],
        [64, 0, 352],
        [64, 32, -352],
        [64, 32, 352],
        [64, 64, -352],
        [64, 64, 352],
        [64, 96, -352],
        [64, 96, 352],
        [64, 128, -352],
        [64, 128, 352],
        [64, 160, -352],
        [64, 160, 352],
        [64, 192, -352],
        [64, 192, 352],
        [64, 224, -352],
        [64, 224, 352],
        [64, 256, -352],
        [64, 256, 352],
        [64, 288, -352],
        [64, 288, 352],
        [64, 320, -352],
        [64, 320, 352],
        [64, 352, -352],
        [64, 352, 352],
        [64, -352, -320],
        [64, 352, -320],
        [64, -352, -288],
        [64, 352, -288],
        [64, -352, -256],
        [64, 352, -256],
        [64, -352, -224],
        [64, 352, -224],
        [64, -352, -192],
        [64, 352, -192],
        [64, -352, -160],
        [64, 352, -160],
        [64, -352, -128],
        [64, 352, -128],
        [64, -352, -96],
        [64, 352, -96],
        [64, -352, -64],
        [64, 352, -64],
        [64, -352, -32],
        [64, 352, -32],
        [64, -352, 0],
        [64, 352, 0],
        [64, -352, 32],
        [64, 352, 32],
        [64, -352, 64],
        [64, 352, 64],
        [64, -352, 96],
        [64, 352, 96],
        [64, -352, 128],
        [64, 352, 128],
        [64, -352, 160],
        [64, 352, 160],
        [64, -352, 192],
        [64, 352, 192],
        [64, -352, 224],
        [64, 352, 224],
        [64, -352, 256],
        [64, 352, 256],
        [64, -352, 288],
        [64, 352, 288],
        [64, -352, 320],
        [64, 352, 320],
        [96, -352, -352],
        [96, -352, 352],
        [96, -320, -352],
        [96, -320, 352],
        [96, -288, -352],
        [96, -288, 352],
        [96, -256, -352],
        [96, -256, 352],
        [96, -224, -352],
        [96, -224, 352],
        [96, -192, -352],
        [96, -192, 352],
        [96, -160, -352],
        [96, -160, 352],
        [96, -128, -352],
        [96, -128, 352],
        [96, -96, -352],
        [96, -96, 352],
        [96, -64, -352],
        [96, -64, 352],
        [96, -32, -352],
        [96, -32, 352],
        [96, 0, -352],
        [96, 0, 352],
        [96, 32, -352],
        [96, 32, 352],
        [96, 64, -352],
        [96, 64, 352],
        [96, 96, -352],
        [96, 96, 352],
        [96, 128, -352],
        [96, 128, 352],
        [96, 160, -352],
        [96, 160, 352],
        [96, 192, -352],
        [96, 192, 352],
        [96, 224, -352],
        [96, 224, 352],
        [96, 256, -352],
        [96, 256, 352],
        [96, 288, -352],
        [96, 288, 352],
        [96, 320, -352],
        [96, 320, 352],
        [96, 352, -352],
        [96, 352, 352],
        [96, -352, -320],
        [96, 352, -320],
        [96, -352, -288],
        [96, 352, -288],
        [96, -352, -256],
        [96, 352, -256],
        [96, -352, -224],
        [96, 352, -224],
        [96, -352, -192],
        [96, 352, -192],
        [96, -352, -160],
        [96, 352, -160],
        [96, -352, -128],
        [96, 352, -128],
        [96, -352, -96],
        [96, 352, -96],
        [96, -352, -64],
        [96, 352, -64],
        [96, -352, -32],
        [96, 352, -32],
        [96, -352, 0],
        [96, 352, 0],
        [96, -352, 32],
        [96, 352, 32],
        [96, -352, 64],
        [96, 352, 64],
        [96, -352, 96],
        [96, 352, 96],
        [96, -352, 128],
        [96, 352, 128],
        [96, -352, 160],
        [96, 352, 160],
        [96, -352, 192],
        [96, 352, 192],
        [96, -352, 224],
        [96, 352, 224],
        [96, -352, 256],
        [96, 352, 256],
        [96, -352, 288],
        [96, 352, 288],
        [96, -352, 320],
        [96, 352, 320],
        [128, -352, -352],
        [128, -352, 352],
        [128, -320, -352],
        [128, -320, 352],
        [128, -288, -352],
        [128, -288, 352],
        [128, -256, -352],
        [128, -256, 352],
        [128, -224, -352],
        [128, -224, 352],
        [128, -192, -352],
        [128, -192, 352],
        [128, -160, -352],
        [128, -160, 352],
        [128, -128, -352],
        [128, -128, 352],
        [128, -96, -352],
        [128, -96, 352],
        [128, -64, -352],
        [128, -64, 352],
        [128, -32, -352],
        [128, -32, 352],
        [128, 0, -352],
        [128, 0, 352],
        [128, 32, -352],
        [128, 32, 352],
        [128, 64, -352],
        [128, 64, 352],
        [128, 96, -352],
        [128, 96, 352],
        [128, 128, -352],
        [128, 128, 352],
        [128, 160, -352],
        [128, 160, 352],
        [128, 192, -352],
        [128, 192, 352],
        [128, 224, -352],
        [128, 224, 352],
        [128, 256, -352],
        [128, 256, 352],
        [128, 288, -352],
        [128, 288, 352],
        [128, 320, -352],
        [128, 320, 352],
        [128, 352, -352],
        [128, 352, 352],
        [128, -352, -320],
        [128, 352, -320],
        [128, -352, -288],
        [128, 352, -288],
        [128, -352, -256],
        [128, 352, -256],
        [128, -352, -224],
        [128, 352, -224],
        [128, -352, -192],
        [128, 352, -192],
        [128, -352, -160],
        [128, 352, -160],
        [128, -352, -128],
        [128, 352, -128],
        [128, -352, -96],
        [128, 352, -96],
        [128, -352, -64],
        [128, 352, -64],
        [128, -352, -32],
        [128, 352, -32],
        [128, -352, 0],
        [128, 352, 0],
        [128, -352, 32],
        [128, 352, 32],
        [128, -352, 64],
        [128, 352, 64],
        [128, -352, 96],
        [128, 352, 96],
        [128, -352, 128],
        [128, 352, 128],
        [128, -352, 160],
        [128, 352, 160],
        [128, -352, 192],
        [128, 352, 192],
        [128, -352, 224],
        [128, 352, 224],
        [128, -352, 256],
        [128, 352, 256],
        [128, -352, 288],
        [128, 352, 288],
        [128, -352, 320],
        [128, 352, 320],
        [160, -352, -352],
        [160, -352, 352],
        [160, -320, -352],
        [160, -320, 352],
        [160, -288, -352],
        [160, -288, 352],
        [160, -256, -352],
        [160, -256, 352],
        [160, -224, -352],
        [160, -224, 352],
        [160, -192, -352],
        [160, -192, 352],
        [160, -160, -352],
        [160, -160, 352],
        [160, -128, -352],
        [160, -128, 352],
        [160, -96, -352],
        [160, -96, 352],
        [160, -64, -352],
        [160, -64, 352],
        [160, -32, -352],
        [160, -32, 352],
        [160, 0, -352],
        [160, 0, 352],
        [160, 32, -352],
        [160, 32, 352],
        [160, 64, -352],
        [160, 64, 352],
        [160, 96, -352],
        [160, 96, 352],
        [160, 128, -352],
        [160, 128, 352],
        [160, 160, -352],
        [160, 160, 352],
        [160, 192, -352],
        [160, 192, 352],
        [160, 224, -352],
        [160, 224, 352],
        [160, 256, -352],
        [160, 256, 352],
        [160, 288, -352],
        [160, 288, 352],
        [160, 320, -352],
        [160, 320, 352],
        [160, 352, -352],
        [160, 352, 352],
        [160, -352, -320],
        [160, 352, -320],
        [160, -352, -288],
        [160, 352, -288],
        [160, -352, -256],
        [160, 352, -256],
        [160, -352, -224],
        [160, 352, -224],
        [160, -352, -192],
        [160, 352, -192],
        [160, -352, -160],
        [160, 352, -160],
        [160, -352, -128],
        [160, 352, -128],
        [160, -352, -96],
        [160, 352, -96],
        [160, -352, -64],
        [160, 352, -64],
        [160, -352, -32],
        [160, 352, -32],
        [160, -352, 0],
        [160, 352, 0],
        [160, -352, 32],
        [160, 352, 32],
        [160, -352, 64],
        [160, 352, 64],
        [160, -352, 96],
        [160, 352, 96],
        [160, -352, 128],
        [160, 352, 128],
        [160, -352, 160],
        [160, 352, 160],
        [160, -352, 192],
        [160, 352, 192],
        [160, -352, 224],
        [160, 352, 224],
        [160, -352, 256],
        [160, 352, 256],
        [160, -352, 288],
        [160, 352, 288],
        [160, -352, 320],
        [160, 352, 320],
        [192, -352, -352],
        [192, -352, 352],
        [192, -320, -352],
        [192, -320, 352],
        [192, -288, -352],
        [192, -288, 352],
        [192, -256, -352],
        [192, -256, 352],
        [192, -224, -352],
        [192, -224, 352],
        [192, -192, -352],
        [192, -192, 352],
        [192, -160, -352],
        [192, -160, 352],
        [192, -128, -352],
        [192, -128, 352],
        [192, -96, -352],
        [192, -96, 352],
        [192, -64, -352],
        [192, -64, 352],
        [192, -32, -352],
        [192, -32, 352],
        [192, 0, -352],
        [192, 0, 352],
        [192, 32, -352],
        [192, 32, 352],
        [192, 64, -352],
        [192, 64, 352],
        [192, 96, -352],
        [192, 96, 352],
        [192, 128, -352],
        [192, 128, 352],
        [192, 160, -352],
        [192, 160, 352],
        [192, 192, -352],
        [192, 192, 352],
        [192, 224, -352],
        [192, 224, 352],
        [192, 256, -352],
        [192, 256, 352],
        [192, 288, -352],
        [192, 288, 352],
        [192, 320, -352],
        [192, 320, 352],
        [192, 352, -352],
        [192, 352, 352],
        [192, -352, -320],
        [192, 352, -320],
        [192, -352, -288],
        [192, 352, -288],
        [192, -352, -256],
        [192, 352, -256],
        [192, -352, -224],
        [192, 352, -224],
        [192, -352, -192],
        [192, 352, -192],
        [192, -352, -160],
        [192, 352, -160],
        [192, -352, -128],
        [192, 352, -128],
        [192, -352, -96],
        [192, 352, -96],
        [192, -352, -64],
        [192, 352, -64],
        [192, -352, -32],
        [192, 352, -32],
        [192, -352, 0],
        [192, 352, 0],
        [192, -352, 32],
        [192, 352, 32],
        [192, -352, 64],
        [192, 352, 64],
        [192, -352, 96],
        [192, 352, 96],
        [192, -352, 128],
        [192, 352, 128],
        [192, -352, 160],
        [192, 352, 160],
        [192, -352, 192],
        [192, 352, 192],
        [192, -352, 224],
        [192, 352, 224],
        [192, -352, 256],
        [192, 352, 256],
        [192, -352, 288],
        [192, 352, 288],
        [192, -352, 320],
        [192, 352, 320],
        [224, -352, -352],
        [224, -352, 352],
        [224, -320, -352],
        [224, -320, 352],
        [224, -288, -352],
        [224, -288, 352],
        [224, -256, -352],
        [224, -256, 352],
        [224, -224, -352],
        [224, -224, 352],
        [224, -192, -352],
        [224, -192, 352],
        [224, -160, -352],
        [224, -160, 352],
        [224, -128, -352],
        [224, -128, 352],
        [224, -96, -352],
        [224, -96, 352],
        [224, -64, -352],
        [224, -64, 352],
        [224, -32, -352],
        [224, -32, 352],
        [224, 0, -352],
        [224, 0, 352],
        [224, 32, -352],
        [224, 32, 352],
        [224, 64, -352],
        [224, 64, 352],
        [224, 96, -352],
        [224, 96, 352],
        [224, 128, -352],
        [224, 128, 352],
        [224, 160, -352],
        [224, 160, 352],
        [224, 192, -352],
        [224, 192, 352],
        [224, 224, -352],
        [224, 224, 352],
        [224, 256, -352],
        [224, 256, 352],
        [224, 288, -352],
        [224, 288, 352],
        [224, 320, -352],
        [224, 320, 352],
        [224, 352, -352],
        [224, 352, 352],
        [224, -352, -320],
        [224, 352, -320],
        [224, -352, -288],
        [224, 352, -288],
        [224, -352, -256],
        [224, 352, -256],
        [224, -352, -224],
        [224, 352, -224],
        [224, -352, -192],
        [224, 352, -192],
        [224, -352, -160],
        [224, 352, -160],
        [224, -352, -128],
        [224, 352, -128],
        [224, -352, -96],
        [224, 352, -96],
        [224, -352, -64],
        [224, 352, -64],
        [224, -352, -32],
        [224, 352, -32],
        [224, -352, 0],
        [224, 352, 0],
        [224, -352, 32],
        [224, 352, 32],
        [224, -352, 64],
        [224, 352, 64],
        [224, -352, 96],
        [224, 352, 96],
        [224, -352, 128],
        [224, 352, 128],
        [224, -352, 160],
        [224, 352, 160],
        [224, -352, 192],
        [224, 352, 192],
        [224, -352, 224],
        [224, 352, 224],
        [224, -352, 256],
        [224, 352, 256],
        [224, -352, 288],
        [224, 352, 288],
        [224, -352, 320],
        [224, 352, 320],
        [256, -352, -352],
        [256, -352, 352],
        [256, -320, -352],
        [256, -320, 352],
        [256, -288, -352],
        [256, -288, 352],
        [256, -256, -352],
        [256, -256, 352],
        [256, -224, -352],
        [256, -224, 352],
        [256, -192, -352],
        [256, -192, 352],
        [256, -160, -352],
        [256, -160, 352],
        [256, -128, -352],
        [256, -128, 352],
        [256, -96, -352],
        [256, -96, 352],
        [256, -64, -352],
        [256, -64, 352],
        [256, -32, -352],
        [256, -32, 352],
        [256, 0, -352],
        [256, 0, 352],
        [256, 32, -352],
        [256, 32, 352],
        [256, 64, -352],
        [256, 64, 352],
        [256, 96, -352],
        [256, 96, 352],
        [256, 128, -352],
        [256, 128, 352],
        [256, 160, -352],
        [256, 160, 352],
        [256, 192, -352],
        [256, 192, 352],
        [256, 224, -352],
        [256, 224, 352],
        [256, 256, -352],
        [256, 256, 352],
        [256, 288, -352],
        [256, 288, 352],
        [256, 320, -352],
        [256, 320, 352],
        [256, 352, -352],
        [256, 352, 352],
        [256, -352, -320],
        [256, 352, -320],
        [256, -352, -288],
        [256, 352, -288],
        [256, -352, -256],
        [256, 352, -256],
        [256, -352, -224],
        [256, 352, -224],
        [256, -352, -192],
        [256, 352, -192],
        [256, -352, -160],
        [256, 352, -160],
        [256, -352, -128],
        [256, 352, -128],
        [256, -352, -96],
        [256, 352, -96],
        [256, -352, -64],
        [256, 352, -64],
        [256, -352, -32],
        [256, 352, -32],
        [256, -352, 0],
        [256, 352, 0],
        [256, -352, 32],
        [256, 352, 32],
        [256, -352, 64],
        [256, 352, 64],
        [256, -352, 96],
        [256, 352, 96],
        [256, -352, 128],
        [256, 352, 128],
        [256, -352, 160],
        [256, 352, 160],
        [256, -352, 192],
        [256, 352, 192],
        [256, -352, 224],
        [256, 352, 224],
        [256, -352, 256],
        [256, 352, 256],
        [256, -352, 288],
        [256, 352, 288],
        [256, -352, 320],
        [256, 352, 320],
        [288, -352, -352],
        [288, -352, 352],
        [288, -320, -352],
        [288, -320, 352],
        [288, -288, -352],
        [288, -288, 352],
        [288, -256, -352],
        [288, -256, 352],
        [288, -224, -352],
        [288, -224, 352],
        [288, -192, -352],
        [288, -192, 352],
        [288, -160, -352],
        [288, -160, 352],
        [288, -128, -352],
        [288, -128, 352],
        [288, -96, -352],
        [288, -96, 352],
        [288, -64, -352],
        [288, -64, 352],
        [288, -32, -352],
        [288, -32, 352],
        [288, 0, -352],
        [288, 0, 352],
        [288, 32, -352],
        [288, 32, 352],
        [288, 64, -352],
        [288, 64, 352],
        [288, 96, -352],
        [288, 96, 352],
        [288, 128, -352],
        [288, 128, 352],
        [288, 160, -352],
        [288, 160, 352],
        [288, 192, -352],
        [288, 192, 352],
        [288, 224, -352],
        [288, 224, 352],
        [288, 256, -352],
        [288, 256, 352],
        [288, 288, -352],
        [288, 288, 352],
        [288, 320, -352],
        [288, 320, 352],
        [288, 352, -352],
        [288, 352, 352],
        [288, -352, -320],
        [288, 352, -320],
        [288, -352, -288],
        [288, 352, -288],
        [288, -352, -256],
        [288, 352, -256],
        [288, -352, -224],
        [288, 352, -224],
        [288, -352, -192],
        [288, 352, -192],
        [288, -352, -160],
        [288, 352, -160],
        [288, -352, -128],
        [288, 352, -128],
        [288, -352, -96],
        [288, 352, -96],
        [288, -352, -64],
        [288, 352, -64],
        [288, -352, -32],
        [288, 352, -32],
        [288, -352, 0],
        [288, 352, 0],
        [288, -352, 32],
        [288, 352, 32],
        [288, -352, 64],
        [288, 352, 64],
        [288, -352, 96],
        [288, 352, 96],
        [288, -352, 128],
        [288, 352, 128],
        [288, -352, 160],
        [288, 352, 160],
        [288, -352, 192],
        [288, 352, 192],
        [288, -352, 224],
        [288, 352, 224],
        [288, -352, 256],
        [288, 352, 256],
        [288, -352, 288],
        [288, 352, 288],
        [288, -352, 320],
        [288, 352, 320],
        [320, -352, -352],
        [320, -352, 352],
        [320, -320, -352],
        [320, -320, 352],
        [320, -288, -352],
        [320, -288, 352],
        [320, -256, -352],
        [320, -256, 352],
        [320, -224, -352],
        [320, -224, 352],
        [320, -192, -352],
        [320, -192, 352],
        [320, -160, -352],
        [320, -160, 352],
        [320, -128, -352],
        [320, -128, 352],
        [320, -96, -352],
        [320, -96, 352],
        [320, -64, -352],
        [320, -64, 352],
        [320, -32, -352],
        [320, -32, 352],
        [320, 0, -352],
        [320, 0, 352],
        [320, 32, -352],
        [320, 32, 352],
        [320, 64, -352],
        [320, 64, 352],
        [320, 96, -352],
        [320, 96, 352],
        [320, 128, -352],
        [320, 128, 352],
        [320, 160, -352],
        [320, 160, 352],
        [320, 192, -352],
        [320, 192, 352],
        [320, 224, -352],
        [320, 224, 352],
        [320, 256, -352],
        [320, 256, 352],
        [320, 288, -352],
        [320, 288, 352],
        [320, 320, -352],
        [320, 320, 352],
        [320, 352, -352],
        [320, 352, 352],
        [320, -352, -320],
        [320, 352, -320],
        [320, -352, -288],
        [320, 352, -288],
        [320, -352, -256],
        [320, 352, -256],
        [320, -352, -224],
        [320, 352, -224],
        [320, -352, -192],
        [320, 352, -192],
        [320, -352, -160],
        [320, 352, -160],
        [320, -352, -128],
        [320, 352, -128],
        [320, -352, -96],
        [320, 352, -96],
        [320, -352, -64],
        [320, 352, -64],
        [320, -352, -32],
        [320, 352, -32],
        [320, -352, 0],
        [320, 352, 0],
        [320, -352, 32],
        [320, 352, 32],
        [320, -352, 64],
        [320, 352, 64],
        [320, -352, 96],
        [320, 352, 96],
        [320, -352, 128],
        [320, 352, 128],
        [320, -352, 160],
        [320, 352, 160],
        [320, -352, 192],
        [320, 352, 192],
        [320, -352, 224],
        [320, 352, 224],
        [320, -352, 256],
        [320, 352, 256],
        [320, -352, 288],
        [320, 352, 288],
        [320, -352, 320],
        [320, 352, 320],
        [352, -352, -352],
        [352, -352, 352],
        [352, -320, -352],
        [352, -320, 352],
        [352, -288, -352],
        [352, -288, 352],
        [352, -256, -352],
        [352, -256, 352],
        [352, -224, -352],
        [352, -224, 352],
        [352, -192, -352],
        [352, -192, 352],
        [352, -160, -352],
        [352, -160, 352],
        [352, -128, -352],
        [352, -128, 352],
        [352, -96, -352],
        [352, -96, 352],
        [352, -64, -352],
        [352, -64, 352],
        [352, -32, -352],
        [352, -32, 352],
        [352, 0, -352],
        [352, 0, 352],
        [352, 32, -352],
        [352, 32, 352],
        [352, 64, -352],
        [352, 64, 352],
        [352, 96, -352],
        [352, 96, 352],
        [352, 128, -352],
        [352, 128, 352],
        [352, 160, -352],
        [352, 160, 352],
        [352, 192, -352],
        [352, 192, 352],
        [352, 224, -352],
        [352, 224, 352],
        [352, 256, -352],
        [352, 256, 352],
        [352, 288, -352],
        [352, 288, 352],
        [352, 320, -352],
        [352, 320, 352],
        [352, 352, -352],
        [352, 352, 352],
        [352, -352, -320],
        [352, 352, -320],
        [352, -352, -288],
        [352, 352, -288],
        [352, -352, -256],
        [352, 352, -256],
        [352, -352, -224],
        [352, 352, -224],
        [352, -352, -192],
        [352, 352, -192],
        [352, -352, -160],
        [352, 352, -160],
        [352, -352, -128],
        [352, 352, -128],
        [352, -352, -96],
        [352, 352, -96],
        [352, -352, -64],
        [352, 352, -64],
        [352, -352, -32],
        [352, 352, -32],
        [352, -352, 0],
        [352, 352, 0],
        [352, -352, 32],
        [352, 352, 32],
        [352, -352, 64],
        [352, 352, 64],
        [352, -352, 96],
        [352, 352, 96],
        [352, -352, 128],
        [352, 352, 128],
        [352, -352, 160],
        [352, 352, 160],
        [352, -352, 192],
        [352, 352, 192],
        [352, -352, 224],
        [352, 352, 224],
        [352, -352, 256],
        [352, 352, 256],
        [352, -352, 288],
        [352, 352, 288],
        [352, -352, 320],
        [352, 352, 320],
        [-352, -320, -320],
        [352, -320, -320],
        [-352, -288, -320],
        [352, -288, -320],
        [-352, -256, -320],
        [352, -256, -320],
        [-352, -224, -320],
        [352, -224, -320],
        [-352, -192, -320],
        [352, -192, -320],
        [-352, -160, -320],
        [352, -160, -320],
        [-352, -128, -320],
        [352, -128, -320],
        [-352, -96, -320],
        [352, -96, -320],
        [-352, -64, -320],
        [352, -64, -320],
        [-352, -32, -320],
        [352, -32, -320],
        [-352, 0, -320],
        [352, 0, -320],
        [-352, 32, -320],
        [352, 32, -320],
        [-352, 64, -320],
        [352, 64, -320],
        [-352, 96, -320],
        [352, 96, -320],
        [-352, 128, -320],
        [352, 128, -320],
        [-352, 160, -320],
        [352, 160, -320],
        [-352, 192, -320],
        [352, 192, -320],
        [-352, 224, -320],
        [352, 224, -320],
        [-352, 256, -320],
        [352, 256, -320],
        [-352, 288, -320],
        [352, 288, -320],
        [-352, 320, -320],
        [352, 320, -320],
        [-352, -320, -288],
        [352, -320, -288],
        [-352, -288, -288],
        [352, -288, -288],
        [-352, -256, -288],
        [352, -256, -288],
        [-352, -224, -288],
        [352, -224, -288],
        [-352, -192, -288],
        [352, -192, -288],
        [-352, -160, -288],
        [352, -160, -288],
        [-352, -128, -288],
        [352, -128, -288],
        [-352, -96, -288],
        [352, -96, -288],
        [-352, -64, -288],
        [352, -64, -288],
        [-352, -32, -288],
        [352, -32, -288],
        [-352, 0, -288],
        [352, 0, -288],
        [-352, 32, -288],
        [352, 32, -288],
        [-352, 64, -288],
        [352, 64, -288],
        [-352, 96, -288],
        [352, 96, -288],
        [-352, 128, -288],
        [352, 128, -288],
        [-352, 160, -288],
        [352, 160, -288],
        [-352, 192, -288],
        [352, 192, -288],
        [-352, 224, -288],
        [352, 224, -288],
        [-352, 256, -288],
        [352, 256, -288],
        [-352, 288, -288],
        [352, 288, -288],
        [-352, 320, -288],
        [352, 320, -288],
        [-352, -320, -256],
        [352, -320, -256],
        [-352, -288, -256],
        [352, -288, -256],
        [-352, -256, -256],
        [352, -256, -256],
        [-352, -224, -256],
        [352, -224, -256],
        [-352, -192, -256],
        [352, -192, -256],
        [-352, -160, -256],
        [352, -160, -256],
        [-352, -128, -256],
        [352, -128, -256],
        [-352, -96, -256],
        [352, -96, -256],
        [-352, -64, -256],
        [352, -64, -256],
        [-352, -32, -256],
        [352, -32, -256],
        [-352, 0, -256],
        [352, 0, -256],
        [-352, 32, -256],
        [352, 32, -256],
        [-352, 64, -256],
        [352, 64, -256],
        [-352, 96, -256],
        [352, 96, -256],
        [-352, 128, -256],
        [352, 128, -256],
        [-352, 160, -256],
        [352, 160, -256],
        [-352, 192, -256],
        [352, 192, -256],
        [-352, 224, -256],
        [352, 224, -256],
        [-352, 256, -256],
        [352, 256, -256],
        [-352, 288, -256],
        [352, 288, -256],
        [-352, 320, -256],
        [352, 320, -256],
        [-352, -320, -224],
        [352, -320, -224],
        [-352, -288, -224],
        [352, -288, -224],
        [-352, -256, -224],
        [352, -256, -224],
        [-352, -224, -224],
        [352, -224, -224],
        [-352, -192, -224],
        [352, -192, -224],
        [-352, -160, -224],
        [352, -160, -224],
        [-352, -128, -224],
        [352, -128, -224],
        [-352, -96, -224],
        [352, -96, -224],
        [-352, -64, -224],
        [352, -64, -224],
        [-352, -32, -224],
        [352, -32, -224],
        [-352, 0, -224],
        [352, 0, -224],
        [-352, 32, -224],
        [352, 32, -224],
        [-352, 64, -224],
        [352, 64, -224],
        [-352, 96, -224],
        [352, 96, -224],
        [-352, 128, -224],
        [352, 128, -224],
        [-352, 160, -224],
        [352, 160, -224],
        [-352, 192, -224],
        [352, 192, -224],
        [-352, 224, -224],
        [352, 224, -224],
        [-352, 256, -224],
        [352, 256, -224],
        [-352, 288, -224],
        [352, 288, -224],
        [-352, 320, -224],
        [352, 320, -224],
        [-352, -320, -192],
        [352, -320, -192],
        [-352, -288, -192],
        [352, -288, -192],
        [-352, -256, -192],
        [352, -256, -192],
        [-352, -224, -192],
        [352, -224, -192],
        [-352, -192, -192],
        [352, -192, -192],
        [-352, -160, -192],
        [352, -160, -192],
        [-352, -128, -192],
        [352, -128, -192],
        [-352, -96, -192],
        [352, -96, -192],
        [-352, -64, -192],
        [352, -64, -192],
        [-352, -32, -192],
        [352, -32, -192],
        [-352, 0, -192],
        [352, 0, -192],
        [-352, 32, -192],
        [352, 32, -192],
        [-352, 64, -192],
        [352, 64, -192],
        [-352, 96, -192],
        [352, 96, -192],
        [-352, 128, -192],
        [352, 128, -192],
        [-352, 160, -192],
        [352, 160, -192],
        [-352, 192, -192],
        [352, 192, -192],
        [-352, 224, -192],
        [352, 224, -192],
        [-352, 256, -192],
        [352, 256, -192],
        [-352, 288, -192],
        [352, 288, -192],
        [-352, 320, -192],
        [352, 320, -192],
        [-352, -320, -160],
        [352, -320, -160],
        [-352, -288, -160],
        [352, -288, -160],
        [-352, -256, -160],
        [352, -256, -160],
        [-352, -224, -160],
        [352, -224, -160],
        [-352, -192, -160],
        [352, -192, -160],
        [-352, -160, -160],
        [352, -160, -160],
        [-352, -128, -160],
        [352, -128, -160],
        [-352, -96, -160],
        [352, -96, -160],
        [-352, -64, -160],
        [352, -64, -160],
        [-352, -32, -160],
        [352, -32, -160],
        [-352, 0, -160],
        [352, 0, -160],
        [-352, 32, -160],
        [352, 32, -160],
        [-352, 64, -160],
        [352, 64, -160],
        [-352, 96, -160],
        [352, 96, -160],
        [-352, 128, -160],
        [352, 128, -160],
        [-352, 160, -160],
        [352, 160, -160],
        [-352, 192, -160],
        [352, 192, -160],
        [-352, 224, -160],
        [352, 224, -160],
        [-352, 256, -160],
        [352, 256, -160],
        [-352, 288, -160],
        [352, 288, -160],
        [-352, 320, -160],
        [352, 320, -160],
        [-352, -320, -128],
        [352, -320, -128],
        [-352, -288, -128],
        [352, -288, -128],
        [-352, -256, -128],
        [352, -256, -128],
        [-352, -224, -128],
        [352, -224, -128],
        [-352, -192, -128],
        [352, -192, -128],
        [-352, -160, -128],
        [352, -160, -128],
        [-352, -128, -128],
        [352, -128, -128],
        [-352, -96, -128],
        [352, -96, -128],
        [-352, -64, -128],
        [352, -64, -128],
        [-352, -32, -128],
        [352, -32, -128],
        [-352, 0, -128],
        [352, 0, -128],
        [-352, 32, -128],
        [352, 32, -128],
        [-352, 64, -128],
        [352, 64, -128],
        [-352, 96, -128],
        [352, 96, -128],
        [-352, 128, -128],
        [352, 128, -128],
        [-352, 160, -128],
        [352, 160, -128],
        [-352, 192, -128],
        [352, 192, -128],
        [-352, 224, -128],
        [352, 224, -128],
        [-352, 256, -128],
        [352, 256, -128],
        [-352, 288, -128],
        [352, 288, -128],
        [-352, 320, -128],
        [352, 320, -128],
        [-352, -320, -96],
        [352, -320, -96],
        [-352, -288, -96],
        [352, -288, -96],
        [-352, -256, -96],
        [352, -256, -96],
        [-352, -224, -96],
        [352, -224, -96],
        [-352, -192, -96],
        [352, -192, -96],
        [-352, -160, -96],
        [352, -160, -96],
        [-352, -128, -96],
        [352, -128, -96],
        [-352, -96, -96],
        [352, -96, -96],
        [-352, -64, -96],
        [352, -64, -96],
        [-352, -32, -96],
        [352, -32, -96],
        [-352, 0, -96],
        [352, 0, -96],
        [-352, 32, -96],
        [352, 32, -96],
        [-352, 64, -96],
        [352, 64, -96],
        [-352, 96, -96],
        [352, 96, -96],
        [-352, 128, -96],
        [352, 128, -96],
        [-352, 160, -96],
        [352, 160, -96],
        [-352, 192, -96],
        [352, 192, -96],
        [-352, 224, -96],
        [352, 224, -96],
        [-352, 256, -96],
        [352, 256, -96],
        [-352, 288, -96],
        [352, 288, -96],
        [-352, 320, -96],
        [352, 320, -96],
        [-352, -320, -64],
        [352, -320, -64],
        [-352, -288, -64],
        [352, -288, -64],
        [-352, -256, -64],
        [352, -256, -64],
        [-352, -224, -64],
        [352, -224, -64],
        [-352, -192, -64],
        [352, -192, -64],
        [-352, -160, -64],
        [352, -160, -64],
        [-352, -128, -64],
        [352, -128, -64],
        [-352, -96, -64],
        [352, -96, -64],
        [-352, -64, -64],
        [352, -64, -64],
        [-352, -32, -64],
        [352, -32, -64],
        [-352, 0, -64],
        [352, 0, -64],
        [-352, 32, -64],
        [352, 32, -64],
        [-352, 64, -64],
        [352, 64, -64],
        [-352, 96, -64],
        [352, 96, -64],
        [-352, 128, -64],
        [352, 128, -64],
        [-352, 160, -64],
        [352, 160, -64],
        [-352, 192, -64],
        [352, 192, -64],
        [-352, 224, -64],
        [352, 224, -64],
        [-352, 256, -64],
        [352, 256, -64],
        [-352, 288, -64],
        [352, 288, -64],
        [-352, 320, -64],
        [352, 320, -64],
        [-352, -320, -32],
        [352, -320, -32],
        [-352, -288, -32],
        [352, -288, -32],
        [-352, -256, -32],
        [352, -256, -32],
        [-352, -224, -32],
        [352, -224, -32],
        [-352, -192, -32],
        [352, -192, -32],
        [-352, -160, -32],
        [352, -160, -32],
        [-352, -128, -32],
        [352, -128, -32],
        [-352, -96, -32],
        [352, -96, -32],
        [-352, -64, -32],
        [352, -64, -32],
        [-352, -32, -32],
        [352, -32, -32],
        [-352, 0, -32],
        [352, 0, -32],
        [-352, 32, -32],
        [352, 32, -32],
        [-352, 64, -32],
        [352, 64, -32],
        [-352, 96, -32],
        [352, 96, -32],
        [-352, 128, -32],
        [352, 128, -32],
        [-352, 160, -32],
        [352, 160, -32],
        [-352, 192, -32],
        [352, 192, -32],
        [-352, 224, -32],
        [352, 224, -32],
        [-352, 256, -32],
        [352, 256, -32],
        [-352, 288, -32],
        [352, 288, -32],
        [-352, 320, -32],
        [352, 320, -32],
        [-352, -320, 0],
        [352, -320, 0],
        [-352, -288, 0],
        [352, -288, 0],
        [-352, -256, 0],
        [352, -256, 0],
        [-352, -224, 0],
        [352, -224, 0],
        [-352, -192, 0],
        [352, -192, 0],
        [-352, -160, 0],
        [352, -160, 0],
        [-352, -128, 0],
        [352, -128, 0],
        [-352, -96, 0],
        [352, -96, 0],
        [-352, -64, 0],
        [352, -64, 0],
        [-352, -32, 0],
        [352, -32, 0],
        [-352, 0, 0],
        [352, 0, 0],
        [-352, 32, 0],
        [352, 32, 0],
        [-352, 64, 0],
        [352, 64, 0],
        [-352, 96, 0],
        [352, 96, 0],
        [-352, 128, 0],
        [352, 128, 0],
        [-352, 160, 0],
        [352, 160, 0],
        [-352, 192, 0],
        [352, 192, 0],
        [-352, 224, 0],
        [352, 224, 0],
        [-352, 256, 0],
        [352, 256, 0],
        [-352, 288, 0],
        [352, 288, 0],
        [-352, 320, 0],
        [352, 320, 0],
        [-352, -320, 32],
        [352, -320, 32],
        [-352, -288, 32],
        [352, -288, 32],
        [-352, -256, 32],
        [352, -256, 32],
        [-352, -224, 32],
        [352, -224, 32],
        [-352, -192, 32],
        [352, -192, 32],
        [-352, -160, 32],
        [352, -160, 32],
        [-352, -128, 32],
        [352, -128, 32],
        [-352, -96, 32],
        [352, -96, 32],
        [-352, -64, 32],
        [352, -64, 32],
        [-352, -32, 32],
        [352, -32, 32],
        [-352, 0, 32],
        [352, 0, 32],
        [-352, 32, 32],
        [352, 32, 32],
        [-352, 64, 32],
        [352, 64, 32],
        [-352, 96, 32],
        [352, 96, 32],
        [-352, 128, 32],
        [352, 128, 32],
        [-352, 160, 32],
        [352, 160, 32],
        [-352, 192, 32],
        [352, 192, 32],
        [-352, 224, 32],
        [352, 224, 32],
        [-352, 256, 32],
        [352, 256, 32],
        [-352, 288, 32],
        [352, 288, 32],
        [-352, 320, 32],
        [352, 320, 32],
        [-352, -320, 64],
        [352, -320, 64],
        [-352, -288, 64],
        [352, -288, 64],
        [-352, -256, 64],
        [352, -256, 64],
        [-352, -224, 64],
        [352, -224, 64],
        [-352, -192, 64],
        [352, -192, 64],
        [-352, -160, 64],
        [352, -160, 64],
        [-352, -128, 64],
        [352, -128, 64],
        [-352, -96, 64],
        [352, -96, 64],
        [-352, -64, 64],
        [352, -64, 64],
        [-352, -32, 64],
        [352, -32, 64],
        [-352, 0, 64],
        [352, 0, 64],
        [-352, 32, 64],
        [352, 32, 64],
        [-352, 64, 64],
        [352, 64, 64],
        [-352, 96, 64],
        [352, 96, 64],
        [-352, 128, 64],
        [352, 128, 64],
        [-352, 160, 64],
        [352, 160, 64],
        [-352, 192, 64],
        [352, 192, 64],
        [-352, 224, 64],
        [352, 224, 64],
        [-352, 256, 64],
        [352, 256, 64],
        [-352, 288, 64],
        [352, 288, 64],
        [-352, 320, 64],
        [352, 320, 64],
        [-352, -320, 96],
        [352, -320, 96],
        [-352, -288, 96],
        [352, -288, 96],
        [-352, -256, 96],
        [352, -256, 96],
        [-352, -224, 96],
        [352, -224, 96],
        [-352, -192, 96],
        [352, -192, 96],
        [-352, -160, 96],
        [352, -160, 96],
        [-352, -128, 96],
        [352, -128, 96],
        [-352, -96, 96],
        [352, -96, 96],
        [-352, -64, 96],
        [352, -64, 96],
        [-352, -32, 96],
        [352, -32, 96],
        [-352, 0, 96],
        [352, 0, 96],
        [-352, 32, 96],
        [352, 32, 96],
        [-352, 64, 96],
        [352, 64, 96],
        [-352, 96, 96],
        [352, 96, 96],
        [-352, 128, 96],
        [352, 128, 96],
        [-352, 160, 96],
        [352, 160, 96],
        [-352, 192, 96],
        [352, 192, 96],
        [-352, 224, 96],
        [352, 224, 96],
        [-352, 256, 96],
        [352, 256, 96],
        [-352, 288, 96],
        [352, 288, 96],
        [-352, 320, 96],
        [352, 320, 96],
        [-352, -320, 128],
        [352, -320, 128],
        [-352, -288, 128],
        [352, -288, 128],
        [-352, -256, 128],
        [352, -256, 128],
        [-352, -224, 128],
        [352, -224, 128],
        [-352, -192, 128],
        [352, -192, 128],
        [-352, -160, 128],
        [352, -160, 128],
        [-352, -128, 128],
        [352, -128, 128],
        [-352, -96, 128],
        [352, -96, 128],
        [-352, -64, 128],
        [352, -64, 128],
        [-352, -32, 128],
        [352, -32, 128],
        [-352, 0, 128],
        [352, 0, 128],
        [-352, 32, 128],
        [352, 32, 128],
        [-352, 64, 128],
        [352, 64, 128],
        [-352, 96, 128],
        [352, 96, 128],
        [-352, 128, 128],
        [352, 128, 128],
        [-352, 160, 128],
        [352, 160, 128],
        [-352, 192, 128],
        [352, 192, 128],
        [-352, 224, 128],
        [352, 224, 128],
        [-352, 256, 128],
        [352, 256, 128],
        [-352, 288, 128],
        [352, 288, 128],
        [-352, 320, 128],
        [352, 320, 128],
        [-352, -320, 160],
        [352, -320, 160],
        [-352, -288, 160],
        [352, -288, 160],
        [-352, -256, 160],
        [352, -256, 160],
        [-352, -224, 160],
        [352, -224, 160],
        [-352, -192, 160],
        [352, -192, 160],
        [-352, -160, 160],
        [352, -160, 160],
        [-352, -128, 160],
        [352, -128, 160],
        [-352, -96, 160],
        [352, -96, 160],
        [-352, -64, 160],
        [352, -64, 160],
        [-352, -32, 160],
        [352, -32, 160],
        [-352, 0, 160],
        [352, 0, 160],
        [-352, 32, 160],
        [352, 32, 160],
        [-352, 64, 160],
        [352, 64, 160],
        [-352, 96, 160],
        [352, 96, 160],
        [-352, 128, 160],
        [352, 128, 160],
        [-352, 160, 160],
        [352, 160, 160],
        [-352, 192, 160],
        [352, 192, 160],
        [-352, 224, 160],
        [352, 224, 160],
        [-352, 256, 160],
        [352, 256, 160],
        [-352, 288, 160],
        [352, 288, 160],
        [-352, 320, 160],
        [352, 320, 160],
        [-352, -320, 192],
        [352, -320, 192],
        [-352, -288, 192],
        [352, -288, 192],
        [-352, -256, 192],
        [352, -256, 192],
        [-352, -224, 192],
        [352, -224, 192],
        [-352, -192, 192],
        [352, -192, 192],
        [-352, -160, 192],
        [352, -160, 192],
        [-352, -128, 192],
        [352, -128, 192],
        [-352, -96, 192],
        [352, -96, 192],
        [-352, -64, 192],
        [352, -64, 192],
        [-352, -32, 192],
        [352, -32, 192],
        [-352, 0, 192],
        [352, 0, 192],
        [-352, 32, 192],
        [352, 32, 192],
        [-352, 64, 192],
        [352, 64, 192],
        [-352, 96, 192],
        [352, 96, 192],
        [-352, 128, 192],
        [352, 128, 192],
        [-352, 160, 192],
        [352, 160, 192],
        [-352, 192, 192],
        [352, 192, 192],
        [-352, 224, 192],
        [352, 224, 192],
        [-352, 256, 192],
        [352, 256, 192],
        [-352, 288, 192],
        [352, 288, 192],
        [-352, 320, 192],
        [352, 320, 192],
        [-352, -320, 224],
        [352, -320, 224],
        [-352, -288, 224],
        [352, -288, 224],
        [-352, -256, 224],
        [352, -256, 224],
        [-352, -224, 224],
        [352, -224, 224],
        [-352, -192, 224],
        [352, -192, 224],
        [-352, -160, 224],
        [352, -160, 224],
        [-352, -128, 224],
        [352, -128, 224],
        [-352, -96, 224],
        [352, -96, 224],
        [-352, -64, 224],
        [352, -64, 224],
        [-352, -32, 224],
        [352, -32, 224],
        [-352, 0, 224],
        [352, 0, 224],
        [-352, 32, 224],
        [352, 32, 224],
        [-352, 64, 224],
        [352, 64, 224],
        [-352, 96, 224],
        [352, 96, 224],
        [-352, 128, 224],
        [352, 128, 224],
        [-352, 160, 224],
        [352, 160, 224],
        [-352, 192, 224],
        [352, 192, 224],
        [-352, 224, 224],
        [352, 224, 224],
        [-352, 256, 224],
        [352, 256, 224],
        [-352, 288, 224],
        [352, 288, 224],
        [-352, 320, 224],
        [352, 320, 224],
        [-352, -320, 256],
        [352, -320, 256],
        [-352, -288, 256],
        [352, -288, 256],
        [-352, -256, 256],
        [352, -256, 256],
        [-352, -224, 256],
        [352, -224, 256],
        [-352, -192, 256],
        [352, -192, 256],
        [-352, -160, 256],
        [352, -160, 256],
        [-352, -128, 256],
        [352, -128, 256],
        [-352, -96, 256],
        [352, -96, 256],
        [-352, -64, 256],
        [352, -64, 256],
        [-352, -32, 256],
        [352, -32, 256],
        [-352, 0, 256],
        [352, 0, 256],
        [-352, 32, 256],
        [352, 32, 256],
        [-352, 64, 256],
        [352, 64, 256],
        [-352, 96, 256],
        [352, 96, 256],
        [-352, 128, 256],
        [352, 128, 256],
        [-352, 160, 256],
        [352, 160, 256],
        [-352, 192, 256],
        [352, 192, 256],
        [-352, 224, 256],
        [352, 224, 256],
        [-352, 256, 256],
        [352, 256, 256],
        [-352, 288, 256],
        [352, 288, 256],
        [-352, 320, 256],
        [352, 320, 256],
        [-352, -320, 288],
        [352, -320, 288],
        [-352, -288, 288],
        [352, -288, 288],
        [-352, -256, 288],
        [352, -256, 288],
        [-352, -224, 288],
        [352, -224, 288],
        [-352, -192, 288],
        [352, -192, 288],
        [-352, -160, 288],
        [352, -160, 288],
        [-352, -128, 288],
        [352, -128, 288],
        [-352, -96, 288],
        [352, -96, 288],
        [-352, -64, 288],
        [352, -64, 288],
        [-352, -32, 288],
        [352, -32, 288],
        [-352, 0, 288],
        [352, 0, 288],
        [-352, 32, 288],
        [352, 32, 288],
        [-352, 64, 288],
        [352, 64, 288],
        [-352, 96, 288],
        [352, 96, 288],
        [-352, 128, 288],
        [352, 128, 288],
        [-352, 160, 288],
        [352, 160, 288],
        [-352, 192, 288],
        [352, 192, 288],
        [-352, 224, 288],
        [352, 224, 288],
        [-352, 256, 288],
        [352, 256, 288],
        [-352, 288, 288],
        [352, 288, 288],
        [-352, 320, 288],
        [352, 320, 288],
        [-352, -320, 320],
        [352, -320, 320],
        [-352, -288, 320],
        [352, -288, 320],
        [-352, -256, 320],
        [352, -256, 320],
        [-352, -224, 320],
        [352, -224, 320],
        [-352, -192, 320],
        [352, -192, 320],
        [-352, -160, 320],
        [352, -160, 320],
        [-352, -128, 320],
        [352, -128, 320],
        [-352, -96, 320],
        [352, -96, 320],
        [-352, -64, 320],
        [352, -64, 320],
        [-352, -32, 320],
        [352, -32, 320],
        [-352, 0, 320],
        [352, 0, 320],
        [-352, 32, 320],
        [352, 32, 320],
        [-352, 64, 320],
        [352, 64, 320],
        [-352, 96, 320],
        [352, 96, 320],
        [-352, 128, 320],
        [352, 128, 320],
        [-352, 160, 320],
        [352, 160, 320],
        [-352, 192, 320],
        [352, 192, 320],
        [-352, 224, 320],
        [352, 224, 320],
        [-352, 256, 320],
        [352, 256, 320],
        [-352, 288, 320],
        [352, 288, 320],
        [-352, 320, 320],
        [352, 320, 320]],
    '12': [[-384, -384, -384],
        [-384, -384, 384],
        [-384, -352, -384],
        [-384, -352, 384],
        [-384, -320, -384],
        [-384, -320, 384],
        [-384, -288, -384],
        [-384, -288, 384],
        [-384, -256, -384],
        [-384, -256, 384],
        [-384, -224, -384],
        [-384, -224, 384],
        [-384, -192, -384],
        [-384, -192, 384],
        [-384, -160, -384],
        [-384, -160, 384],
        [-384, -128, -384],
        [-384, -128, 384],
        [-384, -96, -384],
        [-384, -96, 384],
        [-384, -64, -384],
        [-384, -64, 384],
        [-384, -32, -384],
        [-384, -32, 384],
        [-384, 0, -384],
        [-384, 0, 384],
        [-384, 32, -384],
        [-384, 32, 384],
        [-384, 64, -384],
        [-384, 64, 384],
        [-384, 96, -384],
        [-384, 96, 384],
        [-384, 128, -384],
        [-384, 128, 384],
        [-384, 160, -384],
        [-384, 160, 384],
        [-384, 192, -384],
        [-384, 192, 384],
        [-384, 224, -384],
        [-384, 224, 384],
        [-384, 256, -384],
        [-384, 256, 384],
        [-384, 288, -384],
        [-384, 288, 384],
        [-384, 320, -384],
        [-384, 320, 384],
        [-384, 352, -384],
        [-384, 352, 384],
        [-384, 384, -384],
        [-384, 384, 384],
        [-384, -384, -352],
        [-384, 384, -352],
        [-384, -384, -320],
        [-384, 384, -320],
        [-384, -384, -288],
        [-384, 384, -288],
        [-384, -384, -256],
        [-384, 384, -256],
        [-384, -384, -224],
        [-384, 384, -224],
        [-384, -384, -192],
        [-384, 384, -192],
        [-384, -384, -160],
        [-384, 384, -160],
        [-384, -384, -128],
        [-384, 384, -128],
        [-384, -384, -96],
        [-384, 384, -96],
        [-384, -384, -64],
        [-384, 384, -64],
        [-384, -384, -32],
        [-384, 384, -32],
        [-384, -384, 0],
        [-384, 384, 0],
        [-384, -384, 32],
        [-384, 384, 32],
        [-384, -384, 64],
        [-384, 384, 64],
        [-384, -384, 96],
        [-384, 384, 96],
        [-384, -384, 128],
        [-384, 384, 128],
        [-384, -384, 160],
        [-384, 384, 160],
        [-384, -384, 192],
        [-384, 384, 192],
        [-384, -384, 224],
        [-384, 384, 224],
        [-384, -384, 256],
        [-384, 384, 256],
        [-384, -384, 288],
        [-384, 384, 288],
        [-384, -384, 320],
        [-384, 384, 320],
        [-384, -384, 352],
        [-384, 384, 352],
        [-352, -384, -384],
        [-352, -384, 384],
        [-352, -352, -384],
        [-352, -352, 384],
        [-352, -320, -384],
        [-352, -320, 384],
        [-352, -288, -384],
        [-352, -288, 384],
        [-352, -256, -384],
        [-352, -256, 384],
        [-352, -224, -384],
        [-352, -224, 384],
        [-352, -192, -384],
        [-352, -192, 384],
        [-352, -160, -384],
        [-352, -160, 384],
        [-352, -128, -384],
        [-352, -128, 384],
        [-352, -96, -384],
        [-352, -96, 384],
        [-352, -64, -384],
        [-352, -64, 384],
        [-352, -32, -384],
        [-352, -32, 384],
        [-352, 0, -384],
        [-352, 0, 384],
        [-352, 32, -384],
        [-352, 32, 384],
        [-352, 64, -384],
        [-352, 64, 384],
        [-352, 96, -384],
        [-352, 96, 384],
        [-352, 128, -384],
        [-352, 128, 384],
        [-352, 160, -384],
        [-352, 160, 384],
        [-352, 192, -384],
        [-352, 192, 384],
        [-352, 224, -384],
        [-352, 224, 384],
        [-352, 256, -384],
        [-352, 256, 384],
        [-352, 288, -384],
        [-352, 288, 384],
        [-352, 320, -384],
        [-352, 320, 384],
        [-352, 352, -384],
        [-352, 352, 384],
        [-352, 384, -384],
        [-352, 384, 384],
        [-352, -384, -352],
        [-352, 384, -352],
        [-352, -384, -320],
        [-352, 384, -320],
        [-352, -384, -288],
        [-352, 384, -288],
        [-352, -384, -256],
        [-352, 384, -256],
        [-352, -384, -224],
        [-352, 384, -224],
        [-352, -384, -192],
        [-352, 384, -192],
        [-352, -384, -160],
        [-352, 384, -160],
        [-352, -384, -128],
        [-352, 384, -128],
        [-352, -384, -96],
        [-352, 384, -96],
        [-352, -384, -64],
        [-352, 384, -64],
        [-352, -384, -32],
        [-352, 384, -32],
        [-352, -384, 0],
        [-352, 384, 0],
        [-352, -384, 32],
        [-352, 384, 32],
        [-352, -384, 64],
        [-352, 384, 64],
        [-352, -384, 96],
        [-352, 384, 96],
        [-352, -384, 128],
        [-352, 384, 128],
        [-352, -384, 160],
        [-352, 384, 160],
        [-352, -384, 192],
        [-352, 384, 192],
        [-352, -384, 224],
        [-352, 384, 224],
        [-352, -384, 256],
        [-352, 384, 256],
        [-352, -384, 288],
        [-352, 384, 288],
        [-352, -384, 320],
        [-352, 384, 320],
        [-352, -384, 352],
        [-352, 384, 352],
        [-320, -384, -384],
        [-320, -384, 384],
        [-320, -352, -384],
        [-320, -352, 384],
        [-320, -320, -384],
        [-320, -320, 384],
        [-320, -288, -384],
        [-320, -288, 384],
        [-320, -256, -384],
        [-320, -256, 384],
        [-320, -224, -384],
        [-320, -224, 384],
        [-320, -192, -384],
        [-320, -192, 384],
        [-320, -160, -384],
        [-320, -160, 384],
        [-320, -128, -384],
        [-320, -128, 384],
        [-320, -96, -384],
        [-320, -96, 384],
        [-320, -64, -384],
        [-320, -64, 384],
        [-320, -32, -384],
        [-320, -32, 384],
        [-320, 0, -384],
        [-320, 0, 384],
        [-320, 32, -384],
        [-320, 32, 384],
        [-320, 64, -384],
        [-320, 64, 384],
        [-320, 96, -384],
        [-320, 96, 384],
        [-320, 128, -384],
        [-320, 128, 384],
        [-320, 160, -384],
        [-320, 160, 384],
        [-320, 192, -384],
        [-320, 192, 384],
        [-320, 224, -384],
        [-320, 224, 384],
        [-320, 256, -384],
        [-320, 256, 384],
        [-320, 288, -384],
        [-320, 288, 384],
        [-320, 320, -384],
        [-320, 320, 384],
        [-320, 352, -384],
        [-320, 352, 384],
        [-320, 384, -384],
        [-320, 384, 384],
        [-320, -384, -352],
        [-320, 384, -352],
        [-320, -384, -320],
        [-320, 384, -320],
        [-320, -384, -288],
        [-320, 384, -288],
        [-320, -384, -256],
        [-320, 384, -256],
        [-320, -384, -224],
        [-320, 384, -224],
        [-320, -384, -192],
        [-320, 384, -192],
        [-320, -384, -160],
        [-320, 384, -160],
        [-320, -384, -128],
        [-320, 384, -128],
        [-320, -384, -96],
        [-320, 384, -96],
        [-320, -384, -64],
        [-320, 384, -64],
        [-320, -384, -32],
        [-320, 384, -32],
        [-320, -384, 0],
        [-320, 384, 0],
        [-320, -384, 32],
        [-320, 384, 32],
        [-320, -384, 64],
        [-320, 384, 64],
        [-320, -384, 96],
        [-320, 384, 96],
        [-320, -384, 128],
        [-320, 384, 128],
        [-320, -384, 160],
        [-320, 384, 160],
        [-320, -384, 192],
        [-320, 384, 192],
        [-320, -384, 224],
        [-320, 384, 224],
        [-320, -384, 256],
        [-320, 384, 256],
        [-320, -384, 288],
        [-320, 384, 288],
        [-320, -384, 320],
        [-320, 384, 320],
        [-320, -384, 352],
        [-320, 384, 352],
        [-288, -384, -384],
        [-288, -384, 384],
        [-288, -352, -384],
        [-288, -352, 384],
        [-288, -320, -384],
        [-288, -320, 384],
        [-288, -288, -384],
        [-288, -288, 384],
        [-288, -256, -384],
        [-288, -256, 384],
        [-288, -224, -384],
        [-288, -224, 384],
        [-288, -192, -384],
        [-288, -192, 384],
        [-288, -160, -384],
        [-288, -160, 384],
        [-288, -128, -384],
        [-288, -128, 384],
        [-288, -96, -384],
        [-288, -96, 384],
        [-288, -64, -384],
        [-288, -64, 384],
        [-288, -32, -384],
        [-288, -32, 384],
        [-288, 0, -384],
        [-288, 0, 384],
        [-288, 32, -384],
        [-288, 32, 384],
        [-288, 64, -384],
        [-288, 64, 384],
        [-288, 96, -384],
        [-288, 96, 384],
        [-288, 128, -384],
        [-288, 128, 384],
        [-288, 160, -384],
        [-288, 160, 384],
        [-288, 192, -384],
        [-288, 192, 384],
        [-288, 224, -384],
        [-288, 224, 384],
        [-288, 256, -384],
        [-288, 256, 384],
        [-288, 288, -384],
        [-288, 288, 384],
        [-288, 320, -384],
        [-288, 320, 384],
        [-288, 352, -384],
        [-288, 352, 384],
        [-288, 384, -384],
        [-288, 384, 384],
        [-288, -384, -352],
        [-288, 384, -352],
        [-288, -384, -320],
        [-288, 384, -320],
        [-288, -384, -288],
        [-288, 384, -288],
        [-288, -384, -256],
        [-288, 384, -256],
        [-288, -384, -224],
        [-288, 384, -224],
        [-288, -384, -192],
        [-288, 384, -192],
        [-288, -384, -160],
        [-288, 384, -160],
        [-288, -384, -128],
        [-288, 384, -128],
        [-288, -384, -96],
        [-288, 384, -96],
        [-288, -384, -64],
        [-288, 384, -64],
        [-288, -384, -32],
        [-288, 384, -32],
        [-288, -384, 0],
        [-288, 384, 0],
        [-288, -384, 32],
        [-288, 384, 32],
        [-288, -384, 64],
        [-288, 384, 64],
        [-288, -384, 96],
        [-288, 384, 96],
        [-288, -384, 128],
        [-288, 384, 128],
        [-288, -384, 160],
        [-288, 384, 160],
        [-288, -384, 192],
        [-288, 384, 192],
        [-288, -384, 224],
        [-288, 384, 224],
        [-288, -384, 256],
        [-288, 384, 256],
        [-288, -384, 288],
        [-288, 384, 288],
        [-288, -384, 320],
        [-288, 384, 320],
        [-288, -384, 352],
        [-288, 384, 352],
        [-256, -384, -384],
        [-256, -384, 384],
        [-256, -352, -384],
        [-256, -352, 384],
        [-256, -320, -384],
        [-256, -320, 384],
        [-256, -288, -384],
        [-256, -288, 384],
        [-256, -256, -384],
        [-256, -256, 384],
        [-256, -224, -384],
        [-256, -224, 384],
        [-256, -192, -384],
        [-256, -192, 384],
        [-256, -160, -384],
        [-256, -160, 384],
        [-256, -128, -384],
        [-256, -128, 384],
        [-256, -96, -384],
        [-256, -96, 384],
        [-256, -64, -384],
        [-256, -64, 384],
        [-256, -32, -384],
        [-256, -32, 384],
        [-256, 0, -384],
        [-256, 0, 384],
        [-256, 32, -384],
        [-256, 32, 384],
        [-256, 64, -384],
        [-256, 64, 384],
        [-256, 96, -384],
        [-256, 96, 384],
        [-256, 128, -384],
        [-256, 128, 384],
        [-256, 160, -384],
        [-256, 160, 384],
        [-256, 192, -384],
        [-256, 192, 384],
        [-256, 224, -384],
        [-256, 224, 384],
        [-256, 256, -384],
        [-256, 256, 384],
        [-256, 288, -384],
        [-256, 288, 384],
        [-256, 320, -384],
        [-256, 320, 384],
        [-256, 352, -384],
        [-256, 352, 384],
        [-256, 384, -384],
        [-256, 384, 384],
        [-256, -384, -352],
        [-256, 384, -352],
        [-256, -384, -320],
        [-256, 384, -320],
        [-256, -384, -288],
        [-256, 384, -288],
        [-256, -384, -256],
        [-256, 384, -256],
        [-256, -384, -224],
        [-256, 384, -224],
        [-256, -384, -192],
        [-256, 384, -192],
        [-256, -384, -160],
        [-256, 384, -160],
        [-256, -384, -128],
        [-256, 384, -128],
        [-256, -384, -96],
        [-256, 384, -96],
        [-256, -384, -64],
        [-256, 384, -64],
        [-256, -384, -32],
        [-256, 384, -32],
        [-256, -384, 0],
        [-256, 384, 0],
        [-256, -384, 32],
        [-256, 384, 32],
        [-256, -384, 64],
        [-256, 384, 64],
        [-256, -384, 96],
        [-256, 384, 96],
        [-256, -384, 128],
        [-256, 384, 128],
        [-256, -384, 160],
        [-256, 384, 160],
        [-256, -384, 192],
        [-256, 384, 192],
        [-256, -384, 224],
        [-256, 384, 224],
        [-256, -384, 256],
        [-256, 384, 256],
        [-256, -384, 288],
        [-256, 384, 288],
        [-256, -384, 320],
        [-256, 384, 320],
        [-256, -384, 352],
        [-256, 384, 352],
        [-224, -384, -384],
        [-224, -384, 384],
        [-224, -352, -384],
        [-224, -352, 384],
        [-224, -320, -384],
        [-224, -320, 384],
        [-224, -288, -384],
        [-224, -288, 384],
        [-224, -256, -384],
        [-224, -256, 384],
        [-224, -224, -384],
        [-224, -224, 384],
        [-224, -192, -384],
        [-224, -192, 384],
        [-224, -160, -384],
        [-224, -160, 384],
        [-224, -128, -384],
        [-224, -128, 384],
        [-224, -96, -384],
        [-224, -96, 384],
        [-224, -64, -384],
        [-224, -64, 384],
        [-224, -32, -384],
        [-224, -32, 384],
        [-224, 0, -384],
        [-224, 0, 384],
        [-224, 32, -384],
        [-224, 32, 384],
        [-224, 64, -384],
        [-224, 64, 384],
        [-224, 96, -384],
        [-224, 96, 384],
        [-224, 128, -384],
        [-224, 128, 384],
        [-224, 160, -384],
        [-224, 160, 384],
        [-224, 192, -384],
        [-224, 192, 384],
        [-224, 224, -384],
        [-224, 224, 384],
        [-224, 256, -384],
        [-224, 256, 384],
        [-224, 288, -384],
        [-224, 288, 384],
        [-224, 320, -384],
        [-224, 320, 384],
        [-224, 352, -384],
        [-224, 352, 384],
        [-224, 384, -384],
        [-224, 384, 384],
        [-224, -384, -352],
        [-224, 384, -352],
        [-224, -384, -320],
        [-224, 384, -320],
        [-224, -384, -288],
        [-224, 384, -288],
        [-224, -384, -256],
        [-224, 384, -256],
        [-224, -384, -224],
        [-224, 384, -224],
        [-224, -384, -192],
        [-224, 384, -192],
        [-224, -384, -160],
        [-224, 384, -160],
        [-224, -384, -128],
        [-224, 384, -128],
        [-224, -384, -96],
        [-224, 384, -96],
        [-224, -384, -64],
        [-224, 384, -64],
        [-224, -384, -32],
        [-224, 384, -32],
        [-224, -384, 0],
        [-224, 384, 0],
        [-224, -384, 32],
        [-224, 384, 32],
        [-224, -384, 64],
        [-224, 384, 64],
        [-224, -384, 96],
        [-224, 384, 96],
        [-224, -384, 128],
        [-224, 384, 128],
        [-224, -384, 160],
        [-224, 384, 160],
        [-224, -384, 192],
        [-224, 384, 192],
        [-224, -384, 224],
        [-224, 384, 224],
        [-224, -384, 256],
        [-224, 384, 256],
        [-224, -384, 288],
        [-224, 384, 288],
        [-224, -384, 320],
        [-224, 384, 320],
        [-224, -384, 352],
        [-224, 384, 352],
        [-192, -384, -384],
        [-192, -384, 384],
        [-192, -352, -384],
        [-192, -352, 384],
        [-192, -320, -384],
        [-192, -320, 384],
        [-192, -288, -384],
        [-192, -288, 384],
        [-192, -256, -384],
        [-192, -256, 384],
        [-192, -224, -384],
        [-192, -224, 384],
        [-192, -192, -384],
        [-192, -192, 384],
        [-192, -160, -384],
        [-192, -160, 384],
        [-192, -128, -384],
        [-192, -128, 384],
        [-192, -96, -384],
        [-192, -96, 384],
        [-192, -64, -384],
        [-192, -64, 384],
        [-192, -32, -384],
        [-192, -32, 384],
        [-192, 0, -384],
        [-192, 0, 384],
        [-192, 32, -384],
        [-192, 32, 384],
        [-192, 64, -384],
        [-192, 64, 384],
        [-192, 96, -384],
        [-192, 96, 384],
        [-192, 128, -384],
        [-192, 128, 384],
        [-192, 160, -384],
        [-192, 160, 384],
        [-192, 192, -384],
        [-192, 192, 384],
        [-192, 224, -384],
        [-192, 224, 384],
        [-192, 256, -384],
        [-192, 256, 384],
        [-192, 288, -384],
        [-192, 288, 384],
        [-192, 320, -384],
        [-192, 320, 384],
        [-192, 352, -384],
        [-192, 352, 384],
        [-192, 384, -384],
        [-192, 384, 384],
        [-192, -384, -352],
        [-192, 384, -352],
        [-192, -384, -320],
        [-192, 384, -320],
        [-192, -384, -288],
        [-192, 384, -288],
        [-192, -384, -256],
        [-192, 384, -256],
        [-192, -384, -224],
        [-192, 384, -224],
        [-192, -384, -192],
        [-192, 384, -192],
        [-192, -384, -160],
        [-192, 384, -160],
        [-192, -384, -128],
        [-192, 384, -128],
        [-192, -384, -96],
        [-192, 384, -96],
        [-192, -384, -64],
        [-192, 384, -64],
        [-192, -384, -32],
        [-192, 384, -32],
        [-192, -384, 0],
        [-192, 384, 0],
        [-192, -384, 32],
        [-192, 384, 32],
        [-192, -384, 64],
        [-192, 384, 64],
        [-192, -384, 96],
        [-192, 384, 96],
        [-192, -384, 128],
        [-192, 384, 128],
        [-192, -384, 160],
        [-192, 384, 160],
        [-192, -384, 192],
        [-192, 384, 192],
        [-192, -384, 224],
        [-192, 384, 224],
        [-192, -384, 256],
        [-192, 384, 256],
        [-192, -384, 288],
        [-192, 384, 288],
        [-192, -384, 320],
        [-192, 384, 320],
        [-192, -384, 352],
        [-192, 384, 352],
        [-160, -384, -384],
        [-160, -384, 384],
        [-160, -352, -384],
        [-160, -352, 384],
        [-160, -320, -384],
        [-160, -320, 384],
        [-160, -288, -384],
        [-160, -288, 384],
        [-160, -256, -384],
        [-160, -256, 384],
        [-160, -224, -384],
        [-160, -224, 384],
        [-160, -192, -384],
        [-160, -192, 384],
        [-160, -160, -384],
        [-160, -160, 384],
        [-160, -128, -384],
        [-160, -128, 384],
        [-160, -96, -384],
        [-160, -96, 384],
        [-160, -64, -384],
        [-160, -64, 384],
        [-160, -32, -384],
        [-160, -32, 384],
        [-160, 0, -384],
        [-160, 0, 384],
        [-160, 32, -384],
        [-160, 32, 384],
        [-160, 64, -384],
        [-160, 64, 384],
        [-160, 96, -384],
        [-160, 96, 384],
        [-160, 128, -384],
        [-160, 128, 384],
        [-160, 160, -384],
        [-160, 160, 384],
        [-160, 192, -384],
        [-160, 192, 384],
        [-160, 224, -384],
        [-160, 224, 384],
        [-160, 256, -384],
        [-160, 256, 384],
        [-160, 288, -384],
        [-160, 288, 384],
        [-160, 320, -384],
        [-160, 320, 384],
        [-160, 352, -384],
        [-160, 352, 384],
        [-160, 384, -384],
        [-160, 384, 384],
        [-160, -384, -352],
        [-160, 384, -352],
        [-160, -384, -320],
        [-160, 384, -320],
        [-160, -384, -288],
        [-160, 384, -288],
        [-160, -384, -256],
        [-160, 384, -256],
        [-160, -384, -224],
        [-160, 384, -224],
        [-160, -384, -192],
        [-160, 384, -192],
        [-160, -384, -160],
        [-160, 384, -160],
        [-160, -384, -128],
        [-160, 384, -128],
        [-160, -384, -96],
        [-160, 384, -96],
        [-160, -384, -64],
        [-160, 384, -64],
        [-160, -384, -32],
        [-160, 384, -32],
        [-160, -384, 0],
        [-160, 384, 0],
        [-160, -384, 32],
        [-160, 384, 32],
        [-160, -384, 64],
        [-160, 384, 64],
        [-160, -384, 96],
        [-160, 384, 96],
        [-160, -384, 128],
        [-160, 384, 128],
        [-160, -384, 160],
        [-160, 384, 160],
        [-160, -384, 192],
        [-160, 384, 192],
        [-160, -384, 224],
        [-160, 384, 224],
        [-160, -384, 256],
        [-160, 384, 256],
        [-160, -384, 288],
        [-160, 384, 288],
        [-160, -384, 320],
        [-160, 384, 320],
        [-160, -384, 352],
        [-160, 384, 352],
        [-128, -384, -384],
        [-128, -384, 384],
        [-128, -352, -384],
        [-128, -352, 384],
        [-128, -320, -384],
        [-128, -320, 384],
        [-128, -288, -384],
        [-128, -288, 384],
        [-128, -256, -384],
        [-128, -256, 384],
        [-128, -224, -384],
        [-128, -224, 384],
        [-128, -192, -384],
        [-128, -192, 384],
        [-128, -160, -384],
        [-128, -160, 384],
        [-128, -128, -384],
        [-128, -128, 384],
        [-128, -96, -384],
        [-128, -96, 384],
        [-128, -64, -384],
        [-128, -64, 384],
        [-128, -32, -384],
        [-128, -32, 384],
        [-128, 0, -384],
        [-128, 0, 384],
        [-128, 32, -384],
        [-128, 32, 384],
        [-128, 64, -384],
        [-128, 64, 384],
        [-128, 96, -384],
        [-128, 96, 384],
        [-128, 128, -384],
        [-128, 128, 384],
        [-128, 160, -384],
        [-128, 160, 384],
        [-128, 192, -384],
        [-128, 192, 384],
        [-128, 224, -384],
        [-128, 224, 384],
        [-128, 256, -384],
        [-128, 256, 384],
        [-128, 288, -384],
        [-128, 288, 384],
        [-128, 320, -384],
        [-128, 320, 384],
        [-128, 352, -384],
        [-128, 352, 384],
        [-128, 384, -384],
        [-128, 384, 384],
        [-128, -384, -352],
        [-128, 384, -352],
        [-128, -384, -320],
        [-128, 384, -320],
        [-128, -384, -288],
        [-128, 384, -288],
        [-128, -384, -256],
        [-128, 384, -256],
        [-128, -384, -224],
        [-128, 384, -224],
        [-128, -384, -192],
        [-128, 384, -192],
        [-128, -384, -160],
        [-128, 384, -160],
        [-128, -384, -128],
        [-128, 384, -128],
        [-128, -384, -96],
        [-128, 384, -96],
        [-128, -384, -64],
        [-128, 384, -64],
        [-128, -384, -32],
        [-128, 384, -32],
        [-128, -384, 0],
        [-128, 384, 0],
        [-128, -384, 32],
        [-128, 384, 32],
        [-128, -384, 64],
        [-128, 384, 64],
        [-128, -384, 96],
        [-128, 384, 96],
        [-128, -384, 128],
        [-128, 384, 128],
        [-128, -384, 160],
        [-128, 384, 160],
        [-128, -384, 192],
        [-128, 384, 192],
        [-128, -384, 224],
        [-128, 384, 224],
        [-128, -384, 256],
        [-128, 384, 256],
        [-128, -384, 288],
        [-128, 384, 288],
        [-128, -384, 320],
        [-128, 384, 320],
        [-128, -384, 352],
        [-128, 384, 352],
        [-96, -384, -384],
        [-96, -384, 384],
        [-96, -352, -384],
        [-96, -352, 384],
        [-96, -320, -384],
        [-96, -320, 384],
        [-96, -288, -384],
        [-96, -288, 384],
        [-96, -256, -384],
        [-96, -256, 384],
        [-96, -224, -384],
        [-96, -224, 384],
        [-96, -192, -384],
        [-96, -192, 384],
        [-96, -160, -384],
        [-96, -160, 384],
        [-96, -128, -384],
        [-96, -128, 384],
        [-96, -96, -384],
        [-96, -96, 384],
        [-96, -64, -384],
        [-96, -64, 384],
        [-96, -32, -384],
        [-96, -32, 384],
        [-96, 0, -384],
        [-96, 0, 384],
        [-96, 32, -384],
        [-96, 32, 384],
        [-96, 64, -384],
        [-96, 64, 384],
        [-96, 96, -384],
        [-96, 96, 384],
        [-96, 128, -384],
        [-96, 128, 384],
        [-96, 160, -384],
        [-96, 160, 384],
        [-96, 192, -384],
        [-96, 192, 384],
        [-96, 224, -384],
        [-96, 224, 384],
        [-96, 256, -384],
        [-96, 256, 384],
        [-96, 288, -384],
        [-96, 288, 384],
        [-96, 320, -384],
        [-96, 320, 384],
        [-96, 352, -384],
        [-96, 352, 384],
        [-96, 384, -384],
        [-96, 384, 384],
        [-96, -384, -352],
        [-96, 384, -352],
        [-96, -384, -320],
        [-96, 384, -320],
        [-96, -384, -288],
        [-96, 384, -288],
        [-96, -384, -256],
        [-96, 384, -256],
        [-96, -384, -224],
        [-96, 384, -224],
        [-96, -384, -192],
        [-96, 384, -192],
        [-96, -384, -160],
        [-96, 384, -160],
        [-96, -384, -128],
        [-96, 384, -128],
        [-96, -384, -96],
        [-96, 384, -96],
        [-96, -384, -64],
        [-96, 384, -64],
        [-96, -384, -32],
        [-96, 384, -32],
        [-96, -384, 0],
        [-96, 384, 0],
        [-96, -384, 32],
        [-96, 384, 32],
        [-96, -384, 64],
        [-96, 384, 64],
        [-96, -384, 96],
        [-96, 384, 96],
        [-96, -384, 128],
        [-96, 384, 128],
        [-96, -384, 160],
        [-96, 384, 160],
        [-96, -384, 192],
        [-96, 384, 192],
        [-96, -384, 224],
        [-96, 384, 224],
        [-96, -384, 256],
        [-96, 384, 256],
        [-96, -384, 288],
        [-96, 384, 288],
        [-96, -384, 320],
        [-96, 384, 320],
        [-96, -384, 352],
        [-96, 384, 352],
        [-64, -384, -384],
        [-64, -384, 384],
        [-64, -352, -384],
        [-64, -352, 384],
        [-64, -320, -384],
        [-64, -320, 384],
        [-64, -288, -384],
        [-64, -288, 384],
        [-64, -256, -384],
        [-64, -256, 384],
        [-64, -224, -384],
        [-64, -224, 384],
        [-64, -192, -384],
        [-64, -192, 384],
        [-64, -160, -384],
        [-64, -160, 384],
        [-64, -128, -384],
        [-64, -128, 384],
        [-64, -96, -384],
        [-64, -96, 384],
        [-64, -64, -384],
        [-64, -64, 384],
        [-64, -32, -384],
        [-64, -32, 384],
        [-64, 0, -384],
        [-64, 0, 384],
        [-64, 32, -384],
        [-64, 32, 384],
        [-64, 64, -384],
        [-64, 64, 384],
        [-64, 96, -384],
        [-64, 96, 384],
        [-64, 128, -384],
        [-64, 128, 384],
        [-64, 160, -384],
        [-64, 160, 384],
        [-64, 192, -384],
        [-64, 192, 384],
        [-64, 224, -384],
        [-64, 224, 384],
        [-64, 256, -384],
        [-64, 256, 384],
        [-64, 288, -384],
        [-64, 288, 384],
        [-64, 320, -384],
        [-64, 320, 384],
        [-64, 352, -384],
        [-64, 352, 384],
        [-64, 384, -384],
        [-64, 384, 384],
        [-64, -384, -352],
        [-64, 384, -352],
        [-64, -384, -320],
        [-64, 384, -320],
        [-64, -384, -288],
        [-64, 384, -288],
        [-64, -384, -256],
        [-64, 384, -256],
        [-64, -384, -224],
        [-64, 384, -224],
        [-64, -384, -192],
        [-64, 384, -192],
        [-64, -384, -160],
        [-64, 384, -160],
        [-64, -384, -128],
        [-64, 384, -128],
        [-64, -384, -96],
        [-64, 384, -96],
        [-64, -384, -64],
        [-64, 384, -64],
        [-64, -384, -32],
        [-64, 384, -32],
        [-64, -384, 0],
        [-64, 384, 0],
        [-64, -384, 32],
        [-64, 384, 32],
        [-64, -384, 64],
        [-64, 384, 64],
        [-64, -384, 96],
        [-64, 384, 96],
        [-64, -384, 128],
        [-64, 384, 128],
        [-64, -384, 160],
        [-64, 384, 160],
        [-64, -384, 192],
        [-64, 384, 192],
        [-64, -384, 224],
        [-64, 384, 224],
        [-64, -384, 256],
        [-64, 384, 256],
        [-64, -384, 288],
        [-64, 384, 288],
        [-64, -384, 320],
        [-64, 384, 320],
        [-64, -384, 352],
        [-64, 384, 352],
        [-32, -384, -384],
        [-32, -384, 384],
        [-32, -352, -384],
        [-32, -352, 384],
        [-32, -320, -384],
        [-32, -320, 384],
        [-32, -288, -384],
        [-32, -288, 384],
        [-32, -256, -384],
        [-32, -256, 384],
        [-32, -224, -384],
        [-32, -224, 384],
        [-32, -192, -384],
        [-32, -192, 384],
        [-32, -160, -384],
        [-32, -160, 384],
        [-32, -128, -384],
        [-32, -128, 384],
        [-32, -96, -384],
        [-32, -96, 384],
        [-32, -64, -384],
        [-32, -64, 384],
        [-32, -32, -384],
        [-32, -32, 384],
        [-32, 0, -384],
        [-32, 0, 384],
        [-32, 32, -384],
        [-32, 32, 384],
        [-32, 64, -384],
        [-32, 64, 384],
        [-32, 96, -384],
        [-32, 96, 384],
        [-32, 128, -384],
        [-32, 128, 384],
        [-32, 160, -384],
        [-32, 160, 384],
        [-32, 192, -384],
        [-32, 192, 384],
        [-32, 224, -384],
        [-32, 224, 384],
        [-32, 256, -384],
        [-32, 256, 384],
        [-32, 288, -384],
        [-32, 288, 384],
        [-32, 320, -384],
        [-32, 320, 384],
        [-32, 352, -384],
        [-32, 352, 384],
        [-32, 384, -384],
        [-32, 384, 384],
        [-32, -384, -352],
        [-32, 384, -352],
        [-32, -384, -320],
        [-32, 384, -320],
        [-32, -384, -288],
        [-32, 384, -288],
        [-32, -384, -256],
        [-32, 384, -256],
        [-32, -384, -224],
        [-32, 384, -224],
        [-32, -384, -192],
        [-32, 384, -192],
        [-32, -384, -160],
        [-32, 384, -160],
        [-32, -384, -128],
        [-32, 384, -128],
        [-32, -384, -96],
        [-32, 384, -96],
        [-32, -384, -64],
        [-32, 384, -64],
        [-32, -384, -32],
        [-32, 384, -32],
        [-32, -384, 0],
        [-32, 384, 0],
        [-32, -384, 32],
        [-32, 384, 32],
        [-32, -384, 64],
        [-32, 384, 64],
        [-32, -384, 96],
        [-32, 384, 96],
        [-32, -384, 128],
        [-32, 384, 128],
        [-32, -384, 160],
        [-32, 384, 160],
        [-32, -384, 192],
        [-32, 384, 192],
        [-32, -384, 224],
        [-32, 384, 224],
        [-32, -384, 256],
        [-32, 384, 256],
        [-32, -384, 288],
        [-32, 384, 288],
        [-32, -384, 320],
        [-32, 384, 320],
        [-32, -384, 352],
        [-32, 384, 352],
        [0, -384, -384],
        [0, -384, 384],
        [0, -352, -384],
        [0, -352, 384],
        [0, -320, -384],
        [0, -320, 384],
        [0, -288, -384],
        [0, -288, 384],
        [0, -256, -384],
        [0, -256, 384],
        [0, -224, -384],
        [0, -224, 384],
        [0, -192, -384],
        [0, -192, 384],
        [0, -160, -384],
        [0, -160, 384],
        [0, -128, -384],
        [0, -128, 384],
        [0, -96, -384],
        [0, -96, 384],
        [0, -64, -384],
        [0, -64, 384],
        [0, -32, -384],
        [0, -32, 384],
        [0, 0, -384],
        [0, 0, 384],
        [0, 32, -384],
        [0, 32, 384],
        [0, 64, -384],
        [0, 64, 384],
        [0, 96, -384],
        [0, 96, 384],
        [0, 128, -384],
        [0, 128, 384],
        [0, 160, -384],
        [0, 160, 384],
        [0, 192, -384],
        [0, 192, 384],
        [0, 224, -384],
        [0, 224, 384],
        [0, 256, -384],
        [0, 256, 384],
        [0, 288, -384],
        [0, 288, 384],
        [0, 320, -384],
        [0, 320, 384],
        [0, 352, -384],
        [0, 352, 384],
        [0, 384, -384],
        [0, 384, 384],
        [0, -384, -352],
        [0, 384, -352],
        [0, -384, -320],
        [0, 384, -320],
        [0, -384, -288],
        [0, 384, -288],
        [0, -384, -256],
        [0, 384, -256],
        [0, -384, -224],
        [0, 384, -224],
        [0, -384, -192],
        [0, 384, -192],
        [0, -384, -160],
        [0, 384, -160],
        [0, -384, -128],
        [0, 384, -128],
        [0, -384, -96],
        [0, 384, -96],
        [0, -384, -64],
        [0, 384, -64],
        [0, -384, -32],
        [0, 384, -32],
        [0, -384, 0],
        [0, 384, 0],
        [0, -384, 32],
        [0, 384, 32],
        [0, -384, 64],
        [0, 384, 64],
        [0, -384, 96],
        [0, 384, 96],
        [0, -384, 128],
        [0, 384, 128],
        [0, -384, 160],
        [0, 384, 160],
        [0, -384, 192],
        [0, 384, 192],
        [0, -384, 224],
        [0, 384, 224],
        [0, -384, 256],
        [0, 384, 256],
        [0, -384, 288],
        [0, 384, 288],
        [0, -384, 320],
        [0, 384, 320],
        [0, -384, 352],
        [0, 384, 352],
        [32, -384, -384],
        [32, -384, 384],
        [32, -352, -384],
        [32, -352, 384],
        [32, -320, -384],
        [32, -320, 384],
        [32, -288, -384],
        [32, -288, 384],
        [32, -256, -384],
        [32, -256, 384],
        [32, -224, -384],
        [32, -224, 384],
        [32, -192, -384],
        [32, -192, 384],
        [32, -160, -384],
        [32, -160, 384],
        [32, -128, -384],
        [32, -128, 384],
        [32, -96, -384],
        [32, -96, 384],
        [32, -64, -384],
        [32, -64, 384],
        [32, -32, -384],
        [32, -32, 384],
        [32, 0, -384],
        [32, 0, 384],
        [32, 32, -384],
        [32, 32, 384],
        [32, 64, -384],
        [32, 64, 384],
        [32, 96, -384],
        [32, 96, 384],
        [32, 128, -384],
        [32, 128, 384],
        [32, 160, -384],
        [32, 160, 384],
        [32, 192, -384],
        [32, 192, 384],
        [32, 224, -384],
        [32, 224, 384],
        [32, 256, -384],
        [32, 256, 384],
        [32, 288, -384],
        [32, 288, 384],
        [32, 320, -384],
        [32, 320, 384],
        [32, 352, -384],
        [32, 352, 384],
        [32, 384, -384],
        [32, 384, 384],
        [32, -384, -352],
        [32, 384, -352],
        [32, -384, -320],
        [32, 384, -320],
        [32, -384, -288],
        [32, 384, -288],
        [32, -384, -256],
        [32, 384, -256],
        [32, -384, -224],
        [32, 384, -224],
        [32, -384, -192],
        [32, 384, -192],
        [32, -384, -160],
        [32, 384, -160],
        [32, -384, -128],
        [32, 384, -128],
        [32, -384, -96],
        [32, 384, -96],
        [32, -384, -64],
        [32, 384, -64],
        [32, -384, -32],
        [32, 384, -32],
        [32, -384, 0],
        [32, 384, 0],
        [32, -384, 32],
        [32, 384, 32],
        [32, -384, 64],
        [32, 384, 64],
        [32, -384, 96],
        [32, 384, 96],
        [32, -384, 128],
        [32, 384, 128],
        [32, -384, 160],
        [32, 384, 160],
        [32, -384, 192],
        [32, 384, 192],
        [32, -384, 224],
        [32, 384, 224],
        [32, -384, 256],
        [32, 384, 256],
        [32, -384, 288],
        [32, 384, 288],
        [32, -384, 320],
        [32, 384, 320],
        [32, -384, 352],
        [32, 384, 352],
        [64, -384, -384],
        [64, -384, 384],
        [64, -352, -384],
        [64, -352, 384],
        [64, -320, -384],
        [64, -320, 384],
        [64, -288, -384],
        [64, -288, 384],
        [64, -256, -384],
        [64, -256, 384],
        [64, -224, -384],
        [64, -224, 384],
        [64, -192, -384],
        [64, -192, 384],
        [64, -160, -384],
        [64, -160, 384],
        [64, -128, -384],
        [64, -128, 384],
        [64, -96, -384],
        [64, -96, 384],
        [64, -64, -384],
        [64, -64, 384],
        [64, -32, -384],
        [64, -32, 384],
        [64, 0, -384],
        [64, 0, 384],
        [64, 32, -384],
        [64, 32, 384],
        [64, 64, -384],
        [64, 64, 384],
        [64, 96, -384],
        [64, 96, 384],
        [64, 128, -384],
        [64, 128, 384],
        [64, 160, -384],
        [64, 160, 384],
        [64, 192, -384],
        [64, 192, 384],
        [64, 224, -384],
        [64, 224, 384],
        [64, 256, -384],
        [64, 256, 384],
        [64, 288, -384],
        [64, 288, 384],
        [64, 320, -384],
        [64, 320, 384],
        [64, 352, -384],
        [64, 352, 384],
        [64, 384, -384],
        [64, 384, 384],
        [64, -384, -352],
        [64, 384, -352],
        [64, -384, -320],
        [64, 384, -320],
        [64, -384, -288],
        [64, 384, -288],
        [64, -384, -256],
        [64, 384, -256],
        [64, -384, -224],
        [64, 384, -224],
        [64, -384, -192],
        [64, 384, -192],
        [64, -384, -160],
        [64, 384, -160],
        [64, -384, -128],
        [64, 384, -128],
        [64, -384, -96],
        [64, 384, -96],
        [64, -384, -64],
        [64, 384, -64],
        [64, -384, -32],
        [64, 384, -32],
        [64, -384, 0],
        [64, 384, 0],
        [64, -384, 32],
        [64, 384, 32],
        [64, -384, 64],
        [64, 384, 64],
        [64, -384, 96],
        [64, 384, 96],
        [64, -384, 128],
        [64, 384, 128],
        [64, -384, 160],
        [64, 384, 160],
        [64, -384, 192],
        [64, 384, 192],
        [64, -384, 224],
        [64, 384, 224],
        [64, -384, 256],
        [64, 384, 256],
        [64, -384, 288],
        [64, 384, 288],
        [64, -384, 320],
        [64, 384, 320],
        [64, -384, 352],
        [64, 384, 352],
        [96, -384, -384],
        [96, -384, 384],
        [96, -352, -384],
        [96, -352, 384],
        [96, -320, -384],
        [96, -320, 384],
        [96, -288, -384],
        [96, -288, 384],
        [96, -256, -384],
        [96, -256, 384],
        [96, -224, -384],
        [96, -224, 384],
        [96, -192, -384],
        [96, -192, 384],
        [96, -160, -384],
        [96, -160, 384],
        [96, -128, -384],
        [96, -128, 384],
        [96, -96, -384],
        [96, -96, 384],
        [96, -64, -384],
        [96, -64, 384],
        [96, -32, -384],
        [96, -32, 384],
        [96, 0, -384],
        [96, 0, 384],
        [96, 32, -384],
        [96, 32, 384],
        [96, 64, -384],
        [96, 64, 384],
        [96, 96, -384],
        [96, 96, 384],
        [96, 128, -384],
        [96, 128, 384],
        [96, 160, -384],
        [96, 160, 384],
        [96, 192, -384],
        [96, 192, 384],
        [96, 224, -384],
        [96, 224, 384],
        [96, 256, -384],
        [96, 256, 384],
        [96, 288, -384],
        [96, 288, 384],
        [96, 320, -384],
        [96, 320, 384],
        [96, 352, -384],
        [96, 352, 384],
        [96, 384, -384],
        [96, 384, 384],
        [96, -384, -352],
        [96, 384, -352],
        [96, -384, -320],
        [96, 384, -320],
        [96, -384, -288],
        [96, 384, -288],
        [96, -384, -256],
        [96, 384, -256],
        [96, -384, -224],
        [96, 384, -224],
        [96, -384, -192],
        [96, 384, -192],
        [96, -384, -160],
        [96, 384, -160],
        [96, -384, -128],
        [96, 384, -128],
        [96, -384, -96],
        [96, 384, -96],
        [96, -384, -64],
        [96, 384, -64],
        [96, -384, -32],
        [96, 384, -32],
        [96, -384, 0],
        [96, 384, 0],
        [96, -384, 32],
        [96, 384, 32],
        [96, -384, 64],
        [96, 384, 64],
        [96, -384, 96],
        [96, 384, 96],
        [96, -384, 128],
        [96, 384, 128],
        [96, -384, 160],
        [96, 384, 160],
        [96, -384, 192],
        [96, 384, 192],
        [96, -384, 224],
        [96, 384, 224],
        [96, -384, 256],
        [96, 384, 256],
        [96, -384, 288],
        [96, 384, 288],
        [96, -384, 320],
        [96, 384, 320],
        [96, -384, 352],
        [96, 384, 352],
        [128, -384, -384],
        [128, -384, 384],
        [128, -352, -384],
        [128, -352, 384],
        [128, -320, -384],
        [128, -320, 384],
        [128, -288, -384],
        [128, -288, 384],
        [128, -256, -384],
        [128, -256, 384],
        [128, -224, -384],
        [128, -224, 384],
        [128, -192, -384],
        [128, -192, 384],
        [128, -160, -384],
        [128, -160, 384],
        [128, -128, -384],
        [128, -128, 384],
        [128, -96, -384],
        [128, -96, 384],
        [128, -64, -384],
        [128, -64, 384],
        [128, -32, -384],
        [128, -32, 384],
        [128, 0, -384],
        [128, 0, 384],
        [128, 32, -384],
        [128, 32, 384],
        [128, 64, -384],
        [128, 64, 384],
        [128, 96, -384],
        [128, 96, 384],
        [128, 128, -384],
        [128, 128, 384],
        [128, 160, -384],
        [128, 160, 384],
        [128, 192, -384],
        [128, 192, 384],
        [128, 224, -384],
        [128, 224, 384],
        [128, 256, -384],
        [128, 256, 384],
        [128, 288, -384],
        [128, 288, 384],
        [128, 320, -384],
        [128, 320, 384],
        [128, 352, -384],
        [128, 352, 384],
        [128, 384, -384],
        [128, 384, 384],
        [128, -384, -352],
        [128, 384, -352],
        [128, -384, -320],
        [128, 384, -320],
        [128, -384, -288],
        [128, 384, -288],
        [128, -384, -256],
        [128, 384, -256],
        [128, -384, -224],
        [128, 384, -224],
        [128, -384, -192],
        [128, 384, -192],
        [128, -384, -160],
        [128, 384, -160],
        [128, -384, -128],
        [128, 384, -128],
        [128, -384, -96],
        [128, 384, -96],
        [128, -384, -64],
        [128, 384, -64],
        [128, -384, -32],
        [128, 384, -32],
        [128, -384, 0],
        [128, 384, 0],
        [128, -384, 32],
        [128, 384, 32],
        [128, -384, 64],
        [128, 384, 64],
        [128, -384, 96],
        [128, 384, 96],
        [128, -384, 128],
        [128, 384, 128],
        [128, -384, 160],
        [128, 384, 160],
        [128, -384, 192],
        [128, 384, 192],
        [128, -384, 224],
        [128, 384, 224],
        [128, -384, 256],
        [128, 384, 256],
        [128, -384, 288],
        [128, 384, 288],
        [128, -384, 320],
        [128, 384, 320],
        [128, -384, 352],
        [128, 384, 352],
        [160, -384, -384],
        [160, -384, 384],
        [160, -352, -384],
        [160, -352, 384],
        [160, -320, -384],
        [160, -320, 384],
        [160, -288, -384],
        [160, -288, 384],
        [160, -256, -384],
        [160, -256, 384],
        [160, -224, -384],
        [160, -224, 384],
        [160, -192, -384],
        [160, -192, 384],
        [160, -160, -384],
        [160, -160, 384],
        [160, -128, -384],
        [160, -128, 384],
        [160, -96, -384],
        [160, -96, 384],
        [160, -64, -384],
        [160, -64, 384],
        [160, -32, -384],
        [160, -32, 384],
        [160, 0, -384],
        [160, 0, 384],
        [160, 32, -384],
        [160, 32, 384],
        [160, 64, -384],
        [160, 64, 384],
        [160, 96, -384],
        [160, 96, 384],
        [160, 128, -384],
        [160, 128, 384],
        [160, 160, -384],
        [160, 160, 384],
        [160, 192, -384],
        [160, 192, 384],
        [160, 224, -384],
        [160, 224, 384],
        [160, 256, -384],
        [160, 256, 384],
        [160, 288, -384],
        [160, 288, 384],
        [160, 320, -384],
        [160, 320, 384],
        [160, 352, -384],
        [160, 352, 384],
        [160, 384, -384],
        [160, 384, 384],
        [160, -384, -352],
        [160, 384, -352],
        [160, -384, -320],
        [160, 384, -320],
        [160, -384, -288],
        [160, 384, -288],
        [160, -384, -256],
        [160, 384, -256],
        [160, -384, -224],
        [160, 384, -224],
        [160, -384, -192],
        [160, 384, -192],
        [160, -384, -160],
        [160, 384, -160],
        [160, -384, -128],
        [160, 384, -128],
        [160, -384, -96],
        [160, 384, -96],
        [160, -384, -64],
        [160, 384, -64],
        [160, -384, -32],
        [160, 384, -32],
        [160, -384, 0],
        [160, 384, 0],
        [160, -384, 32],
        [160, 384, 32],
        [160, -384, 64],
        [160, 384, 64],
        [160, -384, 96],
        [160, 384, 96],
        [160, -384, 128],
        [160, 384, 128],
        [160, -384, 160],
        [160, 384, 160],
        [160, -384, 192],
        [160, 384, 192],
        [160, -384, 224],
        [160, 384, 224],
        [160, -384, 256],
        [160, 384, 256],
        [160, -384, 288],
        [160, 384, 288],
        [160, -384, 320],
        [160, 384, 320],
        [160, -384, 352],
        [160, 384, 352],
        [192, -384, -384],
        [192, -384, 384],
        [192, -352, -384],
        [192, -352, 384],
        [192, -320, -384],
        [192, -320, 384],
        [192, -288, -384],
        [192, -288, 384],
        [192, -256, -384],
        [192, -256, 384],
        [192, -224, -384],
        [192, -224, 384],
        [192, -192, -384],
        [192, -192, 384],
        [192, -160, -384],
        [192, -160, 384],
        [192, -128, -384],
        [192, -128, 384],
        [192, -96, -384],
        [192, -96, 384],
        [192, -64, -384],
        [192, -64, 384],
        [192, -32, -384],
        [192, -32, 384],
        [192, 0, -384],
        [192, 0, 384],
        [192, 32, -384],
        [192, 32, 384],
        [192, 64, -384],
        [192, 64, 384],
        [192, 96, -384],
        [192, 96, 384],
        [192, 128, -384],
        [192, 128, 384],
        [192, 160, -384],
        [192, 160, 384],
        [192, 192, -384],
        [192, 192, 384],
        [192, 224, -384],
        [192, 224, 384],
        [192, 256, -384],
        [192, 256, 384],
        [192, 288, -384],
        [192, 288, 384],
        [192, 320, -384],
        [192, 320, 384],
        [192, 352, -384],
        [192, 352, 384],
        [192, 384, -384],
        [192, 384, 384],
        [192, -384, -352],
        [192, 384, -352],
        [192, -384, -320],
        [192, 384, -320],
        [192, -384, -288],
        [192, 384, -288],
        [192, -384, -256],
        [192, 384, -256],
        [192, -384, -224],
        [192, 384, -224],
        [192, -384, -192],
        [192, 384, -192],
        [192, -384, -160],
        [192, 384, -160],
        [192, -384, -128],
        [192, 384, -128],
        [192, -384, -96],
        [192, 384, -96],
        [192, -384, -64],
        [192, 384, -64],
        [192, -384, -32],
        [192, 384, -32],
        [192, -384, 0],
        [192, 384, 0],
        [192, -384, 32],
        [192, 384, 32],
        [192, -384, 64],
        [192, 384, 64],
        [192, -384, 96],
        [192, 384, 96],
        [192, -384, 128],
        [192, 384, 128],
        [192, -384, 160],
        [192, 384, 160],
        [192, -384, 192],
        [192, 384, 192],
        [192, -384, 224],
        [192, 384, 224],
        [192, -384, 256],
        [192, 384, 256],
        [192, -384, 288],
        [192, 384, 288],
        [192, -384, 320],
        [192, 384, 320],
        [192, -384, 352],
        [192, 384, 352],
        [224, -384, -384],
        [224, -384, 384],
        [224, -352, -384],
        [224, -352, 384],
        [224, -320, -384],
        [224, -320, 384],
        [224, -288, -384],
        [224, -288, 384],
        [224, -256, -384],
        [224, -256, 384],
        [224, -224, -384],
        [224, -224, 384],
        [224, -192, -384],
        [224, -192, 384],
        [224, -160, -384],
        [224, -160, 384],
        [224, -128, -384],
        [224, -128, 384],
        [224, -96, -384],
        [224, -96, 384],
        [224, -64, -384],
        [224, -64, 384],
        [224, -32, -384],
        [224, -32, 384],
        [224, 0, -384],
        [224, 0, 384],
        [224, 32, -384],
        [224, 32, 384],
        [224, 64, -384],
        [224, 64, 384],
        [224, 96, -384],
        [224, 96, 384],
        [224, 128, -384],
        [224, 128, 384],
        [224, 160, -384],
        [224, 160, 384],
        [224, 192, -384],
        [224, 192, 384],
        [224, 224, -384],
        [224, 224, 384],
        [224, 256, -384],
        [224, 256, 384],
        [224, 288, -384],
        [224, 288, 384],
        [224, 320, -384],
        [224, 320, 384],
        [224, 352, -384],
        [224, 352, 384],
        [224, 384, -384],
        [224, 384, 384],
        [224, -384, -352],
        [224, 384, -352],
        [224, -384, -320],
        [224, 384, -320],
        [224, -384, -288],
        [224, 384, -288],
        [224, -384, -256],
        [224, 384, -256],
        [224, -384, -224],
        [224, 384, -224],
        [224, -384, -192],
        [224, 384, -192],
        [224, -384, -160],
        [224, 384, -160],
        [224, -384, -128],
        [224, 384, -128],
        [224, -384, -96],
        [224, 384, -96],
        [224, -384, -64],
        [224, 384, -64],
        [224, -384, -32],
        [224, 384, -32],
        [224, -384, 0],
        [224, 384, 0],
        [224, -384, 32],
        [224, 384, 32],
        [224, -384, 64],
        [224, 384, 64],
        [224, -384, 96],
        [224, 384, 96],
        [224, -384, 128],
        [224, 384, 128],
        [224, -384, 160],
        [224, 384, 160],
        [224, -384, 192],
        [224, 384, 192],
        [224, -384, 224],
        [224, 384, 224],
        [224, -384, 256],
        [224, 384, 256],
        [224, -384, 288],
        [224, 384, 288],
        [224, -384, 320],
        [224, 384, 320],
        [224, -384, 352],
        [224, 384, 352],
        [256, -384, -384],
        [256, -384, 384],
        [256, -352, -384],
        [256, -352, 384],
        [256, -320, -384],
        [256, -320, 384],
        [256, -288, -384],
        [256, -288, 384],
        [256, -256, -384],
        [256, -256, 384],
        [256, -224, -384],
        [256, -224, 384],
        [256, -192, -384],
        [256, -192, 384],
        [256, -160, -384],
        [256, -160, 384],
        [256, -128, -384],
        [256, -128, 384],
        [256, -96, -384],
        [256, -96, 384],
        [256, -64, -384],
        [256, -64, 384],
        [256, -32, -384],
        [256, -32, 384],
        [256, 0, -384],
        [256, 0, 384],
        [256, 32, -384],
        [256, 32, 384],
        [256, 64, -384],
        [256, 64, 384],
        [256, 96, -384],
        [256, 96, 384],
        [256, 128, -384],
        [256, 128, 384],
        [256, 160, -384],
        [256, 160, 384],
        [256, 192, -384],
        [256, 192, 384],
        [256, 224, -384],
        [256, 224, 384],
        [256, 256, -384],
        [256, 256, 384],
        [256, 288, -384],
        [256, 288, 384],
        [256, 320, -384],
        [256, 320, 384],
        [256, 352, -384],
        [256, 352, 384],
        [256, 384, -384],
        [256, 384, 384],
        [256, -384, -352],
        [256, 384, -352],
        [256, -384, -320],
        [256, 384, -320],
        [256, -384, -288],
        [256, 384, -288],
        [256, -384, -256],
        [256, 384, -256],
        [256, -384, -224],
        [256, 384, -224],
        [256, -384, -192],
        [256, 384, -192],
        [256, -384, -160],
        [256, 384, -160],
        [256, -384, -128],
        [256, 384, -128],
        [256, -384, -96],
        [256, 384, -96],
        [256, -384, -64],
        [256, 384, -64],
        [256, -384, -32],
        [256, 384, -32],
        [256, -384, 0],
        [256, 384, 0],
        [256, -384, 32],
        [256, 384, 32],
        [256, -384, 64],
        [256, 384, 64],
        [256, -384, 96],
        [256, 384, 96],
        [256, -384, 128],
        [256, 384, 128],
        [256, -384, 160],
        [256, 384, 160],
        [256, -384, 192],
        [256, 384, 192],
        [256, -384, 224],
        [256, 384, 224],
        [256, -384, 256],
        [256, 384, 256],
        [256, -384, 288],
        [256, 384, 288],
        [256, -384, 320],
        [256, 384, 320],
        [256, -384, 352],
        [256, 384, 352],
        [288, -384, -384],
        [288, -384, 384],
        [288, -352, -384],
        [288, -352, 384],
        [288, -320, -384],
        [288, -320, 384],
        [288, -288, -384],
        [288, -288, 384],
        [288, -256, -384],
        [288, -256, 384],
        [288, -224, -384],
        [288, -224, 384],
        [288, -192, -384],
        [288, -192, 384],
        [288, -160, -384],
        [288, -160, 384],
        [288, -128, -384],
        [288, -128, 384],
        [288, -96, -384],
        [288, -96, 384],
        [288, -64, -384],
        [288, -64, 384],
        [288, -32, -384],
        [288, -32, 384],
        [288, 0, -384],
        [288, 0, 384],
        [288, 32, -384],
        [288, 32, 384],
        [288, 64, -384],
        [288, 64, 384],
        [288, 96, -384],
        [288, 96, 384],
        [288, 128, -384],
        [288, 128, 384],
        [288, 160, -384],
        [288, 160, 384],
        [288, 192, -384],
        [288, 192, 384],
        [288, 224, -384],
        [288, 224, 384],
        [288, 256, -384],
        [288, 256, 384],
        [288, 288, -384],
        [288, 288, 384],
        [288, 320, -384],
        [288, 320, 384],
        [288, 352, -384],
        [288, 352, 384],
        [288, 384, -384],
        [288, 384, 384],
        [288, -384, -352],
        [288, 384, -352],
        [288, -384, -320],
        [288, 384, -320],
        [288, -384, -288],
        [288, 384, -288],
        [288, -384, -256],
        [288, 384, -256],
        [288, -384, -224],
        [288, 384, -224],
        [288, -384, -192],
        [288, 384, -192],
        [288, -384, -160],
        [288, 384, -160],
        [288, -384, -128],
        [288, 384, -128],
        [288, -384, -96],
        [288, 384, -96],
        [288, -384, -64],
        [288, 384, -64],
        [288, -384, -32],
        [288, 384, -32],
        [288, -384, 0],
        [288, 384, 0],
        [288, -384, 32],
        [288, 384, 32],
        [288, -384, 64],
        [288, 384, 64],
        [288, -384, 96],
        [288, 384, 96],
        [288, -384, 128],
        [288, 384, 128],
        [288, -384, 160],
        [288, 384, 160],
        [288, -384, 192],
        [288, 384, 192],
        [288, -384, 224],
        [288, 384, 224],
        [288, -384, 256],
        [288, 384, 256],
        [288, -384, 288],
        [288, 384, 288],
        [288, -384, 320],
        [288, 384, 320],
        [288, -384, 352],
        [288, 384, 352],
        [320, -384, -384],
        [320, -384, 384],
        [320, -352, -384],
        [320, -352, 384],
        [320, -320, -384],
        [320, -320, 384],
        [320, -288, -384],
        [320, -288, 384],
        [320, -256, -384],
        [320, -256, 384],
        [320, -224, -384],
        [320, -224, 384],
        [320, -192, -384],
        [320, -192, 384],
        [320, -160, -384],
        [320, -160, 384],
        [320, -128, -384],
        [320, -128, 384],
        [320, -96, -384],
        [320, -96, 384],
        [320, -64, -384],
        [320, -64, 384],
        [320, -32, -384],
        [320, -32, 384],
        [320, 0, -384],
        [320, 0, 384],
        [320, 32, -384],
        [320, 32, 384],
        [320, 64, -384],
        [320, 64, 384],
        [320, 96, -384],
        [320, 96, 384],
        [320, 128, -384],
        [320, 128, 384],
        [320, 160, -384],
        [320, 160, 384],
        [320, 192, -384],
        [320, 192, 384],
        [320, 224, -384],
        [320, 224, 384],
        [320, 256, -384],
        [320, 256, 384],
        [320, 288, -384],
        [320, 288, 384],
        [320, 320, -384],
        [320, 320, 384],
        [320, 352, -384],
        [320, 352, 384],
        [320, 384, -384],
        [320, 384, 384],
        [320, -384, -352],
        [320, 384, -352],
        [320, -384, -320],
        [320, 384, -320],
        [320, -384, -288],
        [320, 384, -288],
        [320, -384, -256],
        [320, 384, -256],
        [320, -384, -224],
        [320, 384, -224],
        [320, -384, -192],
        [320, 384, -192],
        [320, -384, -160],
        [320, 384, -160],
        [320, -384, -128],
        [320, 384, -128],
        [320, -384, -96],
        [320, 384, -96],
        [320, -384, -64],
        [320, 384, -64],
        [320, -384, -32],
        [320, 384, -32],
        [320, -384, 0],
        [320, 384, 0],
        [320, -384, 32],
        [320, 384, 32],
        [320, -384, 64],
        [320, 384, 64],
        [320, -384, 96],
        [320, 384, 96],
        [320, -384, 128],
        [320, 384, 128],
        [320, -384, 160],
        [320, 384, 160],
        [320, -384, 192],
        [320, 384, 192],
        [320, -384, 224],
        [320, 384, 224],
        [320, -384, 256],
        [320, 384, 256],
        [320, -384, 288],
        [320, 384, 288],
        [320, -384, 320],
        [320, 384, 320],
        [320, -384, 352],
        [320, 384, 352],
        [352, -384, -384],
        [352, -384, 384],
        [352, -352, -384],
        [352, -352, 384],
        [352, -320, -384],
        [352, -320, 384],
        [352, -288, -384],
        [352, -288, 384],
        [352, -256, -384],
        [352, -256, 384],
        [352, -224, -384],
        [352, -224, 384],
        [352, -192, -384],
        [352, -192, 384],
        [352, -160, -384],
        [352, -160, 384],
        [352, -128, -384],
        [352, -128, 384],
        [352, -96, -384],
        [352, -96, 384],
        [352, -64, -384],
        [352, -64, 384],
        [352, -32, -384],
        [352, -32, 384],
        [352, 0, -384],
        [352, 0, 384],
        [352, 32, -384],
        [352, 32, 384],
        [352, 64, -384],
        [352, 64, 384],
        [352, 96, -384],
        [352, 96, 384],
        [352, 128, -384],
        [352, 128, 384],
        [352, 160, -384],
        [352, 160, 384],
        [352, 192, -384],
        [352, 192, 384],
        [352, 224, -384],
        [352, 224, 384],
        [352, 256, -384],
        [352, 256, 384],
        [352, 288, -384],
        [352, 288, 384],
        [352, 320, -384],
        [352, 320, 384],
        [352, 352, -384],
        [352, 352, 384],
        [352, 384, -384],
        [352, 384, 384],
        [352, -384, -352],
        [352, 384, -352],
        [352, -384, -320],
        [352, 384, -320],
        [352, -384, -288],
        [352, 384, -288],
        [352, -384, -256],
        [352, 384, -256],
        [352, -384, -224],
        [352, 384, -224],
        [352, -384, -192],
        [352, 384, -192],
        [352, -384, -160],
        [352, 384, -160],
        [352, -384, -128],
        [352, 384, -128],
        [352, -384, -96],
        [352, 384, -96],
        [352, -384, -64],
        [352, 384, -64],
        [352, -384, -32],
        [352, 384, -32],
        [352, -384, 0],
        [352, 384, 0],
        [352, -384, 32],
        [352, 384, 32],
        [352, -384, 64],
        [352, 384, 64],
        [352, -384, 96],
        [352, 384, 96],
        [352, -384, 128],
        [352, 384, 128],
        [352, -384, 160],
        [352, 384, 160],
        [352, -384, 192],
        [352, 384, 192],
        [352, -384, 224],
        [352, 384, 224],
        [352, -384, 256],
        [352, 384, 256],
        [352, -384, 288],
        [352, 384, 288],
        [352, -384, 320],
        [352, 384, 320],
        [352, -384, 352],
        [352, 384, 352],
        [384, -384, -384],
        [384, -384, 384],
        [384, -352, -384],
        [384, -352, 384],
        [384, -320, -384],
        [384, -320, 384],
        [384, -288, -384],
        [384, -288, 384],
        [384, -256, -384],
        [384, -256, 384],
        [384, -224, -384],
        [384, -224, 384],
        [384, -192, -384],
        [384, -192, 384],
        [384, -160, -384],
        [384, -160, 384],
        [384, -128, -384],
        [384, -128, 384],
        [384, -96, -384],
        [384, -96, 384],
        [384, -64, -384],
        [384, -64, 384],
        [384, -32, -384],
        [384, -32, 384],
        [384, 0, -384],
        [384, 0, 384],
        [384, 32, -384],
        [384, 32, 384],
        [384, 64, -384],
        [384, 64, 384],
        [384, 96, -384],
        [384, 96, 384],
        [384, 128, -384],
        [384, 128, 384],
        [384, 160, -384],
        [384, 160, 384],
        [384, 192, -384],
        [384, 192, 384],
        [384, 224, -384],
        [384, 224, 384],
        [384, 256, -384],
        [384, 256, 384],
        [384, 288, -384],
        [384, 288, 384],
        [384, 320, -384],
        [384, 320, 384],
        [384, 352, -384],
        [384, 352, 384],
        [384, 384, -384],
        [384, 384, 384],
        [384, -384, -352],
        [384, 384, -352],
        [384, -384, -320],
        [384, 384, -320],
        [384, -384, -288],
        [384, 384, -288],
        [384, -384, -256],
        [384, 384, -256],
        [384, -384, -224],
        [384, 384, -224],
        [384, -384, -192],
        [384, 384, -192],
        [384, -384, -160],
        [384, 384, -160],
        [384, -384, -128],
        [384, 384, -128],
        [384, -384, -96],
        [384, 384, -96],
        [384, -384, -64],
        [384, 384, -64],
        [384, -384, -32],
        [384, 384, -32],
        [384, -384, 0],
        [384, 384, 0],
        [384, -384, 32],
        [384, 384, 32],
        [384, -384, 64],
        [384, 384, 64],
        [384, -384, 96],
        [384, 384, 96],
        [384, -384, 128],
        [384, 384, 128],
        [384, -384, 160],
        [384, 384, 160],
        [384, -384, 192],
        [384, 384, 192],
        [384, -384, 224],
        [384, 384, 224],
        [384, -384, 256],
        [384, 384, 256],
        [384, -384, 288],
        [384, 384, 288],
        [384, -384, 320],
        [384, 384, 320],
        [384, -384, 352],
        [384, 384, 352],
        [-384, -352, -352],
        [384, -352, -352],
        [-384, -320, -352],
        [384, -320, -352],
        [-384, -288, -352],
        [384, -288, -352],
        [-384, -256, -352],
        [384, -256, -352],
        [-384, -224, -352],
        [384, -224, -352],
        [-384, -192, -352],
        [384, -192, -352],
        [-384, -160, -352],
        [384, -160, -352],
        [-384, -128, -352],
        [384, -128, -352],
        [-384, -96, -352],
        [384, -96, -352],
        [-384, -64, -352],
        [384, -64, -352],
        [-384, -32, -352],
        [384, -32, -352],
        [-384, 0, -352],
        [384, 0, -352],
        [-384, 32, -352],
        [384, 32, -352],
        [-384, 64, -352],
        [384, 64, -352],
        [-384, 96, -352],
        [384, 96, -352],
        [-384, 128, -352],
        [384, 128, -352],
        [-384, 160, -352],
        [384, 160, -352],
        [-384, 192, -352],
        [384, 192, -352],
        [-384, 224, -352],
        [384, 224, -352],
        [-384, 256, -352],
        [384, 256, -352],
        [-384, 288, -352],
        [384, 288, -352],
        [-384, 320, -352],
        [384, 320, -352],
        [-384, 352, -352],
        [384, 352, -352],
        [-384, -352, -320],
        [384, -352, -320],
        [-384, -320, -320],
        [384, -320, -320],
        [-384, -288, -320],
        [384, -288, -320],
        [-384, -256, -320],
        [384, -256, -320],
        [-384, -224, -320],
        [384, -224, -320],
        [-384, -192, -320],
        [384, -192, -320],
        [-384, -160, -320],
        [384, -160, -320],
        [-384, -128, -320],
        [384, -128, -320],
        [-384, -96, -320],
        [384, -96, -320],
        [-384, -64, -320],
        [384, -64, -320],
        [-384, -32, -320],
        [384, -32, -320],
        [-384, 0, -320],
        [384, 0, -320],
        [-384, 32, -320],
        [384, 32, -320],
        [-384, 64, -320],
        [384, 64, -320],
        [-384, 96, -320],
        [384, 96, -320],
        [-384, 128, -320],
        [384, 128, -320],
        [-384, 160, -320],
        [384, 160, -320],
        [-384, 192, -320],
        [384, 192, -320],
        [-384, 224, -320],
        [384, 224, -320],
        [-384, 256, -320],
        [384, 256, -320],
        [-384, 288, -320],
        [384, 288, -320],
        [-384, 320, -320],
        [384, 320, -320],
        [-384, 352, -320],
        [384, 352, -320],
        [-384, -352, -288],
        [384, -352, -288],
        [-384, -320, -288],
        [384, -320, -288],
        [-384, -288, -288],
        [384, -288, -288],
        [-384, -256, -288],
        [384, -256, -288],
        [-384, -224, -288],
        [384, -224, -288],
        [-384, -192, -288],
        [384, -192, -288],
        [-384, -160, -288],
        [384, -160, -288],
        [-384, -128, -288],
        [384, -128, -288],
        [-384, -96, -288],
        [384, -96, -288],
        [-384, -64, -288],
        [384, -64, -288],
        [-384, -32, -288],
        [384, -32, -288],
        [-384, 0, -288],
        [384, 0, -288],
        [-384, 32, -288],
        [384, 32, -288],
        [-384, 64, -288],
        [384, 64, -288],
        [-384, 96, -288],
        [384, 96, -288],
        [-384, 128, -288],
        [384, 128, -288],
        [-384, 160, -288],
        [384, 160, -288],
        [-384, 192, -288],
        [384, 192, -288],
        [-384, 224, -288],
        [384, 224, -288],
        [-384, 256, -288],
        [384, 256, -288],
        [-384, 288, -288],
        [384, 288, -288],
        [-384, 320, -288],
        [384, 320, -288],
        [-384, 352, -288],
        [384, 352, -288],
        [-384, -352, -256],
        [384, -352, -256],
        [-384, -320, -256],
        [384, -320, -256],
        [-384, -288, -256],
        [384, -288, -256],
        [-384, -256, -256],
        [384, -256, -256],
        [-384, -224, -256],
        [384, -224, -256],
        [-384, -192, -256],
        [384, -192, -256],
        [-384, -160, -256],
        [384, -160, -256],
        [-384, -128, -256],
        [384, -128, -256],
        [-384, -96, -256],
        [384, -96, -256],
        [-384, -64, -256],
        [384, -64, -256],
        [-384, -32, -256],
        [384, -32, -256],
        [-384, 0, -256],
        [384, 0, -256],
        [-384, 32, -256],
        [384, 32, -256],
        [-384, 64, -256],
        [384, 64, -256],
        [-384, 96, -256],
        [384, 96, -256],
        [-384, 128, -256],
        [384, 128, -256],
        [-384, 160, -256],
        [384, 160, -256],
        [-384, 192, -256],
        [384, 192, -256],
        [-384, 224, -256],
        [384, 224, -256],
        [-384, 256, -256],
        [384, 256, -256],
        [-384, 288, -256],
        [384, 288, -256],
        [-384, 320, -256],
        [384, 320, -256],
        [-384, 352, -256],
        [384, 352, -256],
        [-384, -352, -224],
        [384, -352, -224],
        [-384, -320, -224],
        [384, -320, -224],
        [-384, -288, -224],
        [384, -288, -224],
        [-384, -256, -224],
        [384, -256, -224],
        [-384, -224, -224],
        [384, -224, -224],
        [-384, -192, -224],
        [384, -192, -224],
        [-384, -160, -224],
        [384, -160, -224],
        [-384, -128, -224],
        [384, -128, -224],
        [-384, -96, -224],
        [384, -96, -224],
        [-384, -64, -224],
        [384, -64, -224],
        [-384, -32, -224],
        [384, -32, -224],
        [-384, 0, -224],
        [384, 0, -224],
        [-384, 32, -224],
        [384, 32, -224],
        [-384, 64, -224],
        [384, 64, -224],
        [-384, 96, -224],
        [384, 96, -224],
        [-384, 128, -224],
        [384, 128, -224],
        [-384, 160, -224],
        [384, 160, -224],
        [-384, 192, -224],
        [384, 192, -224],
        [-384, 224, -224],
        [384, 224, -224],
        [-384, 256, -224],
        [384, 256, -224],
        [-384, 288, -224],
        [384, 288, -224],
        [-384, 320, -224],
        [384, 320, -224],
        [-384, 352, -224],
        [384, 352, -224],
        [-384, -352, -192],
        [384, -352, -192],
        [-384, -320, -192],
        [384, -320, -192],
        [-384, -288, -192],
        [384, -288, -192],
        [-384, -256, -192],
        [384, -256, -192],
        [-384, -224, -192],
        [384, -224, -192],
        [-384, -192, -192],
        [384, -192, -192],
        [-384, -160, -192],
        [384, -160, -192],
        [-384, -128, -192],
        [384, -128, -192],
        [-384, -96, -192],
        [384, -96, -192],
        [-384, -64, -192],
        [384, -64, -192],
        [-384, -32, -192],
        [384, -32, -192],
        [-384, 0, -192],
        [384, 0, -192],
        [-384, 32, -192],
        [384, 32, -192],
        [-384, 64, -192],
        [384, 64, -192],
        [-384, 96, -192],
        [384, 96, -192],
        [-384, 128, -192],
        [384, 128, -192],
        [-384, 160, -192],
        [384, 160, -192],
        [-384, 192, -192],
        [384, 192, -192],
        [-384, 224, -192],
        [384, 224, -192],
        [-384, 256, -192],
        [384, 256, -192],
        [-384, 288, -192],
        [384, 288, -192],
        [-384, 320, -192],
        [384, 320, -192],
        [-384, 352, -192],
        [384, 352, -192],
        [-384, -352, -160],
        [384, -352, -160],
        [-384, -320, -160],
        [384, -320, -160],
        [-384, -288, -160],
        [384, -288, -160],
        [-384, -256, -160],
        [384, -256, -160],
        [-384, -224, -160],
        [384, -224, -160],
        [-384, -192, -160],
        [384, -192, -160],
        [-384, -160, -160],
        [384, -160, -160],
        [-384, -128, -160],
        [384, -128, -160],
        [-384, -96, -160],
        [384, -96, -160],
        [-384, -64, -160],
        [384, -64, -160],
        [-384, -32, -160],
        [384, -32, -160],
        [-384, 0, -160],
        [384, 0, -160],
        [-384, 32, -160],
        [384, 32, -160],
        [-384, 64, -160],
        [384, 64, -160],
        [-384, 96, -160],
        [384, 96, -160],
        [-384, 128, -160],
        [384, 128, -160],
        [-384, 160, -160],
        [384, 160, -160],
        [-384, 192, -160],
        [384, 192, -160],
        [-384, 224, -160],
        [384, 224, -160],
        [-384, 256, -160],
        [384, 256, -160],
        [-384, 288, -160],
        [384, 288, -160],
        [-384, 320, -160],
        [384, 320, -160],
        [-384, 352, -160],
        [384, 352, -160],
        [-384, -352, -128],
        [384, -352, -128],
        [-384, -320, -128],
        [384, -320, -128],
        [-384, -288, -128],
        [384, -288, -128],
        [-384, -256, -128],
        [384, -256, -128],
        [-384, -224, -128],
        [384, -224, -128],
        [-384, -192, -128],
        [384, -192, -128],
        [-384, -160, -128],
        [384, -160, -128],
        [-384, -128, -128],
        [384, -128, -128],
        [-384, -96, -128],
        [384, -96, -128],
        [-384, -64, -128],
        [384, -64, -128],
        [-384, -32, -128],
        [384, -32, -128],
        [-384, 0, -128],
        [384, 0, -128],
        [-384, 32, -128],
        [384, 32, -128],
        [-384, 64, -128],
        [384, 64, -128],
        [-384, 96, -128],
        [384, 96, -128],
        [-384, 128, -128],
        [384, 128, -128],
        [-384, 160, -128],
        [384, 160, -128],
        [-384, 192, -128],
        [384, 192, -128],
        [-384, 224, -128],
        [384, 224, -128],
        [-384, 256, -128],
        [384, 256, -128],
        [-384, 288, -128],
        [384, 288, -128],
        [-384, 320, -128],
        [384, 320, -128],
        [-384, 352, -128],
        [384, 352, -128],
        [-384, -352, -96],
        [384, -352, -96],
        [-384, -320, -96],
        [384, -320, -96],
        [-384, -288, -96],
        [384, -288, -96],
        [-384, -256, -96],
        [384, -256, -96],
        [-384, -224, -96],
        [384, -224, -96],
        [-384, -192, -96],
        [384, -192, -96],
        [-384, -160, -96],
        [384, -160, -96],
        [-384, -128, -96],
        [384, -128, -96],
        [-384, -96, -96],
        [384, -96, -96],
        [-384, -64, -96],
        [384, -64, -96],
        [-384, -32, -96],
        [384, -32, -96],
        [-384, 0, -96],
        [384, 0, -96],
        [-384, 32, -96],
        [384, 32, -96],
        [-384, 64, -96],
        [384, 64, -96],
        [-384, 96, -96],
        [384, 96, -96],
        [-384, 128, -96],
        [384, 128, -96],
        [-384, 160, -96],
        [384, 160, -96],
        [-384, 192, -96],
        [384, 192, -96],
        [-384, 224, -96],
        [384, 224, -96],
        [-384, 256, -96],
        [384, 256, -96],
        [-384, 288, -96],
        [384, 288, -96],
        [-384, 320, -96],
        [384, 320, -96],
        [-384, 352, -96],
        [384, 352, -96],
        [-384, -352, -64],
        [384, -352, -64],
        [-384, -320, -64],
        [384, -320, -64],
        [-384, -288, -64],
        [384, -288, -64],
        [-384, -256, -64],
        [384, -256, -64],
        [-384, -224, -64],
        [384, -224, -64],
        [-384, -192, -64],
        [384, -192, -64],
        [-384, -160, -64],
        [384, -160, -64],
        [-384, -128, -64],
        [384, -128, -64],
        [-384, -96, -64],
        [384, -96, -64],
        [-384, -64, -64],
        [384, -64, -64],
        [-384, -32, -64],
        [384, -32, -64],
        [-384, 0, -64],
        [384, 0, -64],
        [-384, 32, -64],
        [384, 32, -64],
        [-384, 64, -64],
        [384, 64, -64],
        [-384, 96, -64],
        [384, 96, -64],
        [-384, 128, -64],
        [384, 128, -64],
        [-384, 160, -64],
        [384, 160, -64],
        [-384, 192, -64],
        [384, 192, -64],
        [-384, 224, -64],
        [384, 224, -64],
        [-384, 256, -64],
        [384, 256, -64],
        [-384, 288, -64],
        [384, 288, -64],
        [-384, 320, -64],
        [384, 320, -64],
        [-384, 352, -64],
        [384, 352, -64],
        [-384, -352, -32],
        [384, -352, -32],
        [-384, -320, -32],
        [384, -320, -32],
        [-384, -288, -32],
        [384, -288, -32],
        [-384, -256, -32],
        [384, -256, -32],
        [-384, -224, -32],
        [384, -224, -32],
        [-384, -192, -32],
        [384, -192, -32],
        [-384, -160, -32],
        [384, -160, -32],
        [-384, -128, -32],
        [384, -128, -32],
        [-384, -96, -32],
        [384, -96, -32],
        [-384, -64, -32],
        [384, -64, -32],
        [-384, -32, -32],
        [384, -32, -32],
        [-384, 0, -32],
        [384, 0, -32],
        [-384, 32, -32],
        [384, 32, -32],
        [-384, 64, -32],
        [384, 64, -32],
        [-384, 96, -32],
        [384, 96, -32],
        [-384, 128, -32],
        [384, 128, -32],
        [-384, 160, -32],
        [384, 160, -32],
        [-384, 192, -32],
        [384, 192, -32],
        [-384, 224, -32],
        [384, 224, -32],
        [-384, 256, -32],
        [384, 256, -32],
        [-384, 288, -32],
        [384, 288, -32],
        [-384, 320, -32],
        [384, 320, -32],
        [-384, 352, -32],
        [384, 352, -32],
        [-384, -352, 0],
        [384, -352, 0],
        [-384, -320, 0],
        [384, -320, 0],
        [-384, -288, 0],
        [384, -288, 0],
        [-384, -256, 0],
        [384, -256, 0],
        [-384, -224, 0],
        [384, -224, 0],
        [-384, -192, 0],
        [384, -192, 0],
        [-384, -160, 0],
        [384, -160, 0],
        [-384, -128, 0],
        [384, -128, 0],
        [-384, -96, 0],
        [384, -96, 0],
        [-384, -64, 0],
        [384, -64, 0],
        [-384, -32, 0],
        [384, -32, 0],
        [-384, 0, 0],
        [384, 0, 0],
        [-384, 32, 0],
        [384, 32, 0],
        [-384, 64, 0],
        [384, 64, 0],
        [-384, 96, 0],
        [384, 96, 0],
        [-384, 128, 0],
        [384, 128, 0],
        [-384, 160, 0],
        [384, 160, 0],
        [-384, 192, 0],
        [384, 192, 0],
        [-384, 224, 0],
        [384, 224, 0],
        [-384, 256, 0],
        [384, 256, 0],
        [-384, 288, 0],
        [384, 288, 0],
        [-384, 320, 0],
        [384, 320, 0],
        [-384, 352, 0],
        [384, 352, 0],
        [-384, -352, 32],
        [384, -352, 32],
        [-384, -320, 32],
        [384, -320, 32],
        [-384, -288, 32],
        [384, -288, 32],
        [-384, -256, 32],
        [384, -256, 32],
        [-384, -224, 32],
        [384, -224, 32],
        [-384, -192, 32],
        [384, -192, 32],
        [-384, -160, 32],
        [384, -160, 32],
        [-384, -128, 32],
        [384, -128, 32],
        [-384, -96, 32],
        [384, -96, 32],
        [-384, -64, 32],
        [384, -64, 32],
        [-384, -32, 32],
        [384, -32, 32],
        [-384, 0, 32],
        [384, 0, 32],
        [-384, 32, 32],
        [384, 32, 32],
        [-384, 64, 32],
        [384, 64, 32],
        [-384, 96, 32],
        [384, 96, 32],
        [-384, 128, 32],
        [384, 128, 32],
        [-384, 160, 32],
        [384, 160, 32],
        [-384, 192, 32],
        [384, 192, 32],
        [-384, 224, 32],
        [384, 224, 32],
        [-384, 256, 32],
        [384, 256, 32],
        [-384, 288, 32],
        [384, 288, 32],
        [-384, 320, 32],
        [384, 320, 32],
        [-384, 352, 32],
        [384, 352, 32],
        [-384, -352, 64],
        [384, -352, 64],
        [-384, -320, 64],
        [384, -320, 64],
        [-384, -288, 64],
        [384, -288, 64],
        [-384, -256, 64],
        [384, -256, 64],
        [-384, -224, 64],
        [384, -224, 64],
        [-384, -192, 64],
        [384, -192, 64],
        [-384, -160, 64],
        [384, -160, 64],
        [-384, -128, 64],
        [384, -128, 64],
        [-384, -96, 64],
        [384, -96, 64],
        [-384, -64, 64],
        [384, -64, 64],
        [-384, -32, 64],
        [384, -32, 64],
        [-384, 0, 64],
        [384, 0, 64],
        [-384, 32, 64],
        [384, 32, 64],
        [-384, 64, 64],
        [384, 64, 64],
        [-384, 96, 64],
        [384, 96, 64],
        [-384, 128, 64],
        [384, 128, 64],
        [-384, 160, 64],
        [384, 160, 64],
        [-384, 192, 64],
        [384, 192, 64],
        [-384, 224, 64],
        [384, 224, 64],
        [-384, 256, 64],
        [384, 256, 64],
        [-384, 288, 64],
        [384, 288, 64],
        [-384, 320, 64],
        [384, 320, 64],
        [-384, 352, 64],
        [384, 352, 64],
        [-384, -352, 96],
        [384, -352, 96],
        [-384, -320, 96],
        [384, -320, 96],
        [-384, -288, 96],
        [384, -288, 96],
        [-384, -256, 96],
        [384, -256, 96],
        [-384, -224, 96],
        [384, -224, 96],
        [-384, -192, 96],
        [384, -192, 96],
        [-384, -160, 96],
        [384, -160, 96],
        [-384, -128, 96],
        [384, -128, 96],
        [-384, -96, 96],
        [384, -96, 96],
        [-384, -64, 96],
        [384, -64, 96],
        [-384, -32, 96],
        [384, -32, 96],
        [-384, 0, 96],
        [384, 0, 96],
        [-384, 32, 96],
        [384, 32, 96],
        [-384, 64, 96],
        [384, 64, 96],
        [-384, 96, 96],
        [384, 96, 96],
        [-384, 128, 96],
        [384, 128, 96],
        [-384, 160, 96],
        [384, 160, 96],
        [-384, 192, 96],
        [384, 192, 96],
        [-384, 224, 96],
        [384, 224, 96],
        [-384, 256, 96],
        [384, 256, 96],
        [-384, 288, 96],
        [384, 288, 96],
        [-384, 320, 96],
        [384, 320, 96],
        [-384, 352, 96],
        [384, 352, 96],
        [-384, -352, 128],
        [384, -352, 128],
        [-384, -320, 128],
        [384, -320, 128],
        [-384, -288, 128],
        [384, -288, 128],
        [-384, -256, 128],
        [384, -256, 128],
        [-384, -224, 128],
        [384, -224, 128],
        [-384, -192, 128],
        [384, -192, 128],
        [-384, -160, 128],
        [384, -160, 128],
        [-384, -128, 128],
        [384, -128, 128],
        [-384, -96, 128],
        [384, -96, 128],
        [-384, -64, 128],
        [384, -64, 128],
        [-384, -32, 128],
        [384, -32, 128],
        [-384, 0, 128],
        [384, 0, 128],
        [-384, 32, 128],
        [384, 32, 128],
        [-384, 64, 128],
        [384, 64, 128],
        [-384, 96, 128],
        [384, 96, 128],
        [-384, 128, 128],
        [384, 128, 128],
        [-384, 160, 128],
        [384, 160, 128],
        [-384, 192, 128],
        [384, 192, 128],
        [-384, 224, 128],
        [384, 224, 128],
        [-384, 256, 128],
        [384, 256, 128],
        [-384, 288, 128],
        [384, 288, 128],
        [-384, 320, 128],
        [384, 320, 128],
        [-384, 352, 128],
        [384, 352, 128],
        [-384, -352, 160],
        [384, -352, 160],
        [-384, -320, 160],
        [384, -320, 160],
        [-384, -288, 160],
        [384, -288, 160],
        [-384, -256, 160],
        [384, -256, 160],
        [-384, -224, 160],
        [384, -224, 160],
        [-384, -192, 160],
        [384, -192, 160],
        [-384, -160, 160],
        [384, -160, 160],
        [-384, -128, 160],
        [384, -128, 160],
        [-384, -96, 160],
        [384, -96, 160],
        [-384, -64, 160],
        [384, -64, 160],
        [-384, -32, 160],
        [384, -32, 160],
        [-384, 0, 160],
        [384, 0, 160],
        [-384, 32, 160],
        [384, 32, 160],
        [-384, 64, 160],
        [384, 64, 160],
        [-384, 96, 160],
        [384, 96, 160],
        [-384, 128, 160],
        [384, 128, 160],
        [-384, 160, 160],
        [384, 160, 160],
        [-384, 192, 160],
        [384, 192, 160],
        [-384, 224, 160],
        [384, 224, 160],
        [-384, 256, 160],
        [384, 256, 160],
        [-384, 288, 160],
        [384, 288, 160],
        [-384, 320, 160],
        [384, 320, 160],
        [-384, 352, 160],
        [384, 352, 160],
        [-384, -352, 192],
        [384, -352, 192],
        [-384, -320, 192],
        [384, -320, 192],
        [-384, -288, 192],
        [384, -288, 192],
        [-384, -256, 192],
        [384, -256, 192],
        [-384, -224, 192],
        [384, -224, 192],
        [-384, -192, 192],
        [384, -192, 192],
        [-384, -160, 192],
        [384, -160, 192],
        [-384, -128, 192],
        [384, -128, 192],
        [-384, -96, 192],
        [384, -96, 192],
        [-384, -64, 192],
        [384, -64, 192],
        [-384, -32, 192],
        [384, -32, 192],
        [-384, 0, 192],
        [384, 0, 192],
        [-384, 32, 192],
        [384, 32, 192],
        [-384, 64, 192],
        [384, 64, 192],
        [-384, 96, 192],
        [384, 96, 192],
        [-384, 128, 192],
        [384, 128, 192],
        [-384, 160, 192],
        [384, 160, 192],
        [-384, 192, 192],
        [384, 192, 192],
        [-384, 224, 192],
        [384, 224, 192],
        [-384, 256, 192],
        [384, 256, 192],
        [-384, 288, 192],
        [384, 288, 192],
        [-384, 320, 192],
        [384, 320, 192],
        [-384, 352, 192],
        [384, 352, 192],
        [-384, -352, 224],
        [384, -352, 224],
        [-384, -320, 224],
        [384, -320, 224],
        [-384, -288, 224],
        [384, -288, 224],
        [-384, -256, 224],
        [384, -256, 224],
        [-384, -224, 224],
        [384, -224, 224],
        [-384, -192, 224],
        [384, -192, 224],
        [-384, -160, 224],
        [384, -160, 224],
        [-384, -128, 224],
        [384, -128, 224],
        [-384, -96, 224],
        [384, -96, 224],
        [-384, -64, 224],
        [384, -64, 224],
        [-384, -32, 224],
        [384, -32, 224],
        [-384, 0, 224],
        [384, 0, 224],
        [-384, 32, 224],
        [384, 32, 224],
        [-384, 64, 224],
        [384, 64, 224],
        [-384, 96, 224],
        [384, 96, 224],
        [-384, 128, 224],
        [384, 128, 224],
        [-384, 160, 224],
        [384, 160, 224],
        [-384, 192, 224],
        [384, 192, 224],
        [-384, 224, 224],
        [384, 224, 224],
        [-384, 256, 224],
        [384, 256, 224],
        [-384, 288, 224],
        [384, 288, 224],
        [-384, 320, 224],
        [384, 320, 224],
        [-384, 352, 224],
        [384, 352, 224],
        [-384, -352, 256],
        [384, -352, 256],
        [-384, -320, 256],
        [384, -320, 256],
        [-384, -288, 256],
        [384, -288, 256],
        [-384, -256, 256],
        [384, -256, 256],
        [-384, -224, 256],
        [384, -224, 256],
        [-384, -192, 256],
        [384, -192, 256],
        [-384, -160, 256],
        [384, -160, 256],
        [-384, -128, 256],
        [384, -128, 256],
        [-384, -96, 256],
        [384, -96, 256],
        [-384, -64, 256],
        [384, -64, 256],
        [-384, -32, 256],
        [384, -32, 256],
        [-384, 0, 256],
        [384, 0, 256],
        [-384, 32, 256],
        [384, 32, 256],
        [-384, 64, 256],
        [384, 64, 256],
        [-384, 96, 256],
        [384, 96, 256],
        [-384, 128, 256],
        [384, 128, 256],
        [-384, 160, 256],
        [384, 160, 256],
        [-384, 192, 256],
        [384, 192, 256],
        [-384, 224, 256],
        [384, 224, 256],
        [-384, 256, 256],
        [384, 256, 256],
        [-384, 288, 256],
        [384, 288, 256],
        [-384, 320, 256],
        [384, 320, 256],
        [-384, 352, 256],
        [384, 352, 256],
        [-384, -352, 288],
        [384, -352, 288],
        [-384, -320, 288],
        [384, -320, 288],
        [-384, -288, 288],
        [384, -288, 288],
        [-384, -256, 288],
        [384, -256, 288],
        [-384, -224, 288],
        [384, -224, 288],
        [-384, -192, 288],
        [384, -192, 288],
        [-384, -160, 288],
        [384, -160, 288],
        [-384, -128, 288],
        [384, -128, 288],
        [-384, -96, 288],
        [384, -96, 288],
        [-384, -64, 288],
        [384, -64, 288],
        [-384, -32, 288],
        [384, -32, 288],
        [-384, 0, 288],
        [384, 0, 288],
        [-384, 32, 288],
        [384, 32, 288],
        [-384, 64, 288],
        [384, 64, 288],
        [-384, 96, 288],
        [384, 96, 288],
        [-384, 128, 288],
        [384, 128, 288],
        [-384, 160, 288],
        [384, 160, 288],
        [-384, 192, 288],
        [384, 192, 288],
        [-384, 224, 288],
        [384, 224, 288],
        [-384, 256, 288],
        [384, 256, 288],
        [-384, 288, 288],
        [384, 288, 288],
        [-384, 320, 288],
        [384, 320, 288],
        [-384, 352, 288],
        [384, 352, 288],
        [-384, -352, 320],
        [384, -352, 320],
        [-384, -320, 320],
        [384, -320, 320],
        [-384, -288, 320],
        [384, -288, 320],
        [-384, -256, 320],
        [384, -256, 320],
        [-384, -224, 320],
        [384, -224, 320],
        [-384, -192, 320],
        [384, -192, 320],
        [-384, -160, 320],
        [384, -160, 320],
        [-384, -128, 320],
        [384, -128, 320],
        [-384, -96, 320],
        [384, -96, 320],
        [-384, -64, 320],
        [384, -64, 320],
        [-384, -32, 320],
        [384, -32, 320],
        [-384, 0, 320],
        [384, 0, 320],
        [-384, 32, 320],
        [384, 32, 320],
        [-384, 64, 320],
        [384, 64, 320],
        [-384, 96, 320],
        [384, 96, 320],
        [-384, 128, 320],
        [384, 128, 320],
        [-384, 160, 320],
        [384, 160, 320],
        [-384, 192, 320],
        [384, 192, 320],
        [-384, 224, 320],
        [384, 224, 320],
        [-384, 256, 320],
        [384, 256, 320],
        [-384, 288, 320],
        [384, 288, 320],
        [-384, 320, 320],
        [384, 320, 320],
        [-384, 352, 320],
        [384, 352, 320],
        [-384, -352, 352],
        [384, -352, 352],
        [-384, -320, 352],
        [384, -320, 352],
        [-384, -288, 352],
        [384, -288, 352],
        [-384, -256, 352],
        [384, -256, 352],
        [-384, -224, 352],
        [384, -224, 352],
        [-384, -192, 352],
        [384, -192, 352],
        [-384, -160, 352],
        [384, -160, 352],
        [-384, -128, 352],
        [384, -128, 352],
        [-384, -96, 352],
        [384, -96, 352],
        [-384, -64, 352],
        [384, -64, 352],
        [-384, -32, 352],
        [384, -32, 352],
        [-384, 0, 352],
        [384, 0, 352],
        [-384, 32, 352],
        [384, 32, 352],
        [-384, 64, 352],
        [384, 64, 352],
        [-384, 96, 352],
        [384, 96, 352],
        [-384, 128, 352],
        [384, 128, 352],
        [-384, 160, 352],
        [384, 160, 352],
        [-384, 192, 352],
        [384, 192, 352],
        [-384, 224, 352],
        [384, 224, 352],
        [-384, 256, 352],
        [384, 256, 352],
        [-384, 288, 352],
        [384, 288, 352],
        [-384, 320, 352],
        [384, 320, 352],
        [-384, 352, 352],
        [384, 352, 352]],
    '13': [[-416, -416, -416],
        [-416, -416, 416],
        [-416, -384, -416],
        [-416, -384, 416],
        [-416, -352, -416],
        [-416, -352, 416],
        [-416, -320, -416],
        [-416, -320, 416],
        [-416, -288, -416],
        [-416, -288, 416],
        [-416, -256, -416],
        [-416, -256, 416],
        [-416, -224, -416],
        [-416, -224, 416],
        [-416, -192, -416],
        [-416, -192, 416],
        [-416, -160, -416],
        [-416, -160, 416],
        [-416, -128, -416],
        [-416, -128, 416],
        [-416, -96, -416],
        [-416, -96, 416],
        [-416, -64, -416],
        [-416, -64, 416],
        [-416, -32, -416],
        [-416, -32, 416],
        [-416, 0, -416],
        [-416, 0, 416],
        [-416, 32, -416],
        [-416, 32, 416],
        [-416, 64, -416],
        [-416, 64, 416],
        [-416, 96, -416],
        [-416, 96, 416],
        [-416, 128, -416],
        [-416, 128, 416],
        [-416, 160, -416],
        [-416, 160, 416],
        [-416, 192, -416],
        [-416, 192, 416],
        [-416, 224, -416],
        [-416, 224, 416],
        [-416, 256, -416],
        [-416, 256, 416],
        [-416, 288, -416],
        [-416, 288, 416],
        [-416, 320, -416],
        [-416, 320, 416],
        [-416, 352, -416],
        [-416, 352, 416],
        [-416, 384, -416],
        [-416, 384, 416],
        [-416, 416, -416],
        [-416, 416, 416],
        [-416, -416, -384],
        [-416, 416, -384],
        [-416, -416, -352],
        [-416, 416, -352],
        [-416, -416, -320],
        [-416, 416, -320],
        [-416, -416, -288],
        [-416, 416, -288],
        [-416, -416, -256],
        [-416, 416, -256],
        [-416, -416, -224],
        [-416, 416, -224],
        [-416, -416, -192],
        [-416, 416, -192],
        [-416, -416, -160],
        [-416, 416, -160],
        [-416, -416, -128],
        [-416, 416, -128],
        [-416, -416, -96],
        [-416, 416, -96],
        [-416, -416, -64],
        [-416, 416, -64],
        [-416, -416, -32],
        [-416, 416, -32],
        [-416, -416, 0],
        [-416, 416, 0],
        [-416, -416, 32],
        [-416, 416, 32],
        [-416, -416, 64],
        [-416, 416, 64],
        [-416, -416, 96],
        [-416, 416, 96],
        [-416, -416, 128],
        [-416, 416, 128],
        [-416, -416, 160],
        [-416, 416, 160],
        [-416, -416, 192],
        [-416, 416, 192],
        [-416, -416, 224],
        [-416, 416, 224],
        [-416, -416, 256],
        [-416, 416, 256],
        [-416, -416, 288],
        [-416, 416, 288],
        [-416, -416, 320],
        [-416, 416, 320],
        [-416, -416, 352],
        [-416, 416, 352],
        [-416, -416, 384],
        [-416, 416, 384],
        [-384, -416, -416],
        [-384, -416, 416],
        [-384, -384, -416],
        [-384, -384, 416],
        [-384, -352, -416],
        [-384, -352, 416],
        [-384, -320, -416],
        [-384, -320, 416],
        [-384, -288, -416],
        [-384, -288, 416],
        [-384, -256, -416],
        [-384, -256, 416],
        [-384, -224, -416],
        [-384, -224, 416],
        [-384, -192, -416],
        [-384, -192, 416],
        [-384, -160, -416],
        [-384, -160, 416],
        [-384, -128, -416],
        [-384, -128, 416],
        [-384, -96, -416],
        [-384, -96, 416],
        [-384, -64, -416],
        [-384, -64, 416],
        [-384, -32, -416],
        [-384, -32, 416],
        [-384, 0, -416],
        [-384, 0, 416],
        [-384, 32, -416],
        [-384, 32, 416],
        [-384, 64, -416],
        [-384, 64, 416],
        [-384, 96, -416],
        [-384, 96, 416],
        [-384, 128, -416],
        [-384, 128, 416],
        [-384, 160, -416],
        [-384, 160, 416],
        [-384, 192, -416],
        [-384, 192, 416],
        [-384, 224, -416],
        [-384, 224, 416],
        [-384, 256, -416],
        [-384, 256, 416],
        [-384, 288, -416],
        [-384, 288, 416],
        [-384, 320, -416],
        [-384, 320, 416],
        [-384, 352, -416],
        [-384, 352, 416],
        [-384, 384, -416],
        [-384, 384, 416],
        [-384, 416, -416],
        [-384, 416, 416],
        [-384, -416, -384],
        [-384, 416, -384],
        [-384, -416, -352],
        [-384, 416, -352],
        [-384, -416, -320],
        [-384, 416, -320],
        [-384, -416, -288],
        [-384, 416, -288],
        [-384, -416, -256],
        [-384, 416, -256],
        [-384, -416, -224],
        [-384, 416, -224],
        [-384, -416, -192],
        [-384, 416, -192],
        [-384, -416, -160],
        [-384, 416, -160],
        [-384, -416, -128],
        [-384, 416, -128],
        [-384, -416, -96],
        [-384, 416, -96],
        [-384, -416, -64],
        [-384, 416, -64],
        [-384, -416, -32],
        [-384, 416, -32],
        [-384, -416, 0],
        [-384, 416, 0],
        [-384, -416, 32],
        [-384, 416, 32],
        [-384, -416, 64],
        [-384, 416, 64],
        [-384, -416, 96],
        [-384, 416, 96],
        [-384, -416, 128],
        [-384, 416, 128],
        [-384, -416, 160],
        [-384, 416, 160],
        [-384, -416, 192],
        [-384, 416, 192],
        [-384, -416, 224],
        [-384, 416, 224],
        [-384, -416, 256],
        [-384, 416, 256],
        [-384, -416, 288],
        [-384, 416, 288],
        [-384, -416, 320],
        [-384, 416, 320],
        [-384, -416, 352],
        [-384, 416, 352],
        [-384, -416, 384],
        [-384, 416, 384],
        [-352, -416, -416],
        [-352, -416, 416],
        [-352, -384, -416],
        [-352, -384, 416],
        [-352, -352, -416],
        [-352, -352, 416],
        [-352, -320, -416],
        [-352, -320, 416],
        [-352, -288, -416],
        [-352, -288, 416],
        [-352, -256, -416],
        [-352, -256, 416],
        [-352, -224, -416],
        [-352, -224, 416],
        [-352, -192, -416],
        [-352, -192, 416],
        [-352, -160, -416],
        [-352, -160, 416],
        [-352, -128, -416],
        [-352, -128, 416],
        [-352, -96, -416],
        [-352, -96, 416],
        [-352, -64, -416],
        [-352, -64, 416],
        [-352, -32, -416],
        [-352, -32, 416],
        [-352, 0, -416],
        [-352, 0, 416],
        [-352, 32, -416],
        [-352, 32, 416],
        [-352, 64, -416],
        [-352, 64, 416],
        [-352, 96, -416],
        [-352, 96, 416],
        [-352, 128, -416],
        [-352, 128, 416],
        [-352, 160, -416],
        [-352, 160, 416],
        [-352, 192, -416],
        [-352, 192, 416],
        [-352, 224, -416],
        [-352, 224, 416],
        [-352, 256, -416],
        [-352, 256, 416],
        [-352, 288, -416],
        [-352, 288, 416],
        [-352, 320, -416],
        [-352, 320, 416],
        [-352, 352, -416],
        [-352, 352, 416],
        [-352, 384, -416],
        [-352, 384, 416],
        [-352, 416, -416],
        [-352, 416, 416],
        [-352, -416, -384],
        [-352, 416, -384],
        [-352, -416, -352],
        [-352, 416, -352],
        [-352, -416, -320],
        [-352, 416, -320],
        [-352, -416, -288],
        [-352, 416, -288],
        [-352, -416, -256],
        [-352, 416, -256],
        [-352, -416, -224],
        [-352, 416, -224],
        [-352, -416, -192],
        [-352, 416, -192],
        [-352, -416, -160],
        [-352, 416, -160],
        [-352, -416, -128],
        [-352, 416, -128],
        [-352, -416, -96],
        [-352, 416, -96],
        [-352, -416, -64],
        [-352, 416, -64],
        [-352, -416, -32],
        [-352, 416, -32],
        [-352, -416, 0],
        [-352, 416, 0],
        [-352, -416, 32],
        [-352, 416, 32],
        [-352, -416, 64],
        [-352, 416, 64],
        [-352, -416, 96],
        [-352, 416, 96],
        [-352, -416, 128],
        [-352, 416, 128],
        [-352, -416, 160],
        [-352, 416, 160],
        [-352, -416, 192],
        [-352, 416, 192],
        [-352, -416, 224],
        [-352, 416, 224],
        [-352, -416, 256],
        [-352, 416, 256],
        [-352, -416, 288],
        [-352, 416, 288],
        [-352, -416, 320],
        [-352, 416, 320],
        [-352, -416, 352],
        [-352, 416, 352],
        [-352, -416, 384],
        [-352, 416, 384],
        [-320, -416, -416],
        [-320, -416, 416],
        [-320, -384, -416],
        [-320, -384, 416],
        [-320, -352, -416],
        [-320, -352, 416],
        [-320, -320, -416],
        [-320, -320, 416],
        [-320, -288, -416],
        [-320, -288, 416],
        [-320, -256, -416],
        [-320, -256, 416],
        [-320, -224, -416],
        [-320, -224, 416],
        [-320, -192, -416],
        [-320, -192, 416],
        [-320, -160, -416],
        [-320, -160, 416],
        [-320, -128, -416],
        [-320, -128, 416],
        [-320, -96, -416],
        [-320, -96, 416],
        [-320, -64, -416],
        [-320, -64, 416],
        [-320, -32, -416],
        [-320, -32, 416],
        [-320, 0, -416],
        [-320, 0, 416],
        [-320, 32, -416],
        [-320, 32, 416],
        [-320, 64, -416],
        [-320, 64, 416],
        [-320, 96, -416],
        [-320, 96, 416],
        [-320, 128, -416],
        [-320, 128, 416],
        [-320, 160, -416],
        [-320, 160, 416],
        [-320, 192, -416],
        [-320, 192, 416],
        [-320, 224, -416],
        [-320, 224, 416],
        [-320, 256, -416],
        [-320, 256, 416],
        [-320, 288, -416],
        [-320, 288, 416],
        [-320, 320, -416],
        [-320, 320, 416],
        [-320, 352, -416],
        [-320, 352, 416],
        [-320, 384, -416],
        [-320, 384, 416],
        [-320, 416, -416],
        [-320, 416, 416],
        [-320, -416, -384],
        [-320, 416, -384],
        [-320, -416, -352],
        [-320, 416, -352],
        [-320, -416, -320],
        [-320, 416, -320],
        [-320, -416, -288],
        [-320, 416, -288],
        [-320, -416, -256],
        [-320, 416, -256],
        [-320, -416, -224],
        [-320, 416, -224],
        [-320, -416, -192],
        [-320, 416, -192],
        [-320, -416, -160],
        [-320, 416, -160],
        [-320, -416, -128],
        [-320, 416, -128],
        [-320, -416, -96],
        [-320, 416, -96],
        [-320, -416, -64],
        [-320, 416, -64],
        [-320, -416, -32],
        [-320, 416, -32],
        [-320, -416, 0],
        [-320, 416, 0],
        [-320, -416, 32],
        [-320, 416, 32],
        [-320, -416, 64],
        [-320, 416, 64],
        [-320, -416, 96],
        [-320, 416, 96],
        [-320, -416, 128],
        [-320, 416, 128],
        [-320, -416, 160],
        [-320, 416, 160],
        [-320, -416, 192],
        [-320, 416, 192],
        [-320, -416, 224],
        [-320, 416, 224],
        [-320, -416, 256],
        [-320, 416, 256],
        [-320, -416, 288],
        [-320, 416, 288],
        [-320, -416, 320],
        [-320, 416, 320],
        [-320, -416, 352],
        [-320, 416, 352],
        [-320, -416, 384],
        [-320, 416, 384],
        [-288, -416, -416],
        [-288, -416, 416],
        [-288, -384, -416],
        [-288, -384, 416],
        [-288, -352, -416],
        [-288, -352, 416],
        [-288, -320, -416],
        [-288, -320, 416],
        [-288, -288, -416],
        [-288, -288, 416],
        [-288, -256, -416],
        [-288, -256, 416],
        [-288, -224, -416],
        [-288, -224, 416],
        [-288, -192, -416],
        [-288, -192, 416],
        [-288, -160, -416],
        [-288, -160, 416],
        [-288, -128, -416],
        [-288, -128, 416],
        [-288, -96, -416],
        [-288, -96, 416],
        [-288, -64, -416],
        [-288, -64, 416],
        [-288, -32, -416],
        [-288, -32, 416],
        [-288, 0, -416],
        [-288, 0, 416],
        [-288, 32, -416],
        [-288, 32, 416],
        [-288, 64, -416],
        [-288, 64, 416],
        [-288, 96, -416],
        [-288, 96, 416],
        [-288, 128, -416],
        [-288, 128, 416],
        [-288, 160, -416],
        [-288, 160, 416],
        [-288, 192, -416],
        [-288, 192, 416],
        [-288, 224, -416],
        [-288, 224, 416],
        [-288, 256, -416],
        [-288, 256, 416],
        [-288, 288, -416],
        [-288, 288, 416],
        [-288, 320, -416],
        [-288, 320, 416],
        [-288, 352, -416],
        [-288, 352, 416],
        [-288, 384, -416],
        [-288, 384, 416],
        [-288, 416, -416],
        [-288, 416, 416],
        [-288, -416, -384],
        [-288, 416, -384],
        [-288, -416, -352],
        [-288, 416, -352],
        [-288, -416, -320],
        [-288, 416, -320],
        [-288, -416, -288],
        [-288, 416, -288],
        [-288, -416, -256],
        [-288, 416, -256],
        [-288, -416, -224],
        [-288, 416, -224],
        [-288, -416, -192],
        [-288, 416, -192],
        [-288, -416, -160],
        [-288, 416, -160],
        [-288, -416, -128],
        [-288, 416, -128],
        [-288, -416, -96],
        [-288, 416, -96],
        [-288, -416, -64],
        [-288, 416, -64],
        [-288, -416, -32],
        [-288, 416, -32],
        [-288, -416, 0],
        [-288, 416, 0],
        [-288, -416, 32],
        [-288, 416, 32],
        [-288, -416, 64],
        [-288, 416, 64],
        [-288, -416, 96],
        [-288, 416, 96],
        [-288, -416, 128],
        [-288, 416, 128],
        [-288, -416, 160],
        [-288, 416, 160],
        [-288, -416, 192],
        [-288, 416, 192],
        [-288, -416, 224],
        [-288, 416, 224],
        [-288, -416, 256],
        [-288, 416, 256],
        [-288, -416, 288],
        [-288, 416, 288],
        [-288, -416, 320],
        [-288, 416, 320],
        [-288, -416, 352],
        [-288, 416, 352],
        [-288, -416, 384],
        [-288, 416, 384],
        [-256, -416, -416],
        [-256, -416, 416],
        [-256, -384, -416],
        [-256, -384, 416],
        [-256, -352, -416],
        [-256, -352, 416],
        [-256, -320, -416],
        [-256, -320, 416],
        [-256, -288, -416],
        [-256, -288, 416],
        [-256, -256, -416],
        [-256, -256, 416],
        [-256, -224, -416],
        [-256, -224, 416],
        [-256, -192, -416],
        [-256, -192, 416],
        [-256, -160, -416],
        [-256, -160, 416],
        [-256, -128, -416],
        [-256, -128, 416],
        [-256, -96, -416],
        [-256, -96, 416],
        [-256, -64, -416],
        [-256, -64, 416],
        [-256, -32, -416],
        [-256, -32, 416],
        [-256, 0, -416],
        [-256, 0, 416],
        [-256, 32, -416],
        [-256, 32, 416],
        [-256, 64, -416],
        [-256, 64, 416],
        [-256, 96, -416],
        [-256, 96, 416],
        [-256, 128, -416],
        [-256, 128, 416],
        [-256, 160, -416],
        [-256, 160, 416],
        [-256, 192, -416],
        [-256, 192, 416],
        [-256, 224, -416],
        [-256, 224, 416],
        [-256, 256, -416],
        [-256, 256, 416],
        [-256, 288, -416],
        [-256, 288, 416],
        [-256, 320, -416],
        [-256, 320, 416],
        [-256, 352, -416],
        [-256, 352, 416],
        [-256, 384, -416],
        [-256, 384, 416],
        [-256, 416, -416],
        [-256, 416, 416],
        [-256, -416, -384],
        [-256, 416, -384],
        [-256, -416, -352],
        [-256, 416, -352],
        [-256, -416, -320],
        [-256, 416, -320],
        [-256, -416, -288],
        [-256, 416, -288],
        [-256, -416, -256],
        [-256, 416, -256],
        [-256, -416, -224],
        [-256, 416, -224],
        [-256, -416, -192],
        [-256, 416, -192],
        [-256, -416, -160],
        [-256, 416, -160],
        [-256, -416, -128],
        [-256, 416, -128],
        [-256, -416, -96],
        [-256, 416, -96],
        [-256, -416, -64],
        [-256, 416, -64],
        [-256, -416, -32],
        [-256, 416, -32],
        [-256, -416, 0],
        [-256, 416, 0],
        [-256, -416, 32],
        [-256, 416, 32],
        [-256, -416, 64],
        [-256, 416, 64],
        [-256, -416, 96],
        [-256, 416, 96],
        [-256, -416, 128],
        [-256, 416, 128],
        [-256, -416, 160],
        [-256, 416, 160],
        [-256, -416, 192],
        [-256, 416, 192],
        [-256, -416, 224],
        [-256, 416, 224],
        [-256, -416, 256],
        [-256, 416, 256],
        [-256, -416, 288],
        [-256, 416, 288],
        [-256, -416, 320],
        [-256, 416, 320],
        [-256, -416, 352],
        [-256, 416, 352],
        [-256, -416, 384],
        [-256, 416, 384],
        [-224, -416, -416],
        [-224, -416, 416],
        [-224, -384, -416],
        [-224, -384, 416],
        [-224, -352, -416],
        [-224, -352, 416],
        [-224, -320, -416],
        [-224, -320, 416],
        [-224, -288, -416],
        [-224, -288, 416],
        [-224, -256, -416],
        [-224, -256, 416],
        [-224, -224, -416],
        [-224, -224, 416],
        [-224, -192, -416],
        [-224, -192, 416],
        [-224, -160, -416],
        [-224, -160, 416],
        [-224, -128, -416],
        [-224, -128, 416],
        [-224, -96, -416],
        [-224, -96, 416],
        [-224, -64, -416],
        [-224, -64, 416],
        [-224, -32, -416],
        [-224, -32, 416],
        [-224, 0, -416],
        [-224, 0, 416],
        [-224, 32, -416],
        [-224, 32, 416],
        [-224, 64, -416],
        [-224, 64, 416],
        [-224, 96, -416],
        [-224, 96, 416],
        [-224, 128, -416],
        [-224, 128, 416],
        [-224, 160, -416],
        [-224, 160, 416],
        [-224, 192, -416],
        [-224, 192, 416],
        [-224, 224, -416],
        [-224, 224, 416],
        [-224, 256, -416],
        [-224, 256, 416],
        [-224, 288, -416],
        [-224, 288, 416],
        [-224, 320, -416],
        [-224, 320, 416],
        [-224, 352, -416],
        [-224, 352, 416],
        [-224, 384, -416],
        [-224, 384, 416],
        [-224, 416, -416],
        [-224, 416, 416],
        [-224, -416, -384],
        [-224, 416, -384],
        [-224, -416, -352],
        [-224, 416, -352],
        [-224, -416, -320],
        [-224, 416, -320],
        [-224, -416, -288],
        [-224, 416, -288],
        [-224, -416, -256],
        [-224, 416, -256],
        [-224, -416, -224],
        [-224, 416, -224],
        [-224, -416, -192],
        [-224, 416, -192],
        [-224, -416, -160],
        [-224, 416, -160],
        [-224, -416, -128],
        [-224, 416, -128],
        [-224, -416, -96],
        [-224, 416, -96],
        [-224, -416, -64],
        [-224, 416, -64],
        [-224, -416, -32],
        [-224, 416, -32],
        [-224, -416, 0],
        [-224, 416, 0],
        [-224, -416, 32],
        [-224, 416, 32],
        [-224, -416, 64],
        [-224, 416, 64],
        [-224, -416, 96],
        [-224, 416, 96],
        [-224, -416, 128],
        [-224, 416, 128],
        [-224, -416, 160],
        [-224, 416, 160],
        [-224, -416, 192],
        [-224, 416, 192],
        [-224, -416, 224],
        [-224, 416, 224],
        [-224, -416, 256],
        [-224, 416, 256],
        [-224, -416, 288],
        [-224, 416, 288],
        [-224, -416, 320],
        [-224, 416, 320],
        [-224, -416, 352],
        [-224, 416, 352],
        [-224, -416, 384],
        [-224, 416, 384],
        [-192, -416, -416],
        [-192, -416, 416],
        [-192, -384, -416],
        [-192, -384, 416],
        [-192, -352, -416],
        [-192, -352, 416],
        [-192, -320, -416],
        [-192, -320, 416],
        [-192, -288, -416],
        [-192, -288, 416],
        [-192, -256, -416],
        [-192, -256, 416],
        [-192, -224, -416],
        [-192, -224, 416],
        [-192, -192, -416],
        [-192, -192, 416],
        [-192, -160, -416],
        [-192, -160, 416],
        [-192, -128, -416],
        [-192, -128, 416],
        [-192, -96, -416],
        [-192, -96, 416],
        [-192, -64, -416],
        [-192, -64, 416],
        [-192, -32, -416],
        [-192, -32, 416],
        [-192, 0, -416],
        [-192, 0, 416],
        [-192, 32, -416],
        [-192, 32, 416],
        [-192, 64, -416],
        [-192, 64, 416],
        [-192, 96, -416],
        [-192, 96, 416],
        [-192, 128, -416],
        [-192, 128, 416],
        [-192, 160, -416],
        [-192, 160, 416],
        [-192, 192, -416],
        [-192, 192, 416],
        [-192, 224, -416],
        [-192, 224, 416],
        [-192, 256, -416],
        [-192, 256, 416],
        [-192, 288, -416],
        [-192, 288, 416],
        [-192, 320, -416],
        [-192, 320, 416],
        [-192, 352, -416],
        [-192, 352, 416],
        [-192, 384, -416],
        [-192, 384, 416],
        [-192, 416, -416],
        [-192, 416, 416],
        [-192, -416, -384],
        [-192, 416, -384],
        [-192, -416, -352],
        [-192, 416, -352],
        [-192, -416, -320],
        [-192, 416, -320],
        [-192, -416, -288],
        [-192, 416, -288],
        [-192, -416, -256],
        [-192, 416, -256],
        [-192, -416, -224],
        [-192, 416, -224],
        [-192, -416, -192],
        [-192, 416, -192],
        [-192, -416, -160],
        [-192, 416, -160],
        [-192, -416, -128],
        [-192, 416, -128],
        [-192, -416, -96],
        [-192, 416, -96],
        [-192, -416, -64],
        [-192, 416, -64],
        [-192, -416, -32],
        [-192, 416, -32],
        [-192, -416, 0],
        [-192, 416, 0],
        [-192, -416, 32],
        [-192, 416, 32],
        [-192, -416, 64],
        [-192, 416, 64],
        [-192, -416, 96],
        [-192, 416, 96],
        [-192, -416, 128],
        [-192, 416, 128],
        [-192, -416, 160],
        [-192, 416, 160],
        [-192, -416, 192],
        [-192, 416, 192],
        [-192, -416, 224],
        [-192, 416, 224],
        [-192, -416, 256],
        [-192, 416, 256],
        [-192, -416, 288],
        [-192, 416, 288],
        [-192, -416, 320],
        [-192, 416, 320],
        [-192, -416, 352],
        [-192, 416, 352],
        [-192, -416, 384],
        [-192, 416, 384],
        [-160, -416, -416],
        [-160, -416, 416],
        [-160, -384, -416],
        [-160, -384, 416],
        [-160, -352, -416],
        [-160, -352, 416],
        [-160, -320, -416],
        [-160, -320, 416],
        [-160, -288, -416],
        [-160, -288, 416],
        [-160, -256, -416],
        [-160, -256, 416],
        [-160, -224, -416],
        [-160, -224, 416],
        [-160, -192, -416],
        [-160, -192, 416],
        [-160, -160, -416],
        [-160, -160, 416],
        [-160, -128, -416],
        [-160, -128, 416],
        [-160, -96, -416],
        [-160, -96, 416],
        [-160, -64, -416],
        [-160, -64, 416],
        [-160, -32, -416],
        [-160, -32, 416],
        [-160, 0, -416],
        [-160, 0, 416],
        [-160, 32, -416],
        [-160, 32, 416],
        [-160, 64, -416],
        [-160, 64, 416],
        [-160, 96, -416],
        [-160, 96, 416],
        [-160, 128, -416],
        [-160, 128, 416],
        [-160, 160, -416],
        [-160, 160, 416],
        [-160, 192, -416],
        [-160, 192, 416],
        [-160, 224, -416],
        [-160, 224, 416],
        [-160, 256, -416],
        [-160, 256, 416],
        [-160, 288, -416],
        [-160, 288, 416],
        [-160, 320, -416],
        [-160, 320, 416],
        [-160, 352, -416],
        [-160, 352, 416],
        [-160, 384, -416],
        [-160, 384, 416],
        [-160, 416, -416],
        [-160, 416, 416],
        [-160, -416, -384],
        [-160, 416, -384],
        [-160, -416, -352],
        [-160, 416, -352],
        [-160, -416, -320],
        [-160, 416, -320],
        [-160, -416, -288],
        [-160, 416, -288],
        [-160, -416, -256],
        [-160, 416, -256],
        [-160, -416, -224],
        [-160, 416, -224],
        [-160, -416, -192],
        [-160, 416, -192],
        [-160, -416, -160],
        [-160, 416, -160],
        [-160, -416, -128],
        [-160, 416, -128],
        [-160, -416, -96],
        [-160, 416, -96],
        [-160, -416, -64],
        [-160, 416, -64],
        [-160, -416, -32],
        [-160, 416, -32],
        [-160, -416, 0],
        [-160, 416, 0],
        [-160, -416, 32],
        [-160, 416, 32],
        [-160, -416, 64],
        [-160, 416, 64],
        [-160, -416, 96],
        [-160, 416, 96],
        [-160, -416, 128],
        [-160, 416, 128],
        [-160, -416, 160],
        [-160, 416, 160],
        [-160, -416, 192],
        [-160, 416, 192],
        [-160, -416, 224],
        [-160, 416, 224],
        [-160, -416, 256],
        [-160, 416, 256],
        [-160, -416, 288],
        [-160, 416, 288],
        [-160, -416, 320],
        [-160, 416, 320],
        [-160, -416, 352],
        [-160, 416, 352],
        [-160, -416, 384],
        [-160, 416, 384],
        [-128, -416, -416],
        [-128, -416, 416],
        [-128, -384, -416],
        [-128, -384, 416],
        [-128, -352, -416],
        [-128, -352, 416],
        [-128, -320, -416],
        [-128, -320, 416],
        [-128, -288, -416],
        [-128, -288, 416],
        [-128, -256, -416],
        [-128, -256, 416],
        [-128, -224, -416],
        [-128, -224, 416],
        [-128, -192, -416],
        [-128, -192, 416],
        [-128, -160, -416],
        [-128, -160, 416],
        [-128, -128, -416],
        [-128, -128, 416],
        [-128, -96, -416],
        [-128, -96, 416],
        [-128, -64, -416],
        [-128, -64, 416],
        [-128, -32, -416],
        [-128, -32, 416],
        [-128, 0, -416],
        [-128, 0, 416],
        [-128, 32, -416],
        [-128, 32, 416],
        [-128, 64, -416],
        [-128, 64, 416],
        [-128, 96, -416],
        [-128, 96, 416],
        [-128, 128, -416],
        [-128, 128, 416],
        [-128, 160, -416],
        [-128, 160, 416],
        [-128, 192, -416],
        [-128, 192, 416],
        [-128, 224, -416],
        [-128, 224, 416],
        [-128, 256, -416],
        [-128, 256, 416],
        [-128, 288, -416],
        [-128, 288, 416],
        [-128, 320, -416],
        [-128, 320, 416],
        [-128, 352, -416],
        [-128, 352, 416],
        [-128, 384, -416],
        [-128, 384, 416],
        [-128, 416, -416],
        [-128, 416, 416],
        [-128, -416, -384],
        [-128, 416, -384],
        [-128, -416, -352],
        [-128, 416, -352],
        [-128, -416, -320],
        [-128, 416, -320],
        [-128, -416, -288],
        [-128, 416, -288],
        [-128, -416, -256],
        [-128, 416, -256],
        [-128, -416, -224],
        [-128, 416, -224],
        [-128, -416, -192],
        [-128, 416, -192],
        [-128, -416, -160],
        [-128, 416, -160],
        [-128, -416, -128],
        [-128, 416, -128],
        [-128, -416, -96],
        [-128, 416, -96],
        [-128, -416, -64],
        [-128, 416, -64],
        [-128, -416, -32],
        [-128, 416, -32],
        [-128, -416, 0],
        [-128, 416, 0],
        [-128, -416, 32],
        [-128, 416, 32],
        [-128, -416, 64],
        [-128, 416, 64],
        [-128, -416, 96],
        [-128, 416, 96],
        [-128, -416, 128],
        [-128, 416, 128],
        [-128, -416, 160],
        [-128, 416, 160],
        [-128, -416, 192],
        [-128, 416, 192],
        [-128, -416, 224],
        [-128, 416, 224],
        [-128, -416, 256],
        [-128, 416, 256],
        [-128, -416, 288],
        [-128, 416, 288],
        [-128, -416, 320],
        [-128, 416, 320],
        [-128, -416, 352],
        [-128, 416, 352],
        [-128, -416, 384],
        [-128, 416, 384],
        [-96, -416, -416],
        [-96, -416, 416],
        [-96, -384, -416],
        [-96, -384, 416],
        [-96, -352, -416],
        [-96, -352, 416],
        [-96, -320, -416],
        [-96, -320, 416],
        [-96, -288, -416],
        [-96, -288, 416],
        [-96, -256, -416],
        [-96, -256, 416],
        [-96, -224, -416],
        [-96, -224, 416],
        [-96, -192, -416],
        [-96, -192, 416],
        [-96, -160, -416],
        [-96, -160, 416],
        [-96, -128, -416],
        [-96, -128, 416],
        [-96, -96, -416],
        [-96, -96, 416],
        [-96, -64, -416],
        [-96, -64, 416],
        [-96, -32, -416],
        [-96, -32, 416],
        [-96, 0, -416],
        [-96, 0, 416],
        [-96, 32, -416],
        [-96, 32, 416],
        [-96, 64, -416],
        [-96, 64, 416],
        [-96, 96, -416],
        [-96, 96, 416],
        [-96, 128, -416],
        [-96, 128, 416],
        [-96, 160, -416],
        [-96, 160, 416],
        [-96, 192, -416],
        [-96, 192, 416],
        [-96, 224, -416],
        [-96, 224, 416],
        [-96, 256, -416],
        [-96, 256, 416],
        [-96, 288, -416],
        [-96, 288, 416],
        [-96, 320, -416],
        [-96, 320, 416],
        [-96, 352, -416],
        [-96, 352, 416],
        [-96, 384, -416],
        [-96, 384, 416],
        [-96, 416, -416],
        [-96, 416, 416],
        [-96, -416, -384],
        [-96, 416, -384],
        [-96, -416, -352],
        [-96, 416, -352],
        [-96, -416, -320],
        [-96, 416, -320],
        [-96, -416, -288],
        [-96, 416, -288],
        [-96, -416, -256],
        [-96, 416, -256],
        [-96, -416, -224],
        [-96, 416, -224],
        [-96, -416, -192],
        [-96, 416, -192],
        [-96, -416, -160],
        [-96, 416, -160],
        [-96, -416, -128],
        [-96, 416, -128],
        [-96, -416, -96],
        [-96, 416, -96],
        [-96, -416, -64],
        [-96, 416, -64],
        [-96, -416, -32],
        [-96, 416, -32],
        [-96, -416, 0],
        [-96, 416, 0],
        [-96, -416, 32],
        [-96, 416, 32],
        [-96, -416, 64],
        [-96, 416, 64],
        [-96, -416, 96],
        [-96, 416, 96],
        [-96, -416, 128],
        [-96, 416, 128],
        [-96, -416, 160],
        [-96, 416, 160],
        [-96, -416, 192],
        [-96, 416, 192],
        [-96, -416, 224],
        [-96, 416, 224],
        [-96, -416, 256],
        [-96, 416, 256],
        [-96, -416, 288],
        [-96, 416, 288],
        [-96, -416, 320],
        [-96, 416, 320],
        [-96, -416, 352],
        [-96, 416, 352],
        [-96, -416, 384],
        [-96, 416, 384],
        [-64, -416, -416],
        [-64, -416, 416],
        [-64, -384, -416],
        [-64, -384, 416],
        [-64, -352, -416],
        [-64, -352, 416],
        [-64, -320, -416],
        [-64, -320, 416],
        [-64, -288, -416],
        [-64, -288, 416],
        [-64, -256, -416],
        [-64, -256, 416],
        [-64, -224, -416],
        [-64, -224, 416],
        [-64, -192, -416],
        [-64, -192, 416],
        [-64, -160, -416],
        [-64, -160, 416],
        [-64, -128, -416],
        [-64, -128, 416],
        [-64, -96, -416],
        [-64, -96, 416],
        [-64, -64, -416],
        [-64, -64, 416],
        [-64, -32, -416],
        [-64, -32, 416],
        [-64, 0, -416],
        [-64, 0, 416],
        [-64, 32, -416],
        [-64, 32, 416],
        [-64, 64, -416],
        [-64, 64, 416],
        [-64, 96, -416],
        [-64, 96, 416],
        [-64, 128, -416],
        [-64, 128, 416],
        [-64, 160, -416],
        [-64, 160, 416],
        [-64, 192, -416],
        [-64, 192, 416],
        [-64, 224, -416],
        [-64, 224, 416],
        [-64, 256, -416],
        [-64, 256, 416],
        [-64, 288, -416],
        [-64, 288, 416],
        [-64, 320, -416],
        [-64, 320, 416],
        [-64, 352, -416],
        [-64, 352, 416],
        [-64, 384, -416],
        [-64, 384, 416],
        [-64, 416, -416],
        [-64, 416, 416],
        [-64, -416, -384],
        [-64, 416, -384],
        [-64, -416, -352],
        [-64, 416, -352],
        [-64, -416, -320],
        [-64, 416, -320],
        [-64, -416, -288],
        [-64, 416, -288],
        [-64, -416, -256],
        [-64, 416, -256],
        [-64, -416, -224],
        [-64, 416, -224],
        [-64, -416, -192],
        [-64, 416, -192],
        [-64, -416, -160],
        [-64, 416, -160],
        [-64, -416, -128],
        [-64, 416, -128],
        [-64, -416, -96],
        [-64, 416, -96],
        [-64, -416, -64],
        [-64, 416, -64],
        [-64, -416, -32],
        [-64, 416, -32],
        [-64, -416, 0],
        [-64, 416, 0],
        [-64, -416, 32],
        [-64, 416, 32],
        [-64, -416, 64],
        [-64, 416, 64],
        [-64, -416, 96],
        [-64, 416, 96],
        [-64, -416, 128],
        [-64, 416, 128],
        [-64, -416, 160],
        [-64, 416, 160],
        [-64, -416, 192],
        [-64, 416, 192],
        [-64, -416, 224],
        [-64, 416, 224],
        [-64, -416, 256],
        [-64, 416, 256],
        [-64, -416, 288],
        [-64, 416, 288],
        [-64, -416, 320],
        [-64, 416, 320],
        [-64, -416, 352],
        [-64, 416, 352],
        [-64, -416, 384],
        [-64, 416, 384],
        [-32, -416, -416],
        [-32, -416, 416],
        [-32, -384, -416],
        [-32, -384, 416],
        [-32, -352, -416],
        [-32, -352, 416],
        [-32, -320, -416],
        [-32, -320, 416],
        [-32, -288, -416],
        [-32, -288, 416],
        [-32, -256, -416],
        [-32, -256, 416],
        [-32, -224, -416],
        [-32, -224, 416],
        [-32, -192, -416],
        [-32, -192, 416],
        [-32, -160, -416],
        [-32, -160, 416],
        [-32, -128, -416],
        [-32, -128, 416],
        [-32, -96, -416],
        [-32, -96, 416],
        [-32, -64, -416],
        [-32, -64, 416],
        [-32, -32, -416],
        [-32, -32, 416],
        [-32, 0, -416],
        [-32, 0, 416],
        [-32, 32, -416],
        [-32, 32, 416],
        [-32, 64, -416],
        [-32, 64, 416],
        [-32, 96, -416],
        [-32, 96, 416],
        [-32, 128, -416],
        [-32, 128, 416],
        [-32, 160, -416],
        [-32, 160, 416],
        [-32, 192, -416],
        [-32, 192, 416],
        [-32, 224, -416],
        [-32, 224, 416],
        [-32, 256, -416],
        [-32, 256, 416],
        [-32, 288, -416],
        [-32, 288, 416],
        [-32, 320, -416],
        [-32, 320, 416],
        [-32, 352, -416],
        [-32, 352, 416],
        [-32, 384, -416],
        [-32, 384, 416],
        [-32, 416, -416],
        [-32, 416, 416],
        [-32, -416, -384],
        [-32, 416, -384],
        [-32, -416, -352],
        [-32, 416, -352],
        [-32, -416, -320],
        [-32, 416, -320],
        [-32, -416, -288],
        [-32, 416, -288],
        [-32, -416, -256],
        [-32, 416, -256],
        [-32, -416, -224],
        [-32, 416, -224],
        [-32, -416, -192],
        [-32, 416, -192],
        [-32, -416, -160],
        [-32, 416, -160],
        [-32, -416, -128],
        [-32, 416, -128],
        [-32, -416, -96],
        [-32, 416, -96],
        [-32, -416, -64],
        [-32, 416, -64],
        [-32, -416, -32],
        [-32, 416, -32],
        [-32, -416, 0],
        [-32, 416, 0],
        [-32, -416, 32],
        [-32, 416, 32],
        [-32, -416, 64],
        [-32, 416, 64],
        [-32, -416, 96],
        [-32, 416, 96],
        [-32, -416, 128],
        [-32, 416, 128],
        [-32, -416, 160],
        [-32, 416, 160],
        [-32, -416, 192],
        [-32, 416, 192],
        [-32, -416, 224],
        [-32, 416, 224],
        [-32, -416, 256],
        [-32, 416, 256],
        [-32, -416, 288],
        [-32, 416, 288],
        [-32, -416, 320],
        [-32, 416, 320],
        [-32, -416, 352],
        [-32, 416, 352],
        [-32, -416, 384],
        [-32, 416, 384],
        [0, -416, -416],
        [0, -416, 416],
        [0, -384, -416],
        [0, -384, 416],
        [0, -352, -416],
        [0, -352, 416],
        [0, -320, -416],
        [0, -320, 416],
        [0, -288, -416],
        [0, -288, 416],
        [0, -256, -416],
        [0, -256, 416],
        [0, -224, -416],
        [0, -224, 416],
        [0, -192, -416],
        [0, -192, 416],
        [0, -160, -416],
        [0, -160, 416],
        [0, -128, -416],
        [0, -128, 416],
        [0, -96, -416],
        [0, -96, 416],
        [0, -64, -416],
        [0, -64, 416],
        [0, -32, -416],
        [0, -32, 416],
        [0, 0, -416],
        [0, 0, 416],
        [0, 32, -416],
        [0, 32, 416],
        [0, 64, -416],
        [0, 64, 416],
        [0, 96, -416],
        [0, 96, 416],
        [0, 128, -416],
        [0, 128, 416],
        [0, 160, -416],
        [0, 160, 416],
        [0, 192, -416],
        [0, 192, 416],
        [0, 224, -416],
        [0, 224, 416],
        [0, 256, -416],
        [0, 256, 416],
        [0, 288, -416],
        [0, 288, 416],
        [0, 320, -416],
        [0, 320, 416],
        [0, 352, -416],
        [0, 352, 416],
        [0, 384, -416],
        [0, 384, 416],
        [0, 416, -416],
        [0, 416, 416],
        [0, -416, -384],
        [0, 416, -384],
        [0, -416, -352],
        [0, 416, -352],
        [0, -416, -320],
        [0, 416, -320],
        [0, -416, -288],
        [0, 416, -288],
        [0, -416, -256],
        [0, 416, -256],
        [0, -416, -224],
        [0, 416, -224],
        [0, -416, -192],
        [0, 416, -192],
        [0, -416, -160],
        [0, 416, -160],
        [0, -416, -128],
        [0, 416, -128],
        [0, -416, -96],
        [0, 416, -96],
        [0, -416, -64],
        [0, 416, -64],
        [0, -416, -32],
        [0, 416, -32],
        [0, -416, 0],
        [0, 416, 0],
        [0, -416, 32],
        [0, 416, 32],
        [0, -416, 64],
        [0, 416, 64],
        [0, -416, 96],
        [0, 416, 96],
        [0, -416, 128],
        [0, 416, 128],
        [0, -416, 160],
        [0, 416, 160],
        [0, -416, 192],
        [0, 416, 192],
        [0, -416, 224],
        [0, 416, 224],
        [0, -416, 256],
        [0, 416, 256],
        [0, -416, 288],
        [0, 416, 288],
        [0, -416, 320],
        [0, 416, 320],
        [0, -416, 352],
        [0, 416, 352],
        [0, -416, 384],
        [0, 416, 384],
        [32, -416, -416],
        [32, -416, 416],
        [32, -384, -416],
        [32, -384, 416],
        [32, -352, -416],
        [32, -352, 416],
        [32, -320, -416],
        [32, -320, 416],
        [32, -288, -416],
        [32, -288, 416],
        [32, -256, -416],
        [32, -256, 416],
        [32, -224, -416],
        [32, -224, 416],
        [32, -192, -416],
        [32, -192, 416],
        [32, -160, -416],
        [32, -160, 416],
        [32, -128, -416],
        [32, -128, 416],
        [32, -96, -416],
        [32, -96, 416],
        [32, -64, -416],
        [32, -64, 416],
        [32, -32, -416],
        [32, -32, 416],
        [32, 0, -416],
        [32, 0, 416],
        [32, 32, -416],
        [32, 32, 416],
        [32, 64, -416],
        [32, 64, 416],
        [32, 96, -416],
        [32, 96, 416],
        [32, 128, -416],
        [32, 128, 416],
        [32, 160, -416],
        [32, 160, 416],
        [32, 192, -416],
        [32, 192, 416],
        [32, 224, -416],
        [32, 224, 416],
        [32, 256, -416],
        [32, 256, 416],
        [32, 288, -416],
        [32, 288, 416],
        [32, 320, -416],
        [32, 320, 416],
        [32, 352, -416],
        [32, 352, 416],
        [32, 384, -416],
        [32, 384, 416],
        [32, 416, -416],
        [32, 416, 416],
        [32, -416, -384],
        [32, 416, -384],
        [32, -416, -352],
        [32, 416, -352],
        [32, -416, -320],
        [32, 416, -320],
        [32, -416, -288],
        [32, 416, -288],
        [32, -416, -256],
        [32, 416, -256],
        [32, -416, -224],
        [32, 416, -224],
        [32, -416, -192],
        [32, 416, -192],
        [32, -416, -160],
        [32, 416, -160],
        [32, -416, -128],
        [32, 416, -128],
        [32, -416, -96],
        [32, 416, -96],
        [32, -416, -64],
        [32, 416, -64],
        [32, -416, -32],
        [32, 416, -32],
        [32, -416, 0],
        [32, 416, 0],
        [32, -416, 32],
        [32, 416, 32],
        [32, -416, 64],
        [32, 416, 64],
        [32, -416, 96],
        [32, 416, 96],
        [32, -416, 128],
        [32, 416, 128],
        [32, -416, 160],
        [32, 416, 160],
        [32, -416, 192],
        [32, 416, 192],
        [32, -416, 224],
        [32, 416, 224],
        [32, -416, 256],
        [32, 416, 256],
        [32, -416, 288],
        [32, 416, 288],
        [32, -416, 320],
        [32, 416, 320],
        [32, -416, 352],
        [32, 416, 352],
        [32, -416, 384],
        [32, 416, 384],
        [64, -416, -416],
        [64, -416, 416],
        [64, -384, -416],
        [64, -384, 416],
        [64, -352, -416],
        [64, -352, 416],
        [64, -320, -416],
        [64, -320, 416],
        [64, -288, -416],
        [64, -288, 416],
        [64, -256, -416],
        [64, -256, 416],
        [64, -224, -416],
        [64, -224, 416],
        [64, -192, -416],
        [64, -192, 416],
        [64, -160, -416],
        [64, -160, 416],
        [64, -128, -416],
        [64, -128, 416],
        [64, -96, -416],
        [64, -96, 416],
        [64, -64, -416],
        [64, -64, 416],
        [64, -32, -416],
        [64, -32, 416],
        [64, 0, -416],
        [64, 0, 416],
        [64, 32, -416],
        [64, 32, 416],
        [64, 64, -416],
        [64, 64, 416],
        [64, 96, -416],
        [64, 96, 416],
        [64, 128, -416],
        [64, 128, 416],
        [64, 160, -416],
        [64, 160, 416],
        [64, 192, -416],
        [64, 192, 416],
        [64, 224, -416],
        [64, 224, 416],
        [64, 256, -416],
        [64, 256, 416],
        [64, 288, -416],
        [64, 288, 416],
        [64, 320, -416],
        [64, 320, 416],
        [64, 352, -416],
        [64, 352, 416],
        [64, 384, -416],
        [64, 384, 416],
        [64, 416, -416],
        [64, 416, 416],
        [64, -416, -384],
        [64, 416, -384],
        [64, -416, -352],
        [64, 416, -352],
        [64, -416, -320],
        [64, 416, -320],
        [64, -416, -288],
        [64, 416, -288],
        [64, -416, -256],
        [64, 416, -256],
        [64, -416, -224],
        [64, 416, -224],
        [64, -416, -192],
        [64, 416, -192],
        [64, -416, -160],
        [64, 416, -160],
        [64, -416, -128],
        [64, 416, -128],
        [64, -416, -96],
        [64, 416, -96],
        [64, -416, -64],
        [64, 416, -64],
        [64, -416, -32],
        [64, 416, -32],
        [64, -416, 0],
        [64, 416, 0],
        [64, -416, 32],
        [64, 416, 32],
        [64, -416, 64],
        [64, 416, 64],
        [64, -416, 96],
        [64, 416, 96],
        [64, -416, 128],
        [64, 416, 128],
        [64, -416, 160],
        [64, 416, 160],
        [64, -416, 192],
        [64, 416, 192],
        [64, -416, 224],
        [64, 416, 224],
        [64, -416, 256],
        [64, 416, 256],
        [64, -416, 288],
        [64, 416, 288],
        [64, -416, 320],
        [64, 416, 320],
        [64, -416, 352],
        [64, 416, 352],
        [64, -416, 384],
        [64, 416, 384],
        [96, -416, -416],
        [96, -416, 416],
        [96, -384, -416],
        [96, -384, 416],
        [96, -352, -416],
        [96, -352, 416],
        [96, -320, -416],
        [96, -320, 416],
        [96, -288, -416],
        [96, -288, 416],
        [96, -256, -416],
        [96, -256, 416],
        [96, -224, -416],
        [96, -224, 416],
        [96, -192, -416],
        [96, -192, 416],
        [96, -160, -416],
        [96, -160, 416],
        [96, -128, -416],
        [96, -128, 416],
        [96, -96, -416],
        [96, -96, 416],
        [96, -64, -416],
        [96, -64, 416],
        [96, -32, -416],
        [96, -32, 416],
        [96, 0, -416],
        [96, 0, 416],
        [96, 32, -416],
        [96, 32, 416],
        [96, 64, -416],
        [96, 64, 416],
        [96, 96, -416],
        [96, 96, 416],
        [96, 128, -416],
        [96, 128, 416],
        [96, 160, -416],
        [96, 160, 416],
        [96, 192, -416],
        [96, 192, 416],
        [96, 224, -416],
        [96, 224, 416],
        [96, 256, -416],
        [96, 256, 416],
        [96, 288, -416],
        [96, 288, 416],
        [96, 320, -416],
        [96, 320, 416],
        [96, 352, -416],
        [96, 352, 416],
        [96, 384, -416],
        [96, 384, 416],
        [96, 416, -416],
        [96, 416, 416],
        [96, -416, -384],
        [96, 416, -384],
        [96, -416, -352],
        [96, 416, -352],
        [96, -416, -320],
        [96, 416, -320],
        [96, -416, -288],
        [96, 416, -288],
        [96, -416, -256],
        [96, 416, -256],
        [96, -416, -224],
        [96, 416, -224],
        [96, -416, -192],
        [96, 416, -192],
        [96, -416, -160],
        [96, 416, -160],
        [96, -416, -128],
        [96, 416, -128],
        [96, -416, -96],
        [96, 416, -96],
        [96, -416, -64],
        [96, 416, -64],
        [96, -416, -32],
        [96, 416, -32],
        [96, -416, 0],
        [96, 416, 0],
        [96, -416, 32],
        [96, 416, 32],
        [96, -416, 64],
        [96, 416, 64],
        [96, -416, 96],
        [96, 416, 96],
        [96, -416, 128],
        [96, 416, 128],
        [96, -416, 160],
        [96, 416, 160],
        [96, -416, 192],
        [96, 416, 192],
        [96, -416, 224],
        [96, 416, 224],
        [96, -416, 256],
        [96, 416, 256],
        [96, -416, 288],
        [96, 416, 288],
        [96, -416, 320],
        [96, 416, 320],
        [96, -416, 352],
        [96, 416, 352],
        [96, -416, 384],
        [96, 416, 384],
        [128, -416, -416],
        [128, -416, 416],
        [128, -384, -416],
        [128, -384, 416],
        [128, -352, -416],
        [128, -352, 416],
        [128, -320, -416],
        [128, -320, 416],
        [128, -288, -416],
        [128, -288, 416],
        [128, -256, -416],
        [128, -256, 416],
        [128, -224, -416],
        [128, -224, 416],
        [128, -192, -416],
        [128, -192, 416],
        [128, -160, -416],
        [128, -160, 416],
        [128, -128, -416],
        [128, -128, 416],
        [128, -96, -416],
        [128, -96, 416],
        [128, -64, -416],
        [128, -64, 416],
        [128, -32, -416],
        [128, -32, 416],
        [128, 0, -416],
        [128, 0, 416],
        [128, 32, -416],
        [128, 32, 416],
        [128, 64, -416],
        [128, 64, 416],
        [128, 96, -416],
        [128, 96, 416],
        [128, 128, -416],
        [128, 128, 416],
        [128, 160, -416],
        [128, 160, 416],
        [128, 192, -416],
        [128, 192, 416],
        [128, 224, -416],
        [128, 224, 416],
        [128, 256, -416],
        [128, 256, 416],
        [128, 288, -416],
        [128, 288, 416],
        [128, 320, -416],
        [128, 320, 416],
        [128, 352, -416],
        [128, 352, 416],
        [128, 384, -416],
        [128, 384, 416],
        [128, 416, -416],
        [128, 416, 416],
        [128, -416, -384],
        [128, 416, -384],
        [128, -416, -352],
        [128, 416, -352],
        [128, -416, -320],
        [128, 416, -320],
        [128, -416, -288],
        [128, 416, -288],
        [128, -416, -256],
        [128, 416, -256],
        [128, -416, -224],
        [128, 416, -224],
        [128, -416, -192],
        [128, 416, -192],
        [128, -416, -160],
        [128, 416, -160],
        [128, -416, -128],
        [128, 416, -128],
        [128, -416, -96],
        [128, 416, -96],
        [128, -416, -64],
        [128, 416, -64],
        [128, -416, -32],
        [128, 416, -32],
        [128, -416, 0],
        [128, 416, 0],
        [128, -416, 32],
        [128, 416, 32],
        [128, -416, 64],
        [128, 416, 64],
        [128, -416, 96],
        [128, 416, 96],
        [128, -416, 128],
        [128, 416, 128],
        [128, -416, 160],
        [128, 416, 160],
        [128, -416, 192],
        [128, 416, 192],
        [128, -416, 224],
        [128, 416, 224],
        [128, -416, 256],
        [128, 416, 256],
        [128, -416, 288],
        [128, 416, 288],
        [128, -416, 320],
        [128, 416, 320],
        [128, -416, 352],
        [128, 416, 352],
        [128, -416, 384],
        [128, 416, 384],
        [160, -416, -416],
        [160, -416, 416],
        [160, -384, -416],
        [160, -384, 416],
        [160, -352, -416],
        [160, -352, 416],
        [160, -320, -416],
        [160, -320, 416],
        [160, -288, -416],
        [160, -288, 416],
        [160, -256, -416],
        [160, -256, 416],
        [160, -224, -416],
        [160, -224, 416],
        [160, -192, -416],
        [160, -192, 416],
        [160, -160, -416],
        [160, -160, 416],
        [160, -128, -416],
        [160, -128, 416],
        [160, -96, -416],
        [160, -96, 416],
        [160, -64, -416],
        [160, -64, 416],
        [160, -32, -416],
        [160, -32, 416],
        [160, 0, -416],
        [160, 0, 416],
        [160, 32, -416],
        [160, 32, 416],
        [160, 64, -416],
        [160, 64, 416],
        [160, 96, -416],
        [160, 96, 416],
        [160, 128, -416],
        [160, 128, 416],
        [160, 160, -416],
        [160, 160, 416],
        [160, 192, -416],
        [160, 192, 416],
        [160, 224, -416],
        [160, 224, 416],
        [160, 256, -416],
        [160, 256, 416],
        [160, 288, -416],
        [160, 288, 416],
        [160, 320, -416],
        [160, 320, 416],
        [160, 352, -416],
        [160, 352, 416],
        [160, 384, -416],
        [160, 384, 416],
        [160, 416, -416],
        [160, 416, 416],
        [160, -416, -384],
        [160, 416, -384],
        [160, -416, -352],
        [160, 416, -352],
        [160, -416, -320],
        [160, 416, -320],
        [160, -416, -288],
        [160, 416, -288],
        [160, -416, -256],
        [160, 416, -256],
        [160, -416, -224],
        [160, 416, -224],
        [160, -416, -192],
        [160, 416, -192],
        [160, -416, -160],
        [160, 416, -160],
        [160, -416, -128],
        [160, 416, -128],
        [160, -416, -96],
        [160, 416, -96],
        [160, -416, -64],
        [160, 416, -64],
        [160, -416, -32],
        [160, 416, -32],
        [160, -416, 0],
        [160, 416, 0],
        [160, -416, 32],
        [160, 416, 32],
        [160, -416, 64],
        [160, 416, 64],
        [160, -416, 96],
        [160, 416, 96],
        [160, -416, 128],
        [160, 416, 128],
        [160, -416, 160],
        [160, 416, 160],
        [160, -416, 192],
        [160, 416, 192],
        [160, -416, 224],
        [160, 416, 224],
        [160, -416, 256],
        [160, 416, 256],
        [160, -416, 288],
        [160, 416, 288],
        [160, -416, 320],
        [160, 416, 320],
        [160, -416, 352],
        [160, 416, 352],
        [160, -416, 384],
        [160, 416, 384],
        [192, -416, -416],
        [192, -416, 416],
        [192, -384, -416],
        [192, -384, 416],
        [192, -352, -416],
        [192, -352, 416],
        [192, -320, -416],
        [192, -320, 416],
        [192, -288, -416],
        [192, -288, 416],
        [192, -256, -416],
        [192, -256, 416],
        [192, -224, -416],
        [192, -224, 416],
        [192, -192, -416],
        [192, -192, 416],
        [192, -160, -416],
        [192, -160, 416],
        [192, -128, -416],
        [192, -128, 416],
        [192, -96, -416],
        [192, -96, 416],
        [192, -64, -416],
        [192, -64, 416],
        [192, -32, -416],
        [192, -32, 416],
        [192, 0, -416],
        [192, 0, 416],
        [192, 32, -416],
        [192, 32, 416],
        [192, 64, -416],
        [192, 64, 416],
        [192, 96, -416],
        [192, 96, 416],
        [192, 128, -416],
        [192, 128, 416],
        [192, 160, -416],
        [192, 160, 416],
        [192, 192, -416],
        [192, 192, 416],
        [192, 224, -416],
        [192, 224, 416],
        [192, 256, -416],
        [192, 256, 416],
        [192, 288, -416],
        [192, 288, 416],
        [192, 320, -416],
        [192, 320, 416],
        [192, 352, -416],
        [192, 352, 416],
        [192, 384, -416],
        [192, 384, 416],
        [192, 416, -416],
        [192, 416, 416],
        [192, -416, -384],
        [192, 416, -384],
        [192, -416, -352],
        [192, 416, -352],
        [192, -416, -320],
        [192, 416, -320],
        [192, -416, -288],
        [192, 416, -288],
        [192, -416, -256],
        [192, 416, -256],
        [192, -416, -224],
        [192, 416, -224],
        [192, -416, -192],
        [192, 416, -192],
        [192, -416, -160],
        [192, 416, -160],
        [192, -416, -128],
        [192, 416, -128],
        [192, -416, -96],
        [192, 416, -96],
        [192, -416, -64],
        [192, 416, -64],
        [192, -416, -32],
        [192, 416, -32],
        [192, -416, 0],
        [192, 416, 0],
        [192, -416, 32],
        [192, 416, 32],
        [192, -416, 64],
        [192, 416, 64],
        [192, -416, 96],
        [192, 416, 96],
        [192, -416, 128],
        [192, 416, 128],
        [192, -416, 160],
        [192, 416, 160],
        [192, -416, 192],
        [192, 416, 192],
        [192, -416, 224],
        [192, 416, 224],
        [192, -416, 256],
        [192, 416, 256],
        [192, -416, 288],
        [192, 416, 288],
        [192, -416, 320],
        [192, 416, 320],
        [192, -416, 352],
        [192, 416, 352],
        [192, -416, 384],
        [192, 416, 384],
        [224, -416, -416],
        [224, -416, 416],
        [224, -384, -416],
        [224, -384, 416],
        [224, -352, -416],
        [224, -352, 416],
        [224, -320, -416],
        [224, -320, 416],
        [224, -288, -416],
        [224, -288, 416],
        [224, -256, -416],
        [224, -256, 416],
        [224, -224, -416],
        [224, -224, 416],
        [224, -192, -416],
        [224, -192, 416],
        [224, -160, -416],
        [224, -160, 416],
        [224, -128, -416],
        [224, -128, 416],
        [224, -96, -416],
        [224, -96, 416],
        [224, -64, -416],
        [224, -64, 416],
        [224, -32, -416],
        [224, -32, 416],
        [224, 0, -416],
        [224, 0, 416],
        [224, 32, -416],
        [224, 32, 416],
        [224, 64, -416],
        [224, 64, 416],
        [224, 96, -416],
        [224, 96, 416],
        [224, 128, -416],
        [224, 128, 416],
        [224, 160, -416],
        [224, 160, 416],
        [224, 192, -416],
        [224, 192, 416],
        [224, 224, -416],
        [224, 224, 416],
        [224, 256, -416],
        [224, 256, 416],
        [224, 288, -416],
        [224, 288, 416],
        [224, 320, -416],
        [224, 320, 416],
        [224, 352, -416],
        [224, 352, 416],
        [224, 384, -416],
        [224, 384, 416],
        [224, 416, -416],
        [224, 416, 416],
        [224, -416, -384],
        [224, 416, -384],
        [224, -416, -352],
        [224, 416, -352],
        [224, -416, -320],
        [224, 416, -320],
        [224, -416, -288],
        [224, 416, -288],
        [224, -416, -256],
        [224, 416, -256],
        [224, -416, -224],
        [224, 416, -224],
        [224, -416, -192],
        [224, 416, -192],
        [224, -416, -160],
        [224, 416, -160],
        [224, -416, -128],
        [224, 416, -128],
        [224, -416, -96],
        [224, 416, -96],
        [224, -416, -64],
        [224, 416, -64],
        [224, -416, -32],
        [224, 416, -32],
        [224, -416, 0],
        [224, 416, 0],
        [224, -416, 32],
        [224, 416, 32],
        [224, -416, 64],
        [224, 416, 64],
        [224, -416, 96],
        [224, 416, 96],
        [224, -416, 128],
        [224, 416, 128],
        [224, -416, 160],
        [224, 416, 160],
        [224, -416, 192],
        [224, 416, 192],
        [224, -416, 224],
        [224, 416, 224],
        [224, -416, 256],
        [224, 416, 256],
        [224, -416, 288],
        [224, 416, 288],
        [224, -416, 320],
        [224, 416, 320],
        [224, -416, 352],
        [224, 416, 352],
        [224, -416, 384],
        [224, 416, 384],
        [256, -416, -416],
        [256, -416, 416],
        [256, -384, -416],
        [256, -384, 416],
        [256, -352, -416],
        [256, -352, 416],
        [256, -320, -416],
        [256, -320, 416],
        [256, -288, -416],
        [256, -288, 416],
        [256, -256, -416],
        [256, -256, 416],
        [256, -224, -416],
        [256, -224, 416],
        [256, -192, -416],
        [256, -192, 416],
        [256, -160, -416],
        [256, -160, 416],
        [256, -128, -416],
        [256, -128, 416],
        [256, -96, -416],
        [256, -96, 416],
        [256, -64, -416],
        [256, -64, 416],
        [256, -32, -416],
        [256, -32, 416],
        [256, 0, -416],
        [256, 0, 416],
        [256, 32, -416],
        [256, 32, 416],
        [256, 64, -416],
        [256, 64, 416],
        [256, 96, -416],
        [256, 96, 416],
        [256, 128, -416],
        [256, 128, 416],
        [256, 160, -416],
        [256, 160, 416],
        [256, 192, -416],
        [256, 192, 416],
        [256, 224, -416],
        [256, 224, 416],
        [256, 256, -416],
        [256, 256, 416],
        [256, 288, -416],
        [256, 288, 416],
        [256, 320, -416],
        [256, 320, 416],
        [256, 352, -416],
        [256, 352, 416],
        [256, 384, -416],
        [256, 384, 416],
        [256, 416, -416],
        [256, 416, 416],
        [256, -416, -384],
        [256, 416, -384],
        [256, -416, -352],
        [256, 416, -352],
        [256, -416, -320],
        [256, 416, -320],
        [256, -416, -288],
        [256, 416, -288],
        [256, -416, -256],
        [256, 416, -256],
        [256, -416, -224],
        [256, 416, -224],
        [256, -416, -192],
        [256, 416, -192],
        [256, -416, -160],
        [256, 416, -160],
        [256, -416, -128],
        [256, 416, -128],
        [256, -416, -96],
        [256, 416, -96],
        [256, -416, -64],
        [256, 416, -64],
        [256, -416, -32],
        [256, 416, -32],
        [256, -416, 0],
        [256, 416, 0],
        [256, -416, 32],
        [256, 416, 32],
        [256, -416, 64],
        [256, 416, 64],
        [256, -416, 96],
        [256, 416, 96],
        [256, -416, 128],
        [256, 416, 128],
        [256, -416, 160],
        [256, 416, 160],
        [256, -416, 192],
        [256, 416, 192],
        [256, -416, 224],
        [256, 416, 224],
        [256, -416, 256],
        [256, 416, 256],
        [256, -416, 288],
        [256, 416, 288],
        [256, -416, 320],
        [256, 416, 320],
        [256, -416, 352],
        [256, 416, 352],
        [256, -416, 384],
        [256, 416, 384],
        [288, -416, -416],
        [288, -416, 416],
        [288, -384, -416],
        [288, -384, 416],
        [288, -352, -416],
        [288, -352, 416],
        [288, -320, -416],
        [288, -320, 416],
        [288, -288, -416],
        [288, -288, 416],
        [288, -256, -416],
        [288, -256, 416],
        [288, -224, -416],
        [288, -224, 416],
        [288, -192, -416],
        [288, -192, 416],
        [288, -160, -416],
        [288, -160, 416],
        [288, -128, -416],
        [288, -128, 416],
        [288, -96, -416],
        [288, -96, 416],
        [288, -64, -416],
        [288, -64, 416],
        [288, -32, -416],
        [288, -32, 416],
        [288, 0, -416],
        [288, 0, 416],
        [288, 32, -416],
        [288, 32, 416],
        [288, 64, -416],
        [288, 64, 416],
        [288, 96, -416],
        [288, 96, 416],
        [288, 128, -416],
        [288, 128, 416],
        [288, 160, -416],
        [288, 160, 416],
        [288, 192, -416],
        [288, 192, 416],
        [288, 224, -416],
        [288, 224, 416],
        [288, 256, -416],
        [288, 256, 416],
        [288, 288, -416],
        [288, 288, 416],
        [288, 320, -416],
        [288, 320, 416],
        [288, 352, -416],
        [288, 352, 416],
        [288, 384, -416],
        [288, 384, 416],
        [288, 416, -416],
        [288, 416, 416],
        [288, -416, -384],
        [288, 416, -384],
        [288, -416, -352],
        [288, 416, -352],
        [288, -416, -320],
        [288, 416, -320],
        [288, -416, -288],
        [288, 416, -288],
        [288, -416, -256],
        [288, 416, -256],
        [288, -416, -224],
        [288, 416, -224],
        [288, -416, -192],
        [288, 416, -192],
        [288, -416, -160],
        [288, 416, -160],
        [288, -416, -128],
        [288, 416, -128],
        [288, -416, -96],
        [288, 416, -96],
        [288, -416, -64],
        [288, 416, -64],
        [288, -416, -32],
        [288, 416, -32],
        [288, -416, 0],
        [288, 416, 0],
        [288, -416, 32],
        [288, 416, 32],
        [288, -416, 64],
        [288, 416, 64],
        [288, -416, 96],
        [288, 416, 96],
        [288, -416, 128],
        [288, 416, 128],
        [288, -416, 160],
        [288, 416, 160],
        [288, -416, 192],
        [288, 416, 192],
        [288, -416, 224],
        [288, 416, 224],
        [288, -416, 256],
        [288, 416, 256],
        [288, -416, 288],
        [288, 416, 288],
        [288, -416, 320],
        [288, 416, 320],
        [288, -416, 352],
        [288, 416, 352],
        [288, -416, 384],
        [288, 416, 384],
        [320, -416, -416],
        [320, -416, 416],
        [320, -384, -416],
        [320, -384, 416],
        [320, -352, -416],
        [320, -352, 416],
        [320, -320, -416],
        [320, -320, 416],
        [320, -288, -416],
        [320, -288, 416],
        [320, -256, -416],
        [320, -256, 416],
        [320, -224, -416],
        [320, -224, 416],
        [320, -192, -416],
        [320, -192, 416],
        [320, -160, -416],
        [320, -160, 416],
        [320, -128, -416],
        [320, -128, 416],
        [320, -96, -416],
        [320, -96, 416],
        [320, -64, -416],
        [320, -64, 416],
        [320, -32, -416],
        [320, -32, 416],
        [320, 0, -416],
        [320, 0, 416],
        [320, 32, -416],
        [320, 32, 416],
        [320, 64, -416],
        [320, 64, 416],
        [320, 96, -416],
        [320, 96, 416],
        [320, 128, -416],
        [320, 128, 416],
        [320, 160, -416],
        [320, 160, 416],
        [320, 192, -416],
        [320, 192, 416],
        [320, 224, -416],
        [320, 224, 416],
        [320, 256, -416],
        [320, 256, 416],
        [320, 288, -416],
        [320, 288, 416],
        [320, 320, -416],
        [320, 320, 416],
        [320, 352, -416],
        [320, 352, 416],
        [320, 384, -416],
        [320, 384, 416],
        [320, 416, -416],
        [320, 416, 416],
        [320, -416, -384],
        [320, 416, -384],
        [320, -416, -352],
        [320, 416, -352],
        [320, -416, -320],
        [320, 416, -320],
        [320, -416, -288],
        [320, 416, -288],
        [320, -416, -256],
        [320, 416, -256],
        [320, -416, -224],
        [320, 416, -224],
        [320, -416, -192],
        [320, 416, -192],
        [320, -416, -160],
        [320, 416, -160],
        [320, -416, -128],
        [320, 416, -128],
        [320, -416, -96],
        [320, 416, -96],
        [320, -416, -64],
        [320, 416, -64],
        [320, -416, -32],
        [320, 416, -32],
        [320, -416, 0],
        [320, 416, 0],
        [320, -416, 32],
        [320, 416, 32],
        [320, -416, 64],
        [320, 416, 64],
        [320, -416, 96],
        [320, 416, 96],
        [320, -416, 128],
        [320, 416, 128],
        [320, -416, 160],
        [320, 416, 160],
        [320, -416, 192],
        [320, 416, 192],
        [320, -416, 224],
        [320, 416, 224],
        [320, -416, 256],
        [320, 416, 256],
        [320, -416, 288],
        [320, 416, 288],
        [320, -416, 320],
        [320, 416, 320],
        [320, -416, 352],
        [320, 416, 352],
        [320, -416, 384],
        [320, 416, 384],
        [352, -416, -416],
        [352, -416, 416],
        [352, -384, -416],
        [352, -384, 416],
        [352, -352, -416],
        [352, -352, 416],
        [352, -320, -416],
        [352, -320, 416],
        [352, -288, -416],
        [352, -288, 416],
        [352, -256, -416],
        [352, -256, 416],
        [352, -224, -416],
        [352, -224, 416],
        [352, -192, -416],
        [352, -192, 416],
        [352, -160, -416],
        [352, -160, 416],
        [352, -128, -416],
        [352, -128, 416],
        [352, -96, -416],
        [352, -96, 416],
        [352, -64, -416],
        [352, -64, 416],
        [352, -32, -416],
        [352, -32, 416],
        [352, 0, -416],
        [352, 0, 416],
        [352, 32, -416],
        [352, 32, 416],
        [352, 64, -416],
        [352, 64, 416],
        [352, 96, -416],
        [352, 96, 416],
        [352, 128, -416],
        [352, 128, 416],
        [352, 160, -416],
        [352, 160, 416],
        [352, 192, -416],
        [352, 192, 416],
        [352, 224, -416],
        [352, 224, 416],
        [352, 256, -416],
        [352, 256, 416],
        [352, 288, -416],
        [352, 288, 416],
        [352, 320, -416],
        [352, 320, 416],
        [352, 352, -416],
        [352, 352, 416],
        [352, 384, -416],
        [352, 384, 416],
        [352, 416, -416],
        [352, 416, 416],
        [352, -416, -384],
        [352, 416, -384],
        [352, -416, -352],
        [352, 416, -352],
        [352, -416, -320],
        [352, 416, -320],
        [352, -416, -288],
        [352, 416, -288],
        [352, -416, -256],
        [352, 416, -256],
        [352, -416, -224],
        [352, 416, -224],
        [352, -416, -192],
        [352, 416, -192],
        [352, -416, -160],
        [352, 416, -160],
        [352, -416, -128],
        [352, 416, -128],
        [352, -416, -96],
        [352, 416, -96],
        [352, -416, -64],
        [352, 416, -64],
        [352, -416, -32],
        [352, 416, -32],
        [352, -416, 0],
        [352, 416, 0],
        [352, -416, 32],
        [352, 416, 32],
        [352, -416, 64],
        [352, 416, 64],
        [352, -416, 96],
        [352, 416, 96],
        [352, -416, 128],
        [352, 416, 128],
        [352, -416, 160],
        [352, 416, 160],
        [352, -416, 192],
        [352, 416, 192],
        [352, -416, 224],
        [352, 416, 224],
        [352, -416, 256],
        [352, 416, 256],
        [352, -416, 288],
        [352, 416, 288],
        [352, -416, 320],
        [352, 416, 320],
        [352, -416, 352],
        [352, 416, 352],
        [352, -416, 384],
        [352, 416, 384],
        [384, -416, -416],
        [384, -416, 416],
        [384, -384, -416],
        [384, -384, 416],
        [384, -352, -416],
        [384, -352, 416],
        [384, -320, -416],
        [384, -320, 416],
        [384, -288, -416],
        [384, -288, 416],
        [384, -256, -416],
        [384, -256, 416],
        [384, -224, -416],
        [384, -224, 416],
        [384, -192, -416],
        [384, -192, 416],
        [384, -160, -416],
        [384, -160, 416],
        [384, -128, -416],
        [384, -128, 416],
        [384, -96, -416],
        [384, -96, 416],
        [384, -64, -416],
        [384, -64, 416],
        [384, -32, -416],
        [384, -32, 416],
        [384, 0, -416],
        [384, 0, 416],
        [384, 32, -416],
        [384, 32, 416],
        [384, 64, -416],
        [384, 64, 416],
        [384, 96, -416],
        [384, 96, 416],
        [384, 128, -416],
        [384, 128, 416],
        [384, 160, -416],
        [384, 160, 416],
        [384, 192, -416],
        [384, 192, 416],
        [384, 224, -416],
        [384, 224, 416],
        [384, 256, -416],
        [384, 256, 416],
        [384, 288, -416],
        [384, 288, 416],
        [384, 320, -416],
        [384, 320, 416],
        [384, 352, -416],
        [384, 352, 416],
        [384, 384, -416],
        [384, 384, 416],
        [384, 416, -416],
        [384, 416, 416],
        [384, -416, -384],
        [384, 416, -384],
        [384, -416, -352],
        [384, 416, -352],
        [384, -416, -320],
        [384, 416, -320],
        [384, -416, -288],
        [384, 416, -288],
        [384, -416, -256],
        [384, 416, -256],
        [384, -416, -224],
        [384, 416, -224],
        [384, -416, -192],
        [384, 416, -192],
        [384, -416, -160],
        [384, 416, -160],
        [384, -416, -128],
        [384, 416, -128],
        [384, -416, -96],
        [384, 416, -96],
        [384, -416, -64],
        [384, 416, -64],
        [384, -416, -32],
        [384, 416, -32],
        [384, -416, 0],
        [384, 416, 0],
        [384, -416, 32],
        [384, 416, 32],
        [384, -416, 64],
        [384, 416, 64],
        [384, -416, 96],
        [384, 416, 96],
        [384, -416, 128],
        [384, 416, 128],
        [384, -416, 160],
        [384, 416, 160],
        [384, -416, 192],
        [384, 416, 192],
        [384, -416, 224],
        [384, 416, 224],
        [384, -416, 256],
        [384, 416, 256],
        [384, -416, 288],
        [384, 416, 288],
        [384, -416, 320],
        [384, 416, 320],
        [384, -416, 352],
        [384, 416, 352],
        [384, -416, 384],
        [384, 416, 384],
        [416, -416, -416],
        [416, -416, 416],
        [416, -384, -416],
        [416, -384, 416],
        [416, -352, -416],
        [416, -352, 416],
        [416, -320, -416],
        [416, -320, 416],
        [416, -288, -416],
        [416, -288, 416],
        [416, -256, -416],
        [416, -256, 416],
        [416, -224, -416],
        [416, -224, 416],
        [416, -192, -416],
        [416, -192, 416],
        [416, -160, -416],
        [416, -160, 416],
        [416, -128, -416],
        [416, -128, 416],
        [416, -96, -416],
        [416, -96, 416],
        [416, -64, -416],
        [416, -64, 416],
        [416, -32, -416],
        [416, -32, 416],
        [416, 0, -416],
        [416, 0, 416],
        [416, 32, -416],
        [416, 32, 416],
        [416, 64, -416],
        [416, 64, 416],
        [416, 96, -416],
        [416, 96, 416],
        [416, 128, -416],
        [416, 128, 416],
        [416, 160, -416],
        [416, 160, 416],
        [416, 192, -416],
        [416, 192, 416],
        [416, 224, -416],
        [416, 224, 416],
        [416, 256, -416],
        [416, 256, 416],
        [416, 288, -416],
        [416, 288, 416],
        [416, 320, -416],
        [416, 320, 416],
        [416, 352, -416],
        [416, 352, 416],
        [416, 384, -416],
        [416, 384, 416],
        [416, 416, -416],
        [416, 416, 416],
        [416, -416, -384],
        [416, 416, -384],
        [416, -416, -352],
        [416, 416, -352],
        [416, -416, -320],
        [416, 416, -320],
        [416, -416, -288],
        [416, 416, -288],
        [416, -416, -256],
        [416, 416, -256],
        [416, -416, -224],
        [416, 416, -224],
        [416, -416, -192],
        [416, 416, -192],
        [416, -416, -160],
        [416, 416, -160],
        [416, -416, -128],
        [416, 416, -128],
        [416, -416, -96],
        [416, 416, -96],
        [416, -416, -64],
        [416, 416, -64],
        [416, -416, -32],
        [416, 416, -32],
        [416, -416, 0],
        [416, 416, 0],
        [416, -416, 32],
        [416, 416, 32],
        [416, -416, 64],
        [416, 416, 64],
        [416, -416, 96],
        [416, 416, 96],
        [416, -416, 128],
        [416, 416, 128],
        [416, -416, 160],
        [416, 416, 160],
        [416, -416, 192],
        [416, 416, 192],
        [416, -416, 224],
        [416, 416, 224],
        [416, -416, 256],
        [416, 416, 256],
        [416, -416, 288],
        [416, 416, 288],
        [416, -416, 320],
        [416, 416, 320],
        [416, -416, 352],
        [416, 416, 352],
        [416, -416, 384],
        [416, 416, 384],
        [-416, -384, -384],
        [416, -384, -384],
        [-416, -352, -384],
        [416, -352, -384],
        [-416, -320, -384],
        [416, -320, -384],
        [-416, -288, -384],
        [416, -288, -384],
        [-416, -256, -384],
        [416, -256, -384],
        [-416, -224, -384],
        [416, -224, -384],
        [-416, -192, -384],
        [416, -192, -384],
        [-416, -160, -384],
        [416, -160, -384],
        [-416, -128, -384],
        [416, -128, -384],
        [-416, -96, -384],
        [416, -96, -384],
        [-416, -64, -384],
        [416, -64, -384],
        [-416, -32, -384],
        [416, -32, -384],
        [-416, 0, -384],
        [416, 0, -384],
        [-416, 32, -384],
        [416, 32, -384],
        [-416, 64, -384],
        [416, 64, -384],
        [-416, 96, -384],
        [416, 96, -384],
        [-416, 128, -384],
        [416, 128, -384],
        [-416, 160, -384],
        [416, 160, -384],
        [-416, 192, -384],
        [416, 192, -384],
        [-416, 224, -384],
        [416, 224, -384],
        [-416, 256, -384],
        [416, 256, -384],
        [-416, 288, -384],
        [416, 288, -384],
        [-416, 320, -384],
        [416, 320, -384],
        [-416, 352, -384],
        [416, 352, -384],
        [-416, 384, -384],
        [416, 384, -384],
        [-416, -384, -352],
        [416, -384, -352],
        [-416, -352, -352],
        [416, -352, -352],
        [-416, -320, -352],
        [416, -320, -352],
        [-416, -288, -352],
        [416, -288, -352],
        [-416, -256, -352],
        [416, -256, -352],
        [-416, -224, -352],
        [416, -224, -352],
        [-416, -192, -352],
        [416, -192, -352],
        [-416, -160, -352],
        [416, -160, -352],
        [-416, -128, -352],
        [416, -128, -352],
        [-416, -96, -352],
        [416, -96, -352],
        [-416, -64, -352],
        [416, -64, -352],
        [-416, -32, -352],
        [416, -32, -352],
        [-416, 0, -352],
        [416, 0, -352],
        [-416, 32, -352],
        [416, 32, -352],
        [-416, 64, -352],
        [416, 64, -352],
        [-416, 96, -352],
        [416, 96, -352],
        [-416, 128, -352],
        [416, 128, -352],
        [-416, 160, -352],
        [416, 160, -352],
        [-416, 192, -352],
        [416, 192, -352],
        [-416, 224, -352],
        [416, 224, -352],
        [-416, 256, -352],
        [416, 256, -352],
        [-416, 288, -352],
        [416, 288, -352],
        [-416, 320, -352],
        [416, 320, -352],
        [-416, 352, -352],
        [416, 352, -352],
        [-416, 384, -352],
        [416, 384, -352],
        [-416, -384, -320],
        [416, -384, -320],
        [-416, -352, -320],
        [416, -352, -320],
        [-416, -320, -320],
        [416, -320, -320],
        [-416, -288, -320],
        [416, -288, -320],
        [-416, -256, -320],
        [416, -256, -320],
        [-416, -224, -320],
        [416, -224, -320],
        [-416, -192, -320],
        [416, -192, -320],
        [-416, -160, -320],
        [416, -160, -320],
        [-416, -128, -320],
        [416, -128, -320],
        [-416, -96, -320],
        [416, -96, -320],
        [-416, -64, -320],
        [416, -64, -320],
        [-416, -32, -320],
        [416, -32, -320],
        [-416, 0, -320],
        [416, 0, -320],
        [-416, 32, -320],
        [416, 32, -320],
        [-416, 64, -320],
        [416, 64, -320],
        [-416, 96, -320],
        [416, 96, -320],
        [-416, 128, -320],
        [416, 128, -320],
        [-416, 160, -320],
        [416, 160, -320],
        [-416, 192, -320],
        [416, 192, -320],
        [-416, 224, -320],
        [416, 224, -320],
        [-416, 256, -320],
        [416, 256, -320],
        [-416, 288, -320],
        [416, 288, -320],
        [-416, 320, -320],
        [416, 320, -320],
        [-416, 352, -320],
        [416, 352, -320],
        [-416, 384, -320],
        [416, 384, -320],
        [-416, -384, -288],
        [416, -384, -288],
        [-416, -352, -288],
        [416, -352, -288],
        [-416, -320, -288],
        [416, -320, -288],
        [-416, -288, -288],
        [416, -288, -288],
        [-416, -256, -288],
        [416, -256, -288],
        [-416, -224, -288],
        [416, -224, -288],
        [-416, -192, -288],
        [416, -192, -288],
        [-416, -160, -288],
        [416, -160, -288],
        [-416, -128, -288],
        [416, -128, -288],
        [-416, -96, -288],
        [416, -96, -288],
        [-416, -64, -288],
        [416, -64, -288],
        [-416, -32, -288],
        [416, -32, -288],
        [-416, 0, -288],
        [416, 0, -288],
        [-416, 32, -288],
        [416, 32, -288],
        [-416, 64, -288],
        [416, 64, -288],
        [-416, 96, -288],
        [416, 96, -288],
        [-416, 128, -288],
        [416, 128, -288],
        [-416, 160, -288],
        [416, 160, -288],
        [-416, 192, -288],
        [416, 192, -288],
        [-416, 224, -288],
        [416, 224, -288],
        [-416, 256, -288],
        [416, 256, -288],
        [-416, 288, -288],
        [416, 288, -288],
        [-416, 320, -288],
        [416, 320, -288],
        [-416, 352, -288],
        [416, 352, -288],
        [-416, 384, -288],
        [416, 384, -288],
        [-416, -384, -256],
        [416, -384, -256],
        [-416, -352, -256],
        [416, -352, -256],
        [-416, -320, -256],
        [416, -320, -256],
        [-416, -288, -256],
        [416, -288, -256],
        [-416, -256, -256],
        [416, -256, -256],
        [-416, -224, -256],
        [416, -224, -256],
        [-416, -192, -256],
        [416, -192, -256],
        [-416, -160, -256],
        [416, -160, -256],
        [-416, -128, -256],
        [416, -128, -256],
        [-416, -96, -256],
        [416, -96, -256],
        [-416, -64, -256],
        [416, -64, -256],
        [-416, -32, -256],
        [416, -32, -256],
        [-416, 0, -256],
        [416, 0, -256],
        [-416, 32, -256],
        [416, 32, -256],
        [-416, 64, -256],
        [416, 64, -256],
        [-416, 96, -256],
        [416, 96, -256],
        [-416, 128, -256],
        [416, 128, -256],
        [-416, 160, -256],
        [416, 160, -256],
        [-416, 192, -256],
        [416, 192, -256],
        [-416, 224, -256],
        [416, 224, -256],
        [-416, 256, -256],
        [416, 256, -256],
        [-416, 288, -256],
        [416, 288, -256],
        [-416, 320, -256],
        [416, 320, -256],
        [-416, 352, -256],
        [416, 352, -256],
        [-416, 384, -256],
        [416, 384, -256],
        [-416, -384, -224],
        [416, -384, -224],
        [-416, -352, -224],
        [416, -352, -224],
        [-416, -320, -224],
        [416, -320, -224],
        [-416, -288, -224],
        [416, -288, -224],
        [-416, -256, -224],
        [416, -256, -224],
        [-416, -224, -224],
        [416, -224, -224],
        [-416, -192, -224],
        [416, -192, -224],
        [-416, -160, -224],
        [416, -160, -224],
        [-416, -128, -224],
        [416, -128, -224],
        [-416, -96, -224],
        [416, -96, -224],
        [-416, -64, -224],
        [416, -64, -224],
        [-416, -32, -224],
        [416, -32, -224],
        [-416, 0, -224],
        [416, 0, -224],
        [-416, 32, -224],
        [416, 32, -224],
        [-416, 64, -224],
        [416, 64, -224],
        [-416, 96, -224],
        [416, 96, -224],
        [-416, 128, -224],
        [416, 128, -224],
        [-416, 160, -224],
        [416, 160, -224],
        [-416, 192, -224],
        [416, 192, -224],
        [-416, 224, -224],
        [416, 224, -224],
        [-416, 256, -224],
        [416, 256, -224],
        [-416, 288, -224],
        [416, 288, -224],
        [-416, 320, -224],
        [416, 320, -224],
        [-416, 352, -224],
        [416, 352, -224],
        [-416, 384, -224],
        [416, 384, -224],
        [-416, -384, -192],
        [416, -384, -192],
        [-416, -352, -192],
        [416, -352, -192],
        [-416, -320, -192],
        [416, -320, -192],
        [-416, -288, -192],
        [416, -288, -192],
        [-416, -256, -192],
        [416, -256, -192],
        [-416, -224, -192],
        [416, -224, -192],
        [-416, -192, -192],
        [416, -192, -192],
        [-416, -160, -192],
        [416, -160, -192],
        [-416, -128, -192],
        [416, -128, -192],
        [-416, -96, -192],
        [416, -96, -192],
        [-416, -64, -192],
        [416, -64, -192],
        [-416, -32, -192],
        [416, -32, -192],
        [-416, 0, -192],
        [416, 0, -192],
        [-416, 32, -192],
        [416, 32, -192],
        [-416, 64, -192],
        [416, 64, -192],
        [-416, 96, -192],
        [416, 96, -192],
        [-416, 128, -192],
        [416, 128, -192],
        [-416, 160, -192],
        [416, 160, -192],
        [-416, 192, -192],
        [416, 192, -192],
        [-416, 224, -192],
        [416, 224, -192],
        [-416, 256, -192],
        [416, 256, -192],
        [-416, 288, -192],
        [416, 288, -192],
        [-416, 320, -192],
        [416, 320, -192],
        [-416, 352, -192],
        [416, 352, -192],
        [-416, 384, -192],
        [416, 384, -192],
        [-416, -384, -160],
        [416, -384, -160],
        [-416, -352, -160],
        [416, -352, -160],
        [-416, -320, -160],
        [416, -320, -160],
        [-416, -288, -160],
        [416, -288, -160],
        [-416, -256, -160],
        [416, -256, -160],
        [-416, -224, -160],
        [416, -224, -160],
        [-416, -192, -160],
        [416, -192, -160],
        [-416, -160, -160],
        [416, -160, -160],
        [-416, -128, -160],
        [416, -128, -160],
        [-416, -96, -160],
        [416, -96, -160],
        [-416, -64, -160],
        [416, -64, -160],
        [-416, -32, -160],
        [416, -32, -160],
        [-416, 0, -160],
        [416, 0, -160],
        [-416, 32, -160],
        [416, 32, -160],
        [-416, 64, -160],
        [416, 64, -160],
        [-416, 96, -160],
        [416, 96, -160],
        [-416, 128, -160],
        [416, 128, -160],
        [-416, 160, -160],
        [416, 160, -160],
        [-416, 192, -160],
        [416, 192, -160],
        [-416, 224, -160],
        [416, 224, -160],
        [-416, 256, -160],
        [416, 256, -160],
        [-416, 288, -160],
        [416, 288, -160],
        [-416, 320, -160],
        [416, 320, -160],
        [-416, 352, -160],
        [416, 352, -160],
        [-416, 384, -160],
        [416, 384, -160],
        [-416, -384, -128],
        [416, -384, -128],
        [-416, -352, -128],
        [416, -352, -128],
        [-416, -320, -128],
        [416, -320, -128],
        [-416, -288, -128],
        [416, -288, -128],
        [-416, -256, -128],
        [416, -256, -128],
        [-416, -224, -128],
        [416, -224, -128],
        [-416, -192, -128],
        [416, -192, -128],
        [-416, -160, -128],
        [416, -160, -128],
        [-416, -128, -128],
        [416, -128, -128],
        [-416, -96, -128],
        [416, -96, -128],
        [-416, -64, -128],
        [416, -64, -128],
        [-416, -32, -128],
        [416, -32, -128],
        [-416, 0, -128],
        [416, 0, -128],
        [-416, 32, -128],
        [416, 32, -128],
        [-416, 64, -128],
        [416, 64, -128],
        [-416, 96, -128],
        [416, 96, -128],
        [-416, 128, -128],
        [416, 128, -128],
        [-416, 160, -128],
        [416, 160, -128],
        [-416, 192, -128],
        [416, 192, -128],
        [-416, 224, -128],
        [416, 224, -128],
        [-416, 256, -128],
        [416, 256, -128],
        [-416, 288, -128],
        [416, 288, -128],
        [-416, 320, -128],
        [416, 320, -128],
        [-416, 352, -128],
        [416, 352, -128],
        [-416, 384, -128],
        [416, 384, -128],
        [-416, -384, -96],
        [416, -384, -96],
        [-416, -352, -96],
        [416, -352, -96],
        [-416, -320, -96],
        [416, -320, -96],
        [-416, -288, -96],
        [416, -288, -96],
        [-416, -256, -96],
        [416, -256, -96],
        [-416, -224, -96],
        [416, -224, -96],
        [-416, -192, -96],
        [416, -192, -96],
        [-416, -160, -96],
        [416, -160, -96],
        [-416, -128, -96],
        [416, -128, -96],
        [-416, -96, -96],
        [416, -96, -96],
        [-416, -64, -96],
        [416, -64, -96],
        [-416, -32, -96],
        [416, -32, -96],
        [-416, 0, -96],
        [416, 0, -96],
        [-416, 32, -96],
        [416, 32, -96],
        [-416, 64, -96],
        [416, 64, -96],
        [-416, 96, -96],
        [416, 96, -96],
        [-416, 128, -96],
        [416, 128, -96],
        [-416, 160, -96],
        [416, 160, -96],
        [-416, 192, -96],
        [416, 192, -96],
        [-416, 224, -96],
        [416, 224, -96],
        [-416, 256, -96],
        [416, 256, -96],
        [-416, 288, -96],
        [416, 288, -96],
        [-416, 320, -96],
        [416, 320, -96],
        [-416, 352, -96],
        [416, 352, -96],
        [-416, 384, -96],
        [416, 384, -96],
        [-416, -384, -64],
        [416, -384, -64],
        [-416, -352, -64],
        [416, -352, -64],
        [-416, -320, -64],
        [416, -320, -64],
        [-416, -288, -64],
        [416, -288, -64],
        [-416, -256, -64],
        [416, -256, -64],
        [-416, -224, -64],
        [416, -224, -64],
        [-416, -192, -64],
        [416, -192, -64],
        [-416, -160, -64],
        [416, -160, -64],
        [-416, -128, -64],
        [416, -128, -64],
        [-416, -96, -64],
        [416, -96, -64],
        [-416, -64, -64],
        [416, -64, -64],
        [-416, -32, -64],
        [416, -32, -64],
        [-416, 0, -64],
        [416, 0, -64],
        [-416, 32, -64],
        [416, 32, -64],
        [-416, 64, -64],
        [416, 64, -64],
        [-416, 96, -64],
        [416, 96, -64],
        [-416, 128, -64],
        [416, 128, -64],
        [-416, 160, -64],
        [416, 160, -64],
        [-416, 192, -64],
        [416, 192, -64],
        [-416, 224, -64],
        [416, 224, -64],
        [-416, 256, -64],
        [416, 256, -64],
        [-416, 288, -64],
        [416, 288, -64],
        [-416, 320, -64],
        [416, 320, -64],
        [-416, 352, -64],
        [416, 352, -64],
        [-416, 384, -64],
        [416, 384, -64],
        [-416, -384, -32],
        [416, -384, -32],
        [-416, -352, -32],
        [416, -352, -32],
        [-416, -320, -32],
        [416, -320, -32],
        [-416, -288, -32],
        [416, -288, -32],
        [-416, -256, -32],
        [416, -256, -32],
        [-416, -224, -32],
        [416, -224, -32],
        [-416, -192, -32],
        [416, -192, -32],
        [-416, -160, -32],
        [416, -160, -32],
        [-416, -128, -32],
        [416, -128, -32],
        [-416, -96, -32],
        [416, -96, -32],
        [-416, -64, -32],
        [416, -64, -32],
        [-416, -32, -32],
        [416, -32, -32],
        [-416, 0, -32],
        [416, 0, -32],
        [-416, 32, -32],
        [416, 32, -32],
        [-416, 64, -32],
        [416, 64, -32],
        [-416, 96, -32],
        [416, 96, -32],
        [-416, 128, -32],
        [416, 128, -32],
        [-416, 160, -32],
        [416, 160, -32],
        [-416, 192, -32],
        [416, 192, -32],
        [-416, 224, -32],
        [416, 224, -32],
        [-416, 256, -32],
        [416, 256, -32],
        [-416, 288, -32],
        [416, 288, -32],
        [-416, 320, -32],
        [416, 320, -32],
        [-416, 352, -32],
        [416, 352, -32],
        [-416, 384, -32],
        [416, 384, -32],
        [-416, -384, 0],
        [416, -384, 0],
        [-416, -352, 0],
        [416, -352, 0],
        [-416, -320, 0],
        [416, -320, 0],
        [-416, -288, 0],
        [416, -288, 0],
        [-416, -256, 0],
        [416, -256, 0],
        [-416, -224, 0],
        [416, -224, 0],
        [-416, -192, 0],
        [416, -192, 0],
        [-416, -160, 0],
        [416, -160, 0],
        [-416, -128, 0],
        [416, -128, 0],
        [-416, -96, 0],
        [416, -96, 0],
        [-416, -64, 0],
        [416, -64, 0],
        [-416, -32, 0],
        [416, -32, 0],
        [-416, 0, 0],
        [416, 0, 0],
        [-416, 32, 0],
        [416, 32, 0],
        [-416, 64, 0],
        [416, 64, 0],
        [-416, 96, 0],
        [416, 96, 0],
        [-416, 128, 0],
        [416, 128, 0],
        [-416, 160, 0],
        [416, 160, 0],
        [-416, 192, 0],
        [416, 192, 0],
        [-416, 224, 0],
        [416, 224, 0],
        [-416, 256, 0],
        [416, 256, 0],
        [-416, 288, 0],
        [416, 288, 0],
        [-416, 320, 0],
        [416, 320, 0],
        [-416, 352, 0],
        [416, 352, 0],
        [-416, 384, 0],
        [416, 384, 0],
        [-416, -384, 32],
        [416, -384, 32],
        [-416, -352, 32],
        [416, -352, 32],
        [-416, -320, 32],
        [416, -320, 32],
        [-416, -288, 32],
        [416, -288, 32],
        [-416, -256, 32],
        [416, -256, 32],
        [-416, -224, 32],
        [416, -224, 32],
        [-416, -192, 32],
        [416, -192, 32],
        [-416, -160, 32],
        [416, -160, 32],
        [-416, -128, 32],
        [416, -128, 32],
        [-416, -96, 32],
        [416, -96, 32],
        [-416, -64, 32],
        [416, -64, 32],
        [-416, -32, 32],
        [416, -32, 32],
        [-416, 0, 32],
        [416, 0, 32],
        [-416, 32, 32],
        [416, 32, 32],
        [-416, 64, 32],
        [416, 64, 32],
        [-416, 96, 32],
        [416, 96, 32],
        [-416, 128, 32],
        [416, 128, 32],
        [-416, 160, 32],
        [416, 160, 32],
        [-416, 192, 32],
        [416, 192, 32],
        [-416, 224, 32],
        [416, 224, 32],
        [-416, 256, 32],
        [416, 256, 32],
        [-416, 288, 32],
        [416, 288, 32],
        [-416, 320, 32],
        [416, 320, 32],
        [-416, 352, 32],
        [416, 352, 32],
        [-416, 384, 32],
        [416, 384, 32],
        [-416, -384, 64],
        [416, -384, 64],
        [-416, -352, 64],
        [416, -352, 64],
        [-416, -320, 64],
        [416, -320, 64],
        [-416, -288, 64],
        [416, -288, 64],
        [-416, -256, 64],
        [416, -256, 64],
        [-416, -224, 64],
        [416, -224, 64],
        [-416, -192, 64],
        [416, -192, 64],
        [-416, -160, 64],
        [416, -160, 64],
        [-416, -128, 64],
        [416, -128, 64],
        [-416, -96, 64],
        [416, -96, 64],
        [-416, -64, 64],
        [416, -64, 64],
        [-416, -32, 64],
        [416, -32, 64],
        [-416, 0, 64],
        [416, 0, 64],
        [-416, 32, 64],
        [416, 32, 64],
        [-416, 64, 64],
        [416, 64, 64],
        [-416, 96, 64],
        [416, 96, 64],
        [-416, 128, 64],
        [416, 128, 64],
        [-416, 160, 64],
        [416, 160, 64],
        [-416, 192, 64],
        [416, 192, 64],
        [-416, 224, 64],
        [416, 224, 64],
        [-416, 256, 64],
        [416, 256, 64],
        [-416, 288, 64],
        [416, 288, 64],
        [-416, 320, 64],
        [416, 320, 64],
        [-416, 352, 64],
        [416, 352, 64],
        [-416, 384, 64],
        [416, 384, 64],
        [-416, -384, 96],
        [416, -384, 96],
        [-416, -352, 96],
        [416, -352, 96],
        [-416, -320, 96],
        [416, -320, 96],
        [-416, -288, 96],
        [416, -288, 96],
        [-416, -256, 96],
        [416, -256, 96],
        [-416, -224, 96],
        [416, -224, 96],
        [-416, -192, 96],
        [416, -192, 96],
        [-416, -160, 96],
        [416, -160, 96],
        [-416, -128, 96],
        [416, -128, 96],
        [-416, -96, 96],
        [416, -96, 96],
        [-416, -64, 96],
        [416, -64, 96],
        [-416, -32, 96],
        [416, -32, 96],
        [-416, 0, 96],
        [416, 0, 96],
        [-416, 32, 96],
        [416, 32, 96],
        [-416, 64, 96],
        [416, 64, 96],
        [-416, 96, 96],
        [416, 96, 96],
        [-416, 128, 96],
        [416, 128, 96],
        [-416, 160, 96],
        [416, 160, 96],
        [-416, 192, 96],
        [416, 192, 96],
        [-416, 224, 96],
        [416, 224, 96],
        [-416, 256, 96],
        [416, 256, 96],
        [-416, 288, 96],
        [416, 288, 96],
        [-416, 320, 96],
        [416, 320, 96],
        [-416, 352, 96],
        [416, 352, 96],
        [-416, 384, 96],
        [416, 384, 96],
        [-416, -384, 128],
        [416, -384, 128],
        [-416, -352, 128],
        [416, -352, 128],
        [-416, -320, 128],
        [416, -320, 128],
        [-416, -288, 128],
        [416, -288, 128],
        [-416, -256, 128],
        [416, -256, 128],
        [-416, -224, 128],
        [416, -224, 128],
        [-416, -192, 128],
        [416, -192, 128],
        [-416, -160, 128],
        [416, -160, 128],
        [-416, -128, 128],
        [416, -128, 128],
        [-416, -96, 128],
        [416, -96, 128],
        [-416, -64, 128],
        [416, -64, 128],
        [-416, -32, 128],
        [416, -32, 128],
        [-416, 0, 128],
        [416, 0, 128],
        [-416, 32, 128],
        [416, 32, 128],
        [-416, 64, 128],
        [416, 64, 128],
        [-416, 96, 128],
        [416, 96, 128],
        [-416, 128, 128],
        [416, 128, 128],
        [-416, 160, 128],
        [416, 160, 128],
        [-416, 192, 128],
        [416, 192, 128],
        [-416, 224, 128],
        [416, 224, 128],
        [-416, 256, 128],
        [416, 256, 128],
        [-416, 288, 128],
        [416, 288, 128],
        [-416, 320, 128],
        [416, 320, 128],
        [-416, 352, 128],
        [416, 352, 128],
        [-416, 384, 128],
        [416, 384, 128],
        [-416, -384, 160],
        [416, -384, 160],
        [-416, -352, 160],
        [416, -352, 160],
        [-416, -320, 160],
        [416, -320, 160],
        [-416, -288, 160],
        [416, -288, 160],
        [-416, -256, 160],
        [416, -256, 160],
        [-416, -224, 160],
        [416, -224, 160],
        [-416, -192, 160],
        [416, -192, 160],
        [-416, -160, 160],
        [416, -160, 160],
        [-416, -128, 160],
        [416, -128, 160],
        [-416, -96, 160],
        [416, -96, 160],
        [-416, -64, 160],
        [416, -64, 160],
        [-416, -32, 160],
        [416, -32, 160],
        [-416, 0, 160],
        [416, 0, 160],
        [-416, 32, 160],
        [416, 32, 160],
        [-416, 64, 160],
        [416, 64, 160],
        [-416, 96, 160],
        [416, 96, 160],
        [-416, 128, 160],
        [416, 128, 160],
        [-416, 160, 160],
        [416, 160, 160],
        [-416, 192, 160],
        [416, 192, 160],
        [-416, 224, 160],
        [416, 224, 160],
        [-416, 256, 160],
        [416, 256, 160],
        [-416, 288, 160],
        [416, 288, 160],
        [-416, 320, 160],
        [416, 320, 160],
        [-416, 352, 160],
        [416, 352, 160],
        [-416, 384, 160],
        [416, 384, 160],
        [-416, -384, 192],
        [416, -384, 192],
        [-416, -352, 192],
        [416, -352, 192],
        [-416, -320, 192],
        [416, -320, 192],
        [-416, -288, 192],
        [416, -288, 192],
        [-416, -256, 192],
        [416, -256, 192],
        [-416, -224, 192],
        [416, -224, 192],
        [-416, -192, 192],
        [416, -192, 192],
        [-416, -160, 192],
        [416, -160, 192],
        [-416, -128, 192],
        [416, -128, 192],
        [-416, -96, 192],
        [416, -96, 192],
        [-416, -64, 192],
        [416, -64, 192],
        [-416, -32, 192],
        [416, -32, 192],
        [-416, 0, 192],
        [416, 0, 192],
        [-416, 32, 192],
        [416, 32, 192],
        [-416, 64, 192],
        [416, 64, 192],
        [-416, 96, 192],
        [416, 96, 192],
        [-416, 128, 192],
        [416, 128, 192],
        [-416, 160, 192],
        [416, 160, 192],
        [-416, 192, 192],
        [416, 192, 192],
        [-416, 224, 192],
        [416, 224, 192],
        [-416, 256, 192],
        [416, 256, 192],
        [-416, 288, 192],
        [416, 288, 192],
        [-416, 320, 192],
        [416, 320, 192],
        [-416, 352, 192],
        [416, 352, 192],
        [-416, 384, 192],
        [416, 384, 192],
        [-416, -384, 224],
        [416, -384, 224],
        [-416, -352, 224],
        [416, -352, 224],
        [-416, -320, 224],
        [416, -320, 224],
        [-416, -288, 224],
        [416, -288, 224],
        [-416, -256, 224],
        [416, -256, 224],
        [-416, -224, 224],
        [416, -224, 224],
        [-416, -192, 224],
        [416, -192, 224],
        [-416, -160, 224],
        [416, -160, 224],
        [-416, -128, 224],
        [416, -128, 224],
        [-416, -96, 224],
        [416, -96, 224],
        [-416, -64, 224],
        [416, -64, 224],
        [-416, -32, 224],
        [416, -32, 224],
        [-416, 0, 224],
        [416, 0, 224],
        [-416, 32, 224],
        [416, 32, 224],
        [-416, 64, 224],
        [416, 64, 224],
        [-416, 96, 224],
        [416, 96, 224],
        [-416, 128, 224],
        [416, 128, 224],
        [-416, 160, 224],
        [416, 160, 224],
        [-416, 192, 224],
        [416, 192, 224],
        [-416, 224, 224],
        [416, 224, 224],
        [-416, 256, 224],
        [416, 256, 224],
        [-416, 288, 224],
        [416, 288, 224],
        [-416, 320, 224],
        [416, 320, 224],
        [-416, 352, 224],
        [416, 352, 224],
        [-416, 384, 224],
        [416, 384, 224],
        [-416, -384, 256],
        [416, -384, 256],
        [-416, -352, 256],
        [416, -352, 256],
        [-416, -320, 256],
        [416, -320, 256],
        [-416, -288, 256],
        [416, -288, 256],
        [-416, -256, 256],
        [416, -256, 256],
        [-416, -224, 256],
        [416, -224, 256],
        [-416, -192, 256],
        [416, -192, 256],
        [-416, -160, 256],
        [416, -160, 256],
        [-416, -128, 256],
        [416, -128, 256],
        [-416, -96, 256],
        [416, -96, 256],
        [-416, -64, 256],
        [416, -64, 256],
        [-416, -32, 256],
        [416, -32, 256],
        [-416, 0, 256],
        [416, 0, 256],
        [-416, 32, 256],
        [416, 32, 256],
        [-416, 64, 256],
        [416, 64, 256],
        [-416, 96, 256],
        [416, 96, 256],
        [-416, 128, 256],
        [416, 128, 256],
        [-416, 160, 256],
        [416, 160, 256],
        [-416, 192, 256],
        [416, 192, 256],
        [-416, 224, 256],
        [416, 224, 256],
        [-416, 256, 256],
        [416, 256, 256],
        [-416, 288, 256],
        [416, 288, 256],
        [-416, 320, 256],
        [416, 320, 256],
        [-416, 352, 256],
        [416, 352, 256],
        [-416, 384, 256],
        [416, 384, 256],
        [-416, -384, 288],
        [416, -384, 288],
        [-416, -352, 288],
        [416, -352, 288],
        [-416, -320, 288],
        [416, -320, 288],
        [-416, -288, 288],
        [416, -288, 288],
        [-416, -256, 288],
        [416, -256, 288],
        [-416, -224, 288],
        [416, -224, 288],
        [-416, -192, 288],
        [416, -192, 288],
        [-416, -160, 288],
        [416, -160, 288],
        [-416, -128, 288],
        [416, -128, 288],
        [-416, -96, 288],
        [416, -96, 288],
        [-416, -64, 288],
        [416, -64, 288],
        [-416, -32, 288],
        [416, -32, 288],
        [-416, 0, 288],
        [416, 0, 288],
        [-416, 32, 288],
        [416, 32, 288],
        [-416, 64, 288],
        [416, 64, 288],
        [-416, 96, 288],
        [416, 96, 288],
        [-416, 128, 288],
        [416, 128, 288],
        [-416, 160, 288],
        [416, 160, 288],
        [-416, 192, 288],
        [416, 192, 288],
        [-416, 224, 288],
        [416, 224, 288],
        [-416, 256, 288],
        [416, 256, 288],
        [-416, 288, 288],
        [416, 288, 288],
        [-416, 320, 288],
        [416, 320, 288],
        [-416, 352, 288],
        [416, 352, 288],
        [-416, 384, 288],
        [416, 384, 288],
        [-416, -384, 320],
        [416, -384, 320],
        [-416, -352, 320],
        [416, -352, 320],
        [-416, -320, 320],
        [416, -320, 320],
        [-416, -288, 320],
        [416, -288, 320],
        [-416, -256, 320],
        [416, -256, 320],
        [-416, -224, 320],
        [416, -224, 320],
        [-416, -192, 320],
        [416, -192, 320],
        [-416, -160, 320],
        [416, -160, 320],
        [-416, -128, 320],
        [416, -128, 320],
        [-416, -96, 320],
        [416, -96, 320],
        [-416, -64, 320],
        [416, -64, 320],
        [-416, -32, 320],
        [416, -32, 320],
        [-416, 0, 320],
        [416, 0, 320],
        [-416, 32, 320],
        [416, 32, 320],
        [-416, 64, 320],
        [416, 64, 320],
        [-416, 96, 320],
        [416, 96, 320],
        [-416, 128, 320],
        [416, 128, 320],
        [-416, 160, 320],
        [416, 160, 320],
        [-416, 192, 320],
        [416, 192, 320],
        [-416, 224, 320],
        [416, 224, 320],
        [-416, 256, 320],
        [416, 256, 320],
        [-416, 288, 320],
        [416, 288, 320],
        [-416, 320, 320],
        [416, 320, 320],
        [-416, 352, 320],
        [416, 352, 320],
        [-416, 384, 320],
        [416, 384, 320],
        [-416, -384, 352],
        [416, -384, 352],
        [-416, -352, 352],
        [416, -352, 352],
        [-416, -320, 352],
        [416, -320, 352],
        [-416, -288, 352],
        [416, -288, 352],
        [-416, -256, 352],
        [416, -256, 352],
        [-416, -224, 352],
        [416, -224, 352],
        [-416, -192, 352],
        [416, -192, 352],
        [-416, -160, 352],
        [416, -160, 352],
        [-416, -128, 352],
        [416, -128, 352],
        [-416, -96, 352],
        [416, -96, 352],
        [-416, -64, 352],
        [416, -64, 352],
        [-416, -32, 352],
        [416, -32, 352],
        [-416, 0, 352],
        [416, 0, 352],
        [-416, 32, 352],
        [416, 32, 352],
        [-416, 64, 352],
        [416, 64, 352],
        [-416, 96, 352],
        [416, 96, 352],
        [-416, 128, 352],
        [416, 128, 352],
        [-416, 160, 352],
        [416, 160, 352],
        [-416, 192, 352],
        [416, 192, 352],
        [-416, 224, 352],
        [416, 224, 352],
        [-416, 256, 352],
        [416, 256, 352],
        [-416, 288, 352],
        [416, 288, 352],
        [-416, 320, 352],
        [416, 320, 352],
        [-416, 352, 352],
        [416, 352, 352],
        [-416, 384, 352],
        [416, 384, 352],
        [-416, -384, 384],
        [416, -384, 384],
        [-416, -352, 384],
        [416, -352, 384],
        [-416, -320, 384],
        [416, -320, 384],
        [-416, -288, 384],
        [416, -288, 384],
        [-416, -256, 384],
        [416, -256, 384],
        [-416, -224, 384],
        [416, -224, 384],
        [-416, -192, 384],
        [416, -192, 384],
        [-416, -160, 384],
        [416, -160, 384],
        [-416, -128, 384],
        [416, -128, 384],
        [-416, -96, 384],
        [416, -96, 384],
        [-416, -64, 384],
        [416, -64, 384],
        [-416, -32, 384],
        [416, -32, 384],
        [-416, 0, 384],
        [416, 0, 384],
        [-416, 32, 384],
        [416, 32, 384],
        [-416, 64, 384],
        [416, 64, 384],
        [-416, 96, 384],
        [416, 96, 384],
        [-416, 128, 384],
        [416, 128, 384],
        [-416, 160, 384],
        [416, 160, 384],
        [-416, 192, 384],
        [416, 192, 384],
        [-416, 224, 384],
        [416, 224, 384],
        [-416, 256, 384],
        [416, 256, 384],
        [-416, 288, 384],
        [416, 288, 384],
        [-416, 320, 384],
        [416, 320, 384],
        [-416, 352, 384],
        [416, 352, 384],
        [-416, 384, 384],
        [416, 384, 384]],
    '14': [[-448, -448, -448],
        [-448, -448, 448],
        [-448, -416, -448],
        [-448, -416, 448],
        [-448, -384, -448],
        [-448, -384, 448],
        [-448, -352, -448],
        [-448, -352, 448],
        [-448, -320, -448],
        [-448, -320, 448],
        [-448, -288, -448],
        [-448, -288, 448],
        [-448, -256, -448],
        [-448, -256, 448],
        [-448, -224, -448],
        [-448, -224, 448],
        [-448, -192, -448],
        [-448, -192, 448],
        [-448, -160, -448],
        [-448, -160, 448],
        [-448, -128, -448],
        [-448, -128, 448],
        [-448, -96, -448],
        [-448, -96, 448],
        [-448, -64, -448],
        [-448, -64, 448],
        [-448, -32, -448],
        [-448, -32, 448],
        [-448, 0, -448],
        [-448, 0, 448],
        [-448, 32, -448],
        [-448, 32, 448],
        [-448, 64, -448],
        [-448, 64, 448],
        [-448, 96, -448],
        [-448, 96, 448],
        [-448, 128, -448],
        [-448, 128, 448],
        [-448, 160, -448],
        [-448, 160, 448],
        [-448, 192, -448],
        [-448, 192, 448],
        [-448, 224, -448],
        [-448, 224, 448],
        [-448, 256, -448],
        [-448, 256, 448],
        [-448, 288, -448],
        [-448, 288, 448],
        [-448, 320, -448],
        [-448, 320, 448],
        [-448, 352, -448],
        [-448, 352, 448],
        [-448, 384, -448],
        [-448, 384, 448],
        [-448, 416, -448],
        [-448, 416, 448],
        [-448, 448, -448],
        [-448, 448, 448],
        [-448, -448, -416],
        [-448, 448, -416],
        [-448, -448, -384],
        [-448, 448, -384],
        [-448, -448, -352],
        [-448, 448, -352],
        [-448, -448, -320],
        [-448, 448, -320],
        [-448, -448, -288],
        [-448, 448, -288],
        [-448, -448, -256],
        [-448, 448, -256],
        [-448, -448, -224],
        [-448, 448, -224],
        [-448, -448, -192],
        [-448, 448, -192],
        [-448, -448, -160],
        [-448, 448, -160],
        [-448, -448, -128],
        [-448, 448, -128],
        [-448, -448, -96],
        [-448, 448, -96],
        [-448, -448, -64],
        [-448, 448, -64],
        [-448, -448, -32],
        [-448, 448, -32],
        [-448, -448, 0],
        [-448, 448, 0],
        [-448, -448, 32],
        [-448, 448, 32],
        [-448, -448, 64],
        [-448, 448, 64],
        [-448, -448, 96],
        [-448, 448, 96],
        [-448, -448, 128],
        [-448, 448, 128],
        [-448, -448, 160],
        [-448, 448, 160],
        [-448, -448, 192],
        [-448, 448, 192],
        [-448, -448, 224],
        [-448, 448, 224],
        [-448, -448, 256],
        [-448, 448, 256],
        [-448, -448, 288],
        [-448, 448, 288],
        [-448, -448, 320],
        [-448, 448, 320],
        [-448, -448, 352],
        [-448, 448, 352],
        [-448, -448, 384],
        [-448, 448, 384],
        [-448, -448, 416],
        [-448, 448, 416],
        [-416, -448, -448],
        [-416, -448, 448],
        [-416, -416, -448],
        [-416, -416, 448],
        [-416, -384, -448],
        [-416, -384, 448],
        [-416, -352, -448],
        [-416, -352, 448],
        [-416, -320, -448],
        [-416, -320, 448],
        [-416, -288, -448],
        [-416, -288, 448],
        [-416, -256, -448],
        [-416, -256, 448],
        [-416, -224, -448],
        [-416, -224, 448],
        [-416, -192, -448],
        [-416, -192, 448],
        [-416, -160, -448],
        [-416, -160, 448],
        [-416, -128, -448],
        [-416, -128, 448],
        [-416, -96, -448],
        [-416, -96, 448],
        [-416, -64, -448],
        [-416, -64, 448],
        [-416, -32, -448],
        [-416, -32, 448],
        [-416, 0, -448],
        [-416, 0, 448],
        [-416, 32, -448],
        [-416, 32, 448],
        [-416, 64, -448],
        [-416, 64, 448],
        [-416, 96, -448],
        [-416, 96, 448],
        [-416, 128, -448],
        [-416, 128, 448],
        [-416, 160, -448],
        [-416, 160, 448],
        [-416, 192, -448],
        [-416, 192, 448],
        [-416, 224, -448],
        [-416, 224, 448],
        [-416, 256, -448],
        [-416, 256, 448],
        [-416, 288, -448],
        [-416, 288, 448],
        [-416, 320, -448],
        [-416, 320, 448],
        [-416, 352, -448],
        [-416, 352, 448],
        [-416, 384, -448],
        [-416, 384, 448],
        [-416, 416, -448],
        [-416, 416, 448],
        [-416, 448, -448],
        [-416, 448, 448],
        [-416, -448, -416],
        [-416, 448, -416],
        [-416, -448, -384],
        [-416, 448, -384],
        [-416, -448, -352],
        [-416, 448, -352],
        [-416, -448, -320],
        [-416, 448, -320],
        [-416, -448, -288],
        [-416, 448, -288],
        [-416, -448, -256],
        [-416, 448, -256],
        [-416, -448, -224],
        [-416, 448, -224],
        [-416, -448, -192],
        [-416, 448, -192],
        [-416, -448, -160],
        [-416, 448, -160],
        [-416, -448, -128],
        [-416, 448, -128],
        [-416, -448, -96],
        [-416, 448, -96],
        [-416, -448, -64],
        [-416, 448, -64],
        [-416, -448, -32],
        [-416, 448, -32],
        [-416, -448, 0],
        [-416, 448, 0],
        [-416, -448, 32],
        [-416, 448, 32],
        [-416, -448, 64],
        [-416, 448, 64],
        [-416, -448, 96],
        [-416, 448, 96],
        [-416, -448, 128],
        [-416, 448, 128],
        [-416, -448, 160],
        [-416, 448, 160],
        [-416, -448, 192],
        [-416, 448, 192],
        [-416, -448, 224],
        [-416, 448, 224],
        [-416, -448, 256],
        [-416, 448, 256],
        [-416, -448, 288],
        [-416, 448, 288],
        [-416, -448, 320],
        [-416, 448, 320],
        [-416, -448, 352],
        [-416, 448, 352],
        [-416, -448, 384],
        [-416, 448, 384],
        [-416, -448, 416],
        [-416, 448, 416],
        [-384, -448, -448],
        [-384, -448, 448],
        [-384, -416, -448],
        [-384, -416, 448],
        [-384, -384, -448],
        [-384, -384, 448],
        [-384, -352, -448],
        [-384, -352, 448],
        [-384, -320, -448],
        [-384, -320, 448],
        [-384, -288, -448],
        [-384, -288, 448],
        [-384, -256, -448],
        [-384, -256, 448],
        [-384, -224, -448],
        [-384, -224, 448],
        [-384, -192, -448],
        [-384, -192, 448],
        [-384, -160, -448],
        [-384, -160, 448],
        [-384, -128, -448],
        [-384, -128, 448],
        [-384, -96, -448],
        [-384, -96, 448],
        [-384, -64, -448],
        [-384, -64, 448],
        [-384, -32, -448],
        [-384, -32, 448],
        [-384, 0, -448],
        [-384, 0, 448],
        [-384, 32, -448],
        [-384, 32, 448],
        [-384, 64, -448],
        [-384, 64, 448],
        [-384, 96, -448],
        [-384, 96, 448],
        [-384, 128, -448],
        [-384, 128, 448],
        [-384, 160, -448],
        [-384, 160, 448],
        [-384, 192, -448],
        [-384, 192, 448],
        [-384, 224, -448],
        [-384, 224, 448],
        [-384, 256, -448],
        [-384, 256, 448],
        [-384, 288, -448],
        [-384, 288, 448],
        [-384, 320, -448],
        [-384, 320, 448],
        [-384, 352, -448],
        [-384, 352, 448],
        [-384, 384, -448],
        [-384, 384, 448],
        [-384, 416, -448],
        [-384, 416, 448],
        [-384, 448, -448],
        [-384, 448, 448],
        [-384, -448, -416],
        [-384, 448, -416],
        [-384, -448, -384],
        [-384, 448, -384],
        [-384, -448, -352],
        [-384, 448, -352],
        [-384, -448, -320],
        [-384, 448, -320],
        [-384, -448, -288],
        [-384, 448, -288],
        [-384, -448, -256],
        [-384, 448, -256],
        [-384, -448, -224],
        [-384, 448, -224],
        [-384, -448, -192],
        [-384, 448, -192],
        [-384, -448, -160],
        [-384, 448, -160],
        [-384, -448, -128],
        [-384, 448, -128],
        [-384, -448, -96],
        [-384, 448, -96],
        [-384, -448, -64],
        [-384, 448, -64],
        [-384, -448, -32],
        [-384, 448, -32],
        [-384, -448, 0],
        [-384, 448, 0],
        [-384, -448, 32],
        [-384, 448, 32],
        [-384, -448, 64],
        [-384, 448, 64],
        [-384, -448, 96],
        [-384, 448, 96],
        [-384, -448, 128],
        [-384, 448, 128],
        [-384, -448, 160],
        [-384, 448, 160],
        [-384, -448, 192],
        [-384, 448, 192],
        [-384, -448, 224],
        [-384, 448, 224],
        [-384, -448, 256],
        [-384, 448, 256],
        [-384, -448, 288],
        [-384, 448, 288],
        [-384, -448, 320],
        [-384, 448, 320],
        [-384, -448, 352],
        [-384, 448, 352],
        [-384, -448, 384],
        [-384, 448, 384],
        [-384, -448, 416],
        [-384, 448, 416],
        [-352, -448, -448],
        [-352, -448, 448],
        [-352, -416, -448],
        [-352, -416, 448],
        [-352, -384, -448],
        [-352, -384, 448],
        [-352, -352, -448],
        [-352, -352, 448],
        [-352, -320, -448],
        [-352, -320, 448],
        [-352, -288, -448],
        [-352, -288, 448],
        [-352, -256, -448],
        [-352, -256, 448],
        [-352, -224, -448],
        [-352, -224, 448],
        [-352, -192, -448],
        [-352, -192, 448],
        [-352, -160, -448],
        [-352, -160, 448],
        [-352, -128, -448],
        [-352, -128, 448],
        [-352, -96, -448],
        [-352, -96, 448],
        [-352, -64, -448],
        [-352, -64, 448],
        [-352, -32, -448],
        [-352, -32, 448],
        [-352, 0, -448],
        [-352, 0, 448],
        [-352, 32, -448],
        [-352, 32, 448],
        [-352, 64, -448],
        [-352, 64, 448],
        [-352, 96, -448],
        [-352, 96, 448],
        [-352, 128, -448],
        [-352, 128, 448],
        [-352, 160, -448],
        [-352, 160, 448],
        [-352, 192, -448],
        [-352, 192, 448],
        [-352, 224, -448],
        [-352, 224, 448],
        [-352, 256, -448],
        [-352, 256, 448],
        [-352, 288, -448],
        [-352, 288, 448],
        [-352, 320, -448],
        [-352, 320, 448],
        [-352, 352, -448],
        [-352, 352, 448],
        [-352, 384, -448],
        [-352, 384, 448],
        [-352, 416, -448],
        [-352, 416, 448],
        [-352, 448, -448],
        [-352, 448, 448],
        [-352, -448, -416],
        [-352, 448, -416],
        [-352, -448, -384],
        [-352, 448, -384],
        [-352, -448, -352],
        [-352, 448, -352],
        [-352, -448, -320],
        [-352, 448, -320],
        [-352, -448, -288],
        [-352, 448, -288],
        [-352, -448, -256],
        [-352, 448, -256],
        [-352, -448, -224],
        [-352, 448, -224],
        [-352, -448, -192],
        [-352, 448, -192],
        [-352, -448, -160],
        [-352, 448, -160],
        [-352, -448, -128],
        [-352, 448, -128],
        [-352, -448, -96],
        [-352, 448, -96],
        [-352, -448, -64],
        [-352, 448, -64],
        [-352, -448, -32],
        [-352, 448, -32],
        [-352, -448, 0],
        [-352, 448, 0],
        [-352, -448, 32],
        [-352, 448, 32],
        [-352, -448, 64],
        [-352, 448, 64],
        [-352, -448, 96],
        [-352, 448, 96],
        [-352, -448, 128],
        [-352, 448, 128],
        [-352, -448, 160],
        [-352, 448, 160],
        [-352, -448, 192],
        [-352, 448, 192],
        [-352, -448, 224],
        [-352, 448, 224],
        [-352, -448, 256],
        [-352, 448, 256],
        [-352, -448, 288],
        [-352, 448, 288],
        [-352, -448, 320],
        [-352, 448, 320],
        [-352, -448, 352],
        [-352, 448, 352],
        [-352, -448, 384],
        [-352, 448, 384],
        [-352, -448, 416],
        [-352, 448, 416],
        [-320, -448, -448],
        [-320, -448, 448],
        [-320, -416, -448],
        [-320, -416, 448],
        [-320, -384, -448],
        [-320, -384, 448],
        [-320, -352, -448],
        [-320, -352, 448],
        [-320, -320, -448],
        [-320, -320, 448],
        [-320, -288, -448],
        [-320, -288, 448],
        [-320, -256, -448],
        [-320, -256, 448],
        [-320, -224, -448],
        [-320, -224, 448],
        [-320, -192, -448],
        [-320, -192, 448],
        [-320, -160, -448],
        [-320, -160, 448],
        [-320, -128, -448],
        [-320, -128, 448],
        [-320, -96, -448],
        [-320, -96, 448],
        [-320, -64, -448],
        [-320, -64, 448],
        [-320, -32, -448],
        [-320, -32, 448],
        [-320, 0, -448],
        [-320, 0, 448],
        [-320, 32, -448],
        [-320, 32, 448],
        [-320, 64, -448],
        [-320, 64, 448],
        [-320, 96, -448],
        [-320, 96, 448],
        [-320, 128, -448],
        [-320, 128, 448],
        [-320, 160, -448],
        [-320, 160, 448],
        [-320, 192, -448],
        [-320, 192, 448],
        [-320, 224, -448],
        [-320, 224, 448],
        [-320, 256, -448],
        [-320, 256, 448],
        [-320, 288, -448],
        [-320, 288, 448],
        [-320, 320, -448],
        [-320, 320, 448],
        [-320, 352, -448],
        [-320, 352, 448],
        [-320, 384, -448],
        [-320, 384, 448],
        [-320, 416, -448],
        [-320, 416, 448],
        [-320, 448, -448],
        [-320, 448, 448],
        [-320, -448, -416],
        [-320, 448, -416],
        [-320, -448, -384],
        [-320, 448, -384],
        [-320, -448, -352],
        [-320, 448, -352],
        [-320, -448, -320],
        [-320, 448, -320],
        [-320, -448, -288],
        [-320, 448, -288],
        [-320, -448, -256],
        [-320, 448, -256],
        [-320, -448, -224],
        [-320, 448, -224],
        [-320, -448, -192],
        [-320, 448, -192],
        [-320, -448, -160],
        [-320, 448, -160],
        [-320, -448, -128],
        [-320, 448, -128],
        [-320, -448, -96],
        [-320, 448, -96],
        [-320, -448, -64],
        [-320, 448, -64],
        [-320, -448, -32],
        [-320, 448, -32],
        [-320, -448, 0],
        [-320, 448, 0],
        [-320, -448, 32],
        [-320, 448, 32],
        [-320, -448, 64],
        [-320, 448, 64],
        [-320, -448, 96],
        [-320, 448, 96],
        [-320, -448, 128],
        [-320, 448, 128],
        [-320, -448, 160],
        [-320, 448, 160],
        [-320, -448, 192],
        [-320, 448, 192],
        [-320, -448, 224],
        [-320, 448, 224],
        [-320, -448, 256],
        [-320, 448, 256],
        [-320, -448, 288],
        [-320, 448, 288],
        [-320, -448, 320],
        [-320, 448, 320],
        [-320, -448, 352],
        [-320, 448, 352],
        [-320, -448, 384],
        [-320, 448, 384],
        [-320, -448, 416],
        [-320, 448, 416],
        [-288, -448, -448],
        [-288, -448, 448],
        [-288, -416, -448],
        [-288, -416, 448],
        [-288, -384, -448],
        [-288, -384, 448],
        [-288, -352, -448],
        [-288, -352, 448],
        [-288, -320, -448],
        [-288, -320, 448],
        [-288, -288, -448],
        [-288, -288, 448],
        [-288, -256, -448],
        [-288, -256, 448],
        [-288, -224, -448],
        [-288, -224, 448],
        [-288, -192, -448],
        [-288, -192, 448],
        [-288, -160, -448],
        [-288, -160, 448],
        [-288, -128, -448],
        [-288, -128, 448],
        [-288, -96, -448],
        [-288, -96, 448],
        [-288, -64, -448],
        [-288, -64, 448],
        [-288, -32, -448],
        [-288, -32, 448],
        [-288, 0, -448],
        [-288, 0, 448],
        [-288, 32, -448],
        [-288, 32, 448],
        [-288, 64, -448],
        [-288, 64, 448],
        [-288, 96, -448],
        [-288, 96, 448],
        [-288, 128, -448],
        [-288, 128, 448],
        [-288, 160, -448],
        [-288, 160, 448],
        [-288, 192, -448],
        [-288, 192, 448],
        [-288, 224, -448],
        [-288, 224, 448],
        [-288, 256, -448],
        [-288, 256, 448],
        [-288, 288, -448],
        [-288, 288, 448],
        [-288, 320, -448],
        [-288, 320, 448],
        [-288, 352, -448],
        [-288, 352, 448],
        [-288, 384, -448],
        [-288, 384, 448],
        [-288, 416, -448],
        [-288, 416, 448],
        [-288, 448, -448],
        [-288, 448, 448],
        [-288, -448, -416],
        [-288, 448, -416],
        [-288, -448, -384],
        [-288, 448, -384],
        [-288, -448, -352],
        [-288, 448, -352],
        [-288, -448, -320],
        [-288, 448, -320],
        [-288, -448, -288],
        [-288, 448, -288],
        [-288, -448, -256],
        [-288, 448, -256],
        [-288, -448, -224],
        [-288, 448, -224],
        [-288, -448, -192],
        [-288, 448, -192],
        [-288, -448, -160],
        [-288, 448, -160],
        [-288, -448, -128],
        [-288, 448, -128],
        [-288, -448, -96],
        [-288, 448, -96],
        [-288, -448, -64],
        [-288, 448, -64],
        [-288, -448, -32],
        [-288, 448, -32],
        [-288, -448, 0],
        [-288, 448, 0],
        [-288, -448, 32],
        [-288, 448, 32],
        [-288, -448, 64],
        [-288, 448, 64],
        [-288, -448, 96],
        [-288, 448, 96],
        [-288, -448, 128],
        [-288, 448, 128],
        [-288, -448, 160],
        [-288, 448, 160],
        [-288, -448, 192],
        [-288, 448, 192],
        [-288, -448, 224],
        [-288, 448, 224],
        [-288, -448, 256],
        [-288, 448, 256],
        [-288, -448, 288],
        [-288, 448, 288],
        [-288, -448, 320],
        [-288, 448, 320],
        [-288, -448, 352],
        [-288, 448, 352],
        [-288, -448, 384],
        [-288, 448, 384],
        [-288, -448, 416],
        [-288, 448, 416],
        [-256, -448, -448],
        [-256, -448, 448],
        [-256, -416, -448],
        [-256, -416, 448],
        [-256, -384, -448],
        [-256, -384, 448],
        [-256, -352, -448],
        [-256, -352, 448],
        [-256, -320, -448],
        [-256, -320, 448],
        [-256, -288, -448],
        [-256, -288, 448],
        [-256, -256, -448],
        [-256, -256, 448],
        [-256, -224, -448],
        [-256, -224, 448],
        [-256, -192, -448],
        [-256, -192, 448],
        [-256, -160, -448],
        [-256, -160, 448],
        [-256, -128, -448],
        [-256, -128, 448],
        [-256, -96, -448],
        [-256, -96, 448],
        [-256, -64, -448],
        [-256, -64, 448],
        [-256, -32, -448],
        [-256, -32, 448],
        [-256, 0, -448],
        [-256, 0, 448],
        [-256, 32, -448],
        [-256, 32, 448],
        [-256, 64, -448],
        [-256, 64, 448],
        [-256, 96, -448],
        [-256, 96, 448],
        [-256, 128, -448],
        [-256, 128, 448],
        [-256, 160, -448],
        [-256, 160, 448],
        [-256, 192, -448],
        [-256, 192, 448],
        [-256, 224, -448],
        [-256, 224, 448],
        [-256, 256, -448],
        [-256, 256, 448],
        [-256, 288, -448],
        [-256, 288, 448],
        [-256, 320, -448],
        [-256, 320, 448],
        [-256, 352, -448],
        [-256, 352, 448],
        [-256, 384, -448],
        [-256, 384, 448],
        [-256, 416, -448],
        [-256, 416, 448],
        [-256, 448, -448],
        [-256, 448, 448],
        [-256, -448, -416],
        [-256, 448, -416],
        [-256, -448, -384],
        [-256, 448, -384],
        [-256, -448, -352],
        [-256, 448, -352],
        [-256, -448, -320],
        [-256, 448, -320],
        [-256, -448, -288],
        [-256, 448, -288],
        [-256, -448, -256],
        [-256, 448, -256],
        [-256, -448, -224],
        [-256, 448, -224],
        [-256, -448, -192],
        [-256, 448, -192],
        [-256, -448, -160],
        [-256, 448, -160],
        [-256, -448, -128],
        [-256, 448, -128],
        [-256, -448, -96],
        [-256, 448, -96],
        [-256, -448, -64],
        [-256, 448, -64],
        [-256, -448, -32],
        [-256, 448, -32],
        [-256, -448, 0],
        [-256, 448, 0],
        [-256, -448, 32],
        [-256, 448, 32],
        [-256, -448, 64],
        [-256, 448, 64],
        [-256, -448, 96],
        [-256, 448, 96],
        [-256, -448, 128],
        [-256, 448, 128],
        [-256, -448, 160],
        [-256, 448, 160],
        [-256, -448, 192],
        [-256, 448, 192],
        [-256, -448, 224],
        [-256, 448, 224],
        [-256, -448, 256],
        [-256, 448, 256],
        [-256, -448, 288],
        [-256, 448, 288],
        [-256, -448, 320],
        [-256, 448, 320],
        [-256, -448, 352],
        [-256, 448, 352],
        [-256, -448, 384],
        [-256, 448, 384],
        [-256, -448, 416],
        [-256, 448, 416],
        [-224, -448, -448],
        [-224, -448, 448],
        [-224, -416, -448],
        [-224, -416, 448],
        [-224, -384, -448],
        [-224, -384, 448],
        [-224, -352, -448],
        [-224, -352, 448],
        [-224, -320, -448],
        [-224, -320, 448],
        [-224, -288, -448],
        [-224, -288, 448],
        [-224, -256, -448],
        [-224, -256, 448],
        [-224, -224, -448],
        [-224, -224, 448],
        [-224, -192, -448],
        [-224, -192, 448],
        [-224, -160, -448],
        [-224, -160, 448],
        [-224, -128, -448],
        [-224, -128, 448],
        [-224, -96, -448],
        [-224, -96, 448],
        [-224, -64, -448],
        [-224, -64, 448],
        [-224, -32, -448],
        [-224, -32, 448],
        [-224, 0, -448],
        [-224, 0, 448],
        [-224, 32, -448],
        [-224, 32, 448],
        [-224, 64, -448],
        [-224, 64, 448],
        [-224, 96, -448],
        [-224, 96, 448],
        [-224, 128, -448],
        [-224, 128, 448],
        [-224, 160, -448],
        [-224, 160, 448],
        [-224, 192, -448],
        [-224, 192, 448],
        [-224, 224, -448],
        [-224, 224, 448],
        [-224, 256, -448],
        [-224, 256, 448],
        [-224, 288, -448],
        [-224, 288, 448],
        [-224, 320, -448],
        [-224, 320, 448],
        [-224, 352, -448],
        [-224, 352, 448],
        [-224, 384, -448],
        [-224, 384, 448],
        [-224, 416, -448],
        [-224, 416, 448],
        [-224, 448, -448],
        [-224, 448, 448],
        [-224, -448, -416],
        [-224, 448, -416],
        [-224, -448, -384],
        [-224, 448, -384],
        [-224, -448, -352],
        [-224, 448, -352],
        [-224, -448, -320],
        [-224, 448, -320],
        [-224, -448, -288],
        [-224, 448, -288],
        [-224, -448, -256],
        [-224, 448, -256],
        [-224, -448, -224],
        [-224, 448, -224],
        [-224, -448, -192],
        [-224, 448, -192],
        [-224, -448, -160],
        [-224, 448, -160],
        [-224, -448, -128],
        [-224, 448, -128],
        [-224, -448, -96],
        [-224, 448, -96],
        [-224, -448, -64],
        [-224, 448, -64],
        [-224, -448, -32],
        [-224, 448, -32],
        [-224, -448, 0],
        [-224, 448, 0],
        [-224, -448, 32],
        [-224, 448, 32],
        [-224, -448, 64],
        [-224, 448, 64],
        [-224, -448, 96],
        [-224, 448, 96],
        [-224, -448, 128],
        [-224, 448, 128],
        [-224, -448, 160],
        [-224, 448, 160],
        [-224, -448, 192],
        [-224, 448, 192],
        [-224, -448, 224],
        [-224, 448, 224],
        [-224, -448, 256],
        [-224, 448, 256],
        [-224, -448, 288],
        [-224, 448, 288],
        [-224, -448, 320],
        [-224, 448, 320],
        [-224, -448, 352],
        [-224, 448, 352],
        [-224, -448, 384],
        [-224, 448, 384],
        [-224, -448, 416],
        [-224, 448, 416],
        [-192, -448, -448],
        [-192, -448, 448],
        [-192, -416, -448],
        [-192, -416, 448],
        [-192, -384, -448],
        [-192, -384, 448],
        [-192, -352, -448],
        [-192, -352, 448],
        [-192, -320, -448],
        [-192, -320, 448],
        [-192, -288, -448],
        [-192, -288, 448],
        [-192, -256, -448],
        [-192, -256, 448],
        [-192, -224, -448],
        [-192, -224, 448],
        [-192, -192, -448],
        [-192, -192, 448],
        [-192, -160, -448],
        [-192, -160, 448],
        [-192, -128, -448],
        [-192, -128, 448],
        [-192, -96, -448],
        [-192, -96, 448],
        [-192, -64, -448],
        [-192, -64, 448],
        [-192, -32, -448],
        [-192, -32, 448],
        [-192, 0, -448],
        [-192, 0, 448],
        [-192, 32, -448],
        [-192, 32, 448],
        [-192, 64, -448],
        [-192, 64, 448],
        [-192, 96, -448],
        [-192, 96, 448],
        [-192, 128, -448],
        [-192, 128, 448],
        [-192, 160, -448],
        [-192, 160, 448],
        [-192, 192, -448],
        [-192, 192, 448],
        [-192, 224, -448],
        [-192, 224, 448],
        [-192, 256, -448],
        [-192, 256, 448],
        [-192, 288, -448],
        [-192, 288, 448],
        [-192, 320, -448],
        [-192, 320, 448],
        [-192, 352, -448],
        [-192, 352, 448],
        [-192, 384, -448],
        [-192, 384, 448],
        [-192, 416, -448],
        [-192, 416, 448],
        [-192, 448, -448],
        [-192, 448, 448],
        [-192, -448, -416],
        [-192, 448, -416],
        [-192, -448, -384],
        [-192, 448, -384],
        [-192, -448, -352],
        [-192, 448, -352],
        [-192, -448, -320],
        [-192, 448, -320],
        [-192, -448, -288],
        [-192, 448, -288],
        [-192, -448, -256],
        [-192, 448, -256],
        [-192, -448, -224],
        [-192, 448, -224],
        [-192, -448, -192],
        [-192, 448, -192],
        [-192, -448, -160],
        [-192, 448, -160],
        [-192, -448, -128],
        [-192, 448, -128],
        [-192, -448, -96],
        [-192, 448, -96],
        [-192, -448, -64],
        [-192, 448, -64],
        [-192, -448, -32],
        [-192, 448, -32],
        [-192, -448, 0],
        [-192, 448, 0],
        [-192, -448, 32],
        [-192, 448, 32],
        [-192, -448, 64],
        [-192, 448, 64],
        [-192, -448, 96],
        [-192, 448, 96],
        [-192, -448, 128],
        [-192, 448, 128],
        [-192, -448, 160],
        [-192, 448, 160],
        [-192, -448, 192],
        [-192, 448, 192],
        [-192, -448, 224],
        [-192, 448, 224],
        [-192, -448, 256],
        [-192, 448, 256],
        [-192, -448, 288],
        [-192, 448, 288],
        [-192, -448, 320],
        [-192, 448, 320],
        [-192, -448, 352],
        [-192, 448, 352],
        [-192, -448, 384],
        [-192, 448, 384],
        [-192, -448, 416],
        [-192, 448, 416],
        [-160, -448, -448],
        [-160, -448, 448],
        [-160, -416, -448],
        [-160, -416, 448],
        [-160, -384, -448],
        [-160, -384, 448],
        [-160, -352, -448],
        [-160, -352, 448],
        [-160, -320, -448],
        [-160, -320, 448],
        [-160, -288, -448],
        [-160, -288, 448],
        [-160, -256, -448],
        [-160, -256, 448],
        [-160, -224, -448],
        [-160, -224, 448],
        [-160, -192, -448],
        [-160, -192, 448],
        [-160, -160, -448],
        [-160, -160, 448],
        [-160, -128, -448],
        [-160, -128, 448],
        [-160, -96, -448],
        [-160, -96, 448],
        [-160, -64, -448],
        [-160, -64, 448],
        [-160, -32, -448],
        [-160, -32, 448],
        [-160, 0, -448],
        [-160, 0, 448],
        [-160, 32, -448],
        [-160, 32, 448],
        [-160, 64, -448],
        [-160, 64, 448],
        [-160, 96, -448],
        [-160, 96, 448],
        [-160, 128, -448],
        [-160, 128, 448],
        [-160, 160, -448],
        [-160, 160, 448],
        [-160, 192, -448],
        [-160, 192, 448],
        [-160, 224, -448],
        [-160, 224, 448],
        [-160, 256, -448],
        [-160, 256, 448],
        [-160, 288, -448],
        [-160, 288, 448],
        [-160, 320, -448],
        [-160, 320, 448],
        [-160, 352, -448],
        [-160, 352, 448],
        [-160, 384, -448],
        [-160, 384, 448],
        [-160, 416, -448],
        [-160, 416, 448],
        [-160, 448, -448],
        [-160, 448, 448],
        [-160, -448, -416],
        [-160, 448, -416],
        [-160, -448, -384],
        [-160, 448, -384],
        [-160, -448, -352],
        [-160, 448, -352],
        [-160, -448, -320],
        [-160, 448, -320],
        [-160, -448, -288],
        [-160, 448, -288],
        [-160, -448, -256],
        [-160, 448, -256],
        [-160, -448, -224],
        [-160, 448, -224],
        [-160, -448, -192],
        [-160, 448, -192],
        [-160, -448, -160],
        [-160, 448, -160],
        [-160, -448, -128],
        [-160, 448, -128],
        [-160, -448, -96],
        [-160, 448, -96],
        [-160, -448, -64],
        [-160, 448, -64],
        [-160, -448, -32],
        [-160, 448, -32],
        [-160, -448, 0],
        [-160, 448, 0],
        [-160, -448, 32],
        [-160, 448, 32],
        [-160, -448, 64],
        [-160, 448, 64],
        [-160, -448, 96],
        [-160, 448, 96],
        [-160, -448, 128],
        [-160, 448, 128],
        [-160, -448, 160],
        [-160, 448, 160],
        [-160, -448, 192],
        [-160, 448, 192],
        [-160, -448, 224],
        [-160, 448, 224],
        [-160, -448, 256],
        [-160, 448, 256],
        [-160, -448, 288],
        [-160, 448, 288],
        [-160, -448, 320],
        [-160, 448, 320],
        [-160, -448, 352],
        [-160, 448, 352],
        [-160, -448, 384],
        [-160, 448, 384],
        [-160, -448, 416],
        [-160, 448, 416],
        [-128, -448, -448],
        [-128, -448, 448],
        [-128, -416, -448],
        [-128, -416, 448],
        [-128, -384, -448],
        [-128, -384, 448],
        [-128, -352, -448],
        [-128, -352, 448],
        [-128, -320, -448],
        [-128, -320, 448],
        [-128, -288, -448],
        [-128, -288, 448],
        [-128, -256, -448],
        [-128, -256, 448],
        [-128, -224, -448],
        [-128, -224, 448],
        [-128, -192, -448],
        [-128, -192, 448],
        [-128, -160, -448],
        [-128, -160, 448],
        [-128, -128, -448],
        [-128, -128, 448],
        [-128, -96, -448],
        [-128, -96, 448],
        [-128, -64, -448],
        [-128, -64, 448],
        [-128, -32, -448],
        [-128, -32, 448],
        [-128, 0, -448],
        [-128, 0, 448],
        [-128, 32, -448],
        [-128, 32, 448],
        [-128, 64, -448],
        [-128, 64, 448],
        [-128, 96, -448],
        [-128, 96, 448],
        [-128, 128, -448],
        [-128, 128, 448],
        [-128, 160, -448],
        [-128, 160, 448],
        [-128, 192, -448],
        [-128, 192, 448],
        [-128, 224, -448],
        [-128, 224, 448],
        [-128, 256, -448],
        [-128, 256, 448],
        [-128, 288, -448],
        [-128, 288, 448],
        [-128, 320, -448],
        [-128, 320, 448],
        [-128, 352, -448],
        [-128, 352, 448],
        [-128, 384, -448],
        [-128, 384, 448],
        [-128, 416, -448],
        [-128, 416, 448],
        [-128, 448, -448],
        [-128, 448, 448],
        [-128, -448, -416],
        [-128, 448, -416],
        [-128, -448, -384],
        [-128, 448, -384],
        [-128, -448, -352],
        [-128, 448, -352],
        [-128, -448, -320],
        [-128, 448, -320],
        [-128, -448, -288],
        [-128, 448, -288],
        [-128, -448, -256],
        [-128, 448, -256],
        [-128, -448, -224],
        [-128, 448, -224],
        [-128, -448, -192],
        [-128, 448, -192],
        [-128, -448, -160],
        [-128, 448, -160],
        [-128, -448, -128],
        [-128, 448, -128],
        [-128, -448, -96],
        [-128, 448, -96],
        [-128, -448, -64],
        [-128, 448, -64],
        [-128, -448, -32],
        [-128, 448, -32],
        [-128, -448, 0],
        [-128, 448, 0],
        [-128, -448, 32],
        [-128, 448, 32],
        [-128, -448, 64],
        [-128, 448, 64],
        [-128, -448, 96],
        [-128, 448, 96],
        [-128, -448, 128],
        [-128, 448, 128],
        [-128, -448, 160],
        [-128, 448, 160],
        [-128, -448, 192],
        [-128, 448, 192],
        [-128, -448, 224],
        [-128, 448, 224],
        [-128, -448, 256],
        [-128, 448, 256],
        [-128, -448, 288],
        [-128, 448, 288],
        [-128, -448, 320],
        [-128, 448, 320],
        [-128, -448, 352],
        [-128, 448, 352],
        [-128, -448, 384],
        [-128, 448, 384],
        [-128, -448, 416],
        [-128, 448, 416],
        [-96, -448, -448],
        [-96, -448, 448],
        [-96, -416, -448],
        [-96, -416, 448],
        [-96, -384, -448],
        [-96, -384, 448],
        [-96, -352, -448],
        [-96, -352, 448],
        [-96, -320, -448],
        [-96, -320, 448],
        [-96, -288, -448],
        [-96, -288, 448],
        [-96, -256, -448],
        [-96, -256, 448],
        [-96, -224, -448],
        [-96, -224, 448],
        [-96, -192, -448],
        [-96, -192, 448],
        [-96, -160, -448],
        [-96, -160, 448],
        [-96, -128, -448],
        [-96, -128, 448],
        [-96, -96, -448],
        [-96, -96, 448],
        [-96, -64, -448],
        [-96, -64, 448],
        [-96, -32, -448],
        [-96, -32, 448],
        [-96, 0, -448],
        [-96, 0, 448],
        [-96, 32, -448],
        [-96, 32, 448],
        [-96, 64, -448],
        [-96, 64, 448],
        [-96, 96, -448],
        [-96, 96, 448],
        [-96, 128, -448],
        [-96, 128, 448],
        [-96, 160, -448],
        [-96, 160, 448],
        [-96, 192, -448],
        [-96, 192, 448],
        [-96, 224, -448],
        [-96, 224, 448],
        [-96, 256, -448],
        [-96, 256, 448],
        [-96, 288, -448],
        [-96, 288, 448],
        [-96, 320, -448],
        [-96, 320, 448],
        [-96, 352, -448],
        [-96, 352, 448],
        [-96, 384, -448],
        [-96, 384, 448],
        [-96, 416, -448],
        [-96, 416, 448],
        [-96, 448, -448],
        [-96, 448, 448],
        [-96, -448, -416],
        [-96, 448, -416],
        [-96, -448, -384],
        [-96, 448, -384],
        [-96, -448, -352],
        [-96, 448, -352],
        [-96, -448, -320],
        [-96, 448, -320],
        [-96, -448, -288],
        [-96, 448, -288],
        [-96, -448, -256],
        [-96, 448, -256],
        [-96, -448, -224],
        [-96, 448, -224],
        [-96, -448, -192],
        [-96, 448, -192],
        [-96, -448, -160],
        [-96, 448, -160],
        [-96, -448, -128],
        [-96, 448, -128],
        [-96, -448, -96],
        [-96, 448, -96],
        [-96, -448, -64],
        [-96, 448, -64],
        [-96, -448, -32],
        [-96, 448, -32],
        [-96, -448, 0],
        [-96, 448, 0],
        [-96, -448, 32],
        [-96, 448, 32],
        [-96, -448, 64],
        [-96, 448, 64],
        [-96, -448, 96],
        [-96, 448, 96],
        [-96, -448, 128],
        [-96, 448, 128],
        [-96, -448, 160],
        [-96, 448, 160],
        [-96, -448, 192],
        [-96, 448, 192],
        [-96, -448, 224],
        [-96, 448, 224],
        [-96, -448, 256],
        [-96, 448, 256],
        [-96, -448, 288],
        [-96, 448, 288],
        [-96, -448, 320],
        [-96, 448, 320],
        [-96, -448, 352],
        [-96, 448, 352],
        [-96, -448, 384],
        [-96, 448, 384],
        [-96, -448, 416],
        [-96, 448, 416],
        [-64, -448, -448],
        [-64, -448, 448],
        [-64, -416, -448],
        [-64, -416, 448],
        [-64, -384, -448],
        [-64, -384, 448],
        [-64, -352, -448],
        [-64, -352, 448],
        [-64, -320, -448],
        [-64, -320, 448],
        [-64, -288, -448],
        [-64, -288, 448],
        [-64, -256, -448],
        [-64, -256, 448],
        [-64, -224, -448],
        [-64, -224, 448],
        [-64, -192, -448],
        [-64, -192, 448],
        [-64, -160, -448],
        [-64, -160, 448],
        [-64, -128, -448],
        [-64, -128, 448],
        [-64, -96, -448],
        [-64, -96, 448],
        [-64, -64, -448],
        [-64, -64, 448],
        [-64, -32, -448],
        [-64, -32, 448],
        [-64, 0, -448],
        [-64, 0, 448],
        [-64, 32, -448],
        [-64, 32, 448],
        [-64, 64, -448],
        [-64, 64, 448],
        [-64, 96, -448],
        [-64, 96, 448],
        [-64, 128, -448],
        [-64, 128, 448],
        [-64, 160, -448],
        [-64, 160, 448],
        [-64, 192, -448],
        [-64, 192, 448],
        [-64, 224, -448],
        [-64, 224, 448],
        [-64, 256, -448],
        [-64, 256, 448],
        [-64, 288, -448],
        [-64, 288, 448],
        [-64, 320, -448],
        [-64, 320, 448],
        [-64, 352, -448],
        [-64, 352, 448],
        [-64, 384, -448],
        [-64, 384, 448],
        [-64, 416, -448],
        [-64, 416, 448],
        [-64, 448, -448],
        [-64, 448, 448],
        [-64, -448, -416],
        [-64, 448, -416],
        [-64, -448, -384],
        [-64, 448, -384],
        [-64, -448, -352],
        [-64, 448, -352],
        [-64, -448, -320],
        [-64, 448, -320],
        [-64, -448, -288],
        [-64, 448, -288],
        [-64, -448, -256],
        [-64, 448, -256],
        [-64, -448, -224],
        [-64, 448, -224],
        [-64, -448, -192],
        [-64, 448, -192],
        [-64, -448, -160],
        [-64, 448, -160],
        [-64, -448, -128],
        [-64, 448, -128],
        [-64, -448, -96],
        [-64, 448, -96],
        [-64, -448, -64],
        [-64, 448, -64],
        [-64, -448, -32],
        [-64, 448, -32],
        [-64, -448, 0],
        [-64, 448, 0],
        [-64, -448, 32],
        [-64, 448, 32],
        [-64, -448, 64],
        [-64, 448, 64],
        [-64, -448, 96],
        [-64, 448, 96],
        [-64, -448, 128],
        [-64, 448, 128],
        [-64, -448, 160],
        [-64, 448, 160],
        [-64, -448, 192],
        [-64, 448, 192],
        [-64, -448, 224],
        [-64, 448, 224],
        [-64, -448, 256],
        [-64, 448, 256],
        [-64, -448, 288],
        [-64, 448, 288],
        [-64, -448, 320],
        [-64, 448, 320],
        [-64, -448, 352],
        [-64, 448, 352],
        [-64, -448, 384],
        [-64, 448, 384],
        [-64, -448, 416],
        [-64, 448, 416],
        [-32, -448, -448],
        [-32, -448, 448],
        [-32, -416, -448],
        [-32, -416, 448],
        [-32, -384, -448],
        [-32, -384, 448],
        [-32, -352, -448],
        [-32, -352, 448],
        [-32, -320, -448],
        [-32, -320, 448],
        [-32, -288, -448],
        [-32, -288, 448],
        [-32, -256, -448],
        [-32, -256, 448],
        [-32, -224, -448],
        [-32, -224, 448],
        [-32, -192, -448],
        [-32, -192, 448],
        [-32, -160, -448],
        [-32, -160, 448],
        [-32, -128, -448],
        [-32, -128, 448],
        [-32, -96, -448],
        [-32, -96, 448],
        [-32, -64, -448],
        [-32, -64, 448],
        [-32, -32, -448],
        [-32, -32, 448],
        [-32, 0, -448],
        [-32, 0, 448],
        [-32, 32, -448],
        [-32, 32, 448],
        [-32, 64, -448],
        [-32, 64, 448],
        [-32, 96, -448],
        [-32, 96, 448],
        [-32, 128, -448],
        [-32, 128, 448],
        [-32, 160, -448],
        [-32, 160, 448],
        [-32, 192, -448],
        [-32, 192, 448],
        [-32, 224, -448],
        [-32, 224, 448],
        [-32, 256, -448],
        [-32, 256, 448],
        [-32, 288, -448],
        [-32, 288, 448],
        [-32, 320, -448],
        [-32, 320, 448],
        [-32, 352, -448],
        [-32, 352, 448],
        [-32, 384, -448],
        [-32, 384, 448],
        [-32, 416, -448],
        [-32, 416, 448],
        [-32, 448, -448],
        [-32, 448, 448],
        [-32, -448, -416],
        [-32, 448, -416],
        [-32, -448, -384],
        [-32, 448, -384],
        [-32, -448, -352],
        [-32, 448, -352],
        [-32, -448, -320],
        [-32, 448, -320],
        [-32, -448, -288],
        [-32, 448, -288],
        [-32, -448, -256],
        [-32, 448, -256],
        [-32, -448, -224],
        [-32, 448, -224],
        [-32, -448, -192],
        [-32, 448, -192],
        [-32, -448, -160],
        [-32, 448, -160],
        [-32, -448, -128],
        [-32, 448, -128],
        [-32, -448, -96],
        [-32, 448, -96],
        [-32, -448, -64],
        [-32, 448, -64],
        [-32, -448, -32],
        [-32, 448, -32],
        [-32, -448, 0],
        [-32, 448, 0],
        [-32, -448, 32],
        [-32, 448, 32],
        [-32, -448, 64],
        [-32, 448, 64],
        [-32, -448, 96],
        [-32, 448, 96],
        [-32, -448, 128],
        [-32, 448, 128],
        [-32, -448, 160],
        [-32, 448, 160],
        [-32, -448, 192],
        [-32, 448, 192],
        [-32, -448, 224],
        [-32, 448, 224],
        [-32, -448, 256],
        [-32, 448, 256],
        [-32, -448, 288],
        [-32, 448, 288],
        [-32, -448, 320],
        [-32, 448, 320],
        [-32, -448, 352],
        [-32, 448, 352],
        [-32, -448, 384],
        [-32, 448, 384],
        [-32, -448, 416],
        [-32, 448, 416],
        [0, -448, -448],
        [0, -448, 448],
        [0, -416, -448],
        [0, -416, 448],
        [0, -384, -448],
        [0, -384, 448],
        [0, -352, -448],
        [0, -352, 448],
        [0, -320, -448],
        [0, -320, 448],
        [0, -288, -448],
        [0, -288, 448],
        [0, -256, -448],
        [0, -256, 448],
        [0, -224, -448],
        [0, -224, 448],
        [0, -192, -448],
        [0, -192, 448],
        [0, -160, -448],
        [0, -160, 448],
        [0, -128, -448],
        [0, -128, 448],
        [0, -96, -448],
        [0, -96, 448],
        [0, -64, -448],
        [0, -64, 448],
        [0, -32, -448],
        [0, -32, 448],
        [0, 0, -448],
        [0, 0, 448],
        [0, 32, -448],
        [0, 32, 448],
        [0, 64, -448],
        [0, 64, 448],
        [0, 96, -448],
        [0, 96, 448],
        [0, 128, -448],
        [0, 128, 448],
        [0, 160, -448],
        [0, 160, 448],
        [0, 192, -448],
        [0, 192, 448],
        [0, 224, -448],
        [0, 224, 448],
        [0, 256, -448],
        [0, 256, 448],
        [0, 288, -448],
        [0, 288, 448],
        [0, 320, -448],
        [0, 320, 448],
        [0, 352, -448],
        [0, 352, 448],
        [0, 384, -448],
        [0, 384, 448],
        [0, 416, -448],
        [0, 416, 448],
        [0, 448, -448],
        [0, 448, 448],
        [0, -448, -416],
        [0, 448, -416],
        [0, -448, -384],
        [0, 448, -384],
        [0, -448, -352],
        [0, 448, -352],
        [0, -448, -320],
        [0, 448, -320],
        [0, -448, -288],
        [0, 448, -288],
        [0, -448, -256],
        [0, 448, -256],
        [0, -448, -224],
        [0, 448, -224],
        [0, -448, -192],
        [0, 448, -192],
        [0, -448, -160],
        [0, 448, -160],
        [0, -448, -128],
        [0, 448, -128],
        [0, -448, -96],
        [0, 448, -96],
        [0, -448, -64],
        [0, 448, -64],
        [0, -448, -32],
        [0, 448, -32],
        [0, -448, 0],
        [0, 448, 0],
        [0, -448, 32],
        [0, 448, 32],
        [0, -448, 64],
        [0, 448, 64],
        [0, -448, 96],
        [0, 448, 96],
        [0, -448, 128],
        [0, 448, 128],
        [0, -448, 160],
        [0, 448, 160],
        [0, -448, 192],
        [0, 448, 192],
        [0, -448, 224],
        [0, 448, 224],
        [0, -448, 256],
        [0, 448, 256],
        [0, -448, 288],
        [0, 448, 288],
        [0, -448, 320],
        [0, 448, 320],
        [0, -448, 352],
        [0, 448, 352],
        [0, -448, 384],
        [0, 448, 384],
        [0, -448, 416],
        [0, 448, 416],
        [32, -448, -448],
        [32, -448, 448],
        [32, -416, -448],
        [32, -416, 448],
        [32, -384, -448],
        [32, -384, 448],
        [32, -352, -448],
        [32, -352, 448],
        [32, -320, -448],
        [32, -320, 448],
        [32, -288, -448],
        [32, -288, 448],
        [32, -256, -448],
        [32, -256, 448],
        [32, -224, -448],
        [32, -224, 448],
        [32, -192, -448],
        [32, -192, 448],
        [32, -160, -448],
        [32, -160, 448],
        [32, -128, -448],
        [32, -128, 448],
        [32, -96, -448],
        [32, -96, 448],
        [32, -64, -448],
        [32, -64, 448],
        [32, -32, -448],
        [32, -32, 448],
        [32, 0, -448],
        [32, 0, 448],
        [32, 32, -448],
        [32, 32, 448],
        [32, 64, -448],
        [32, 64, 448],
        [32, 96, -448],
        [32, 96, 448],
        [32, 128, -448],
        [32, 128, 448],
        [32, 160, -448],
        [32, 160, 448],
        [32, 192, -448],
        [32, 192, 448],
        [32, 224, -448],
        [32, 224, 448],
        [32, 256, -448],
        [32, 256, 448],
        [32, 288, -448],
        [32, 288, 448],
        [32, 320, -448],
        [32, 320, 448],
        [32, 352, -448],
        [32, 352, 448],
        [32, 384, -448],
        [32, 384, 448],
        [32, 416, -448],
        [32, 416, 448],
        [32, 448, -448],
        [32, 448, 448],
        [32, -448, -416],
        [32, 448, -416],
        [32, -448, -384],
        [32, 448, -384],
        [32, -448, -352],
        [32, 448, -352],
        [32, -448, -320],
        [32, 448, -320],
        [32, -448, -288],
        [32, 448, -288],
        [32, -448, -256],
        [32, 448, -256],
        [32, -448, -224],
        [32, 448, -224],
        [32, -448, -192],
        [32, 448, -192],
        [32, -448, -160],
        [32, 448, -160],
        [32, -448, -128],
        [32, 448, -128],
        [32, -448, -96],
        [32, 448, -96],
        [32, -448, -64],
        [32, 448, -64],
        [32, -448, -32],
        [32, 448, -32],
        [32, -448, 0],
        [32, 448, 0],
        [32, -448, 32],
        [32, 448, 32],
        [32, -448, 64],
        [32, 448, 64],
        [32, -448, 96],
        [32, 448, 96],
        [32, -448, 128],
        [32, 448, 128],
        [32, -448, 160],
        [32, 448, 160],
        [32, -448, 192],
        [32, 448, 192],
        [32, -448, 224],
        [32, 448, 224],
        [32, -448, 256],
        [32, 448, 256],
        [32, -448, 288],
        [32, 448, 288],
        [32, -448, 320],
        [32, 448, 320],
        [32, -448, 352],
        [32, 448, 352],
        [32, -448, 384],
        [32, 448, 384],
        [32, -448, 416],
        [32, 448, 416],
        [64, -448, -448],
        [64, -448, 448],
        [64, -416, -448],
        [64, -416, 448],
        [64, -384, -448],
        [64, -384, 448],
        [64, -352, -448],
        [64, -352, 448],
        [64, -320, -448],
        [64, -320, 448],
        [64, -288, -448],
        [64, -288, 448],
        [64, -256, -448],
        [64, -256, 448],
        [64, -224, -448],
        [64, -224, 448],
        [64, -192, -448],
        [64, -192, 448],
        [64, -160, -448],
        [64, -160, 448],
        [64, -128, -448],
        [64, -128, 448],
        [64, -96, -448],
        [64, -96, 448],
        [64, -64, -448],
        [64, -64, 448],
        [64, -32, -448],
        [64, -32, 448],
        [64, 0, -448],
        [64, 0, 448],
        [64, 32, -448],
        [64, 32, 448],
        [64, 64, -448],
        [64, 64, 448],
        [64, 96, -448],
        [64, 96, 448],
        [64, 128, -448],
        [64, 128, 448],
        [64, 160, -448],
        [64, 160, 448],
        [64, 192, -448],
        [64, 192, 448],
        [64, 224, -448],
        [64, 224, 448],
        [64, 256, -448],
        [64, 256, 448],
        [64, 288, -448],
        [64, 288, 448],
        [64, 320, -448],
        [64, 320, 448],
        [64, 352, -448],
        [64, 352, 448],
        [64, 384, -448],
        [64, 384, 448],
        [64, 416, -448],
        [64, 416, 448],
        [64, 448, -448],
        [64, 448, 448],
        [64, -448, -416],
        [64, 448, -416],
        [64, -448, -384],
        [64, 448, -384],
        [64, -448, -352],
        [64, 448, -352],
        [64, -448, -320],
        [64, 448, -320],
        [64, -448, -288],
        [64, 448, -288],
        [64, -448, -256],
        [64, 448, -256],
        [64, -448, -224],
        [64, 448, -224],
        [64, -448, -192],
        [64, 448, -192],
        [64, -448, -160],
        [64, 448, -160],
        [64, -448, -128],
        [64, 448, -128],
        [64, -448, -96],
        [64, 448, -96],
        [64, -448, -64],
        [64, 448, -64],
        [64, -448, -32],
        [64, 448, -32],
        [64, -448, 0],
        [64, 448, 0],
        [64, -448, 32],
        [64, 448, 32],
        [64, -448, 64],
        [64, 448, 64],
        [64, -448, 96],
        [64, 448, 96],
        [64, -448, 128],
        [64, 448, 128],
        [64, -448, 160],
        [64, 448, 160],
        [64, -448, 192],
        [64, 448, 192],
        [64, -448, 224],
        [64, 448, 224],
        [64, -448, 256],
        [64, 448, 256],
        [64, -448, 288],
        [64, 448, 288],
        [64, -448, 320],
        [64, 448, 320],
        [64, -448, 352],
        [64, 448, 352],
        [64, -448, 384],
        [64, 448, 384],
        [64, -448, 416],
        [64, 448, 416],
        [96, -448, -448],
        [96, -448, 448],
        [96, -416, -448],
        [96, -416, 448],
        [96, -384, -448],
        [96, -384, 448],
        [96, -352, -448],
        [96, -352, 448],
        [96, -320, -448],
        [96, -320, 448],
        [96, -288, -448],
        [96, -288, 448],
        [96, -256, -448],
        [96, -256, 448],
        [96, -224, -448],
        [96, -224, 448],
        [96, -192, -448],
        [96, -192, 448],
        [96, -160, -448],
        [96, -160, 448],
        [96, -128, -448],
        [96, -128, 448],
        [96, -96, -448],
        [96, -96, 448],
        [96, -64, -448],
        [96, -64, 448],
        [96, -32, -448],
        [96, -32, 448],
        [96, 0, -448],
        [96, 0, 448],
        [96, 32, -448],
        [96, 32, 448],
        [96, 64, -448],
        [96, 64, 448],
        [96, 96, -448],
        [96, 96, 448],
        [96, 128, -448],
        [96, 128, 448],
        [96, 160, -448],
        [96, 160, 448],
        [96, 192, -448],
        [96, 192, 448],
        [96, 224, -448],
        [96, 224, 448],
        [96, 256, -448],
        [96, 256, 448],
        [96, 288, -448],
        [96, 288, 448],
        [96, 320, -448],
        [96, 320, 448],
        [96, 352, -448],
        [96, 352, 448],
        [96, 384, -448],
        [96, 384, 448],
        [96, 416, -448],
        [96, 416, 448],
        [96, 448, -448],
        [96, 448, 448],
        [96, -448, -416],
        [96, 448, -416],
        [96, -448, -384],
        [96, 448, -384],
        [96, -448, -352],
        [96, 448, -352],
        [96, -448, -320],
        [96, 448, -320],
        [96, -448, -288],
        [96, 448, -288],
        [96, -448, -256],
        [96, 448, -256],
        [96, -448, -224],
        [96, 448, -224],
        [96, -448, -192],
        [96, 448, -192],
        [96, -448, -160],
        [96, 448, -160],
        [96, -448, -128],
        [96, 448, -128],
        [96, -448, -96],
        [96, 448, -96],
        [96, -448, -64],
        [96, 448, -64],
        [96, -448, -32],
        [96, 448, -32],
        [96, -448, 0],
        [96, 448, 0],
        [96, -448, 32],
        [96, 448, 32],
        [96, -448, 64],
        [96, 448, 64],
        [96, -448, 96],
        [96, 448, 96],
        [96, -448, 128],
        [96, 448, 128],
        [96, -448, 160],
        [96, 448, 160],
        [96, -448, 192],
        [96, 448, 192],
        [96, -448, 224],
        [96, 448, 224],
        [96, -448, 256],
        [96, 448, 256],
        [96, -448, 288],
        [96, 448, 288],
        [96, -448, 320],
        [96, 448, 320],
        [96, -448, 352],
        [96, 448, 352],
        [96, -448, 384],
        [96, 448, 384],
        [96, -448, 416],
        [96, 448, 416],
        [128, -448, -448],
        [128, -448, 448],
        [128, -416, -448],
        [128, -416, 448],
        [128, -384, -448],
        [128, -384, 448],
        [128, -352, -448],
        [128, -352, 448],
        [128, -320, -448],
        [128, -320, 448],
        [128, -288, -448],
        [128, -288, 448],
        [128, -256, -448],
        [128, -256, 448],
        [128, -224, -448],
        [128, -224, 448],
        [128, -192, -448],
        [128, -192, 448],
        [128, -160, -448],
        [128, -160, 448],
        [128, -128, -448],
        [128, -128, 448],
        [128, -96, -448],
        [128, -96, 448],
        [128, -64, -448],
        [128, -64, 448],
        [128, -32, -448],
        [128, -32, 448],
        [128, 0, -448],
        [128, 0, 448],
        [128, 32, -448],
        [128, 32, 448],
        [128, 64, -448],
        [128, 64, 448],
        [128, 96, -448],
        [128, 96, 448],
        [128, 128, -448],
        [128, 128, 448],
        [128, 160, -448],
        [128, 160, 448],
        [128, 192, -448],
        [128, 192, 448],
        [128, 224, -448],
        [128, 224, 448],
        [128, 256, -448],
        [128, 256, 448],
        [128, 288, -448],
        [128, 288, 448],
        [128, 320, -448],
        [128, 320, 448],
        [128, 352, -448],
        [128, 352, 448],
        [128, 384, -448],
        [128, 384, 448],
        [128, 416, -448],
        [128, 416, 448],
        [128, 448, -448],
        [128, 448, 448],
        [128, -448, -416],
        [128, 448, -416],
        [128, -448, -384],
        [128, 448, -384],
        [128, -448, -352],
        [128, 448, -352],
        [128, -448, -320],
        [128, 448, -320],
        [128, -448, -288],
        [128, 448, -288],
        [128, -448, -256],
        [128, 448, -256],
        [128, -448, -224],
        [128, 448, -224],
        [128, -448, -192],
        [128, 448, -192],
        [128, -448, -160],
        [128, 448, -160],
        [128, -448, -128],
        [128, 448, -128],
        [128, -448, -96],
        [128, 448, -96],
        [128, -448, -64],
        [128, 448, -64],
        [128, -448, -32],
        [128, 448, -32],
        [128, -448, 0],
        [128, 448, 0],
        [128, -448, 32],
        [128, 448, 32],
        [128, -448, 64],
        [128, 448, 64],
        [128, -448, 96],
        [128, 448, 96],
        [128, -448, 128],
        [128, 448, 128],
        [128, -448, 160],
        [128, 448, 160],
        [128, -448, 192],
        [128, 448, 192],
        [128, -448, 224],
        [128, 448, 224],
        [128, -448, 256],
        [128, 448, 256],
        [128, -448, 288],
        [128, 448, 288],
        [128, -448, 320],
        [128, 448, 320],
        [128, -448, 352],
        [128, 448, 352],
        [128, -448, 384],
        [128, 448, 384],
        [128, -448, 416],
        [128, 448, 416],
        [160, -448, -448],
        [160, -448, 448],
        [160, -416, -448],
        [160, -416, 448],
        [160, -384, -448],
        [160, -384, 448],
        [160, -352, -448],
        [160, -352, 448],
        [160, -320, -448],
        [160, -320, 448],
        [160, -288, -448],
        [160, -288, 448],
        [160, -256, -448],
        [160, -256, 448],
        [160, -224, -448],
        [160, -224, 448],
        [160, -192, -448],
        [160, -192, 448],
        [160, -160, -448],
        [160, -160, 448],
        [160, -128, -448],
        [160, -128, 448],
        [160, -96, -448],
        [160, -96, 448],
        [160, -64, -448],
        [160, -64, 448],
        [160, -32, -448],
        [160, -32, 448],
        [160, 0, -448],
        [160, 0, 448],
        [160, 32, -448],
        [160, 32, 448],
        [160, 64, -448],
        [160, 64, 448],
        [160, 96, -448],
        [160, 96, 448],
        [160, 128, -448],
        [160, 128, 448],
        [160, 160, -448],
        [160, 160, 448],
        [160, 192, -448],
        [160, 192, 448],
        [160, 224, -448],
        [160, 224, 448],
        [160, 256, -448],
        [160, 256, 448],
        [160, 288, -448],
        [160, 288, 448],
        [160, 320, -448],
        [160, 320, 448],
        [160, 352, -448],
        [160, 352, 448],
        [160, 384, -448],
        [160, 384, 448],
        [160, 416, -448],
        [160, 416, 448],
        [160, 448, -448],
        [160, 448, 448],
        [160, -448, -416],
        [160, 448, -416],
        [160, -448, -384],
        [160, 448, -384],
        [160, -448, -352],
        [160, 448, -352],
        [160, -448, -320],
        [160, 448, -320],
        [160, -448, -288],
        [160, 448, -288],
        [160, -448, -256],
        [160, 448, -256],
        [160, -448, -224],
        [160, 448, -224],
        [160, -448, -192],
        [160, 448, -192],
        [160, -448, -160],
        [160, 448, -160],
        [160, -448, -128],
        [160, 448, -128],
        [160, -448, -96],
        [160, 448, -96],
        [160, -448, -64],
        [160, 448, -64],
        [160, -448, -32],
        [160, 448, -32],
        [160, -448, 0],
        [160, 448, 0],
        [160, -448, 32],
        [160, 448, 32],
        [160, -448, 64],
        [160, 448, 64],
        [160, -448, 96],
        [160, 448, 96],
        [160, -448, 128],
        [160, 448, 128],
        [160, -448, 160],
        [160, 448, 160],
        [160, -448, 192],
        [160, 448, 192],
        [160, -448, 224],
        [160, 448, 224],
        [160, -448, 256],
        [160, 448, 256],
        [160, -448, 288],
        [160, 448, 288],
        [160, -448, 320],
        [160, 448, 320],
        [160, -448, 352],
        [160, 448, 352],
        [160, -448, 384],
        [160, 448, 384],
        [160, -448, 416],
        [160, 448, 416],
        [192, -448, -448],
        [192, -448, 448],
        [192, -416, -448],
        [192, -416, 448],
        [192, -384, -448],
        [192, -384, 448],
        [192, -352, -448],
        [192, -352, 448],
        [192, -320, -448],
        [192, -320, 448],
        [192, -288, -448],
        [192, -288, 448],
        [192, -256, -448],
        [192, -256, 448],
        [192, -224, -448],
        [192, -224, 448],
        [192, -192, -448],
        [192, -192, 448],
        [192, -160, -448],
        [192, -160, 448],
        [192, -128, -448],
        [192, -128, 448],
        [192, -96, -448],
        [192, -96, 448],
        [192, -64, -448],
        [192, -64, 448],
        [192, -32, -448],
        [192, -32, 448],
        [192, 0, -448],
        [192, 0, 448],
        [192, 32, -448],
        [192, 32, 448],
        [192, 64, -448],
        [192, 64, 448],
        [192, 96, -448],
        [192, 96, 448],
        [192, 128, -448],
        [192, 128, 448],
        [192, 160, -448],
        [192, 160, 448],
        [192, 192, -448],
        [192, 192, 448],
        [192, 224, -448],
        [192, 224, 448],
        [192, 256, -448],
        [192, 256, 448],
        [192, 288, -448],
        [192, 288, 448],
        [192, 320, -448],
        [192, 320, 448],
        [192, 352, -448],
        [192, 352, 448],
        [192, 384, -448],
        [192, 384, 448],
        [192, 416, -448],
        [192, 416, 448],
        [192, 448, -448],
        [192, 448, 448],
        [192, -448, -416],
        [192, 448, -416],
        [192, -448, -384],
        [192, 448, -384],
        [192, -448, -352],
        [192, 448, -352],
        [192, -448, -320],
        [192, 448, -320],
        [192, -448, -288],
        [192, 448, -288],
        [192, -448, -256],
        [192, 448, -256],
        [192, -448, -224],
        [192, 448, -224],
        [192, -448, -192],
        [192, 448, -192],
        [192, -448, -160],
        [192, 448, -160],
        [192, -448, -128],
        [192, 448, -128],
        [192, -448, -96],
        [192, 448, -96],
        [192, -448, -64],
        [192, 448, -64],
        [192, -448, -32],
        [192, 448, -32],
        [192, -448, 0],
        [192, 448, 0],
        [192, -448, 32],
        [192, 448, 32],
        [192, -448, 64],
        [192, 448, 64],
        [192, -448, 96],
        [192, 448, 96],
        [192, -448, 128],
        [192, 448, 128],
        [192, -448, 160],
        [192, 448, 160],
        [192, -448, 192],
        [192, 448, 192],
        [192, -448, 224],
        [192, 448, 224],
        [192, -448, 256],
        [192, 448, 256],
        [192, -448, 288],
        [192, 448, 288],
        [192, -448, 320],
        [192, 448, 320],
        [192, -448, 352],
        [192, 448, 352],
        [192, -448, 384],
        [192, 448, 384],
        [192, -448, 416],
        [192, 448, 416],
        [224, -448, -448],
        [224, -448, 448],
        [224, -416, -448],
        [224, -416, 448],
        [224, -384, -448],
        [224, -384, 448],
        [224, -352, -448],
        [224, -352, 448],
        [224, -320, -448],
        [224, -320, 448],
        [224, -288, -448],
        [224, -288, 448],
        [224, -256, -448],
        [224, -256, 448],
        [224, -224, -448],
        [224, -224, 448],
        [224, -192, -448],
        [224, -192, 448],
        [224, -160, -448],
        [224, -160, 448],
        [224, -128, -448],
        [224, -128, 448],
        [224, -96, -448],
        [224, -96, 448],
        [224, -64, -448],
        [224, -64, 448],
        [224, -32, -448],
        [224, -32, 448],
        [224, 0, -448],
        [224, 0, 448],
        [224, 32, -448],
        [224, 32, 448],
        [224, 64, -448],
        [224, 64, 448],
        [224, 96, -448],
        [224, 96, 448],
        [224, 128, -448],
        [224, 128, 448],
        [224, 160, -448],
        [224, 160, 448],
        [224, 192, -448],
        [224, 192, 448],
        [224, 224, -448],
        [224, 224, 448],
        [224, 256, -448],
        [224, 256, 448],
        [224, 288, -448],
        [224, 288, 448],
        [224, 320, -448],
        [224, 320, 448],
        [224, 352, -448],
        [224, 352, 448],
        [224, 384, -448],
        [224, 384, 448],
        [224, 416, -448],
        [224, 416, 448],
        [224, 448, -448],
        [224, 448, 448],
        [224, -448, -416],
        [224, 448, -416],
        [224, -448, -384],
        [224, 448, -384],
        [224, -448, -352],
        [224, 448, -352],
        [224, -448, -320],
        [224, 448, -320],
        [224, -448, -288],
        [224, 448, -288],
        [224, -448, -256],
        [224, 448, -256],
        [224, -448, -224],
        [224, 448, -224],
        [224, -448, -192],
        [224, 448, -192],
        [224, -448, -160],
        [224, 448, -160],
        [224, -448, -128],
        [224, 448, -128],
        [224, -448, -96],
        [224, 448, -96],
        [224, -448, -64],
        [224, 448, -64],
        [224, -448, -32],
        [224, 448, -32],
        [224, -448, 0],
        [224, 448, 0],
        [224, -448, 32],
        [224, 448, 32],
        [224, -448, 64],
        [224, 448, 64],
        [224, -448, 96],
        [224, 448, 96],
        [224, -448, 128],
        [224, 448, 128],
        [224, -448, 160],
        [224, 448, 160],
        [224, -448, 192],
        [224, 448, 192],
        [224, -448, 224],
        [224, 448, 224],
        [224, -448, 256],
        [224, 448, 256],
        [224, -448, 288],
        [224, 448, 288],
        [224, -448, 320],
        [224, 448, 320],
        [224, -448, 352],
        [224, 448, 352],
        [224, -448, 384],
        [224, 448, 384],
        [224, -448, 416],
        [224, 448, 416],
        [256, -448, -448],
        [256, -448, 448],
        [256, -416, -448],
        [256, -416, 448],
        [256, -384, -448],
        [256, -384, 448],
        [256, -352, -448],
        [256, -352, 448],
        [256, -320, -448],
        [256, -320, 448],
        [256, -288, -448],
        [256, -288, 448],
        [256, -256, -448],
        [256, -256, 448],
        [256, -224, -448],
        [256, -224, 448],
        [256, -192, -448],
        [256, -192, 448],
        [256, -160, -448],
        [256, -160, 448],
        [256, -128, -448],
        [256, -128, 448],
        [256, -96, -448],
        [256, -96, 448],
        [256, -64, -448],
        [256, -64, 448],
        [256, -32, -448],
        [256, -32, 448],
        [256, 0, -448],
        [256, 0, 448],
        [256, 32, -448],
        [256, 32, 448],
        [256, 64, -448],
        [256, 64, 448],
        [256, 96, -448],
        [256, 96, 448],
        [256, 128, -448],
        [256, 128, 448],
        [256, 160, -448],
        [256, 160, 448],
        [256, 192, -448],
        [256, 192, 448],
        [256, 224, -448],
        [256, 224, 448],
        [256, 256, -448],
        [256, 256, 448],
        [256, 288, -448],
        [256, 288, 448],
        [256, 320, -448],
        [256, 320, 448],
        [256, 352, -448],
        [256, 352, 448],
        [256, 384, -448],
        [256, 384, 448],
        [256, 416, -448],
        [256, 416, 448],
        [256, 448, -448],
        [256, 448, 448],
        [256, -448, -416],
        [256, 448, -416],
        [256, -448, -384],
        [256, 448, -384],
        [256, -448, -352],
        [256, 448, -352],
        [256, -448, -320],
        [256, 448, -320],
        [256, -448, -288],
        [256, 448, -288],
        [256, -448, -256],
        [256, 448, -256],
        [256, -448, -224],
        [256, 448, -224],
        [256, -448, -192],
        [256, 448, -192],
        [256, -448, -160],
        [256, 448, -160],
        [256, -448, -128],
        [256, 448, -128],
        [256, -448, -96],
        [256, 448, -96],
        [256, -448, -64],
        [256, 448, -64],
        [256, -448, -32],
        [256, 448, -32],
        [256, -448, 0],
        [256, 448, 0],
        [256, -448, 32],
        [256, 448, 32],
        [256, -448, 64],
        [256, 448, 64],
        [256, -448, 96],
        [256, 448, 96],
        [256, -448, 128],
        [256, 448, 128],
        [256, -448, 160],
        [256, 448, 160],
        [256, -448, 192],
        [256, 448, 192],
        [256, -448, 224],
        [256, 448, 224],
        [256, -448, 256],
        [256, 448, 256],
        [256, -448, 288],
        [256, 448, 288],
        [256, -448, 320],
        [256, 448, 320],
        [256, -448, 352],
        [256, 448, 352],
        [256, -448, 384],
        [256, 448, 384],
        [256, -448, 416],
        [256, 448, 416],
        [288, -448, -448],
        [288, -448, 448],
        [288, -416, -448],
        [288, -416, 448],
        [288, -384, -448],
        [288, -384, 448],
        [288, -352, -448],
        [288, -352, 448],
        [288, -320, -448],
        [288, -320, 448],
        [288, -288, -448],
        [288, -288, 448],
        [288, -256, -448],
        [288, -256, 448],
        [288, -224, -448],
        [288, -224, 448],
        [288, -192, -448],
        [288, -192, 448],
        [288, -160, -448],
        [288, -160, 448],
        [288, -128, -448],
        [288, -128, 448],
        [288, -96, -448],
        [288, -96, 448],
        [288, -64, -448],
        [288, -64, 448],
        [288, -32, -448],
        [288, -32, 448],
        [288, 0, -448],
        [288, 0, 448],
        [288, 32, -448],
        [288, 32, 448],
        [288, 64, -448],
        [288, 64, 448],
        [288, 96, -448],
        [288, 96, 448],
        [288, 128, -448],
        [288, 128, 448],
        [288, 160, -448],
        [288, 160, 448],
        [288, 192, -448],
        [288, 192, 448],
        [288, 224, -448],
        [288, 224, 448],
        [288, 256, -448],
        [288, 256, 448],
        [288, 288, -448],
        [288, 288, 448],
        [288, 320, -448],
        [288, 320, 448],
        [288, 352, -448],
        [288, 352, 448],
        [288, 384, -448],
        [288, 384, 448],
        [288, 416, -448],
        [288, 416, 448],
        [288, 448, -448],
        [288, 448, 448],
        [288, -448, -416],
        [288, 448, -416],
        [288, -448, -384],
        [288, 448, -384],
        [288, -448, -352],
        [288, 448, -352],
        [288, -448, -320],
        [288, 448, -320],
        [288, -448, -288],
        [288, 448, -288],
        [288, -448, -256],
        [288, 448, -256],
        [288, -448, -224],
        [288, 448, -224],
        [288, -448, -192],
        [288, 448, -192],
        [288, -448, -160],
        [288, 448, -160],
        [288, -448, -128],
        [288, 448, -128],
        [288, -448, -96],
        [288, 448, -96],
        [288, -448, -64],
        [288, 448, -64],
        [288, -448, -32],
        [288, 448, -32],
        [288, -448, 0],
        [288, 448, 0],
        [288, -448, 32],
        [288, 448, 32],
        [288, -448, 64],
        [288, 448, 64],
        [288, -448, 96],
        [288, 448, 96],
        [288, -448, 128],
        [288, 448, 128],
        [288, -448, 160],
        [288, 448, 160],
        [288, -448, 192],
        [288, 448, 192],
        [288, -448, 224],
        [288, 448, 224],
        [288, -448, 256],
        [288, 448, 256],
        [288, -448, 288],
        [288, 448, 288],
        [288, -448, 320],
        [288, 448, 320],
        [288, -448, 352],
        [288, 448, 352],
        [288, -448, 384],
        [288, 448, 384],
        [288, -448, 416],
        [288, 448, 416],
        [320, -448, -448],
        [320, -448, 448],
        [320, -416, -448],
        [320, -416, 448],
        [320, -384, -448],
        [320, -384, 448],
        [320, -352, -448],
        [320, -352, 448],
        [320, -320, -448],
        [320, -320, 448],
        [320, -288, -448],
        [320, -288, 448],
        [320, -256, -448],
        [320, -256, 448],
        [320, -224, -448],
        [320, -224, 448],
        [320, -192, -448],
        [320, -192, 448],
        [320, -160, -448],
        [320, -160, 448],
        [320, -128, -448],
        [320, -128, 448],
        [320, -96, -448],
        [320, -96, 448],
        [320, -64, -448],
        [320, -64, 448],
        [320, -32, -448],
        [320, -32, 448],
        [320, 0, -448],
        [320, 0, 448],
        [320, 32, -448],
        [320, 32, 448],
        [320, 64, -448],
        [320, 64, 448],
        [320, 96, -448],
        [320, 96, 448],
        [320, 128, -448],
        [320, 128, 448],
        [320, 160, -448],
        [320, 160, 448],
        [320, 192, -448],
        [320, 192, 448],
        [320, 224, -448],
        [320, 224, 448],
        [320, 256, -448],
        [320, 256, 448],
        [320, 288, -448],
        [320, 288, 448],
        [320, 320, -448],
        [320, 320, 448],
        [320, 352, -448],
        [320, 352, 448],
        [320, 384, -448],
        [320, 384, 448],
        [320, 416, -448],
        [320, 416, 448],
        [320, 448, -448],
        [320, 448, 448],
        [320, -448, -416],
        [320, 448, -416],
        [320, -448, -384],
        [320, 448, -384],
        [320, -448, -352],
        [320, 448, -352],
        [320, -448, -320],
        [320, 448, -320],
        [320, -448, -288],
        [320, 448, -288],
        [320, -448, -256],
        [320, 448, -256],
        [320, -448, -224],
        [320, 448, -224],
        [320, -448, -192],
        [320, 448, -192],
        [320, -448, -160],
        [320, 448, -160],
        [320, -448, -128],
        [320, 448, -128],
        [320, -448, -96],
        [320, 448, -96],
        [320, -448, -64],
        [320, 448, -64],
        [320, -448, -32],
        [320, 448, -32],
        [320, -448, 0],
        [320, 448, 0],
        [320, -448, 32],
        [320, 448, 32],
        [320, -448, 64],
        [320, 448, 64],
        [320, -448, 96],
        [320, 448, 96],
        [320, -448, 128],
        [320, 448, 128],
        [320, -448, 160],
        [320, 448, 160],
        [320, -448, 192],
        [320, 448, 192],
        [320, -448, 224],
        [320, 448, 224],
        [320, -448, 256],
        [320, 448, 256],
        [320, -448, 288],
        [320, 448, 288],
        [320, -448, 320],
        [320, 448, 320],
        [320, -448, 352],
        [320, 448, 352],
        [320, -448, 384],
        [320, 448, 384],
        [320, -448, 416],
        [320, 448, 416],
        [352, -448, -448],
        [352, -448, 448],
        [352, -416, -448],
        [352, -416, 448],
        [352, -384, -448],
        [352, -384, 448],
        [352, -352, -448],
        [352, -352, 448],
        [352, -320, -448],
        [352, -320, 448],
        [352, -288, -448],
        [352, -288, 448],
        [352, -256, -448],
        [352, -256, 448],
        [352, -224, -448],
        [352, -224, 448],
        [352, -192, -448],
        [352, -192, 448],
        [352, -160, -448],
        [352, -160, 448],
        [352, -128, -448],
        [352, -128, 448],
        [352, -96, -448],
        [352, -96, 448],
        [352, -64, -448],
        [352, -64, 448],
        [352, -32, -448],
        [352, -32, 448],
        [352, 0, -448],
        [352, 0, 448],
        [352, 32, -448],
        [352, 32, 448],
        [352, 64, -448],
        [352, 64, 448],
        [352, 96, -448],
        [352, 96, 448],
        [352, 128, -448],
        [352, 128, 448],
        [352, 160, -448],
        [352, 160, 448],
        [352, 192, -448],
        [352, 192, 448],
        [352, 224, -448],
        [352, 224, 448],
        [352, 256, -448],
        [352, 256, 448],
        [352, 288, -448],
        [352, 288, 448],
        [352, 320, -448],
        [352, 320, 448],
        [352, 352, -448],
        [352, 352, 448],
        [352, 384, -448],
        [352, 384, 448],
        [352, 416, -448],
        [352, 416, 448],
        [352, 448, -448],
        [352, 448, 448],
        [352, -448, -416],
        [352, 448, -416],
        [352, -448, -384],
        [352, 448, -384],
        [352, -448, -352],
        [352, 448, -352],
        [352, -448, -320],
        [352, 448, -320],
        [352, -448, -288],
        [352, 448, -288],
        [352, -448, -256],
        [352, 448, -256],
        [352, -448, -224],
        [352, 448, -224],
        [352, -448, -192],
        [352, 448, -192],
        [352, -448, -160],
        [352, 448, -160],
        [352, -448, -128],
        [352, 448, -128],
        [352, -448, -96],
        [352, 448, -96],
        [352, -448, -64],
        [352, 448, -64],
        [352, -448, -32],
        [352, 448, -32],
        [352, -448, 0],
        [352, 448, 0],
        [352, -448, 32],
        [352, 448, 32],
        [352, -448, 64],
        [352, 448, 64],
        [352, -448, 96],
        [352, 448, 96],
        [352, -448, 128],
        [352, 448, 128],
        [352, -448, 160],
        [352, 448, 160],
        [352, -448, 192],
        [352, 448, 192],
        [352, -448, 224],
        [352, 448, 224],
        [352, -448, 256],
        [352, 448, 256],
        [352, -448, 288],
        [352, 448, 288],
        [352, -448, 320],
        [352, 448, 320],
        [352, -448, 352],
        [352, 448, 352],
        [352, -448, 384],
        [352, 448, 384],
        [352, -448, 416],
        [352, 448, 416],
        [384, -448, -448],
        [384, -448, 448],
        [384, -416, -448],
        [384, -416, 448],
        [384, -384, -448],
        [384, -384, 448],
        [384, -352, -448],
        [384, -352, 448],
        [384, -320, -448],
        [384, -320, 448],
        [384, -288, -448],
        [384, -288, 448],
        [384, -256, -448],
        [384, -256, 448],
        [384, -224, -448],
        [384, -224, 448],
        [384, -192, -448],
        [384, -192, 448],
        [384, -160, -448],
        [384, -160, 448],
        [384, -128, -448],
        [384, -128, 448],
        [384, -96, -448],
        [384, -96, 448],
        [384, -64, -448],
        [384, -64, 448],
        [384, -32, -448],
        [384, -32, 448],
        [384, 0, -448],
        [384, 0, 448],
        [384, 32, -448],
        [384, 32, 448],
        [384, 64, -448],
        [384, 64, 448],
        [384, 96, -448],
        [384, 96, 448],
        [384, 128, -448],
        [384, 128, 448],
        [384, 160, -448],
        [384, 160, 448],
        [384, 192, -448],
        [384, 192, 448],
        [384, 224, -448],
        [384, 224, 448],
        [384, 256, -448],
        [384, 256, 448],
        [384, 288, -448],
        [384, 288, 448],
        [384, 320, -448],
        [384, 320, 448],
        [384, 352, -448],
        [384, 352, 448],
        [384, 384, -448],
        [384, 384, 448],
        [384, 416, -448],
        [384, 416, 448],
        [384, 448, -448],
        [384, 448, 448],
        [384, -448, -416],
        [384, 448, -416],
        [384, -448, -384],
        [384, 448, -384],
        [384, -448, -352],
        [384, 448, -352],
        [384, -448, -320],
        [384, 448, -320],
        [384, -448, -288],
        [384, 448, -288],
        [384, -448, -256],
        [384, 448, -256],
        [384, -448, -224],
        [384, 448, -224],
        [384, -448, -192],
        [384, 448, -192],
        [384, -448, -160],
        [384, 448, -160],
        [384, -448, -128],
        [384, 448, -128],
        [384, -448, -96],
        [384, 448, -96],
        [384, -448, -64],
        [384, 448, -64],
        [384, -448, -32],
        [384, 448, -32],
        [384, -448, 0],
        [384, 448, 0],
        [384, -448, 32],
        [384, 448, 32],
        [384, -448, 64],
        [384, 448, 64],
        [384, -448, 96],
        [384, 448, 96],
        [384, -448, 128],
        [384, 448, 128],
        [384, -448, 160],
        [384, 448, 160],
        [384, -448, 192],
        [384, 448, 192],
        [384, -448, 224],
        [384, 448, 224],
        [384, -448, 256],
        [384, 448, 256],
        [384, -448, 288],
        [384, 448, 288],
        [384, -448, 320],
        [384, 448, 320],
        [384, -448, 352],
        [384, 448, 352],
        [384, -448, 384],
        [384, 448, 384],
        [384, -448, 416],
        [384, 448, 416],
        [416, -448, -448],
        [416, -448, 448],
        [416, -416, -448],
        [416, -416, 448],
        [416, -384, -448],
        [416, -384, 448],
        [416, -352, -448],
        [416, -352, 448],
        [416, -320, -448],
        [416, -320, 448],
        [416, -288, -448],
        [416, -288, 448],
        [416, -256, -448],
        [416, -256, 448],
        [416, -224, -448],
        [416, -224, 448],
        [416, -192, -448],
        [416, -192, 448],
        [416, -160, -448],
        [416, -160, 448],
        [416, -128, -448],
        [416, -128, 448],
        [416, -96, -448],
        [416, -96, 448],
        [416, -64, -448],
        [416, -64, 448],
        [416, -32, -448],
        [416, -32, 448],
        [416, 0, -448],
        [416, 0, 448],
        [416, 32, -448],
        [416, 32, 448],
        [416, 64, -448],
        [416, 64, 448],
        [416, 96, -448],
        [416, 96, 448],
        [416, 128, -448],
        [416, 128, 448],
        [416, 160, -448],
        [416, 160, 448],
        [416, 192, -448],
        [416, 192, 448],
        [416, 224, -448],
        [416, 224, 448],
        [416, 256, -448],
        [416, 256, 448],
        [416, 288, -448],
        [416, 288, 448],
        [416, 320, -448],
        [416, 320, 448],
        [416, 352, -448],
        [416, 352, 448],
        [416, 384, -448],
        [416, 384, 448],
        [416, 416, -448],
        [416, 416, 448],
        [416, 448, -448],
        [416, 448, 448],
        [416, -448, -416],
        [416, 448, -416],
        [416, -448, -384],
        [416, 448, -384],
        [416, -448, -352],
        [416, 448, -352],
        [416, -448, -320],
        [416, 448, -320],
        [416, -448, -288],
        [416, 448, -288],
        [416, -448, -256],
        [416, 448, -256],
        [416, -448, -224],
        [416, 448, -224],
        [416, -448, -192],
        [416, 448, -192],
        [416, -448, -160],
        [416, 448, -160],
        [416, -448, -128],
        [416, 448, -128],
        [416, -448, -96],
        [416, 448, -96],
        [416, -448, -64],
        [416, 448, -64],
        [416, -448, -32],
        [416, 448, -32],
        [416, -448, 0],
        [416, 448, 0],
        [416, -448, 32],
        [416, 448, 32],
        [416, -448, 64],
        [416, 448, 64],
        [416, -448, 96],
        [416, 448, 96],
        [416, -448, 128],
        [416, 448, 128],
        [416, -448, 160],
        [416, 448, 160],
        [416, -448, 192],
        [416, 448, 192],
        [416, -448, 224],
        [416, 448, 224],
        [416, -448, 256],
        [416, 448, 256],
        [416, -448, 288],
        [416, 448, 288],
        [416, -448, 320],
        [416, 448, 320],
        [416, -448, 352],
        [416, 448, 352],
        [416, -448, 384],
        [416, 448, 384],
        [416, -448, 416],
        [416, 448, 416],
        [448, -448, -448],
        [448, -448, 448],
        [448, -416, -448],
        [448, -416, 448],
        [448, -384, -448],
        [448, -384, 448],
        [448, -352, -448],
        [448, -352, 448],
        [448, -320, -448],
        [448, -320, 448],
        [448, -288, -448],
        [448, -288, 448],
        [448, -256, -448],
        [448, -256, 448],
        [448, -224, -448],
        [448, -224, 448],
        [448, -192, -448],
        [448, -192, 448],
        [448, -160, -448],
        [448, -160, 448],
        [448, -128, -448],
        [448, -128, 448],
        [448, -96, -448],
        [448, -96, 448],
        [448, -64, -448],
        [448, -64, 448],
        [448, -32, -448],
        [448, -32, 448],
        [448, 0, -448],
        [448, 0, 448],
        [448, 32, -448],
        [448, 32, 448],
        [448, 64, -448],
        [448, 64, 448],
        [448, 96, -448],
        [448, 96, 448],
        [448, 128, -448],
        [448, 128, 448],
        [448, 160, -448],
        [448, 160, 448],
        [448, 192, -448],
        [448, 192, 448],
        [448, 224, -448],
        [448, 224, 448],
        [448, 256, -448],
        [448, 256, 448],
        [448, 288, -448],
        [448, 288, 448],
        [448, 320, -448],
        [448, 320, 448],
        [448, 352, -448],
        [448, 352, 448],
        [448, 384, -448],
        [448, 384, 448],
        [448, 416, -448],
        [448, 416, 448],
        [448, 448, -448],
        [448, 448, 448],
        [448, -448, -416],
        [448, 448, -416],
        [448, -448, -384],
        [448, 448, -384],
        [448, -448, -352],
        [448, 448, -352],
        [448, -448, -320],
        [448, 448, -320],
        [448, -448, -288],
        [448, 448, -288],
        [448, -448, -256],
        [448, 448, -256],
        [448, -448, -224],
        [448, 448, -224],
        [448, -448, -192],
        [448, 448, -192],
        [448, -448, -160],
        [448, 448, -160],
        [448, -448, -128],
        [448, 448, -128],
        [448, -448, -96],
        [448, 448, -96],
        [448, -448, -64],
        [448, 448, -64],
        [448, -448, -32],
        [448, 448, -32],
        [448, -448, 0],
        [448, 448, 0],
        [448, -448, 32],
        [448, 448, 32],
        [448, -448, 64],
        [448, 448, 64],
        [448, -448, 96],
        [448, 448, 96],
        [448, -448, 128],
        [448, 448, 128],
        [448, -448, 160],
        [448, 448, 160],
        [448, -448, 192],
        [448, 448, 192],
        [448, -448, 224],
        [448, 448, 224],
        [448, -448, 256],
        [448, 448, 256],
        [448, -448, 288],
        [448, 448, 288],
        [448, -448, 320],
        [448, 448, 320],
        [448, -448, 352],
        [448, 448, 352],
        [448, -448, 384],
        [448, 448, 384],
        [448, -448, 416],
        [448, 448, 416],
        [-448, -416, -416],
        [448, -416, -416],
        [-448, -384, -416],
        [448, -384, -416],
        [-448, -352, -416],
        [448, -352, -416],
        [-448, -320, -416],
        [448, -320, -416],
        [-448, -288, -416],
        [448, -288, -416],
        [-448, -256, -416],
        [448, -256, -416],
        [-448, -224, -416],
        [448, -224, -416],
        [-448, -192, -416],
        [448, -192, -416],
        [-448, -160, -416],
        [448, -160, -416],
        [-448, -128, -416],
        [448, -128, -416],
        [-448, -96, -416],
        [448, -96, -416],
        [-448, -64, -416],
        [448, -64, -416],
        [-448, -32, -416],
        [448, -32, -416],
        [-448, 0, -416],
        [448, 0, -416],
        [-448, 32, -416],
        [448, 32, -416],
        [-448, 64, -416],
        [448, 64, -416],
        [-448, 96, -416],
        [448, 96, -416],
        [-448, 128, -416],
        [448, 128, -416],
        [-448, 160, -416],
        [448, 160, -416],
        [-448, 192, -416],
        [448, 192, -416],
        [-448, 224, -416],
        [448, 224, -416],
        [-448, 256, -416],
        [448, 256, -416],
        [-448, 288, -416],
        [448, 288, -416],
        [-448, 320, -416],
        [448, 320, -416],
        [-448, 352, -416],
        [448, 352, -416],
        [-448, 384, -416],
        [448, 384, -416],
        [-448, 416, -416],
        [448, 416, -416],
        [-448, -416, -384],
        [448, -416, -384],
        [-448, -384, -384],
        [448, -384, -384],
        [-448, -352, -384],
        [448, -352, -384],
        [-448, -320, -384],
        [448, -320, -384],
        [-448, -288, -384],
        [448, -288, -384],
        [-448, -256, -384],
        [448, -256, -384],
        [-448, -224, -384],
        [448, -224, -384],
        [-448, -192, -384],
        [448, -192, -384],
        [-448, -160, -384],
        [448, -160, -384],
        [-448, -128, -384],
        [448, -128, -384],
        [-448, -96, -384],
        [448, -96, -384],
        [-448, -64, -384],
        [448, -64, -384],
        [-448, -32, -384],
        [448, -32, -384],
        [-448, 0, -384],
        [448, 0, -384],
        [-448, 32, -384],
        [448, 32, -384],
        [-448, 64, -384],
        [448, 64, -384],
        [-448, 96, -384],
        [448, 96, -384],
        [-448, 128, -384],
        [448, 128, -384],
        [-448, 160, -384],
        [448, 160, -384],
        [-448, 192, -384],
        [448, 192, -384],
        [-448, 224, -384],
        [448, 224, -384],
        [-448, 256, -384],
        [448, 256, -384],
        [-448, 288, -384],
        [448, 288, -384],
        [-448, 320, -384],
        [448, 320, -384],
        [-448, 352, -384],
        [448, 352, -384],
        [-448, 384, -384],
        [448, 384, -384],
        [-448, 416, -384],
        [448, 416, -384],
        [-448, -416, -352],
        [448, -416, -352],
        [-448, -384, -352],
        [448, -384, -352],
        [-448, -352, -352],
        [448, -352, -352],
        [-448, -320, -352],
        [448, -320, -352],
        [-448, -288, -352],
        [448, -288, -352],
        [-448, -256, -352],
        [448, -256, -352],
        [-448, -224, -352],
        [448, -224, -352],
        [-448, -192, -352],
        [448, -192, -352],
        [-448, -160, -352],
        [448, -160, -352],
        [-448, -128, -352],
        [448, -128, -352],
        [-448, -96, -352],
        [448, -96, -352],
        [-448, -64, -352],
        [448, -64, -352],
        [-448, -32, -352],
        [448, -32, -352],
        [-448, 0, -352],
        [448, 0, -352],
        [-448, 32, -352],
        [448, 32, -352],
        [-448, 64, -352],
        [448, 64, -352],
        [-448, 96, -352],
        [448, 96, -352],
        [-448, 128, -352],
        [448, 128, -352],
        [-448, 160, -352],
        [448, 160, -352],
        [-448, 192, -352],
        [448, 192, -352],
        [-448, 224, -352],
        [448, 224, -352],
        [-448, 256, -352],
        [448, 256, -352],
        [-448, 288, -352],
        [448, 288, -352],
        [-448, 320, -352],
        [448, 320, -352],
        [-448, 352, -352],
        [448, 352, -352],
        [-448, 384, -352],
        [448, 384, -352],
        [-448, 416, -352],
        [448, 416, -352],
        [-448, -416, -320],
        [448, -416, -320],
        [-448, -384, -320],
        [448, -384, -320],
        [-448, -352, -320],
        [448, -352, -320],
        [-448, -320, -320],
        [448, -320, -320],
        [-448, -288, -320],
        [448, -288, -320],
        [-448, -256, -320],
        [448, -256, -320],
        [-448, -224, -320],
        [448, -224, -320],
        [-448, -192, -320],
        [448, -192, -320],
        [-448, -160, -320],
        [448, -160, -320],
        [-448, -128, -320],
        [448, -128, -320],
        [-448, -96, -320],
        [448, -96, -320],
        [-448, -64, -320],
        [448, -64, -320],
        [-448, -32, -320],
        [448, -32, -320],
        [-448, 0, -320],
        [448, 0, -320],
        [-448, 32, -320],
        [448, 32, -320],
        [-448, 64, -320],
        [448, 64, -320],
        [-448, 96, -320],
        [448, 96, -320],
        [-448, 128, -320],
        [448, 128, -320],
        [-448, 160, -320],
        [448, 160, -320],
        [-448, 192, -320],
        [448, 192, -320],
        [-448, 224, -320],
        [448, 224, -320],
        [-448, 256, -320],
        [448, 256, -320],
        [-448, 288, -320],
        [448, 288, -320],
        [-448, 320, -320],
        [448, 320, -320],
        [-448, 352, -320],
        [448, 352, -320],
        [-448, 384, -320],
        [448, 384, -320],
        [-448, 416, -320],
        [448, 416, -320],
        [-448, -416, -288],
        [448, -416, -288],
        [-448, -384, -288],
        [448, -384, -288],
        [-448, -352, -288],
        [448, -352, -288],
        [-448, -320, -288],
        [448, -320, -288],
        [-448, -288, -288],
        [448, -288, -288],
        [-448, -256, -288],
        [448, -256, -288],
        [-448, -224, -288],
        [448, -224, -288],
        [-448, -192, -288],
        [448, -192, -288],
        [-448, -160, -288],
        [448, -160, -288],
        [-448, -128, -288],
        [448, -128, -288],
        [-448, -96, -288],
        [448, -96, -288],
        [-448, -64, -288],
        [448, -64, -288],
        [-448, -32, -288],
        [448, -32, -288],
        [-448, 0, -288],
        [448, 0, -288],
        [-448, 32, -288],
        [448, 32, -288],
        [-448, 64, -288],
        [448, 64, -288],
        [-448, 96, -288],
        [448, 96, -288],
        [-448, 128, -288],
        [448, 128, -288],
        [-448, 160, -288],
        [448, 160, -288],
        [-448, 192, -288],
        [448, 192, -288],
        [-448, 224, -288],
        [448, 224, -288],
        [-448, 256, -288],
        [448, 256, -288],
        [-448, 288, -288],
        [448, 288, -288],
        [-448, 320, -288],
        [448, 320, -288],
        [-448, 352, -288],
        [448, 352, -288],
        [-448, 384, -288],
        [448, 384, -288],
        [-448, 416, -288],
        [448, 416, -288],
        [-448, -416, -256],
        [448, -416, -256],
        [-448, -384, -256],
        [448, -384, -256],
        [-448, -352, -256],
        [448, -352, -256],
        [-448, -320, -256],
        [448, -320, -256],
        [-448, -288, -256],
        [448, -288, -256],
        [-448, -256, -256],
        [448, -256, -256],
        [-448, -224, -256],
        [448, -224, -256],
        [-448, -192, -256],
        [448, -192, -256],
        [-448, -160, -256],
        [448, -160, -256],
        [-448, -128, -256],
        [448, -128, -256],
        [-448, -96, -256],
        [448, -96, -256],
        [-448, -64, -256],
        [448, -64, -256],
        [-448, -32, -256],
        [448, -32, -256],
        [-448, 0, -256],
        [448, 0, -256],
        [-448, 32, -256],
        [448, 32, -256],
        [-448, 64, -256],
        [448, 64, -256],
        [-448, 96, -256],
        [448, 96, -256],
        [-448, 128, -256],
        [448, 128, -256],
        [-448, 160, -256],
        [448, 160, -256],
        [-448, 192, -256],
        [448, 192, -256],
        [-448, 224, -256],
        [448, 224, -256],
        [-448, 256, -256],
        [448, 256, -256],
        [-448, 288, -256],
        [448, 288, -256],
        [-448, 320, -256],
        [448, 320, -256],
        [-448, 352, -256],
        [448, 352, -256],
        [-448, 384, -256],
        [448, 384, -256],
        [-448, 416, -256],
        [448, 416, -256],
        [-448, -416, -224],
        [448, -416, -224],
        [-448, -384, -224],
        [448, -384, -224],
        [-448, -352, -224],
        [448, -352, -224],
        [-448, -320, -224],
        [448, -320, -224],
        [-448, -288, -224],
        [448, -288, -224],
        [-448, -256, -224],
        [448, -256, -224],
        [-448, -224, -224],
        [448, -224, -224],
        [-448, -192, -224],
        [448, -192, -224],
        [-448, -160, -224],
        [448, -160, -224],
        [-448, -128, -224],
        [448, -128, -224],
        [-448, -96, -224],
        [448, -96, -224],
        [-448, -64, -224],
        [448, -64, -224],
        [-448, -32, -224],
        [448, -32, -224],
        [-448, 0, -224],
        [448, 0, -224],
        [-448, 32, -224],
        [448, 32, -224],
        [-448, 64, -224],
        [448, 64, -224],
        [-448, 96, -224],
        [448, 96, -224],
        [-448, 128, -224],
        [448, 128, -224],
        [-448, 160, -224],
        [448, 160, -224],
        [-448, 192, -224],
        [448, 192, -224],
        [-448, 224, -224],
        [448, 224, -224],
        [-448, 256, -224],
        [448, 256, -224],
        [-448, 288, -224],
        [448, 288, -224],
        [-448, 320, -224],
        [448, 320, -224],
        [-448, 352, -224],
        [448, 352, -224],
        [-448, 384, -224],
        [448, 384, -224],
        [-448, 416, -224],
        [448, 416, -224],
        [-448, -416, -192],
        [448, -416, -192],
        [-448, -384, -192],
        [448, -384, -192],
        [-448, -352, -192],
        [448, -352, -192],
        [-448, -320, -192],
        [448, -320, -192],
        [-448, -288, -192],
        [448, -288, -192],
        [-448, -256, -192],
        [448, -256, -192],
        [-448, -224, -192],
        [448, -224, -192],
        [-448, -192, -192],
        [448, -192, -192],
        [-448, -160, -192],
        [448, -160, -192],
        [-448, -128, -192],
        [448, -128, -192],
        [-448, -96, -192],
        [448, -96, -192],
        [-448, -64, -192],
        [448, -64, -192],
        [-448, -32, -192],
        [448, -32, -192],
        [-448, 0, -192],
        [448, 0, -192],
        [-448, 32, -192],
        [448, 32, -192],
        [-448, 64, -192],
        [448, 64, -192],
        [-448, 96, -192],
        [448, 96, -192],
        [-448, 128, -192],
        [448, 128, -192],
        [-448, 160, -192],
        [448, 160, -192],
        [-448, 192, -192],
        [448, 192, -192],
        [-448, 224, -192],
        [448, 224, -192],
        [-448, 256, -192],
        [448, 256, -192],
        [-448, 288, -192],
        [448, 288, -192],
        [-448, 320, -192],
        [448, 320, -192],
        [-448, 352, -192],
        [448, 352, -192],
        [-448, 384, -192],
        [448, 384, -192],
        [-448, 416, -192],
        [448, 416, -192],
        [-448, -416, -160],
        [448, -416, -160],
        [-448, -384, -160],
        [448, -384, -160],
        [-448, -352, -160],
        [448, -352, -160],
        [-448, -320, -160],
        [448, -320, -160],
        [-448, -288, -160],
        [448, -288, -160],
        [-448, -256, -160],
        [448, -256, -160],
        [-448, -224, -160],
        [448, -224, -160],
        [-448, -192, -160],
        [448, -192, -160],
        [-448, -160, -160],
        [448, -160, -160],
        [-448, -128, -160],
        [448, -128, -160],
        [-448, -96, -160],
        [448, -96, -160],
        [-448, -64, -160],
        [448, -64, -160],
        [-448, -32, -160],
        [448, -32, -160],
        [-448, 0, -160],
        [448, 0, -160],
        [-448, 32, -160],
        [448, 32, -160],
        [-448, 64, -160],
        [448, 64, -160],
        [-448, 96, -160],
        [448, 96, -160],
        [-448, 128, -160],
        [448, 128, -160],
        [-448, 160, -160],
        [448, 160, -160],
        [-448, 192, -160],
        [448, 192, -160],
        [-448, 224, -160],
        [448, 224, -160],
        [-448, 256, -160],
        [448, 256, -160],
        [-448, 288, -160],
        [448, 288, -160],
        [-448, 320, -160],
        [448, 320, -160],
        [-448, 352, -160],
        [448, 352, -160],
        [-448, 384, -160],
        [448, 384, -160],
        [-448, 416, -160],
        [448, 416, -160],
        [-448, -416, -128],
        [448, -416, -128],
        [-448, -384, -128],
        [448, -384, -128],
        [-448, -352, -128],
        [448, -352, -128],
        [-448, -320, -128],
        [448, -320, -128],
        [-448, -288, -128],
        [448, -288, -128],
        [-448, -256, -128],
        [448, -256, -128],
        [-448, -224, -128],
        [448, -224, -128],
        [-448, -192, -128],
        [448, -192, -128],
        [-448, -160, -128],
        [448, -160, -128],
        [-448, -128, -128],
        [448, -128, -128],
        [-448, -96, -128],
        [448, -96, -128],
        [-448, -64, -128],
        [448, -64, -128],
        [-448, -32, -128],
        [448, -32, -128],
        [-448, 0, -128],
        [448, 0, -128],
        [-448, 32, -128],
        [448, 32, -128],
        [-448, 64, -128],
        [448, 64, -128],
        [-448, 96, -128],
        [448, 96, -128],
        [-448, 128, -128],
        [448, 128, -128],
        [-448, 160, -128],
        [448, 160, -128],
        [-448, 192, -128],
        [448, 192, -128],
        [-448, 224, -128],
        [448, 224, -128],
        [-448, 256, -128],
        [448, 256, -128],
        [-448, 288, -128],
        [448, 288, -128],
        [-448, 320, -128],
        [448, 320, -128],
        [-448, 352, -128],
        [448, 352, -128],
        [-448, 384, -128],
        [448, 384, -128],
        [-448, 416, -128],
        [448, 416, -128],
        [-448, -416, -96],
        [448, -416, -96],
        [-448, -384, -96],
        [448, -384, -96],
        [-448, -352, -96],
        [448, -352, -96],
        [-448, -320, -96],
        [448, -320, -96],
        [-448, -288, -96],
        [448, -288, -96],
        [-448, -256, -96],
        [448, -256, -96],
        [-448, -224, -96],
        [448, -224, -96],
        [-448, -192, -96],
        [448, -192, -96],
        [-448, -160, -96],
        [448, -160, -96],
        [-448, -128, -96],
        [448, -128, -96],
        [-448, -96, -96],
        [448, -96, -96],
        [-448, -64, -96],
        [448, -64, -96],
        [-448, -32, -96],
        [448, -32, -96],
        [-448, 0, -96],
        [448, 0, -96],
        [-448, 32, -96],
        [448, 32, -96],
        [-448, 64, -96],
        [448, 64, -96],
        [-448, 96, -96],
        [448, 96, -96],
        [-448, 128, -96],
        [448, 128, -96],
        [-448, 160, -96],
        [448, 160, -96],
        [-448, 192, -96],
        [448, 192, -96],
        [-448, 224, -96],
        [448, 224, -96],
        [-448, 256, -96],
        [448, 256, -96],
        [-448, 288, -96],
        [448, 288, -96],
        [-448, 320, -96],
        [448, 320, -96],
        [-448, 352, -96],
        [448, 352, -96],
        [-448, 384, -96],
        [448, 384, -96],
        [-448, 416, -96],
        [448, 416, -96],
        [-448, -416, -64],
        [448, -416, -64],
        [-448, -384, -64],
        [448, -384, -64],
        [-448, -352, -64],
        [448, -352, -64],
        [-448, -320, -64],
        [448, -320, -64],
        [-448, -288, -64],
        [448, -288, -64],
        [-448, -256, -64],
        [448, -256, -64],
        [-448, -224, -64],
        [448, -224, -64],
        [-448, -192, -64],
        [448, -192, -64],
        [-448, -160, -64],
        [448, -160, -64],
        [-448, -128, -64],
        [448, -128, -64],
        [-448, -96, -64],
        [448, -96, -64],
        [-448, -64, -64],
        [448, -64, -64],
        [-448, -32, -64],
        [448, -32, -64],
        [-448, 0, -64],
        [448, 0, -64],
        [-448, 32, -64],
        [448, 32, -64],
        [-448, 64, -64],
        [448, 64, -64],
        [-448, 96, -64],
        [448, 96, -64],
        [-448, 128, -64],
        [448, 128, -64],
        [-448, 160, -64],
        [448, 160, -64],
        [-448, 192, -64],
        [448, 192, -64],
        [-448, 224, -64],
        [448, 224, -64],
        [-448, 256, -64],
        [448, 256, -64],
        [-448, 288, -64],
        [448, 288, -64],
        [-448, 320, -64],
        [448, 320, -64],
        [-448, 352, -64],
        [448, 352, -64],
        [-448, 384, -64],
        [448, 384, -64],
        [-448, 416, -64],
        [448, 416, -64],
        [-448, -416, -32],
        [448, -416, -32],
        [-448, -384, -32],
        [448, -384, -32],
        [-448, -352, -32],
        [448, -352, -32],
        [-448, -320, -32],
        [448, -320, -32],
        [-448, -288, -32],
        [448, -288, -32],
        [-448, -256, -32],
        [448, -256, -32],
        [-448, -224, -32],
        [448, -224, -32],
        [-448, -192, -32],
        [448, -192, -32],
        [-448, -160, -32],
        [448, -160, -32],
        [-448, -128, -32],
        [448, -128, -32],
        [-448, -96, -32],
        [448, -96, -32],
        [-448, -64, -32],
        [448, -64, -32],
        [-448, -32, -32],
        [448, -32, -32],
        [-448, 0, -32],
        [448, 0, -32],
        [-448, 32, -32],
        [448, 32, -32],
        [-448, 64, -32],
        [448, 64, -32],
        [-448, 96, -32],
        [448, 96, -32],
        [-448, 128, -32],
        [448, 128, -32],
        [-448, 160, -32],
        [448, 160, -32],
        [-448, 192, -32],
        [448, 192, -32],
        [-448, 224, -32],
        [448, 224, -32],
        [-448, 256, -32],
        [448, 256, -32],
        [-448, 288, -32],
        [448, 288, -32],
        [-448, 320, -32],
        [448, 320, -32],
        [-448, 352, -32],
        [448, 352, -32],
        [-448, 384, -32],
        [448, 384, -32],
        [-448, 416, -32],
        [448, 416, -32],
        [-448, -416, 0],
        [448, -416, 0],
        [-448, -384, 0],
        [448, -384, 0],
        [-448, -352, 0],
        [448, -352, 0],
        [-448, -320, 0],
        [448, -320, 0],
        [-448, -288, 0],
        [448, -288, 0],
        [-448, -256, 0],
        [448, -256, 0],
        [-448, -224, 0],
        [448, -224, 0],
        [-448, -192, 0],
        [448, -192, 0],
        [-448, -160, 0],
        [448, -160, 0],
        [-448, -128, 0],
        [448, -128, 0],
        [-448, -96, 0],
        [448, -96, 0],
        [-448, -64, 0],
        [448, -64, 0],
        [-448, -32, 0],
        [448, -32, 0],
        [-448, 0, 0],
        [448, 0, 0],
        [-448, 32, 0],
        [448, 32, 0],
        [-448, 64, 0],
        [448, 64, 0],
        [-448, 96, 0],
        [448, 96, 0],
        [-448, 128, 0],
        [448, 128, 0],
        [-448, 160, 0],
        [448, 160, 0],
        [-448, 192, 0],
        [448, 192, 0],
        [-448, 224, 0],
        [448, 224, 0],
        [-448, 256, 0],
        [448, 256, 0],
        [-448, 288, 0],
        [448, 288, 0],
        [-448, 320, 0],
        [448, 320, 0],
        [-448, 352, 0],
        [448, 352, 0],
        [-448, 384, 0],
        [448, 384, 0],
        [-448, 416, 0],
        [448, 416, 0],
        [-448, -416, 32],
        [448, -416, 32],
        [-448, -384, 32],
        [448, -384, 32],
        [-448, -352, 32],
        [448, -352, 32],
        [-448, -320, 32],
        [448, -320, 32],
        [-448, -288, 32],
        [448, -288, 32],
        [-448, -256, 32],
        [448, -256, 32],
        [-448, -224, 32],
        [448, -224, 32],
        [-448, -192, 32],
        [448, -192, 32],
        [-448, -160, 32],
        [448, -160, 32],
        [-448, -128, 32],
        [448, -128, 32],
        [-448, -96, 32],
        [448, -96, 32],
        [-448, -64, 32],
        [448, -64, 32],
        [-448, -32, 32],
        [448, -32, 32],
        [-448, 0, 32],
        [448, 0, 32],
        [-448, 32, 32],
        [448, 32, 32],
        [-448, 64, 32],
        [448, 64, 32],
        [-448, 96, 32],
        [448, 96, 32],
        [-448, 128, 32],
        [448, 128, 32],
        [-448, 160, 32],
        [448, 160, 32],
        [-448, 192, 32],
        [448, 192, 32],
        [-448, 224, 32],
        [448, 224, 32],
        [-448, 256, 32],
        [448, 256, 32],
        [-448, 288, 32],
        [448, 288, 32],
        [-448, 320, 32],
        [448, 320, 32],
        [-448, 352, 32],
        [448, 352, 32],
        [-448, 384, 32],
        [448, 384, 32],
        [-448, 416, 32],
        [448, 416, 32],
        [-448, -416, 64],
        [448, -416, 64],
        [-448, -384, 64],
        [448, -384, 64],
        [-448, -352, 64],
        [448, -352, 64],
        [-448, -320, 64],
        [448, -320, 64],
        [-448, -288, 64],
        [448, -288, 64],
        [-448, -256, 64],
        [448, -256, 64],
        [-448, -224, 64],
        [448, -224, 64],
        [-448, -192, 64],
        [448, -192, 64],
        [-448, -160, 64],
        [448, -160, 64],
        [-448, -128, 64],
        [448, -128, 64],
        [-448, -96, 64],
        [448, -96, 64],
        [-448, -64, 64],
        [448, -64, 64],
        [-448, -32, 64],
        [448, -32, 64],
        [-448, 0, 64],
        [448, 0, 64],
        [-448, 32, 64],
        [448, 32, 64],
        [-448, 64, 64],
        [448, 64, 64],
        [-448, 96, 64],
        [448, 96, 64],
        [-448, 128, 64],
        [448, 128, 64],
        [-448, 160, 64],
        [448, 160, 64],
        [-448, 192, 64],
        [448, 192, 64],
        [-448, 224, 64],
        [448, 224, 64],
        [-448, 256, 64],
        [448, 256, 64],
        [-448, 288, 64],
        [448, 288, 64],
        [-448, 320, 64],
        [448, 320, 64],
        [-448, 352, 64],
        [448, 352, 64],
        [-448, 384, 64],
        [448, 384, 64],
        [-448, 416, 64],
        [448, 416, 64],
        [-448, -416, 96],
        [448, -416, 96],
        [-448, -384, 96],
        [448, -384, 96],
        [-448, -352, 96],
        [448, -352, 96],
        [-448, -320, 96],
        [448, -320, 96],
        [-448, -288, 96],
        [448, -288, 96],
        [-448, -256, 96],
        [448, -256, 96],
        [-448, -224, 96],
        [448, -224, 96],
        [-448, -192, 96],
        [448, -192, 96],
        [-448, -160, 96],
        [448, -160, 96],
        [-448, -128, 96],
        [448, -128, 96],
        [-448, -96, 96],
        [448, -96, 96],
        [-448, -64, 96],
        [448, -64, 96],
        [-448, -32, 96],
        [448, -32, 96],
        [-448, 0, 96],
        [448, 0, 96],
        [-448, 32, 96],
        [448, 32, 96],
        [-448, 64, 96],
        [448, 64, 96],
        [-448, 96, 96],
        [448, 96, 96],
        [-448, 128, 96],
        [448, 128, 96],
        [-448, 160, 96],
        [448, 160, 96],
        [-448, 192, 96],
        [448, 192, 96],
        [-448, 224, 96],
        [448, 224, 96],
        [-448, 256, 96],
        [448, 256, 96],
        [-448, 288, 96],
        [448, 288, 96],
        [-448, 320, 96],
        [448, 320, 96],
        [-448, 352, 96],
        [448, 352, 96],
        [-448, 384, 96],
        [448, 384, 96],
        [-448, 416, 96],
        [448, 416, 96],
        [-448, -416, 128],
        [448, -416, 128],
        [-448, -384, 128],
        [448, -384, 128],
        [-448, -352, 128],
        [448, -352, 128],
        [-448, -320, 128],
        [448, -320, 128],
        [-448, -288, 128],
        [448, -288, 128],
        [-448, -256, 128],
        [448, -256, 128],
        [-448, -224, 128],
        [448, -224, 128],
        [-448, -192, 128],
        [448, -192, 128],
        [-448, -160, 128],
        [448, -160, 128],
        [-448, -128, 128],
        [448, -128, 128],
        [-448, -96, 128],
        [448, -96, 128],
        [-448, -64, 128],
        [448, -64, 128],
        [-448, -32, 128],
        [448, -32, 128],
        [-448, 0, 128],
        [448, 0, 128],
        [-448, 32, 128],
        [448, 32, 128],
        [-448, 64, 128],
        [448, 64, 128],
        [-448, 96, 128],
        [448, 96, 128],
        [-448, 128, 128],
        [448, 128, 128],
        [-448, 160, 128],
        [448, 160, 128],
        [-448, 192, 128],
        [448, 192, 128],
        [-448, 224, 128],
        [448, 224, 128],
        [-448, 256, 128],
        [448, 256, 128],
        [-448, 288, 128],
        [448, 288, 128],
        [-448, 320, 128],
        [448, 320, 128],
        [-448, 352, 128],
        [448, 352, 128],
        [-448, 384, 128],
        [448, 384, 128],
        [-448, 416, 128],
        [448, 416, 128],
        [-448, -416, 160],
        [448, -416, 160],
        [-448, -384, 160],
        [448, -384, 160],
        [-448, -352, 160],
        [448, -352, 160],
        [-448, -320, 160],
        [448, -320, 160],
        [-448, -288, 160],
        [448, -288, 160],
        [-448, -256, 160],
        [448, -256, 160],
        [-448, -224, 160],
        [448, -224, 160],
        [-448, -192, 160],
        [448, -192, 160],
        [-448, -160, 160],
        [448, -160, 160],
        [-448, -128, 160],
        [448, -128, 160],
        [-448, -96, 160],
        [448, -96, 160],
        [-448, -64, 160],
        [448, -64, 160],
        [-448, -32, 160],
        [448, -32, 160],
        [-448, 0, 160],
        [448, 0, 160],
        [-448, 32, 160],
        [448, 32, 160],
        [-448, 64, 160],
        [448, 64, 160],
        [-448, 96, 160],
        [448, 96, 160],
        [-448, 128, 160],
        [448, 128, 160],
        [-448, 160, 160],
        [448, 160, 160],
        [-448, 192, 160],
        [448, 192, 160],
        [-448, 224, 160],
        [448, 224, 160],
        [-448, 256, 160],
        [448, 256, 160],
        [-448, 288, 160],
        [448, 288, 160],
        [-448, 320, 160],
        [448, 320, 160],
        [-448, 352, 160],
        [448, 352, 160],
        [-448, 384, 160],
        [448, 384, 160],
        [-448, 416, 160],
        [448, 416, 160],
        [-448, -416, 192],
        [448, -416, 192],
        [-448, -384, 192],
        [448, -384, 192],
        [-448, -352, 192],
        [448, -352, 192],
        [-448, -320, 192],
        [448, -320, 192],
        [-448, -288, 192],
        [448, -288, 192],
        [-448, -256, 192],
        [448, -256, 192],
        [-448, -224, 192],
        [448, -224, 192],
        [-448, -192, 192],
        [448, -192, 192],
        [-448, -160, 192],
        [448, -160, 192],
        [-448, -128, 192],
        [448, -128, 192],
        [-448, -96, 192],
        [448, -96, 192],
        [-448, -64, 192],
        [448, -64, 192],
        [-448, -32, 192],
        [448, -32, 192],
        [-448, 0, 192],
        [448, 0, 192],
        [-448, 32, 192],
        [448, 32, 192],
        [-448, 64, 192],
        [448, 64, 192],
        [-448, 96, 192],
        [448, 96, 192],
        [-448, 128, 192],
        [448, 128, 192],
        [-448, 160, 192],
        [448, 160, 192],
        [-448, 192, 192],
        [448, 192, 192],
        [-448, 224, 192],
        [448, 224, 192],
        [-448, 256, 192],
        [448, 256, 192],
        [-448, 288, 192],
        [448, 288, 192],
        [-448, 320, 192],
        [448, 320, 192],
        [-448, 352, 192],
        [448, 352, 192],
        [-448, 384, 192],
        [448, 384, 192],
        [-448, 416, 192],
        [448, 416, 192],
        [-448, -416, 224],
        [448, -416, 224],
        [-448, -384, 224],
        [448, -384, 224],
        [-448, -352, 224],
        [448, -352, 224],
        [-448, -320, 224],
        [448, -320, 224],
        [-448, -288, 224],
        [448, -288, 224],
        [-448, -256, 224],
        [448, -256, 224],
        [-448, -224, 224],
        [448, -224, 224],
        [-448, -192, 224],
        [448, -192, 224],
        [-448, -160, 224],
        [448, -160, 224],
        [-448, -128, 224],
        [448, -128, 224],
        [-448, -96, 224],
        [448, -96, 224],
        [-448, -64, 224],
        [448, -64, 224],
        [-448, -32, 224],
        [448, -32, 224],
        [-448, 0, 224],
        [448, 0, 224],
        [-448, 32, 224],
        [448, 32, 224],
        [-448, 64, 224],
        [448, 64, 224],
        [-448, 96, 224],
        [448, 96, 224],
        [-448, 128, 224],
        [448, 128, 224],
        [-448, 160, 224],
        [448, 160, 224],
        [-448, 192, 224],
        [448, 192, 224],
        [-448, 224, 224],
        [448, 224, 224],
        [-448, 256, 224],
        [448, 256, 224],
        [-448, 288, 224],
        [448, 288, 224],
        [-448, 320, 224],
        [448, 320, 224],
        [-448, 352, 224],
        [448, 352, 224],
        [-448, 384, 224],
        [448, 384, 224],
        [-448, 416, 224],
        [448, 416, 224],
        [-448, -416, 256],
        [448, -416, 256],
        [-448, -384, 256],
        [448, -384, 256],
        [-448, -352, 256],
        [448, -352, 256],
        [-448, -320, 256],
        [448, -320, 256],
        [-448, -288, 256],
        [448, -288, 256],
        [-448, -256, 256],
        [448, -256, 256],
        [-448, -224, 256],
        [448, -224, 256],
        [-448, -192, 256],
        [448, -192, 256],
        [-448, -160, 256],
        [448, -160, 256],
        [-448, -128, 256],
        [448, -128, 256],
        [-448, -96, 256],
        [448, -96, 256],
        [-448, -64, 256],
        [448, -64, 256],
        [-448, -32, 256],
        [448, -32, 256],
        [-448, 0, 256],
        [448, 0, 256],
        [-448, 32, 256],
        [448, 32, 256],
        [-448, 64, 256],
        [448, 64, 256],
        [-448, 96, 256],
        [448, 96, 256],
        [-448, 128, 256],
        [448, 128, 256],
        [-448, 160, 256],
        [448, 160, 256],
        [-448, 192, 256],
        [448, 192, 256],
        [-448, 224, 256],
        [448, 224, 256],
        [-448, 256, 256],
        [448, 256, 256],
        [-448, 288, 256],
        [448, 288, 256],
        [-448, 320, 256],
        [448, 320, 256],
        [-448, 352, 256],
        [448, 352, 256],
        [-448, 384, 256],
        [448, 384, 256],
        [-448, 416, 256],
        [448, 416, 256],
        [-448, -416, 288],
        [448, -416, 288],
        [-448, -384, 288],
        [448, -384, 288],
        [-448, -352, 288],
        [448, -352, 288],
        [-448, -320, 288],
        [448, -320, 288],
        [-448, -288, 288],
        [448, -288, 288],
        [-448, -256, 288],
        [448, -256, 288],
        [-448, -224, 288],
        [448, -224, 288],
        [-448, -192, 288],
        [448, -192, 288],
        [-448, -160, 288],
        [448, -160, 288],
        [-448, -128, 288],
        [448, -128, 288],
        [-448, -96, 288],
        [448, -96, 288],
        [-448, -64, 288],
        [448, -64, 288],
        [-448, -32, 288],
        [448, -32, 288],
        [-448, 0, 288],
        [448, 0, 288],
        [-448, 32, 288],
        [448, 32, 288],
        [-448, 64, 288],
        [448, 64, 288],
        [-448, 96, 288],
        [448, 96, 288],
        [-448, 128, 288],
        [448, 128, 288],
        [-448, 160, 288],
        [448, 160, 288],
        [-448, 192, 288],
        [448, 192, 288],
        [-448, 224, 288],
        [448, 224, 288],
        [-448, 256, 288],
        [448, 256, 288],
        [-448, 288, 288],
        [448, 288, 288],
        [-448, 320, 288],
        [448, 320, 288],
        [-448, 352, 288],
        [448, 352, 288],
        [-448, 384, 288],
        [448, 384, 288],
        [-448, 416, 288],
        [448, 416, 288],
        [-448, -416, 320],
        [448, -416, 320],
        [-448, -384, 320],
        [448, -384, 320],
        [-448, -352, 320],
        [448, -352, 320],
        [-448, -320, 320],
        [448, -320, 320],
        [-448, -288, 320],
        [448, -288, 320],
        [-448, -256, 320],
        [448, -256, 320],
        [-448, -224, 320],
        [448, -224, 320],
        [-448, -192, 320],
        [448, -192, 320],
        [-448, -160, 320],
        [448, -160, 320],
        [-448, -128, 320],
        [448, -128, 320],
        [-448, -96, 320],
        [448, -96, 320],
        [-448, -64, 320],
        [448, -64, 320],
        [-448, -32, 320],
        [448, -32, 320],
        [-448, 0, 320],
        [448, 0, 320],
        [-448, 32, 320],
        [448, 32, 320],
        [-448, 64, 320],
        [448, 64, 320],
        [-448, 96, 320],
        [448, 96, 320],
        [-448, 128, 320],
        [448, 128, 320],
        [-448, 160, 320],
        [448, 160, 320],
        [-448, 192, 320],
        [448, 192, 320],
        [-448, 224, 320],
        [448, 224, 320],
        [-448, 256, 320],
        [448, 256, 320],
        [-448, 288, 320],
        [448, 288, 320],
        [-448, 320, 320],
        [448, 320, 320],
        [-448, 352, 320],
        [448, 352, 320],
        [-448, 384, 320],
        [448, 384, 320],
        [-448, 416, 320],
        [448, 416, 320],
        [-448, -416, 352],
        [448, -416, 352],
        [-448, -384, 352],
        [448, -384, 352],
        [-448, -352, 352],
        [448, -352, 352],
        [-448, -320, 352],
        [448, -320, 352],
        [-448, -288, 352],
        [448, -288, 352],
        [-448, -256, 352],
        [448, -256, 352],
        [-448, -224, 352],
        [448, -224, 352],
        [-448, -192, 352],
        [448, -192, 352],
        [-448, -160, 352],
        [448, -160, 352],
        [-448, -128, 352],
        [448, -128, 352],
        [-448, -96, 352],
        [448, -96, 352],
        [-448, -64, 352],
        [448, -64, 352],
        [-448, -32, 352],
        [448, -32, 352],
        [-448, 0, 352],
        [448, 0, 352],
        [-448, 32, 352],
        [448, 32, 352],
        [-448, 64, 352],
        [448, 64, 352],
        [-448, 96, 352],
        [448, 96, 352],
        [-448, 128, 352],
        [448, 128, 352],
        [-448, 160, 352],
        [448, 160, 352],
        [-448, 192, 352],
        [448, 192, 352],
        [-448, 224, 352],
        [448, 224, 352],
        [-448, 256, 352],
        [448, 256, 352],
        [-448, 288, 352],
        [448, 288, 352],
        [-448, 320, 352],
        [448, 320, 352],
        [-448, 352, 352],
        [448, 352, 352],
        [-448, 384, 352],
        [448, 384, 352],
        [-448, 416, 352],
        [448, 416, 352],
        [-448, -416, 384],
        [448, -416, 384],
        [-448, -384, 384],
        [448, -384, 384],
        [-448, -352, 384],
        [448, -352, 384],
        [-448, -320, 384],
        [448, -320, 384],
        [-448, -288, 384],
        [448, -288, 384],
        [-448, -256, 384],
        [448, -256, 384],
        [-448, -224, 384],
        [448, -224, 384],
        [-448, -192, 384],
        [448, -192, 384],
        [-448, -160, 384],
        [448, -160, 384],
        [-448, -128, 384],
        [448, -128, 384],
        [-448, -96, 384],
        [448, -96, 384],
        [-448, -64, 384],
        [448, -64, 384],
        [-448, -32, 384],
        [448, -32, 384],
        [-448, 0, 384],
        [448, 0, 384],
        [-448, 32, 384],
        [448, 32, 384],
        [-448, 64, 384],
        [448, 64, 384],
        [-448, 96, 384],
        [448, 96, 384],
        [-448, 128, 384],
        [448, 128, 384],
        [-448, 160, 384],
        [448, 160, 384],
        [-448, 192, 384],
        [448, 192, 384],
        [-448, 224, 384],
        [448, 224, 384],
        [-448, 256, 384],
        [448, 256, 384],
        [-448, 288, 384],
        [448, 288, 384],
        [-448, 320, 384],
        [448, 320, 384],
        [-448, 352, 384],
        [448, 352, 384],
        [-448, 384, 384],
        [448, 384, 384],
        [-448, 416, 384],
        [448, 416, 384],
        [-448, -416, 416],
        [448, -416, 416],
        [-448, -384, 416],
        [448, -384, 416],
        [-448, -352, 416],
        [448, -352, 416],
        [-448, -320, 416],
        [448, -320, 416],
        [-448, -288, 416],
        [448, -288, 416],
        [-448, -256, 416],
        [448, -256, 416],
        [-448, -224, 416],
        [448, -224, 416],
        [-448, -192, 416],
        [448, -192, 416],
        [-448, -160, 416],
        [448, -160, 416],
        [-448, -128, 416],
        [448, -128, 416],
        [-448, -96, 416],
        [448, -96, 416],
        [-448, -64, 416],
        [448, -64, 416],
        [-448, -32, 416],
        [448, -32, 416],
        [-448, 0, 416],
        [448, 0, 416],
        [-448, 32, 416],
        [448, 32, 416],
        [-448, 64, 416],
        [448, 64, 416],
        [-448, 96, 416],
        [448, 96, 416],
        [-448, 128, 416],
        [448, 128, 416],
        [-448, 160, 416],
        [448, 160, 416],
        [-448, 192, 416],
        [448, 192, 416],
        [-448, 224, 416],
        [448, 224, 416],
        [-448, 256, 416],
        [448, 256, 416],
        [-448, 288, 416],
        [448, 288, 416],
        [-448, 320, 416],
        [448, 320, 416],
        [-448, 352, 416],
        [448, 352, 416],
        [-448, 384, 416],
        [448, 384, 416],
        [-448, 416, 416],
        [448, 416, 416]],
    '15': [[-480, -480, -480],
        [-480, -480, 480],
        [-480, -448, -480],
        [-480, -448, 480],
        [-480, -416, -480],
        [-480, -416, 480],
        [-480, -384, -480],
        [-480, -384, 480],
        [-480, -352, -480],
        [-480, -352, 480],
        [-480, -320, -480],
        [-480, -320, 480],
        [-480, -288, -480],
        [-480, -288, 480],
        [-480, -256, -480],
        [-480, -256, 480],
        [-480, -224, -480],
        [-480, -224, 480],
        [-480, -192, -480],
        [-480, -192, 480],
        [-480, -160, -480],
        [-480, -160, 480],
        [-480, -128, -480],
        [-480, -128, 480],
        [-480, -96, -480],
        [-480, -96, 480],
        [-480, -64, -480],
        [-480, -64, 480],
        [-480, -32, -480],
        [-480, -32, 480],
        [-480, 0, -480],
        [-480, 0, 480],
        [-480, 32, -480],
        [-480, 32, 480],
        [-480, 64, -480],
        [-480, 64, 480],
        [-480, 96, -480],
        [-480, 96, 480],
        [-480, 128, -480],
        [-480, 128, 480],
        [-480, 160, -480],
        [-480, 160, 480],
        [-480, 192, -480],
        [-480, 192, 480],
        [-480, 224, -480],
        [-480, 224, 480],
        [-480, 256, -480],
        [-480, 256, 480],
        [-480, 288, -480],
        [-480, 288, 480],
        [-480, 320, -480],
        [-480, 320, 480],
        [-480, 352, -480],
        [-480, 352, 480],
        [-480, 384, -480],
        [-480, 384, 480],
        [-480, 416, -480],
        [-480, 416, 480],
        [-480, 448, -480],
        [-480, 448, 480],
        [-480, 480, -480],
        [-480, 480, 480],
        [-480, -480, -448],
        [-480, 480, -448],
        [-480, -480, -416],
        [-480, 480, -416],
        [-480, -480, -384],
        [-480, 480, -384],
        [-480, -480, -352],
        [-480, 480, -352],
        [-480, -480, -320],
        [-480, 480, -320],
        [-480, -480, -288],
        [-480, 480, -288],
        [-480, -480, -256],
        [-480, 480, -256],
        [-480, -480, -224],
        [-480, 480, -224],
        [-480, -480, -192],
        [-480, 480, -192],
        [-480, -480, -160],
        [-480, 480, -160],
        [-480, -480, -128],
        [-480, 480, -128],
        [-480, -480, -96],
        [-480, 480, -96],
        [-480, -480, -64],
        [-480, 480, -64],
        [-480, -480, -32],
        [-480, 480, -32],
        [-480, -480, 0],
        [-480, 480, 0],
        [-480, -480, 32],
        [-480, 480, 32],
        [-480, -480, 64],
        [-480, 480, 64],
        [-480, -480, 96],
        [-480, 480, 96],
        [-480, -480, 128],
        [-480, 480, 128],
        [-480, -480, 160],
        [-480, 480, 160],
        [-480, -480, 192],
        [-480, 480, 192],
        [-480, -480, 224],
        [-480, 480, 224],
        [-480, -480, 256],
        [-480, 480, 256],
        [-480, -480, 288],
        [-480, 480, 288],
        [-480, -480, 320],
        [-480, 480, 320],
        [-480, -480, 352],
        [-480, 480, 352],
        [-480, -480, 384],
        [-480, 480, 384],
        [-480, -480, 416],
        [-480, 480, 416],
        [-480, -480, 448],
        [-480, 480, 448],
        [-448, -480, -480],
        [-448, -480, 480],
        [-448, -448, -480],
        [-448, -448, 480],
        [-448, -416, -480],
        [-448, -416, 480],
        [-448, -384, -480],
        [-448, -384, 480],
        [-448, -352, -480],
        [-448, -352, 480],
        [-448, -320, -480],
        [-448, -320, 480],
        [-448, -288, -480],
        [-448, -288, 480],
        [-448, -256, -480],
        [-448, -256, 480],
        [-448, -224, -480],
        [-448, -224, 480],
        [-448, -192, -480],
        [-448, -192, 480],
        [-448, -160, -480],
        [-448, -160, 480],
        [-448, -128, -480],
        [-448, -128, 480],
        [-448, -96, -480],
        [-448, -96, 480],
        [-448, -64, -480],
        [-448, -64, 480],
        [-448, -32, -480],
        [-448, -32, 480],
        [-448, 0, -480],
        [-448, 0, 480],
        [-448, 32, -480],
        [-448, 32, 480],
        [-448, 64, -480],
        [-448, 64, 480],
        [-448, 96, -480],
        [-448, 96, 480],
        [-448, 128, -480],
        [-448, 128, 480],
        [-448, 160, -480],
        [-448, 160, 480],
        [-448, 192, -480],
        [-448, 192, 480],
        [-448, 224, -480],
        [-448, 224, 480],
        [-448, 256, -480],
        [-448, 256, 480],
        [-448, 288, -480],
        [-448, 288, 480],
        [-448, 320, -480],
        [-448, 320, 480],
        [-448, 352, -480],
        [-448, 352, 480],
        [-448, 384, -480],
        [-448, 384, 480],
        [-448, 416, -480],
        [-448, 416, 480],
        [-448, 448, -480],
        [-448, 448, 480],
        [-448, 480, -480],
        [-448, 480, 480],
        [-448, -480, -448],
        [-448, 480, -448],
        [-448, -480, -416],
        [-448, 480, -416],
        [-448, -480, -384],
        [-448, 480, -384],
        [-448, -480, -352],
        [-448, 480, -352],
        [-448, -480, -320],
        [-448, 480, -320],
        [-448, -480, -288],
        [-448, 480, -288],
        [-448, -480, -256],
        [-448, 480, -256],
        [-448, -480, -224],
        [-448, 480, -224],
        [-448, -480, -192],
        [-448, 480, -192],
        [-448, -480, -160],
        [-448, 480, -160],
        [-448, -480, -128],
        [-448, 480, -128],
        [-448, -480, -96],
        [-448, 480, -96],
        [-448, -480, -64],
        [-448, 480, -64],
        [-448, -480, -32],
        [-448, 480, -32],
        [-448, -480, 0],
        [-448, 480, 0],
        [-448, -480, 32],
        [-448, 480, 32],
        [-448, -480, 64],
        [-448, 480, 64],
        [-448, -480, 96],
        [-448, 480, 96],
        [-448, -480, 128],
        [-448, 480, 128],
        [-448, -480, 160],
        [-448, 480, 160],
        [-448, -480, 192],
        [-448, 480, 192],
        [-448, -480, 224],
        [-448, 480, 224],
        [-448, -480, 256],
        [-448, 480, 256],
        [-448, -480, 288],
        [-448, 480, 288],
        [-448, -480, 320],
        [-448, 480, 320],
        [-448, -480, 352],
        [-448, 480, 352],
        [-448, -480, 384],
        [-448, 480, 384],
        [-448, -480, 416],
        [-448, 480, 416],
        [-448, -480, 448],
        [-448, 480, 448],
        [-416, -480, -480],
        [-416, -480, 480],
        [-416, -448, -480],
        [-416, -448, 480],
        [-416, -416, -480],
        [-416, -416, 480],
        [-416, -384, -480],
        [-416, -384, 480],
        [-416, -352, -480],
        [-416, -352, 480],
        [-416, -320, -480],
        [-416, -320, 480],
        [-416, -288, -480],
        [-416, -288, 480],
        [-416, -256, -480],
        [-416, -256, 480],
        [-416, -224, -480],
        [-416, -224, 480],
        [-416, -192, -480],
        [-416, -192, 480],
        [-416, -160, -480],
        [-416, -160, 480],
        [-416, -128, -480],
        [-416, -128, 480],
        [-416, -96, -480],
        [-416, -96, 480],
        [-416, -64, -480],
        [-416, -64, 480],
        [-416, -32, -480],
        [-416, -32, 480],
        [-416, 0, -480],
        [-416, 0, 480],
        [-416, 32, -480],
        [-416, 32, 480],
        [-416, 64, -480],
        [-416, 64, 480],
        [-416, 96, -480],
        [-416, 96, 480],
        [-416, 128, -480],
        [-416, 128, 480],
        [-416, 160, -480],
        [-416, 160, 480],
        [-416, 192, -480],
        [-416, 192, 480],
        [-416, 224, -480],
        [-416, 224, 480],
        [-416, 256, -480],
        [-416, 256, 480],
        [-416, 288, -480],
        [-416, 288, 480],
        [-416, 320, -480],
        [-416, 320, 480],
        [-416, 352, -480],
        [-416, 352, 480],
        [-416, 384, -480],
        [-416, 384, 480],
        [-416, 416, -480],
        [-416, 416, 480],
        [-416, 448, -480],
        [-416, 448, 480],
        [-416, 480, -480],
        [-416, 480, 480],
        [-416, -480, -448],
        [-416, 480, -448],
        [-416, -480, -416],
        [-416, 480, -416],
        [-416, -480, -384],
        [-416, 480, -384],
        [-416, -480, -352],
        [-416, 480, -352],
        [-416, -480, -320],
        [-416, 480, -320],
        [-416, -480, -288],
        [-416, 480, -288],
        [-416, -480, -256],
        [-416, 480, -256],
        [-416, -480, -224],
        [-416, 480, -224],
        [-416, -480, -192],
        [-416, 480, -192],
        [-416, -480, -160],
        [-416, 480, -160],
        [-416, -480, -128],
        [-416, 480, -128],
        [-416, -480, -96],
        [-416, 480, -96],
        [-416, -480, -64],
        [-416, 480, -64],
        [-416, -480, -32],
        [-416, 480, -32],
        [-416, -480, 0],
        [-416, 480, 0],
        [-416, -480, 32],
        [-416, 480, 32],
        [-416, -480, 64],
        [-416, 480, 64],
        [-416, -480, 96],
        [-416, 480, 96],
        [-416, -480, 128],
        [-416, 480, 128],
        [-416, -480, 160],
        [-416, 480, 160],
        [-416, -480, 192],
        [-416, 480, 192],
        [-416, -480, 224],
        [-416, 480, 224],
        [-416, -480, 256],
        [-416, 480, 256],
        [-416, -480, 288],
        [-416, 480, 288],
        [-416, -480, 320],
        [-416, 480, 320],
        [-416, -480, 352],
        [-416, 480, 352],
        [-416, -480, 384],
        [-416, 480, 384],
        [-416, -480, 416],
        [-416, 480, 416],
        [-416, -480, 448],
        [-416, 480, 448],
        [-384, -480, -480],
        [-384, -480, 480],
        [-384, -448, -480],
        [-384, -448, 480],
        [-384, -416, -480],
        [-384, -416, 480],
        [-384, -384, -480],
        [-384, -384, 480],
        [-384, -352, -480],
        [-384, -352, 480],
        [-384, -320, -480],
        [-384, -320, 480],
        [-384, -288, -480],
        [-384, -288, 480],
        [-384, -256, -480],
        [-384, -256, 480],
        [-384, -224, -480],
        [-384, -224, 480],
        [-384, -192, -480],
        [-384, -192, 480],
        [-384, -160, -480],
        [-384, -160, 480],
        [-384, -128, -480],
        [-384, -128, 480],
        [-384, -96, -480],
        [-384, -96, 480],
        [-384, -64, -480],
        [-384, -64, 480],
        [-384, -32, -480],
        [-384, -32, 480],
        [-384, 0, -480],
        [-384, 0, 480],
        [-384, 32, -480],
        [-384, 32, 480],
        [-384, 64, -480],
        [-384, 64, 480],
        [-384, 96, -480],
        [-384, 96, 480],
        [-384, 128, -480],
        [-384, 128, 480],
        [-384, 160, -480],
        [-384, 160, 480],
        [-384, 192, -480],
        [-384, 192, 480],
        [-384, 224, -480],
        [-384, 224, 480],
        [-384, 256, -480],
        [-384, 256, 480],
        [-384, 288, -480],
        [-384, 288, 480],
        [-384, 320, -480],
        [-384, 320, 480],
        [-384, 352, -480],
        [-384, 352, 480],
        [-384, 384, -480],
        [-384, 384, 480],
        [-384, 416, -480],
        [-384, 416, 480],
        [-384, 448, -480],
        [-384, 448, 480],
        [-384, 480, -480],
        [-384, 480, 480],
        [-384, -480, -448],
        [-384, 480, -448],
        [-384, -480, -416],
        [-384, 480, -416],
        [-384, -480, -384],
        [-384, 480, -384],
        [-384, -480, -352],
        [-384, 480, -352],
        [-384, -480, -320],
        [-384, 480, -320],
        [-384, -480, -288],
        [-384, 480, -288],
        [-384, -480, -256],
        [-384, 480, -256],
        [-384, -480, -224],
        [-384, 480, -224],
        [-384, -480, -192],
        [-384, 480, -192],
        [-384, -480, -160],
        [-384, 480, -160],
        [-384, -480, -128],
        [-384, 480, -128],
        [-384, -480, -96],
        [-384, 480, -96],
        [-384, -480, -64],
        [-384, 480, -64],
        [-384, -480, -32],
        [-384, 480, -32],
        [-384, -480, 0],
        [-384, 480, 0],
        [-384, -480, 32],
        [-384, 480, 32],
        [-384, -480, 64],
        [-384, 480, 64],
        [-384, -480, 96],
        [-384, 480, 96],
        [-384, -480, 128],
        [-384, 480, 128],
        [-384, -480, 160],
        [-384, 480, 160],
        [-384, -480, 192],
        [-384, 480, 192],
        [-384, -480, 224],
        [-384, 480, 224],
        [-384, -480, 256],
        [-384, 480, 256],
        [-384, -480, 288],
        [-384, 480, 288],
        [-384, -480, 320],
        [-384, 480, 320],
        [-384, -480, 352],
        [-384, 480, 352],
        [-384, -480, 384],
        [-384, 480, 384],
        [-384, -480, 416],
        [-384, 480, 416],
        [-384, -480, 448],
        [-384, 480, 448],
        [-352, -480, -480],
        [-352, -480, 480],
        [-352, -448, -480],
        [-352, -448, 480],
        [-352, -416, -480],
        [-352, -416, 480],
        [-352, -384, -480],
        [-352, -384, 480],
        [-352, -352, -480],
        [-352, -352, 480],
        [-352, -320, -480],
        [-352, -320, 480],
        [-352, -288, -480],
        [-352, -288, 480],
        [-352, -256, -480],
        [-352, -256, 480],
        [-352, -224, -480],
        [-352, -224, 480],
        [-352, -192, -480],
        [-352, -192, 480],
        [-352, -160, -480],
        [-352, -160, 480],
        [-352, -128, -480],
        [-352, -128, 480],
        [-352, -96, -480],
        [-352, -96, 480],
        [-352, -64, -480],
        [-352, -64, 480],
        [-352, -32, -480],
        [-352, -32, 480],
        [-352, 0, -480],
        [-352, 0, 480],
        [-352, 32, -480],
        [-352, 32, 480],
        [-352, 64, -480],
        [-352, 64, 480],
        [-352, 96, -480],
        [-352, 96, 480],
        [-352, 128, -480],
        [-352, 128, 480],
        [-352, 160, -480],
        [-352, 160, 480],
        [-352, 192, -480],
        [-352, 192, 480],
        [-352, 224, -480],
        [-352, 224, 480],
        [-352, 256, -480],
        [-352, 256, 480],
        [-352, 288, -480],
        [-352, 288, 480],
        [-352, 320, -480],
        [-352, 320, 480],
        [-352, 352, -480],
        [-352, 352, 480],
        [-352, 384, -480],
        [-352, 384, 480],
        [-352, 416, -480],
        [-352, 416, 480],
        [-352, 448, -480],
        [-352, 448, 480],
        [-352, 480, -480],
        [-352, 480, 480],
        [-352, -480, -448],
        [-352, 480, -448],
        [-352, -480, -416],
        [-352, 480, -416],
        [-352, -480, -384],
        [-352, 480, -384],
        [-352, -480, -352],
        [-352, 480, -352],
        [-352, -480, -320],
        [-352, 480, -320],
        [-352, -480, -288],
        [-352, 480, -288],
        [-352, -480, -256],
        [-352, 480, -256],
        [-352, -480, -224],
        [-352, 480, -224],
        [-352, -480, -192],
        [-352, 480, -192],
        [-352, -480, -160],
        [-352, 480, -160],
        [-352, -480, -128],
        [-352, 480, -128],
        [-352, -480, -96],
        [-352, 480, -96],
        [-352, -480, -64],
        [-352, 480, -64],
        [-352, -480, -32],
        [-352, 480, -32],
        [-352, -480, 0],
        [-352, 480, 0],
        [-352, -480, 32],
        [-352, 480, 32],
        [-352, -480, 64],
        [-352, 480, 64],
        [-352, -480, 96],
        [-352, 480, 96],
        [-352, -480, 128],
        [-352, 480, 128],
        [-352, -480, 160],
        [-352, 480, 160],
        [-352, -480, 192],
        [-352, 480, 192],
        [-352, -480, 224],
        [-352, 480, 224],
        [-352, -480, 256],
        [-352, 480, 256],
        [-352, -480, 288],
        [-352, 480, 288],
        [-352, -480, 320],
        [-352, 480, 320],
        [-352, -480, 352],
        [-352, 480, 352],
        [-352, -480, 384],
        [-352, 480, 384],
        [-352, -480, 416],
        [-352, 480, 416],
        [-352, -480, 448],
        [-352, 480, 448],
        [-320, -480, -480],
        [-320, -480, 480],
        [-320, -448, -480],
        [-320, -448, 480],
        [-320, -416, -480],
        [-320, -416, 480],
        [-320, -384, -480],
        [-320, -384, 480],
        [-320, -352, -480],
        [-320, -352, 480],
        [-320, -320, -480],
        [-320, -320, 480],
        [-320, -288, -480],
        [-320, -288, 480],
        [-320, -256, -480],
        [-320, -256, 480],
        [-320, -224, -480],
        [-320, -224, 480],
        [-320, -192, -480],
        [-320, -192, 480],
        [-320, -160, -480],
        [-320, -160, 480],
        [-320, -128, -480],
        [-320, -128, 480],
        [-320, -96, -480],
        [-320, -96, 480],
        [-320, -64, -480],
        [-320, -64, 480],
        [-320, -32, -480],
        [-320, -32, 480],
        [-320, 0, -480],
        [-320, 0, 480],
        [-320, 32, -480],
        [-320, 32, 480],
        [-320, 64, -480],
        [-320, 64, 480],
        [-320, 96, -480],
        [-320, 96, 480],
        [-320, 128, -480],
        [-320, 128, 480],
        [-320, 160, -480],
        [-320, 160, 480],
        [-320, 192, -480],
        [-320, 192, 480],
        [-320, 224, -480],
        [-320, 224, 480],
        [-320, 256, -480],
        [-320, 256, 480],
        [-320, 288, -480],
        [-320, 288, 480],
        [-320, 320, -480],
        [-320, 320, 480],
        [-320, 352, -480],
        [-320, 352, 480],
        [-320, 384, -480],
        [-320, 384, 480],
        [-320, 416, -480],
        [-320, 416, 480],
        [-320, 448, -480],
        [-320, 448, 480],
        [-320, 480, -480],
        [-320, 480, 480],
        [-320, -480, -448],
        [-320, 480, -448],
        [-320, -480, -416],
        [-320, 480, -416],
        [-320, -480, -384],
        [-320, 480, -384],
        [-320, -480, -352],
        [-320, 480, -352],
        [-320, -480, -320],
        [-320, 480, -320],
        [-320, -480, -288],
        [-320, 480, -288],
        [-320, -480, -256],
        [-320, 480, -256],
        [-320, -480, -224],
        [-320, 480, -224],
        [-320, -480, -192],
        [-320, 480, -192],
        [-320, -480, -160],
        [-320, 480, -160],
        [-320, -480, -128],
        [-320, 480, -128],
        [-320, -480, -96],
        [-320, 480, -96],
        [-320, -480, -64],
        [-320, 480, -64],
        [-320, -480, -32],
        [-320, 480, -32],
        [-320, -480, 0],
        [-320, 480, 0],
        [-320, -480, 32],
        [-320, 480, 32],
        [-320, -480, 64],
        [-320, 480, 64],
        [-320, -480, 96],
        [-320, 480, 96],
        [-320, -480, 128],
        [-320, 480, 128],
        [-320, -480, 160],
        [-320, 480, 160],
        [-320, -480, 192],
        [-320, 480, 192],
        [-320, -480, 224],
        [-320, 480, 224],
        [-320, -480, 256],
        [-320, 480, 256],
        [-320, -480, 288],
        [-320, 480, 288],
        [-320, -480, 320],
        [-320, 480, 320],
        [-320, -480, 352],
        [-320, 480, 352],
        [-320, -480, 384],
        [-320, 480, 384],
        [-320, -480, 416],
        [-320, 480, 416],
        [-320, -480, 448],
        [-320, 480, 448],
        [-288, -480, -480],
        [-288, -480, 480],
        [-288, -448, -480],
        [-288, -448, 480],
        [-288, -416, -480],
        [-288, -416, 480],
        [-288, -384, -480],
        [-288, -384, 480],
        [-288, -352, -480],
        [-288, -352, 480],
        [-288, -320, -480],
        [-288, -320, 480],
        [-288, -288, -480],
        [-288, -288, 480],
        [-288, -256, -480],
        [-288, -256, 480],
        [-288, -224, -480],
        [-288, -224, 480],
        [-288, -192, -480],
        [-288, -192, 480],
        [-288, -160, -480],
        [-288, -160, 480],
        [-288, -128, -480],
        [-288, -128, 480],
        [-288, -96, -480],
        [-288, -96, 480],
        [-288, -64, -480],
        [-288, -64, 480],
        [-288, -32, -480],
        [-288, -32, 480],
        [-288, 0, -480],
        [-288, 0, 480],
        [-288, 32, -480],
        [-288, 32, 480],
        [-288, 64, -480],
        [-288, 64, 480],
        [-288, 96, -480],
        [-288, 96, 480],
        [-288, 128, -480],
        [-288, 128, 480],
        [-288, 160, -480],
        [-288, 160, 480],
        [-288, 192, -480],
        [-288, 192, 480],
        [-288, 224, -480],
        [-288, 224, 480],
        [-288, 256, -480],
        [-288, 256, 480],
        [-288, 288, -480],
        [-288, 288, 480],
        [-288, 320, -480],
        [-288, 320, 480],
        [-288, 352, -480],
        [-288, 352, 480],
        [-288, 384, -480],
        [-288, 384, 480],
        [-288, 416, -480],
        [-288, 416, 480],
        [-288, 448, -480],
        [-288, 448, 480],
        [-288, 480, -480],
        [-288, 480, 480],
        [-288, -480, -448],
        [-288, 480, -448],
        [-288, -480, -416],
        [-288, 480, -416],
        [-288, -480, -384],
        [-288, 480, -384],
        [-288, -480, -352],
        [-288, 480, -352],
        [-288, -480, -320],
        [-288, 480, -320],
        [-288, -480, -288],
        [-288, 480, -288],
        [-288, -480, -256],
        [-288, 480, -256],
        [-288, -480, -224],
        [-288, 480, -224],
        [-288, -480, -192],
        [-288, 480, -192],
        [-288, -480, -160],
        [-288, 480, -160],
        [-288, -480, -128],
        [-288, 480, -128],
        [-288, -480, -96],
        [-288, 480, -96],
        [-288, -480, -64],
        [-288, 480, -64],
        [-288, -480, -32],
        [-288, 480, -32],
        [-288, -480, 0],
        [-288, 480, 0],
        [-288, -480, 32],
        [-288, 480, 32],
        [-288, -480, 64],
        [-288, 480, 64],
        [-288, -480, 96],
        [-288, 480, 96],
        [-288, -480, 128],
        [-288, 480, 128],
        [-288, -480, 160],
        [-288, 480, 160],
        [-288, -480, 192],
        [-288, 480, 192],
        [-288, -480, 224],
        [-288, 480, 224],
        [-288, -480, 256],
        [-288, 480, 256],
        [-288, -480, 288],
        [-288, 480, 288],
        [-288, -480, 320],
        [-288, 480, 320],
        [-288, -480, 352],
        [-288, 480, 352],
        [-288, -480, 384],
        [-288, 480, 384],
        [-288, -480, 416],
        [-288, 480, 416],
        [-288, -480, 448],
        [-288, 480, 448],
        [-256, -480, -480],
        [-256, -480, 480],
        [-256, -448, -480],
        [-256, -448, 480],
        [-256, -416, -480],
        [-256, -416, 480],
        [-256, -384, -480],
        [-256, -384, 480],
        [-256, -352, -480],
        [-256, -352, 480],
        [-256, -320, -480],
        [-256, -320, 480],
        [-256, -288, -480],
        [-256, -288, 480],
        [-256, -256, -480],
        [-256, -256, 480],
        [-256, -224, -480],
        [-256, -224, 480],
        [-256, -192, -480],
        [-256, -192, 480],
        [-256, -160, -480],
        [-256, -160, 480],
        [-256, -128, -480],
        [-256, -128, 480],
        [-256, -96, -480],
        [-256, -96, 480],
        [-256, -64, -480],
        [-256, -64, 480],
        [-256, -32, -480],
        [-256, -32, 480],
        [-256, 0, -480],
        [-256, 0, 480],
        [-256, 32, -480],
        [-256, 32, 480],
        [-256, 64, -480],
        [-256, 64, 480],
        [-256, 96, -480],
        [-256, 96, 480],
        [-256, 128, -480],
        [-256, 128, 480],
        [-256, 160, -480],
        [-256, 160, 480],
        [-256, 192, -480],
        [-256, 192, 480],
        [-256, 224, -480],
        [-256, 224, 480],
        [-256, 256, -480],
        [-256, 256, 480],
        [-256, 288, -480],
        [-256, 288, 480],
        [-256, 320, -480],
        [-256, 320, 480],
        [-256, 352, -480],
        [-256, 352, 480],
        [-256, 384, -480],
        [-256, 384, 480],
        [-256, 416, -480],
        [-256, 416, 480],
        [-256, 448, -480],
        [-256, 448, 480],
        [-256, 480, -480],
        [-256, 480, 480],
        [-256, -480, -448],
        [-256, 480, -448],
        [-256, -480, -416],
        [-256, 480, -416],
        [-256, -480, -384],
        [-256, 480, -384],
        [-256, -480, -352],
        [-256, 480, -352],
        [-256, -480, -320],
        [-256, 480, -320],
        [-256, -480, -288],
        [-256, 480, -288],
        [-256, -480, -256],
        [-256, 480, -256],
        [-256, -480, -224],
        [-256, 480, -224],
        [-256, -480, -192],
        [-256, 480, -192],
        [-256, -480, -160],
        [-256, 480, -160],
        [-256, -480, -128],
        [-256, 480, -128],
        [-256, -480, -96],
        [-256, 480, -96],
        [-256, -480, -64],
        [-256, 480, -64],
        [-256, -480, -32],
        [-256, 480, -32],
        [-256, -480, 0],
        [-256, 480, 0],
        [-256, -480, 32],
        [-256, 480, 32],
        [-256, -480, 64],
        [-256, 480, 64],
        [-256, -480, 96],
        [-256, 480, 96],
        [-256, -480, 128],
        [-256, 480, 128],
        [-256, -480, 160],
        [-256, 480, 160],
        [-256, -480, 192],
        [-256, 480, 192],
        [-256, -480, 224],
        [-256, 480, 224],
        [-256, -480, 256],
        [-256, 480, 256],
        [-256, -480, 288],
        [-256, 480, 288],
        [-256, -480, 320],
        [-256, 480, 320],
        [-256, -480, 352],
        [-256, 480, 352],
        [-256, -480, 384],
        [-256, 480, 384],
        [-256, -480, 416],
        [-256, 480, 416],
        [-256, -480, 448],
        [-256, 480, 448],
        [-224, -480, -480],
        [-224, -480, 480],
        [-224, -448, -480],
        [-224, -448, 480],
        [-224, -416, -480],
        [-224, -416, 480],
        [-224, -384, -480],
        [-224, -384, 480],
        [-224, -352, -480],
        [-224, -352, 480],
        [-224, -320, -480],
        [-224, -320, 480],
        [-224, -288, -480],
        [-224, -288, 480],
        [-224, -256, -480],
        [-224, -256, 480],
        [-224, -224, -480],
        [-224, -224, 480],
        [-224, -192, -480],
        [-224, -192, 480],
        [-224, -160, -480],
        [-224, -160, 480],
        [-224, -128, -480],
        [-224, -128, 480],
        [-224, -96, -480],
        [-224, -96, 480],
        [-224, -64, -480],
        [-224, -64, 480],
        [-224, -32, -480],
        [-224, -32, 480],
        [-224, 0, -480],
        [-224, 0, 480],
        [-224, 32, -480],
        [-224, 32, 480],
        [-224, 64, -480],
        [-224, 64, 480],
        [-224, 96, -480],
        [-224, 96, 480],
        [-224, 128, -480],
        [-224, 128, 480],
        [-224, 160, -480],
        [-224, 160, 480],
        [-224, 192, -480],
        [-224, 192, 480],
        [-224, 224, -480],
        [-224, 224, 480],
        [-224, 256, -480],
        [-224, 256, 480],
        [-224, 288, -480],
        [-224, 288, 480],
        [-224, 320, -480],
        [-224, 320, 480],
        [-224, 352, -480],
        [-224, 352, 480],
        [-224, 384, -480],
        [-224, 384, 480],
        [-224, 416, -480],
        [-224, 416, 480],
        [-224, 448, -480],
        [-224, 448, 480],
        [-224, 480, -480],
        [-224, 480, 480],
        [-224, -480, -448],
        [-224, 480, -448],
        [-224, -480, -416],
        [-224, 480, -416],
        [-224, -480, -384],
        [-224, 480, -384],
        [-224, -480, -352],
        [-224, 480, -352],
        [-224, -480, -320],
        [-224, 480, -320],
        [-224, -480, -288],
        [-224, 480, -288],
        [-224, -480, -256],
        [-224, 480, -256],
        [-224, -480, -224],
        [-224, 480, -224],
        [-224, -480, -192],
        [-224, 480, -192],
        [-224, -480, -160],
        [-224, 480, -160],
        [-224, -480, -128],
        [-224, 480, -128],
        [-224, -480, -96],
        [-224, 480, -96],
        [-224, -480, -64],
        [-224, 480, -64],
        [-224, -480, -32],
        [-224, 480, -32],
        [-224, -480, 0],
        [-224, 480, 0],
        [-224, -480, 32],
        [-224, 480, 32],
        [-224, -480, 64],
        [-224, 480, 64],
        [-224, -480, 96],
        [-224, 480, 96],
        [-224, -480, 128],
        [-224, 480, 128],
        [-224, -480, 160],
        [-224, 480, 160],
        [-224, -480, 192],
        [-224, 480, 192],
        [-224, -480, 224],
        [-224, 480, 224],
        [-224, -480, 256],
        [-224, 480, 256],
        [-224, -480, 288],
        [-224, 480, 288],
        [-224, -480, 320],
        [-224, 480, 320],
        [-224, -480, 352],
        [-224, 480, 352],
        [-224, -480, 384],
        [-224, 480, 384],
        [-224, -480, 416],
        [-224, 480, 416],
        [-224, -480, 448],
        [-224, 480, 448],
        [-192, -480, -480],
        [-192, -480, 480],
        [-192, -448, -480],
        [-192, -448, 480],
        [-192, -416, -480],
        [-192, -416, 480],
        [-192, -384, -480],
        [-192, -384, 480],
        [-192, -352, -480],
        [-192, -352, 480],
        [-192, -320, -480],
        [-192, -320, 480],
        [-192, -288, -480],
        [-192, -288, 480],
        [-192, -256, -480],
        [-192, -256, 480],
        [-192, -224, -480],
        [-192, -224, 480],
        [-192, -192, -480],
        [-192, -192, 480],
        [-192, -160, -480],
        [-192, -160, 480],
        [-192, -128, -480],
        [-192, -128, 480],
        [-192, -96, -480],
        [-192, -96, 480],
        [-192, -64, -480],
        [-192, -64, 480],
        [-192, -32, -480],
        [-192, -32, 480],
        [-192, 0, -480],
        [-192, 0, 480],
        [-192, 32, -480],
        [-192, 32, 480],
        [-192, 64, -480],
        [-192, 64, 480],
        [-192, 96, -480],
        [-192, 96, 480],
        [-192, 128, -480],
        [-192, 128, 480],
        [-192, 160, -480],
        [-192, 160, 480],
        [-192, 192, -480],
        [-192, 192, 480],
        [-192, 224, -480],
        [-192, 224, 480],
        [-192, 256, -480],
        [-192, 256, 480],
        [-192, 288, -480],
        [-192, 288, 480],
        [-192, 320, -480],
        [-192, 320, 480],
        [-192, 352, -480],
        [-192, 352, 480],
        [-192, 384, -480],
        [-192, 384, 480],
        [-192, 416, -480],
        [-192, 416, 480],
        [-192, 448, -480],
        [-192, 448, 480],
        [-192, 480, -480],
        [-192, 480, 480],
        [-192, -480, -448],
        [-192, 480, -448],
        [-192, -480, -416],
        [-192, 480, -416],
        [-192, -480, -384],
        [-192, 480, -384],
        [-192, -480, -352],
        [-192, 480, -352],
        [-192, -480, -320],
        [-192, 480, -320],
        [-192, -480, -288],
        [-192, 480, -288],
        [-192, -480, -256],
        [-192, 480, -256],
        [-192, -480, -224],
        [-192, 480, -224],
        [-192, -480, -192],
        [-192, 480, -192],
        [-192, -480, -160],
        [-192, 480, -160],
        [-192, -480, -128],
        [-192, 480, -128],
        [-192, -480, -96],
        [-192, 480, -96],
        [-192, -480, -64],
        [-192, 480, -64],
        [-192, -480, -32],
        [-192, 480, -32],
        [-192, -480, 0],
        [-192, 480, 0],
        [-192, -480, 32],
        [-192, 480, 32],
        [-192, -480, 64],
        [-192, 480, 64],
        [-192, -480, 96],
        [-192, 480, 96],
        [-192, -480, 128],
        [-192, 480, 128],
        [-192, -480, 160],
        [-192, 480, 160],
        [-192, -480, 192],
        [-192, 480, 192],
        [-192, -480, 224],
        [-192, 480, 224],
        [-192, -480, 256],
        [-192, 480, 256],
        [-192, -480, 288],
        [-192, 480, 288],
        [-192, -480, 320],
        [-192, 480, 320],
        [-192, -480, 352],
        [-192, 480, 352],
        [-192, -480, 384],
        [-192, 480, 384],
        [-192, -480, 416],
        [-192, 480, 416],
        [-192, -480, 448],
        [-192, 480, 448],
        [-160, -480, -480],
        [-160, -480, 480],
        [-160, -448, -480],
        [-160, -448, 480],
        [-160, -416, -480],
        [-160, -416, 480],
        [-160, -384, -480],
        [-160, -384, 480],
        [-160, -352, -480],
        [-160, -352, 480],
        [-160, -320, -480],
        [-160, -320, 480],
        [-160, -288, -480],
        [-160, -288, 480],
        [-160, -256, -480],
        [-160, -256, 480],
        [-160, -224, -480],
        [-160, -224, 480],
        [-160, -192, -480],
        [-160, -192, 480],
        [-160, -160, -480],
        [-160, -160, 480],
        [-160, -128, -480],
        [-160, -128, 480],
        [-160, -96, -480],
        [-160, -96, 480],
        [-160, -64, -480],
        [-160, -64, 480],
        [-160, -32, -480],
        [-160, -32, 480],
        [-160, 0, -480],
        [-160, 0, 480],
        [-160, 32, -480],
        [-160, 32, 480],
        [-160, 64, -480],
        [-160, 64, 480],
        [-160, 96, -480],
        [-160, 96, 480],
        [-160, 128, -480],
        [-160, 128, 480],
        [-160, 160, -480],
        [-160, 160, 480],
        [-160, 192, -480],
        [-160, 192, 480],
        [-160, 224, -480],
        [-160, 224, 480],
        [-160, 256, -480],
        [-160, 256, 480],
        [-160, 288, -480],
        [-160, 288, 480],
        [-160, 320, -480],
        [-160, 320, 480],
        [-160, 352, -480],
        [-160, 352, 480],
        [-160, 384, -480],
        [-160, 384, 480],
        [-160, 416, -480],
        [-160, 416, 480],
        [-160, 448, -480],
        [-160, 448, 480],
        [-160, 480, -480],
        [-160, 480, 480],
        [-160, -480, -448],
        [-160, 480, -448],
        [-160, -480, -416],
        [-160, 480, -416],
        [-160, -480, -384],
        [-160, 480, -384],
        [-160, -480, -352],
        [-160, 480, -352],
        [-160, -480, -320],
        [-160, 480, -320],
        [-160, -480, -288],
        [-160, 480, -288],
        [-160, -480, -256],
        [-160, 480, -256],
        [-160, -480, -224],
        [-160, 480, -224],
        [-160, -480, -192],
        [-160, 480, -192],
        [-160, -480, -160],
        [-160, 480, -160],
        [-160, -480, -128],
        [-160, 480, -128],
        [-160, -480, -96],
        [-160, 480, -96],
        [-160, -480, -64],
        [-160, 480, -64],
        [-160, -480, -32],
        [-160, 480, -32],
        [-160, -480, 0],
        [-160, 480, 0],
        [-160, -480, 32],
        [-160, 480, 32],
        [-160, -480, 64],
        [-160, 480, 64],
        [-160, -480, 96],
        [-160, 480, 96],
        [-160, -480, 128],
        [-160, 480, 128],
        [-160, -480, 160],
        [-160, 480, 160],
        [-160, -480, 192],
        [-160, 480, 192],
        [-160, -480, 224],
        [-160, 480, 224],
        [-160, -480, 256],
        [-160, 480, 256],
        [-160, -480, 288],
        [-160, 480, 288],
        [-160, -480, 320],
        [-160, 480, 320],
        [-160, -480, 352],
        [-160, 480, 352],
        [-160, -480, 384],
        [-160, 480, 384],
        [-160, -480, 416],
        [-160, 480, 416],
        [-160, -480, 448],
        [-160, 480, 448],
        [-128, -480, -480],
        [-128, -480, 480],
        [-128, -448, -480],
        [-128, -448, 480],
        [-128, -416, -480],
        [-128, -416, 480],
        [-128, -384, -480],
        [-128, -384, 480],
        [-128, -352, -480],
        [-128, -352, 480],
        [-128, -320, -480],
        [-128, -320, 480],
        [-128, -288, -480],
        [-128, -288, 480],
        [-128, -256, -480],
        [-128, -256, 480],
        [-128, -224, -480],
        [-128, -224, 480],
        [-128, -192, -480],
        [-128, -192, 480],
        [-128, -160, -480],
        [-128, -160, 480],
        [-128, -128, -480],
        [-128, -128, 480],
        [-128, -96, -480],
        [-128, -96, 480],
        [-128, -64, -480],
        [-128, -64, 480],
        [-128, -32, -480],
        [-128, -32, 480],
        [-128, 0, -480],
        [-128, 0, 480],
        [-128, 32, -480],
        [-128, 32, 480],
        [-128, 64, -480],
        [-128, 64, 480],
        [-128, 96, -480],
        [-128, 96, 480],
        [-128, 128, -480],
        [-128, 128, 480],
        [-128, 160, -480],
        [-128, 160, 480],
        [-128, 192, -480],
        [-128, 192, 480],
        [-128, 224, -480],
        [-128, 224, 480],
        [-128, 256, -480],
        [-128, 256, 480],
        [-128, 288, -480],
        [-128, 288, 480],
        [-128, 320, -480],
        [-128, 320, 480],
        [-128, 352, -480],
        [-128, 352, 480],
        [-128, 384, -480],
        [-128, 384, 480],
        [-128, 416, -480],
        [-128, 416, 480],
        [-128, 448, -480],
        [-128, 448, 480],
        [-128, 480, -480],
        [-128, 480, 480],
        [-128, -480, -448],
        [-128, 480, -448],
        [-128, -480, -416],
        [-128, 480, -416],
        [-128, -480, -384],
        [-128, 480, -384],
        [-128, -480, -352],
        [-128, 480, -352],
        [-128, -480, -320],
        [-128, 480, -320],
        [-128, -480, -288],
        [-128, 480, -288],
        [-128, -480, -256],
        [-128, 480, -256],
        [-128, -480, -224],
        [-128, 480, -224],
        [-128, -480, -192],
        [-128, 480, -192],
        [-128, -480, -160],
        [-128, 480, -160],
        [-128, -480, -128],
        [-128, 480, -128],
        [-128, -480, -96],
        [-128, 480, -96],
        [-128, -480, -64],
        [-128, 480, -64],
        [-128, -480, -32],
        [-128, 480, -32],
        [-128, -480, 0],
        [-128, 480, 0],
        [-128, -480, 32],
        [-128, 480, 32],
        [-128, -480, 64],
        [-128, 480, 64],
        [-128, -480, 96],
        [-128, 480, 96],
        [-128, -480, 128],
        [-128, 480, 128],
        [-128, -480, 160],
        [-128, 480, 160],
        [-128, -480, 192],
        [-128, 480, 192],
        [-128, -480, 224],
        [-128, 480, 224],
        [-128, -480, 256],
        [-128, 480, 256],
        [-128, -480, 288],
        [-128, 480, 288],
        [-128, -480, 320],
        [-128, 480, 320],
        [-128, -480, 352],
        [-128, 480, 352],
        [-128, -480, 384],
        [-128, 480, 384],
        [-128, -480, 416],
        [-128, 480, 416],
        [-128, -480, 448],
        [-128, 480, 448],
        [-96, -480, -480],
        [-96, -480, 480],
        [-96, -448, -480],
        [-96, -448, 480],
        [-96, -416, -480],
        [-96, -416, 480],
        [-96, -384, -480],
        [-96, -384, 480],
        [-96, -352, -480],
        [-96, -352, 480],
        [-96, -320, -480],
        [-96, -320, 480],
        [-96, -288, -480],
        [-96, -288, 480],
        [-96, -256, -480],
        [-96, -256, 480],
        [-96, -224, -480],
        [-96, -224, 480],
        [-96, -192, -480],
        [-96, -192, 480],
        [-96, -160, -480],
        [-96, -160, 480],
        [-96, -128, -480],
        [-96, -128, 480],
        [-96, -96, -480],
        [-96, -96, 480],
        [-96, -64, -480],
        [-96, -64, 480],
        [-96, -32, -480],
        [-96, -32, 480],
        [-96, 0, -480],
        [-96, 0, 480],
        [-96, 32, -480],
        [-96, 32, 480],
        [-96, 64, -480],
        [-96, 64, 480],
        [-96, 96, -480],
        [-96, 96, 480],
        [-96, 128, -480],
        [-96, 128, 480],
        [-96, 160, -480],
        [-96, 160, 480],
        [-96, 192, -480],
        [-96, 192, 480],
        [-96, 224, -480],
        [-96, 224, 480],
        [-96, 256, -480],
        [-96, 256, 480],
        [-96, 288, -480],
        [-96, 288, 480],
        [-96, 320, -480],
        [-96, 320, 480],
        [-96, 352, -480],
        [-96, 352, 480],
        [-96, 384, -480],
        [-96, 384, 480],
        [-96, 416, -480],
        [-96, 416, 480],
        [-96, 448, -480],
        [-96, 448, 480],
        [-96, 480, -480],
        [-96, 480, 480],
        [-96, -480, -448],
        [-96, 480, -448],
        [-96, -480, -416],
        [-96, 480, -416],
        [-96, -480, -384],
        [-96, 480, -384],
        [-96, -480, -352],
        [-96, 480, -352],
        [-96, -480, -320],
        [-96, 480, -320],
        [-96, -480, -288],
        [-96, 480, -288],
        [-96, -480, -256],
        [-96, 480, -256],
        [-96, -480, -224],
        [-96, 480, -224],
        [-96, -480, -192],
        [-96, 480, -192],
        [-96, -480, -160],
        [-96, 480, -160],
        [-96, -480, -128],
        [-96, 480, -128],
        [-96, -480, -96],
        [-96, 480, -96],
        [-96, -480, -64],
        [-96, 480, -64],
        [-96, -480, -32],
        [-96, 480, -32],
        [-96, -480, 0],
        [-96, 480, 0],
        [-96, -480, 32],
        [-96, 480, 32],
        [-96, -480, 64],
        [-96, 480, 64],
        [-96, -480, 96],
        [-96, 480, 96],
        [-96, -480, 128],
        [-96, 480, 128],
        [-96, -480, 160],
        [-96, 480, 160],
        [-96, -480, 192],
        [-96, 480, 192],
        [-96, -480, 224],
        [-96, 480, 224],
        [-96, -480, 256],
        [-96, 480, 256],
        [-96, -480, 288],
        [-96, 480, 288],
        [-96, -480, 320],
        [-96, 480, 320],
        [-96, -480, 352],
        [-96, 480, 352],
        [-96, -480, 384],
        [-96, 480, 384],
        [-96, -480, 416],
        [-96, 480, 416],
        [-96, -480, 448],
        [-96, 480, 448],
        [-64, -480, -480],
        [-64, -480, 480],
        [-64, -448, -480],
        [-64, -448, 480],
        [-64, -416, -480],
        [-64, -416, 480],
        [-64, -384, -480],
        [-64, -384, 480],
        [-64, -352, -480],
        [-64, -352, 480],
        [-64, -320, -480],
        [-64, -320, 480],
        [-64, -288, -480],
        [-64, -288, 480],
        [-64, -256, -480],
        [-64, -256, 480],
        [-64, -224, -480],
        [-64, -224, 480],
        [-64, -192, -480],
        [-64, -192, 480],
        [-64, -160, -480],
        [-64, -160, 480],
        [-64, -128, -480],
        [-64, -128, 480],
        [-64, -96, -480],
        [-64, -96, 480],
        [-64, -64, -480],
        [-64, -64, 480],
        [-64, -32, -480],
        [-64, -32, 480],
        [-64, 0, -480],
        [-64, 0, 480],
        [-64, 32, -480],
        [-64, 32, 480],
        [-64, 64, -480],
        [-64, 64, 480],
        [-64, 96, -480],
        [-64, 96, 480],
        [-64, 128, -480],
        [-64, 128, 480],
        [-64, 160, -480],
        [-64, 160, 480],
        [-64, 192, -480],
        [-64, 192, 480],
        [-64, 224, -480],
        [-64, 224, 480],
        [-64, 256, -480],
        [-64, 256, 480],
        [-64, 288, -480],
        [-64, 288, 480],
        [-64, 320, -480],
        [-64, 320, 480],
        [-64, 352, -480],
        [-64, 352, 480],
        [-64, 384, -480],
        [-64, 384, 480],
        [-64, 416, -480],
        [-64, 416, 480],
        [-64, 448, -480],
        [-64, 448, 480],
        [-64, 480, -480],
        [-64, 480, 480],
        [-64, -480, -448],
        [-64, 480, -448],
        [-64, -480, -416],
        [-64, 480, -416],
        [-64, -480, -384],
        [-64, 480, -384],
        [-64, -480, -352],
        [-64, 480, -352],
        [-64, -480, -320],
        [-64, 480, -320],
        [-64, -480, -288],
        [-64, 480, -288],
        [-64, -480, -256],
        [-64, 480, -256],
        [-64, -480, -224],
        [-64, 480, -224],
        [-64, -480, -192],
        [-64, 480, -192],
        [-64, -480, -160],
        [-64, 480, -160],
        [-64, -480, -128],
        [-64, 480, -128],
        [-64, -480, -96],
        [-64, 480, -96],
        [-64, -480, -64],
        [-64, 480, -64],
        [-64, -480, -32],
        [-64, 480, -32],
        [-64, -480, 0],
        [-64, 480, 0],
        [-64, -480, 32],
        [-64, 480, 32],
        [-64, -480, 64],
        [-64, 480, 64],
        [-64, -480, 96],
        [-64, 480, 96],
        [-64, -480, 128],
        [-64, 480, 128],
        [-64, -480, 160],
        [-64, 480, 160],
        [-64, -480, 192],
        [-64, 480, 192],
        [-64, -480, 224],
        [-64, 480, 224],
        [-64, -480, 256],
        [-64, 480, 256],
        [-64, -480, 288],
        [-64, 480, 288],
        [-64, -480, 320],
        [-64, 480, 320],
        [-64, -480, 352],
        [-64, 480, 352],
        [-64, -480, 384],
        [-64, 480, 384],
        [-64, -480, 416],
        [-64, 480, 416],
        [-64, -480, 448],
        [-64, 480, 448],
        [-32, -480, -480],
        [-32, -480, 480],
        [-32, -448, -480],
        [-32, -448, 480],
        [-32, -416, -480],
        [-32, -416, 480],
        [-32, -384, -480],
        [-32, -384, 480],
        [-32, -352, -480],
        [-32, -352, 480],
        [-32, -320, -480],
        [-32, -320, 480],
        [-32, -288, -480],
        [-32, -288, 480],
        [-32, -256, -480],
        [-32, -256, 480],
        [-32, -224, -480],
        [-32, -224, 480],
        [-32, -192, -480],
        [-32, -192, 480],
        [-32, -160, -480],
        [-32, -160, 480],
        [-32, -128, -480],
        [-32, -128, 480],
        [-32, -96, -480],
        [-32, -96, 480],
        [-32, -64, -480],
        [-32, -64, 480],
        [-32, -32, -480],
        [-32, -32, 480],
        [-32, 0, -480],
        [-32, 0, 480],
        [-32, 32, -480],
        [-32, 32, 480],
        [-32, 64, -480],
        [-32, 64, 480],
        [-32, 96, -480],
        [-32, 96, 480],
        [-32, 128, -480],
        [-32, 128, 480],
        [-32, 160, -480],
        [-32, 160, 480],
        [-32, 192, -480],
        [-32, 192, 480],
        [-32, 224, -480],
        [-32, 224, 480],
        [-32, 256, -480],
        [-32, 256, 480],
        [-32, 288, -480],
        [-32, 288, 480],
        [-32, 320, -480],
        [-32, 320, 480],
        [-32, 352, -480],
        [-32, 352, 480],
        [-32, 384, -480],
        [-32, 384, 480],
        [-32, 416, -480],
        [-32, 416, 480],
        [-32, 448, -480],
        [-32, 448, 480],
        [-32, 480, -480],
        [-32, 480, 480],
        [-32, -480, -448],
        [-32, 480, -448],
        [-32, -480, -416],
        [-32, 480, -416],
        [-32, -480, -384],
        [-32, 480, -384],
        [-32, -480, -352],
        [-32, 480, -352],
        [-32, -480, -320],
        [-32, 480, -320],
        [-32, -480, -288],
        [-32, 480, -288],
        [-32, -480, -256],
        [-32, 480, -256],
        [-32, -480, -224],
        [-32, 480, -224],
        [-32, -480, -192],
        [-32, 480, -192],
        [-32, -480, -160],
        [-32, 480, -160],
        [-32, -480, -128],
        [-32, 480, -128],
        [-32, -480, -96],
        [-32, 480, -96],
        [-32, -480, -64],
        [-32, 480, -64],
        [-32, -480, -32],
        [-32, 480, -32],
        [-32, -480, 0],
        [-32, 480, 0],
        [-32, -480, 32],
        [-32, 480, 32],
        [-32, -480, 64],
        [-32, 480, 64],
        [-32, -480, 96],
        [-32, 480, 96],
        [-32, -480, 128],
        [-32, 480, 128],
        [-32, -480, 160],
        [-32, 480, 160],
        [-32, -480, 192],
        [-32, 480, 192],
        [-32, -480, 224],
        [-32, 480, 224],
        [-32, -480, 256],
        [-32, 480, 256],
        [-32, -480, 288],
        [-32, 480, 288],
        [-32, -480, 320],
        [-32, 480, 320],
        [-32, -480, 352],
        [-32, 480, 352],
        [-32, -480, 384],
        [-32, 480, 384],
        [-32, -480, 416],
        [-32, 480, 416],
        [-32, -480, 448],
        [-32, 480, 448],
        [0, -480, -480],
        [0, -480, 480],
        [0, -448, -480],
        [0, -448, 480],
        [0, -416, -480],
        [0, -416, 480],
        [0, -384, -480],
        [0, -384, 480],
        [0, -352, -480],
        [0, -352, 480],
        [0, -320, -480],
        [0, -320, 480],
        [0, -288, -480],
        [0, -288, 480],
        [0, -256, -480],
        [0, -256, 480],
        [0, -224, -480],
        [0, -224, 480],
        [0, -192, -480],
        [0, -192, 480],
        [0, -160, -480],
        [0, -160, 480],
        [0, -128, -480],
        [0, -128, 480],
        [0, -96, -480],
        [0, -96, 480],
        [0, -64, -480],
        [0, -64, 480],
        [0, -32, -480],
        [0, -32, 480],
        [0, 0, -480],
        [0, 0, 480],
        [0, 32, -480],
        [0, 32, 480],
        [0, 64, -480],
        [0, 64, 480],
        [0, 96, -480],
        [0, 96, 480],
        [0, 128, -480],
        [0, 128, 480],
        [0, 160, -480],
        [0, 160, 480],
        [0, 192, -480],
        [0, 192, 480],
        [0, 224, -480],
        [0, 224, 480],
        [0, 256, -480],
        [0, 256, 480],
        [0, 288, -480],
        [0, 288, 480],
        [0, 320, -480],
        [0, 320, 480],
        [0, 352, -480],
        [0, 352, 480],
        [0, 384, -480],
        [0, 384, 480],
        [0, 416, -480],
        [0, 416, 480],
        [0, 448, -480],
        [0, 448, 480],
        [0, 480, -480],
        [0, 480, 480],
        [0, -480, -448],
        [0, 480, -448],
        [0, -480, -416],
        [0, 480, -416],
        [0, -480, -384],
        [0, 480, -384],
        [0, -480, -352],
        [0, 480, -352],
        [0, -480, -320],
        [0, 480, -320],
        [0, -480, -288],
        [0, 480, -288],
        [0, -480, -256],
        [0, 480, -256],
        [0, -480, -224],
        [0, 480, -224],
        [0, -480, -192],
        [0, 480, -192],
        [0, -480, -160],
        [0, 480, -160],
        [0, -480, -128],
        [0, 480, -128],
        [0, -480, -96],
        [0, 480, -96],
        [0, -480, -64],
        [0, 480, -64],
        [0, -480, -32],
        [0, 480, -32],
        [0, -480, 0],
        [0, 480, 0],
        [0, -480, 32],
        [0, 480, 32],
        [0, -480, 64],
        [0, 480, 64],
        [0, -480, 96],
        [0, 480, 96],
        [0, -480, 128],
        [0, 480, 128],
        [0, -480, 160],
        [0, 480, 160],
        [0, -480, 192],
        [0, 480, 192],
        [0, -480, 224],
        [0, 480, 224],
        [0, -480, 256],
        [0, 480, 256],
        [0, -480, 288],
        [0, 480, 288],
        [0, -480, 320],
        [0, 480, 320],
        [0, -480, 352],
        [0, 480, 352],
        [0, -480, 384],
        [0, 480, 384],
        [0, -480, 416],
        [0, 480, 416],
        [0, -480, 448],
        [0, 480, 448],
        [32, -480, -480],
        [32, -480, 480],
        [32, -448, -480],
        [32, -448, 480],
        [32, -416, -480],
        [32, -416, 480],
        [32, -384, -480],
        [32, -384, 480],
        [32, -352, -480],
        [32, -352, 480],
        [32, -320, -480],
        [32, -320, 480],
        [32, -288, -480],
        [32, -288, 480],
        [32, -256, -480],
        [32, -256, 480],
        [32, -224, -480],
        [32, -224, 480],
        [32, -192, -480],
        [32, -192, 480],
        [32, -160, -480],
        [32, -160, 480],
        [32, -128, -480],
        [32, -128, 480],
        [32, -96, -480],
        [32, -96, 480],
        [32, -64, -480],
        [32, -64, 480],
        [32, -32, -480],
        [32, -32, 480],
        [32, 0, -480],
        [32, 0, 480],
        [32, 32, -480],
        [32, 32, 480],
        [32, 64, -480],
        [32, 64, 480],
        [32, 96, -480],
        [32, 96, 480],
        [32, 128, -480],
        [32, 128, 480],
        [32, 160, -480],
        [32, 160, 480],
        [32, 192, -480],
        [32, 192, 480],
        [32, 224, -480],
        [32, 224, 480],
        [32, 256, -480],
        [32, 256, 480],
        [32, 288, -480],
        [32, 288, 480],
        [32, 320, -480],
        [32, 320, 480],
        [32, 352, -480],
        [32, 352, 480],
        [32, 384, -480],
        [32, 384, 480],
        [32, 416, -480],
        [32, 416, 480],
        [32, 448, -480],
        [32, 448, 480],
        [32, 480, -480],
        [32, 480, 480],
        [32, -480, -448],
        [32, 480, -448],
        [32, -480, -416],
        [32, 480, -416],
        [32, -480, -384],
        [32, 480, -384],
        [32, -480, -352],
        [32, 480, -352],
        [32, -480, -320],
        [32, 480, -320],
        [32, -480, -288],
        [32, 480, -288],
        [32, -480, -256],
        [32, 480, -256],
        [32, -480, -224],
        [32, 480, -224],
        [32, -480, -192],
        [32, 480, -192],
        [32, -480, -160],
        [32, 480, -160],
        [32, -480, -128],
        [32, 480, -128],
        [32, -480, -96],
        [32, 480, -96],
        [32, -480, -64],
        [32, 480, -64],
        [32, -480, -32],
        [32, 480, -32],
        [32, -480, 0],
        [32, 480, 0],
        [32, -480, 32],
        [32, 480, 32],
        [32, -480, 64],
        [32, 480, 64],
        [32, -480, 96],
        [32, 480, 96],
        [32, -480, 128],
        [32, 480, 128],
        [32, -480, 160],
        [32, 480, 160],
        [32, -480, 192],
        [32, 480, 192],
        [32, -480, 224],
        [32, 480, 224],
        [32, -480, 256],
        [32, 480, 256],
        [32, -480, 288],
        [32, 480, 288],
        [32, -480, 320],
        [32, 480, 320],
        [32, -480, 352],
        [32, 480, 352],
        [32, -480, 384],
        [32, 480, 384],
        [32, -480, 416],
        [32, 480, 416],
        [32, -480, 448],
        [32, 480, 448],
        [64, -480, -480],
        [64, -480, 480],
        [64, -448, -480],
        [64, -448, 480],
        [64, -416, -480],
        [64, -416, 480],
        [64, -384, -480],
        [64, -384, 480],
        [64, -352, -480],
        [64, -352, 480],
        [64, -320, -480],
        [64, -320, 480],
        [64, -288, -480],
        [64, -288, 480],
        [64, -256, -480],
        [64, -256, 480],
        [64, -224, -480],
        [64, -224, 480],
        [64, -192, -480],
        [64, -192, 480],
        [64, -160, -480],
        [64, -160, 480],
        [64, -128, -480],
        [64, -128, 480],
        [64, -96, -480],
        [64, -96, 480],
        [64, -64, -480],
        [64, -64, 480],
        [64, -32, -480],
        [64, -32, 480],
        [64, 0, -480],
        [64, 0, 480],
        [64, 32, -480],
        [64, 32, 480],
        [64, 64, -480],
        [64, 64, 480],
        [64, 96, -480],
        [64, 96, 480],
        [64, 128, -480],
        [64, 128, 480],
        [64, 160, -480],
        [64, 160, 480],
        [64, 192, -480],
        [64, 192, 480],
        [64, 224, -480],
        [64, 224, 480],
        [64, 256, -480],
        [64, 256, 480],
        [64, 288, -480],
        [64, 288, 480],
        [64, 320, -480],
        [64, 320, 480],
        [64, 352, -480],
        [64, 352, 480],
        [64, 384, -480],
        [64, 384, 480],
        [64, 416, -480],
        [64, 416, 480],
        [64, 448, -480],
        [64, 448, 480],
        [64, 480, -480],
        [64, 480, 480],
        [64, -480, -448],
        [64, 480, -448],
        [64, -480, -416],
        [64, 480, -416],
        [64, -480, -384],
        [64, 480, -384],
        [64, -480, -352],
        [64, 480, -352],
        [64, -480, -320],
        [64, 480, -320],
        [64, -480, -288],
        [64, 480, -288],
        [64, -480, -256],
        [64, 480, -256],
        [64, -480, -224],
        [64, 480, -224],
        [64, -480, -192],
        [64, 480, -192],
        [64, -480, -160],
        [64, 480, -160],
        [64, -480, -128],
        [64, 480, -128],
        [64, -480, -96],
        [64, 480, -96],
        [64, -480, -64],
        [64, 480, -64],
        [64, -480, -32],
        [64, 480, -32],
        [64, -480, 0],
        [64, 480, 0],
        [64, -480, 32],
        [64, 480, 32],
        [64, -480, 64],
        [64, 480, 64],
        [64, -480, 96],
        [64, 480, 96],
        [64, -480, 128],
        [64, 480, 128],
        [64, -480, 160],
        [64, 480, 160],
        [64, -480, 192],
        [64, 480, 192],
        [64, -480, 224],
        [64, 480, 224],
        [64, -480, 256],
        [64, 480, 256],
        [64, -480, 288],
        [64, 480, 288],
        [64, -480, 320],
        [64, 480, 320],
        [64, -480, 352],
        [64, 480, 352],
        [64, -480, 384],
        [64, 480, 384],
        [64, -480, 416],
        [64, 480, 416],
        [64, -480, 448],
        [64, 480, 448],
        [96, -480, -480],
        [96, -480, 480],
        [96, -448, -480],
        [96, -448, 480],
        [96, -416, -480],
        [96, -416, 480],
        [96, -384, -480],
        [96, -384, 480],
        [96, -352, -480],
        [96, -352, 480],
        [96, -320, -480],
        [96, -320, 480],
        [96, -288, -480],
        [96, -288, 480],
        [96, -256, -480],
        [96, -256, 480],
        [96, -224, -480],
        [96, -224, 480],
        [96, -192, -480],
        [96, -192, 480],
        [96, -160, -480],
        [96, -160, 480],
        [96, -128, -480],
        [96, -128, 480],
        [96, -96, -480],
        [96, -96, 480],
        [96, -64, -480],
        [96, -64, 480],
        [96, -32, -480],
        [96, -32, 480],
        [96, 0, -480],
        [96, 0, 480],
        [96, 32, -480],
        [96, 32, 480],
        [96, 64, -480],
        [96, 64, 480],
        [96, 96, -480],
        [96, 96, 480],
        [96, 128, -480],
        [96, 128, 480],
        [96, 160, -480],
        [96, 160, 480],
        [96, 192, -480],
        [96, 192, 480],
        [96, 224, -480],
        [96, 224, 480],
        [96, 256, -480],
        [96, 256, 480],
        [96, 288, -480],
        [96, 288, 480],
        [96, 320, -480],
        [96, 320, 480],
        [96, 352, -480],
        [96, 352, 480],
        [96, 384, -480],
        [96, 384, 480],
        [96, 416, -480],
        [96, 416, 480],
        [96, 448, -480],
        [96, 448, 480],
        [96, 480, -480],
        [96, 480, 480],
        [96, -480, -448],
        [96, 480, -448],
        [96, -480, -416],
        [96, 480, -416],
        [96, -480, -384],
        [96, 480, -384],
        [96, -480, -352],
        [96, 480, -352],
        [96, -480, -320],
        [96, 480, -320],
        [96, -480, -288],
        [96, 480, -288],
        [96, -480, -256],
        [96, 480, -256],
        [96, -480, -224],
        [96, 480, -224],
        [96, -480, -192],
        [96, 480, -192],
        [96, -480, -160],
        [96, 480, -160],
        [96, -480, -128],
        [96, 480, -128],
        [96, -480, -96],
        [96, 480, -96],
        [96, -480, -64],
        [96, 480, -64],
        [96, -480, -32],
        [96, 480, -32],
        [96, -480, 0],
        [96, 480, 0],
        [96, -480, 32],
        [96, 480, 32],
        [96, -480, 64],
        [96, 480, 64],
        [96, -480, 96],
        [96, 480, 96],
        [96, -480, 128],
        [96, 480, 128],
        [96, -480, 160],
        [96, 480, 160],
        [96, -480, 192],
        [96, 480, 192],
        [96, -480, 224],
        [96, 480, 224],
        [96, -480, 256],
        [96, 480, 256],
        [96, -480, 288],
        [96, 480, 288],
        [96, -480, 320],
        [96, 480, 320],
        [96, -480, 352],
        [96, 480, 352],
        [96, -480, 384],
        [96, 480, 384],
        [96, -480, 416],
        [96, 480, 416],
        [96, -480, 448],
        [96, 480, 448],
        [128, -480, -480],
        [128, -480, 480],
        [128, -448, -480],
        [128, -448, 480],
        [128, -416, -480],
        [128, -416, 480],
        [128, -384, -480],
        [128, -384, 480],
        [128, -352, -480],
        [128, -352, 480],
        [128, -320, -480],
        [128, -320, 480],
        [128, -288, -480],
        [128, -288, 480],
        [128, -256, -480],
        [128, -256, 480],
        [128, -224, -480],
        [128, -224, 480],
        [128, -192, -480],
        [128, -192, 480],
        [128, -160, -480],
        [128, -160, 480],
        [128, -128, -480],
        [128, -128, 480],
        [128, -96, -480],
        [128, -96, 480],
        [128, -64, -480],
        [128, -64, 480],
        [128, -32, -480],
        [128, -32, 480],
        [128, 0, -480],
        [128, 0, 480],
        [128, 32, -480],
        [128, 32, 480],
        [128, 64, -480],
        [128, 64, 480],
        [128, 96, -480],
        [128, 96, 480],
        [128, 128, -480],
        [128, 128, 480],
        [128, 160, -480],
        [128, 160, 480],
        [128, 192, -480],
        [128, 192, 480],
        [128, 224, -480],
        [128, 224, 480],
        [128, 256, -480],
        [128, 256, 480],
        [128, 288, -480],
        [128, 288, 480],
        [128, 320, -480],
        [128, 320, 480],
        [128, 352, -480],
        [128, 352, 480],
        [128, 384, -480],
        [128, 384, 480],
        [128, 416, -480],
        [128, 416, 480],
        [128, 448, -480],
        [128, 448, 480],
        [128, 480, -480],
        [128, 480, 480],
        [128, -480, -448],
        [128, 480, -448],
        [128, -480, -416],
        [128, 480, -416],
        [128, -480, -384],
        [128, 480, -384],
        [128, -480, -352],
        [128, 480, -352],
        [128, -480, -320],
        [128, 480, -320],
        [128, -480, -288],
        [128, 480, -288],
        [128, -480, -256],
        [128, 480, -256],
        [128, -480, -224],
        [128, 480, -224],
        [128, -480, -192],
        [128, 480, -192],
        [128, -480, -160],
        [128, 480, -160],
        [128, -480, -128],
        [128, 480, -128],
        [128, -480, -96],
        [128, 480, -96],
        [128, -480, -64],
        [128, 480, -64],
        [128, -480, -32],
        [128, 480, -32],
        [128, -480, 0],
        [128, 480, 0],
        [128, -480, 32],
        [128, 480, 32],
        [128, -480, 64],
        [128, 480, 64],
        [128, -480, 96],
        [128, 480, 96],
        [128, -480, 128],
        [128, 480, 128],
        [128, -480, 160],
        [128, 480, 160],
        [128, -480, 192],
        [128, 480, 192],
        [128, -480, 224],
        [128, 480, 224],
        [128, -480, 256],
        [128, 480, 256],
        [128, -480, 288],
        [128, 480, 288],
        [128, -480, 320],
        [128, 480, 320],
        [128, -480, 352],
        [128, 480, 352],
        [128, -480, 384],
        [128, 480, 384],
        [128, -480, 416],
        [128, 480, 416],
        [128, -480, 448],
        [128, 480, 448],
        [160, -480, -480],
        [160, -480, 480],
        [160, -448, -480],
        [160, -448, 480],
        [160, -416, -480],
        [160, -416, 480],
        [160, -384, -480],
        [160, -384, 480],
        [160, -352, -480],
        [160, -352, 480],
        [160, -320, -480],
        [160, -320, 480],
        [160, -288, -480],
        [160, -288, 480],
        [160, -256, -480],
        [160, -256, 480],
        [160, -224, -480],
        [160, -224, 480],
        [160, -192, -480],
        [160, -192, 480],
        [160, -160, -480],
        [160, -160, 480],
        [160, -128, -480],
        [160, -128, 480],
        [160, -96, -480],
        [160, -96, 480],
        [160, -64, -480],
        [160, -64, 480],
        [160, -32, -480],
        [160, -32, 480],
        [160, 0, -480],
        [160, 0, 480],
        [160, 32, -480],
        [160, 32, 480],
        [160, 64, -480],
        [160, 64, 480],
        [160, 96, -480],
        [160, 96, 480],
        [160, 128, -480],
        [160, 128, 480],
        [160, 160, -480],
        [160, 160, 480],
        [160, 192, -480],
        [160, 192, 480],
        [160, 224, -480],
        [160, 224, 480],
        [160, 256, -480],
        [160, 256, 480],
        [160, 288, -480],
        [160, 288, 480],
        [160, 320, -480],
        [160, 320, 480],
        [160, 352, -480],
        [160, 352, 480],
        [160, 384, -480],
        [160, 384, 480],
        [160, 416, -480],
        [160, 416, 480],
        [160, 448, -480],
        [160, 448, 480],
        [160, 480, -480],
        [160, 480, 480],
        [160, -480, -448],
        [160, 480, -448],
        [160, -480, -416],
        [160, 480, -416],
        [160, -480, -384],
        [160, 480, -384],
        [160, -480, -352],
        [160, 480, -352],
        [160, -480, -320],
        [160, 480, -320],
        [160, -480, -288],
        [160, 480, -288],
        [160, -480, -256],
        [160, 480, -256],
        [160, -480, -224],
        [160, 480, -224],
        [160, -480, -192],
        [160, 480, -192],
        [160, -480, -160],
        [160, 480, -160],
        [160, -480, -128],
        [160, 480, -128],
        [160, -480, -96],
        [160, 480, -96],
        [160, -480, -64],
        [160, 480, -64],
        [160, -480, -32],
        [160, 480, -32],
        [160, -480, 0],
        [160, 480, 0],
        [160, -480, 32],
        [160, 480, 32],
        [160, -480, 64],
        [160, 480, 64],
        [160, -480, 96],
        [160, 480, 96],
        [160, -480, 128],
        [160, 480, 128],
        [160, -480, 160],
        [160, 480, 160],
        [160, -480, 192],
        [160, 480, 192],
        [160, -480, 224],
        [160, 480, 224],
        [160, -480, 256],
        [160, 480, 256],
        [160, -480, 288],
        [160, 480, 288],
        [160, -480, 320],
        [160, 480, 320],
        [160, -480, 352],
        [160, 480, 352],
        [160, -480, 384],
        [160, 480, 384],
        [160, -480, 416],
        [160, 480, 416],
        [160, -480, 448],
        [160, 480, 448],
        [192, -480, -480],
        [192, -480, 480],
        [192, -448, -480],
        [192, -448, 480],
        [192, -416, -480],
        [192, -416, 480],
        [192, -384, -480],
        [192, -384, 480],
        [192, -352, -480],
        [192, -352, 480],
        [192, -320, -480],
        [192, -320, 480],
        [192, -288, -480],
        [192, -288, 480],
        [192, -256, -480],
        [192, -256, 480],
        [192, -224, -480],
        [192, -224, 480],
        [192, -192, -480],
        [192, -192, 480],
        [192, -160, -480],
        [192, -160, 480],
        [192, -128, -480],
        [192, -128, 480],
        [192, -96, -480],
        [192, -96, 480],
        [192, -64, -480],
        [192, -64, 480],
        [192, -32, -480],
        [192, -32, 480],
        [192, 0, -480],
        [192, 0, 480],
        [192, 32, -480],
        [192, 32, 480],
        [192, 64, -480],
        [192, 64, 480],
        [192, 96, -480],
        [192, 96, 480],
        [192, 128, -480],
        [192, 128, 480],
        [192, 160, -480],
        [192, 160, 480],
        [192, 192, -480],
        [192, 192, 480],
        [192, 224, -480],
        [192, 224, 480],
        [192, 256, -480],
        [192, 256, 480],
        [192, 288, -480],
        [192, 288, 480],
        [192, 320, -480],
        [192, 320, 480],
        [192, 352, -480],
        [192, 352, 480],
        [192, 384, -480],
        [192, 384, 480],
        [192, 416, -480],
        [192, 416, 480],
        [192, 448, -480],
        [192, 448, 480],
        [192, 480, -480],
        [192, 480, 480],
        [192, -480, -448],
        [192, 480, -448],
        [192, -480, -416],
        [192, 480, -416],
        [192, -480, -384],
        [192, 480, -384],
        [192, -480, -352],
        [192, 480, -352],
        [192, -480, -320],
        [192, 480, -320],
        [192, -480, -288],
        [192, 480, -288],
        [192, -480, -256],
        [192, 480, -256],
        [192, -480, -224],
        [192, 480, -224],
        [192, -480, -192],
        [192, 480, -192],
        [192, -480, -160],
        [192, 480, -160],
        [192, -480, -128],
        [192, 480, -128],
        [192, -480, -96],
        [192, 480, -96],
        [192, -480, -64],
        [192, 480, -64],
        [192, -480, -32],
        [192, 480, -32],
        [192, -480, 0],
        [192, 480, 0],
        [192, -480, 32],
        [192, 480, 32],
        [192, -480, 64],
        [192, 480, 64],
        [192, -480, 96],
        [192, 480, 96],
        [192, -480, 128],
        [192, 480, 128],
        [192, -480, 160],
        [192, 480, 160],
        [192, -480, 192],
        [192, 480, 192],
        [192, -480, 224],
        [192, 480, 224],
        [192, -480, 256],
        [192, 480, 256],
        [192, -480, 288],
        [192, 480, 288],
        [192, -480, 320],
        [192, 480, 320],
        [192, -480, 352],
        [192, 480, 352],
        [192, -480, 384],
        [192, 480, 384],
        [192, -480, 416],
        [192, 480, 416],
        [192, -480, 448],
        [192, 480, 448],
        [224, -480, -480],
        [224, -480, 480],
        [224, -448, -480],
        [224, -448, 480],
        [224, -416, -480],
        [224, -416, 480],
        [224, -384, -480],
        [224, -384, 480],
        [224, -352, -480],
        [224, -352, 480],
        [224, -320, -480],
        [224, -320, 480],
        [224, -288, -480],
        [224, -288, 480],
        [224, -256, -480],
        [224, -256, 480],
        [224, -224, -480],
        [224, -224, 480],
        [224, -192, -480],
        [224, -192, 480],
        [224, -160, -480],
        [224, -160, 480],
        [224, -128, -480],
        [224, -128, 480],
        [224, -96, -480],
        [224, -96, 480],
        [224, -64, -480],
        [224, -64, 480],
        [224, -32, -480],
        [224, -32, 480],
        [224, 0, -480],
        [224, 0, 480],
        [224, 32, -480],
        [224, 32, 480],
        [224, 64, -480],
        [224, 64, 480],
        [224, 96, -480],
        [224, 96, 480],
        [224, 128, -480],
        [224, 128, 480],
        [224, 160, -480],
        [224, 160, 480],
        [224, 192, -480],
        [224, 192, 480],
        [224, 224, -480],
        [224, 224, 480],
        [224, 256, -480],
        [224, 256, 480],
        [224, 288, -480],
        [224, 288, 480],
        [224, 320, -480],
        [224, 320, 480],
        [224, 352, -480],
        [224, 352, 480],
        [224, 384, -480],
        [224, 384, 480],
        [224, 416, -480],
        [224, 416, 480],
        [224, 448, -480],
        [224, 448, 480],
        [224, 480, -480],
        [224, 480, 480],
        [224, -480, -448],
        [224, 480, -448],
        [224, -480, -416],
        [224, 480, -416],
        [224, -480, -384],
        [224, 480, -384],
        [224, -480, -352],
        [224, 480, -352],
        [224, -480, -320],
        [224, 480, -320],
        [224, -480, -288],
        [224, 480, -288],
        [224, -480, -256],
        [224, 480, -256],
        [224, -480, -224],
        [224, 480, -224],
        [224, -480, -192],
        [224, 480, -192],
        [224, -480, -160],
        [224, 480, -160],
        [224, -480, -128],
        [224, 480, -128],
        [224, -480, -96],
        [224, 480, -96],
        [224, -480, -64],
        [224, 480, -64],
        [224, -480, -32],
        [224, 480, -32],
        [224, -480, 0],
        [224, 480, 0],
        [224, -480, 32],
        [224, 480, 32],
        [224, -480, 64],
        [224, 480, 64],
        [224, -480, 96],
        [224, 480, 96],
        [224, -480, 128],
        [224, 480, 128],
        [224, -480, 160],
        [224, 480, 160],
        [224, -480, 192],
        [224, 480, 192],
        [224, -480, 224],
        [224, 480, 224],
        [224, -480, 256],
        [224, 480, 256],
        [224, -480, 288],
        [224, 480, 288],
        [224, -480, 320],
        [224, 480, 320],
        [224, -480, 352],
        [224, 480, 352],
        [224, -480, 384],
        [224, 480, 384],
        [224, -480, 416],
        [224, 480, 416],
        [224, -480, 448],
        [224, 480, 448],
        [256, -480, -480],
        [256, -480, 480],
        [256, -448, -480],
        [256, -448, 480],
        [256, -416, -480],
        [256, -416, 480],
        [256, -384, -480],
        [256, -384, 480],
        [256, -352, -480],
        [256, -352, 480],
        [256, -320, -480],
        [256, -320, 480],
        [256, -288, -480],
        [256, -288, 480],
        [256, -256, -480],
        [256, -256, 480],
        [256, -224, -480],
        [256, -224, 480],
        [256, -192, -480],
        [256, -192, 480],
        [256, -160, -480],
        [256, -160, 480],
        [256, -128, -480],
        [256, -128, 480],
        [256, -96, -480],
        [256, -96, 480],
        [256, -64, -480],
        [256, -64, 480],
        [256, -32, -480],
        [256, -32, 480],
        [256, 0, -480],
        [256, 0, 480],
        [256, 32, -480],
        [256, 32, 480],
        [256, 64, -480],
        [256, 64, 480],
        [256, 96, -480],
        [256, 96, 480],
        [256, 128, -480],
        [256, 128, 480],
        [256, 160, -480],
        [256, 160, 480],
        [256, 192, -480],
        [256, 192, 480],
        [256, 224, -480],
        [256, 224, 480],
        [256, 256, -480],
        [256, 256, 480],
        [256, 288, -480],
        [256, 288, 480],
        [256, 320, -480],
        [256, 320, 480],
        [256, 352, -480],
        [256, 352, 480],
        [256, 384, -480],
        [256, 384, 480],
        [256, 416, -480],
        [256, 416, 480],
        [256, 448, -480],
        [256, 448, 480],
        [256, 480, -480],
        [256, 480, 480],
        [256, -480, -448],
        [256, 480, -448],
        [256, -480, -416],
        [256, 480, -416],
        [256, -480, -384],
        [256, 480, -384],
        [256, -480, -352],
        [256, 480, -352],
        [256, -480, -320],
        [256, 480, -320],
        [256, -480, -288],
        [256, 480, -288],
        [256, -480, -256],
        [256, 480, -256],
        [256, -480, -224],
        [256, 480, -224],
        [256, -480, -192],
        [256, 480, -192],
        [256, -480, -160],
        [256, 480, -160],
        [256, -480, -128],
        [256, 480, -128],
        [256, -480, -96],
        [256, 480, -96],
        [256, -480, -64],
        [256, 480, -64],
        [256, -480, -32],
        [256, 480, -32],
        [256, -480, 0],
        [256, 480, 0],
        [256, -480, 32],
        [256, 480, 32],
        [256, -480, 64],
        [256, 480, 64],
        [256, -480, 96],
        [256, 480, 96],
        [256, -480, 128],
        [256, 480, 128],
        [256, -480, 160],
        [256, 480, 160],
        [256, -480, 192],
        [256, 480, 192],
        [256, -480, 224],
        [256, 480, 224],
        [256, -480, 256],
        [256, 480, 256],
        [256, -480, 288],
        [256, 480, 288],
        [256, -480, 320],
        [256, 480, 320],
        [256, -480, 352],
        [256, 480, 352],
        [256, -480, 384],
        [256, 480, 384],
        [256, -480, 416],
        [256, 480, 416],
        [256, -480, 448],
        [256, 480, 448],
        [288, -480, -480],
        [288, -480, 480],
        [288, -448, -480],
        [288, -448, 480],
        [288, -416, -480],
        [288, -416, 480],
        [288, -384, -480],
        [288, -384, 480],
        [288, -352, -480],
        [288, -352, 480],
        [288, -320, -480],
        [288, -320, 480],
        [288, -288, -480],
        [288, -288, 480],
        [288, -256, -480],
        [288, -256, 480],
        [288, -224, -480],
        [288, -224, 480],
        [288, -192, -480],
        [288, -192, 480],
        [288, -160, -480],
        [288, -160, 480],
        [288, -128, -480],
        [288, -128, 480],
        [288, -96, -480],
        [288, -96, 480],
        [288, -64, -480],
        [288, -64, 480],
        [288, -32, -480],
        [288, -32, 480],
        [288, 0, -480],
        [288, 0, 480],
        [288, 32, -480],
        [288, 32, 480],
        [288, 64, -480],
        [288, 64, 480],
        [288, 96, -480],
        [288, 96, 480],
        [288, 128, -480],
        [288, 128, 480],
        [288, 160, -480],
        [288, 160, 480],
        [288, 192, -480],
        [288, 192, 480],
        [288, 224, -480],
        [288, 224, 480],
        [288, 256, -480],
        [288, 256, 480],
        [288, 288, -480],
        [288, 288, 480],
        [288, 320, -480],
        [288, 320, 480],
        [288, 352, -480],
        [288, 352, 480],
        [288, 384, -480],
        [288, 384, 480],
        [288, 416, -480],
        [288, 416, 480],
        [288, 448, -480],
        [288, 448, 480],
        [288, 480, -480],
        [288, 480, 480],
        [288, -480, -448],
        [288, 480, -448],
        [288, -480, -416],
        [288, 480, -416],
        [288, -480, -384],
        [288, 480, -384],
        [288, -480, -352],
        [288, 480, -352],
        [288, -480, -320],
        [288, 480, -320],
        [288, -480, -288],
        [288, 480, -288],
        [288, -480, -256],
        [288, 480, -256],
        [288, -480, -224],
        [288, 480, -224],
        [288, -480, -192],
        [288, 480, -192],
        [288, -480, -160],
        [288, 480, -160],
        [288, -480, -128],
        [288, 480, -128],
        [288, -480, -96],
        [288, 480, -96],
        [288, -480, -64],
        [288, 480, -64],
        [288, -480, -32],
        [288, 480, -32],
        [288, -480, 0],
        [288, 480, 0],
        [288, -480, 32],
        [288, 480, 32],
        [288, -480, 64],
        [288, 480, 64],
        [288, -480, 96],
        [288, 480, 96],
        [288, -480, 128],
        [288, 480, 128],
        [288, -480, 160],
        [288, 480, 160],
        [288, -480, 192],
        [288, 480, 192],
        [288, -480, 224],
        [288, 480, 224],
        [288, -480, 256],
        [288, 480, 256],
        [288, -480, 288],
        [288, 480, 288],
        [288, -480, 320],
        [288, 480, 320],
        [288, -480, 352],
        [288, 480, 352],
        [288, -480, 384],
        [288, 480, 384],
        [288, -480, 416],
        [288, 480, 416],
        [288, -480, 448],
        [288, 480, 448],
        [320, -480, -480],
        [320, -480, 480],
        [320, -448, -480],
        [320, -448, 480],
        [320, -416, -480],
        [320, -416, 480],
        [320, -384, -480],
        [320, -384, 480],
        [320, -352, -480],
        [320, -352, 480],
        [320, -320, -480],
        [320, -320, 480],
        [320, -288, -480],
        [320, -288, 480],
        [320, -256, -480],
        [320, -256, 480],
        [320, -224, -480],
        [320, -224, 480],
        [320, -192, -480],
        [320, -192, 480],
        [320, -160, -480],
        [320, -160, 480],
        [320, -128, -480],
        [320, -128, 480],
        [320, -96, -480],
        [320, -96, 480],
        [320, -64, -480],
        [320, -64, 480],
        [320, -32, -480],
        [320, -32, 480],
        [320, 0, -480],
        [320, 0, 480],
        [320, 32, -480],
        [320, 32, 480],
        [320, 64, -480],
        [320, 64, 480],
        [320, 96, -480],
        [320, 96, 480],
        [320, 128, -480],
        [320, 128, 480],
        [320, 160, -480],
        [320, 160, 480],
        [320, 192, -480],
        [320, 192, 480],
        [320, 224, -480],
        [320, 224, 480],
        [320, 256, -480],
        [320, 256, 480],
        [320, 288, -480],
        [320, 288, 480],
        [320, 320, -480],
        [320, 320, 480],
        [320, 352, -480],
        [320, 352, 480],
        [320, 384, -480],
        [320, 384, 480],
        [320, 416, -480],
        [320, 416, 480],
        [320, 448, -480],
        [320, 448, 480],
        [320, 480, -480],
        [320, 480, 480],
        [320, -480, -448],
        [320, 480, -448],
        [320, -480, -416],
        [320, 480, -416],
        [320, -480, -384],
        [320, 480, -384],
        [320, -480, -352],
        [320, 480, -352],
        [320, -480, -320],
        [320, 480, -320],
        [320, -480, -288],
        [320, 480, -288],
        [320, -480, -256],
        [320, 480, -256],
        [320, -480, -224],
        [320, 480, -224],
        [320, -480, -192],
        [320, 480, -192],
        [320, -480, -160],
        [320, 480, -160],
        [320, -480, -128],
        [320, 480, -128],
        [320, -480, -96],
        [320, 480, -96],
        [320, -480, -64],
        [320, 480, -64],
        [320, -480, -32],
        [320, 480, -32],
        [320, -480, 0],
        [320, 480, 0],
        [320, -480, 32],
        [320, 480, 32],
        [320, -480, 64],
        [320, 480, 64],
        [320, -480, 96],
        [320, 480, 96],
        [320, -480, 128],
        [320, 480, 128],
        [320, -480, 160],
        [320, 480, 160],
        [320, -480, 192],
        [320, 480, 192],
        [320, -480, 224],
        [320, 480, 224],
        [320, -480, 256],
        [320, 480, 256],
        [320, -480, 288],
        [320, 480, 288],
        [320, -480, 320],
        [320, 480, 320],
        [320, -480, 352],
        [320, 480, 352],
        [320, -480, 384],
        [320, 480, 384],
        [320, -480, 416],
        [320, 480, 416],
        [320, -480, 448],
        [320, 480, 448],
        [352, -480, -480],
        [352, -480, 480],
        [352, -448, -480],
        [352, -448, 480],
        [352, -416, -480],
        [352, -416, 480],
        [352, -384, -480],
        [352, -384, 480],
        [352, -352, -480],
        [352, -352, 480],
        [352, -320, -480],
        [352, -320, 480],
        [352, -288, -480],
        [352, -288, 480],
        [352, -256, -480],
        [352, -256, 480],
        [352, -224, -480],
        [352, -224, 480],
        [352, -192, -480],
        [352, -192, 480],
        [352, -160, -480],
        [352, -160, 480],
        [352, -128, -480],
        [352, -128, 480],
        [352, -96, -480],
        [352, -96, 480],
        [352, -64, -480],
        [352, -64, 480],
        [352, -32, -480],
        [352, -32, 480],
        [352, 0, -480],
        [352, 0, 480],
        [352, 32, -480],
        [352, 32, 480],
        [352, 64, -480],
        [352, 64, 480],
        [352, 96, -480],
        [352, 96, 480],
        [352, 128, -480],
        [352, 128, 480],
        [352, 160, -480],
        [352, 160, 480],
        [352, 192, -480],
        [352, 192, 480],
        [352, 224, -480],
        [352, 224, 480],
        [352, 256, -480],
        [352, 256, 480],
        [352, 288, -480],
        [352, 288, 480],
        [352, 320, -480],
        [352, 320, 480],
        [352, 352, -480],
        [352, 352, 480],
        [352, 384, -480],
        [352, 384, 480],
        [352, 416, -480],
        [352, 416, 480],
        [352, 448, -480],
        [352, 448, 480],
        [352, 480, -480],
        [352, 480, 480],
        [352, -480, -448],
        [352, 480, -448],
        [352, -480, -416],
        [352, 480, -416],
        [352, -480, -384],
        [352, 480, -384],
        [352, -480, -352],
        [352, 480, -352],
        [352, -480, -320],
        [352, 480, -320],
        [352, -480, -288],
        [352, 480, -288],
        [352, -480, -256],
        [352, 480, -256],
        [352, -480, -224],
        [352, 480, -224],
        [352, -480, -192],
        [352, 480, -192],
        [352, -480, -160],
        [352, 480, -160],
        [352, -480, -128],
        [352, 480, -128],
        [352, -480, -96],
        [352, 480, -96],
        [352, -480, -64],
        [352, 480, -64],
        [352, -480, -32],
        [352, 480, -32],
        [352, -480, 0],
        [352, 480, 0],
        [352, -480, 32],
        [352, 480, 32],
        [352, -480, 64],
        [352, 480, 64],
        [352, -480, 96],
        [352, 480, 96],
        [352, -480, 128],
        [352, 480, 128],
        [352, -480, 160],
        [352, 480, 160],
        [352, -480, 192],
        [352, 480, 192],
        [352, -480, 224],
        [352, 480, 224],
        [352, -480, 256],
        [352, 480, 256],
        [352, -480, 288],
        [352, 480, 288],
        [352, -480, 320],
        [352, 480, 320],
        [352, -480, 352],
        [352, 480, 352],
        [352, -480, 384],
        [352, 480, 384],
        [352, -480, 416],
        [352, 480, 416],
        [352, -480, 448],
        [352, 480, 448],
        [384, -480, -480],
        [384, -480, 480],
        [384, -448, -480],
        [384, -448, 480],
        [384, -416, -480],
        [384, -416, 480],
        [384, -384, -480],
        [384, -384, 480],
        [384, -352, -480],
        [384, -352, 480],
        [384, -320, -480],
        [384, -320, 480],
        [384, -288, -480],
        [384, -288, 480],
        [384, -256, -480],
        [384, -256, 480],
        [384, -224, -480],
        [384, -224, 480],
        [384, -192, -480],
        [384, -192, 480],
        [384, -160, -480],
        [384, -160, 480],
        [384, -128, -480],
        [384, -128, 480],
        [384, -96, -480],
        [384, -96, 480],
        [384, -64, -480],
        [384, -64, 480],
        [384, -32, -480],
        [384, -32, 480],
        [384, 0, -480],
        [384, 0, 480],
        [384, 32, -480],
        [384, 32, 480],
        [384, 64, -480],
        [384, 64, 480],
        [384, 96, -480],
        [384, 96, 480],
        [384, 128, -480],
        [384, 128, 480],
        [384, 160, -480],
        [384, 160, 480],
        [384, 192, -480],
        [384, 192, 480],
        [384, 224, -480],
        [384, 224, 480],
        [384, 256, -480],
        [384, 256, 480],
        [384, 288, -480],
        [384, 288, 480],
        [384, 320, -480],
        [384, 320, 480],
        [384, 352, -480],
        [384, 352, 480],
        [384, 384, -480],
        [384, 384, 480],
        [384, 416, -480],
        [384, 416, 480],
        [384, 448, -480],
        [384, 448, 480],
        [384, 480, -480],
        [384, 480, 480],
        [384, -480, -448],
        [384, 480, -448],
        [384, -480, -416],
        [384, 480, -416],
        [384, -480, -384],
        [384, 480, -384],
        [384, -480, -352],
        [384, 480, -352],
        [384, -480, -320],
        [384, 480, -320],
        [384, -480, -288],
        [384, 480, -288],
        [384, -480, -256],
        [384, 480, -256],
        [384, -480, -224],
        [384, 480, -224],
        [384, -480, -192],
        [384, 480, -192],
        [384, -480, -160],
        [384, 480, -160],
        [384, -480, -128],
        [384, 480, -128],
        [384, -480, -96],
        [384, 480, -96],
        [384, -480, -64],
        [384, 480, -64],
        [384, -480, -32],
        [384, 480, -32],
        [384, -480, 0],
        [384, 480, 0],
        [384, -480, 32],
        [384, 480, 32],
        [384, -480, 64],
        [384, 480, 64],
        [384, -480, 96],
        [384, 480, 96],
        [384, -480, 128],
        [384, 480, 128],
        [384, -480, 160],
        [384, 480, 160],
        [384, -480, 192],
        [384, 480, 192],
        [384, -480, 224],
        [384, 480, 224],
        [384, -480, 256],
        [384, 480, 256],
        [384, -480, 288],
        [384, 480, 288],
        [384, -480, 320],
        [384, 480, 320],
        [384, -480, 352],
        [384, 480, 352],
        [384, -480, 384],
        [384, 480, 384],
        [384, -480, 416],
        [384, 480, 416],
        [384, -480, 448],
        [384, 480, 448],
        [416, -480, -480],
        [416, -480, 480],
        [416, -448, -480],
        [416, -448, 480],
        [416, -416, -480],
        [416, -416, 480],
        [416, -384, -480],
        [416, -384, 480],
        [416, -352, -480],
        [416, -352, 480],
        [416, -320, -480],
        [416, -320, 480],
        [416, -288, -480],
        [416, -288, 480],
        [416, -256, -480],
        [416, -256, 480],
        [416, -224, -480],
        [416, -224, 480],
        [416, -192, -480],
        [416, -192, 480],
        [416, -160, -480],
        [416, -160, 480],
        [416, -128, -480],
        [416, -128, 480],
        [416, -96, -480],
        [416, -96, 480],
        [416, -64, -480],
        [416, -64, 480],
        [416, -32, -480],
        [416, -32, 480],
        [416, 0, -480],
        [416, 0, 480],
        [416, 32, -480],
        [416, 32, 480],
        [416, 64, -480],
        [416, 64, 480],
        [416, 96, -480],
        [416, 96, 480],
        [416, 128, -480],
        [416, 128, 480],
        [416, 160, -480],
        [416, 160, 480],
        [416, 192, -480],
        [416, 192, 480],
        [416, 224, -480],
        [416, 224, 480],
        [416, 256, -480],
        [416, 256, 480],
        [416, 288, -480],
        [416, 288, 480],
        [416, 320, -480],
        [416, 320, 480],
        [416, 352, -480],
        [416, 352, 480],
        [416, 384, -480],
        [416, 384, 480],
        [416, 416, -480],
        [416, 416, 480],
        [416, 448, -480],
        [416, 448, 480],
        [416, 480, -480],
        [416, 480, 480],
        [416, -480, -448],
        [416, 480, -448],
        [416, -480, -416],
        [416, 480, -416],
        [416, -480, -384],
        [416, 480, -384],
        [416, -480, -352],
        [416, 480, -352],
        [416, -480, -320],
        [416, 480, -320],
        [416, -480, -288],
        [416, 480, -288],
        [416, -480, -256],
        [416, 480, -256],
        [416, -480, -224],
        [416, 480, -224],
        [416, -480, -192],
        [416, 480, -192],
        [416, -480, -160],
        [416, 480, -160],
        [416, -480, -128],
        [416, 480, -128],
        [416, -480, -96],
        [416, 480, -96],
        [416, -480, -64],
        [416, 480, -64],
        [416, -480, -32],
        [416, 480, -32],
        [416, -480, 0],
        [416, 480, 0],
        [416, -480, 32],
        [416, 480, 32],
        [416, -480, 64],
        [416, 480, 64],
        [416, -480, 96],
        [416, 480, 96],
        [416, -480, 128],
        [416, 480, 128],
        [416, -480, 160],
        [416, 480, 160],
        [416, -480, 192],
        [416, 480, 192],
        [416, -480, 224],
        [416, 480, 224],
        [416, -480, 256],
        [416, 480, 256],
        [416, -480, 288],
        [416, 480, 288],
        [416, -480, 320],
        [416, 480, 320],
        [416, -480, 352],
        [416, 480, 352],
        [416, -480, 384],
        [416, 480, 384],
        [416, -480, 416],
        [416, 480, 416],
        [416, -480, 448],
        [416, 480, 448],
        [448, -480, -480],
        [448, -480, 480],
        [448, -448, -480],
        [448, -448, 480],
        [448, -416, -480],
        [448, -416, 480],
        [448, -384, -480],
        [448, -384, 480],
        [448, -352, -480],
        [448, -352, 480],
        [448, -320, -480],
        [448, -320, 480],
        [448, -288, -480],
        [448, -288, 480],
        [448, -256, -480],
        [448, -256, 480],
        [448, -224, -480],
        [448, -224, 480],
        [448, -192, -480],
        [448, -192, 480],
        [448, -160, -480],
        [448, -160, 480],
        [448, -128, -480],
        [448, -128, 480],
        [448, -96, -480],
        [448, -96, 480],
        [448, -64, -480],
        [448, -64, 480],
        [448, -32, -480],
        [448, -32, 480],
        [448, 0, -480],
        [448, 0, 480],
        [448, 32, -480],
        [448, 32, 480],
        [448, 64, -480],
        [448, 64, 480],
        [448, 96, -480],
        [448, 96, 480],
        [448, 128, -480],
        [448, 128, 480],
        [448, 160, -480],
        [448, 160, 480],
        [448, 192, -480],
        [448, 192, 480],
        [448, 224, -480],
        [448, 224, 480],
        [448, 256, -480],
        [448, 256, 480],
        [448, 288, -480],
        [448, 288, 480],
        [448, 320, -480],
        [448, 320, 480],
        [448, 352, -480],
        [448, 352, 480],
        [448, 384, -480],
        [448, 384, 480],
        [448, 416, -480],
        [448, 416, 480],
        [448, 448, -480],
        [448, 448, 480],
        [448, 480, -480],
        [448, 480, 480],
        [448, -480, -448],
        [448, 480, -448],
        [448, -480, -416],
        [448, 480, -416],
        [448, -480, -384],
        [448, 480, -384],
        [448, -480, -352],
        [448, 480, -352],
        [448, -480, -320],
        [448, 480, -320],
        [448, -480, -288],
        [448, 480, -288],
        [448, -480, -256],
        [448, 480, -256],
        [448, -480, -224],
        [448, 480, -224],
        [448, -480, -192],
        [448, 480, -192],
        [448, -480, -160],
        [448, 480, -160],
        [448, -480, -128],
        [448, 480, -128],
        [448, -480, -96],
        [448, 480, -96],
        [448, -480, -64],
        [448, 480, -64],
        [448, -480, -32],
        [448, 480, -32],
        [448, -480, 0],
        [448, 480, 0],
        [448, -480, 32],
        [448, 480, 32],
        [448, -480, 64],
        [448, 480, 64],
        [448, -480, 96],
        [448, 480, 96],
        [448, -480, 128],
        [448, 480, 128],
        [448, -480, 160],
        [448, 480, 160],
        [448, -480, 192],
        [448, 480, 192],
        [448, -480, 224],
        [448, 480, 224],
        [448, -480, 256],
        [448, 480, 256],
        [448, -480, 288],
        [448, 480, 288],
        [448, -480, 320],
        [448, 480, 320],
        [448, -480, 352],
        [448, 480, 352],
        [448, -480, 384],
        [448, 480, 384],
        [448, -480, 416],
        [448, 480, 416],
        [448, -480, 448],
        [448, 480, 448],
        [480, -480, -480],
        [480, -480, 480],
        [480, -448, -480],
        [480, -448, 480],
        [480, -416, -480],
        [480, -416, 480],
        [480, -384, -480],
        [480, -384, 480],
        [480, -352, -480],
        [480, -352, 480],
        [480, -320, -480],
        [480, -320, 480],
        [480, -288, -480],
        [480, -288, 480],
        [480, -256, -480],
        [480, -256, 480],
        [480, -224, -480],
        [480, -224, 480],
        [480, -192, -480],
        [480, -192, 480],
        [480, -160, -480],
        [480, -160, 480],
        [480, -128, -480],
        [480, -128, 480],
        [480, -96, -480],
        [480, -96, 480],
        [480, -64, -480],
        [480, -64, 480],
        [480, -32, -480],
        [480, -32, 480],
        [480, 0, -480],
        [480, 0, 480],
        [480, 32, -480],
        [480, 32, 480],
        [480, 64, -480],
        [480, 64, 480],
        [480, 96, -480],
        [480, 96, 480],
        [480, 128, -480],
        [480, 128, 480],
        [480, 160, -480],
        [480, 160, 480],
        [480, 192, -480],
        [480, 192, 480],
        [480, 224, -480],
        [480, 224, 480],
        [480, 256, -480],
        [480, 256, 480],
        [480, 288, -480],
        [480, 288, 480],
        [480, 320, -480],
        [480, 320, 480],
        [480, 352, -480],
        [480, 352, 480],
        [480, 384, -480],
        [480, 384, 480],
        [480, 416, -480],
        [480, 416, 480],
        [480, 448, -480],
        [480, 448, 480],
        [480, 480, -480],
        [480, 480, 480],
        [480, -480, -448],
        [480, 480, -448],
        [480, -480, -416],
        [480, 480, -416],
        [480, -480, -384],
        [480, 480, -384],
        [480, -480, -352],
        [480, 480, -352],
        [480, -480, -320],
        [480, 480, -320],
        [480, -480, -288],
        [480, 480, -288],
        [480, -480, -256],
        [480, 480, -256],
        [480, -480, -224],
        [480, 480, -224],
        [480, -480, -192],
        [480, 480, -192],
        [480, -480, -160],
        [480, 480, -160],
        [480, -480, -128],
        [480, 480, -128],
        [480, -480, -96],
        [480, 480, -96],
        [480, -480, -64],
        [480, 480, -64],
        [480, -480, -32],
        [480, 480, -32],
        [480, -480, 0],
        [480, 480, 0],
        [480, -480, 32],
        [480, 480, 32],
        [480, -480, 64],
        [480, 480, 64],
        [480, -480, 96],
        [480, 480, 96],
        [480, -480, 128],
        [480, 480, 128],
        [480, -480, 160],
        [480, 480, 160],
        [480, -480, 192],
        [480, 480, 192],
        [480, -480, 224],
        [480, 480, 224],
        [480, -480, 256],
        [480, 480, 256],
        [480, -480, 288],
        [480, 480, 288],
        [480, -480, 320],
        [480, 480, 320],
        [480, -480, 352],
        [480, 480, 352],
        [480, -480, 384],
        [480, 480, 384],
        [480, -480, 416],
        [480, 480, 416],
        [480, -480, 448],
        [480, 480, 448],
        [-480, -448, -448],
        [480, -448, -448],
        [-480, -416, -448],
        [480, -416, -448],
        [-480, -384, -448],
        [480, -384, -448],
        [-480, -352, -448],
        [480, -352, -448],
        [-480, -320, -448],
        [480, -320, -448],
        [-480, -288, -448],
        [480, -288, -448],
        [-480, -256, -448],
        [480, -256, -448],
        [-480, -224, -448],
        [480, -224, -448],
        [-480, -192, -448],
        [480, -192, -448],
        [-480, -160, -448],
        [480, -160, -448],
        [-480, -128, -448],
        [480, -128, -448],
        [-480, -96, -448],
        [480, -96, -448],
        [-480, -64, -448],
        [480, -64, -448],
        [-480, -32, -448],
        [480, -32, -448],
        [-480, 0, -448],
        [480, 0, -448],
        [-480, 32, -448],
        [480, 32, -448],
        [-480, 64, -448],
        [480, 64, -448],
        [-480, 96, -448],
        [480, 96, -448],
        [-480, 128, -448],
        [480, 128, -448],
        [-480, 160, -448],
        [480, 160, -448],
        [-480, 192, -448],
        [480, 192, -448],
        [-480, 224, -448],
        [480, 224, -448],
        [-480, 256, -448],
        [480, 256, -448],
        [-480, 288, -448],
        [480, 288, -448],
        [-480, 320, -448],
        [480, 320, -448],
        [-480, 352, -448],
        [480, 352, -448],
        [-480, 384, -448],
        [480, 384, -448],
        [-480, 416, -448],
        [480, 416, -448],
        [-480, 448, -448],
        [480, 448, -448],
        [-480, -448, -416],
        [480, -448, -416],
        [-480, -416, -416],
        [480, -416, -416],
        [-480, -384, -416],
        [480, -384, -416],
        [-480, -352, -416],
        [480, -352, -416],
        [-480, -320, -416],
        [480, -320, -416],
        [-480, -288, -416],
        [480, -288, -416],
        [-480, -256, -416],
        [480, -256, -416],
        [-480, -224, -416],
        [480, -224, -416],
        [-480, -192, -416],
        [480, -192, -416],
        [-480, -160, -416],
        [480, -160, -416],
        [-480, -128, -416],
        [480, -128, -416],
        [-480, -96, -416],
        [480, -96, -416],
        [-480, -64, -416],
        [480, -64, -416],
        [-480, -32, -416],
        [480, -32, -416],
        [-480, 0, -416],
        [480, 0, -416],
        [-480, 32, -416],
        [480, 32, -416],
        [-480, 64, -416],
        [480, 64, -416],
        [-480, 96, -416],
        [480, 96, -416],
        [-480, 128, -416],
        [480, 128, -416],
        [-480, 160, -416],
        [480, 160, -416],
        [-480, 192, -416],
        [480, 192, -416],
        [-480, 224, -416],
        [480, 224, -416],
        [-480, 256, -416],
        [480, 256, -416],
        [-480, 288, -416],
        [480, 288, -416],
        [-480, 320, -416],
        [480, 320, -416],
        [-480, 352, -416],
        [480, 352, -416],
        [-480, 384, -416],
        [480, 384, -416],
        [-480, 416, -416],
        [480, 416, -416],
        [-480, 448, -416],
        [480, 448, -416],
        [-480, -448, -384],
        [480, -448, -384],
        [-480, -416, -384],
        [480, -416, -384],
        [-480, -384, -384],
        [480, -384, -384],
        [-480, -352, -384],
        [480, -352, -384],
        [-480, -320, -384],
        [480, -320, -384],
        [-480, -288, -384],
        [480, -288, -384],
        [-480, -256, -384],
        [480, -256, -384],
        [-480, -224, -384],
        [480, -224, -384],
        [-480, -192, -384],
        [480, -192, -384],
        [-480, -160, -384],
        [480, -160, -384],
        [-480, -128, -384],
        [480, -128, -384],
        [-480, -96, -384],
        [480, -96, -384],
        [-480, -64, -384],
        [480, -64, -384],
        [-480, -32, -384],
        [480, -32, -384],
        [-480, 0, -384],
        [480, 0, -384],
        [-480, 32, -384],
        [480, 32, -384],
        [-480, 64, -384],
        [480, 64, -384],
        [-480, 96, -384],
        [480, 96, -384],
        [-480, 128, -384],
        [480, 128, -384],
        [-480, 160, -384],
        [480, 160, -384],
        [-480, 192, -384],
        [480, 192, -384],
        [-480, 224, -384],
        [480, 224, -384],
        [-480, 256, -384],
        [480, 256, -384],
        [-480, 288, -384],
        [480, 288, -384],
        [-480, 320, -384],
        [480, 320, -384],
        [-480, 352, -384],
        [480, 352, -384],
        [-480, 384, -384],
        [480, 384, -384],
        [-480, 416, -384],
        [480, 416, -384],
        [-480, 448, -384],
        [480, 448, -384],
        [-480, -448, -352],
        [480, -448, -352],
        [-480, -416, -352],
        [480, -416, -352],
        [-480, -384, -352],
        [480, -384, -352],
        [-480, -352, -352],
        [480, -352, -352],
        [-480, -320, -352],
        [480, -320, -352],
        [-480, -288, -352],
        [480, -288, -352],
        [-480, -256, -352],
        [480, -256, -352],
        [-480, -224, -352],
        [480, -224, -352],
        [-480, -192, -352],
        [480, -192, -352],
        [-480, -160, -352],
        [480, -160, -352],
        [-480, -128, -352],
        [480, -128, -352],
        [-480, -96, -352],
        [480, -96, -352],
        [-480, -64, -352],
        [480, -64, -352],
        [-480, -32, -352],
        [480, -32, -352],
        [-480, 0, -352],
        [480, 0, -352],
        [-480, 32, -352],
        [480, 32, -352],
        [-480, 64, -352],
        [480, 64, -352],
        [-480, 96, -352],
        [480, 96, -352],
        [-480, 128, -352],
        [480, 128, -352],
        [-480, 160, -352],
        [480, 160, -352],
        [-480, 192, -352],
        [480, 192, -352],
        [-480, 224, -352],
        [480, 224, -352],
        [-480, 256, -352],
        [480, 256, -352],
        [-480, 288, -352],
        [480, 288, -352],
        [-480, 320, -352],
        [480, 320, -352],
        [-480, 352, -352],
        [480, 352, -352],
        [-480, 384, -352],
        [480, 384, -352],
        [-480, 416, -352],
        [480, 416, -352],
        [-480, 448, -352],
        [480, 448, -352],
        [-480, -448, -320],
        [480, -448, -320],
        [-480, -416, -320],
        [480, -416, -320],
        [-480, -384, -320],
        [480, -384, -320],
        [-480, -352, -320],
        [480, -352, -320],
        [-480, -320, -320],
        [480, -320, -320],
        [-480, -288, -320],
        [480, -288, -320],
        [-480, -256, -320],
        [480, -256, -320],
        [-480, -224, -320],
        [480, -224, -320],
        [-480, -192, -320],
        [480, -192, -320],
        [-480, -160, -320],
        [480, -160, -320],
        [-480, -128, -320],
        [480, -128, -320],
        [-480, -96, -320],
        [480, -96, -320],
        [-480, -64, -320],
        [480, -64, -320],
        [-480, -32, -320],
        [480, -32, -320],
        [-480, 0, -320],
        [480, 0, -320],
        [-480, 32, -320],
        [480, 32, -320],
        [-480, 64, -320],
        [480, 64, -320],
        [-480, 96, -320],
        [480, 96, -320],
        [-480, 128, -320],
        [480, 128, -320],
        [-480, 160, -320],
        [480, 160, -320],
        [-480, 192, -320],
        [480, 192, -320],
        [-480, 224, -320],
        [480, 224, -320],
        [-480, 256, -320],
        [480, 256, -320],
        [-480, 288, -320],
        [480, 288, -320],
        [-480, 320, -320],
        [480, 320, -320],
        [-480, 352, -320],
        [480, 352, -320],
        [-480, 384, -320],
        [480, 384, -320],
        [-480, 416, -320],
        [480, 416, -320],
        [-480, 448, -320],
        [480, 448, -320],
        [-480, -448, -288],
        [480, -448, -288],
        [-480, -416, -288],
        [480, -416, -288],
        [-480, -384, -288],
        [480, -384, -288],
        [-480, -352, -288],
        [480, -352, -288],
        [-480, -320, -288],
        [480, -320, -288],
        [-480, -288, -288],
        [480, -288, -288],
        [-480, -256, -288],
        [480, -256, -288],
        [-480, -224, -288],
        [480, -224, -288],
        [-480, -192, -288],
        [480, -192, -288],
        [-480, -160, -288],
        [480, -160, -288],
        [-480, -128, -288],
        [480, -128, -288],
        [-480, -96, -288],
        [480, -96, -288],
        [-480, -64, -288],
        [480, -64, -288],
        [-480, -32, -288],
        [480, -32, -288],
        [-480, 0, -288],
        [480, 0, -288],
        [-480, 32, -288],
        [480, 32, -288],
        [-480, 64, -288],
        [480, 64, -288],
        [-480, 96, -288],
        [480, 96, -288],
        [-480, 128, -288],
        [480, 128, -288],
        [-480, 160, -288],
        [480, 160, -288],
        [-480, 192, -288],
        [480, 192, -288],
        [-480, 224, -288],
        [480, 224, -288],
        [-480, 256, -288],
        [480, 256, -288],
        [-480, 288, -288],
        [480, 288, -288],
        [-480, 320, -288],
        [480, 320, -288],
        [-480, 352, -288],
        [480, 352, -288],
        [-480, 384, -288],
        [480, 384, -288],
        [-480, 416, -288],
        [480, 416, -288],
        [-480, 448, -288],
        [480, 448, -288],
        [-480, -448, -256],
        [480, -448, -256],
        [-480, -416, -256],
        [480, -416, -256],
        [-480, -384, -256],
        [480, -384, -256],
        [-480, -352, -256],
        [480, -352, -256],
        [-480, -320, -256],
        [480, -320, -256],
        [-480, -288, -256],
        [480, -288, -256],
        [-480, -256, -256],
        [480, -256, -256],
        [-480, -224, -256],
        [480, -224, -256],
        [-480, -192, -256],
        [480, -192, -256],
        [-480, -160, -256],
        [480, -160, -256],
        [-480, -128, -256],
        [480, -128, -256],
        [-480, -96, -256],
        [480, -96, -256],
        [-480, -64, -256],
        [480, -64, -256],
        [-480, -32, -256],
        [480, -32, -256],
        [-480, 0, -256],
        [480, 0, -256],
        [-480, 32, -256],
        [480, 32, -256],
        [-480, 64, -256],
        [480, 64, -256],
        [-480, 96, -256],
        [480, 96, -256],
        [-480, 128, -256],
        [480, 128, -256],
        [-480, 160, -256],
        [480, 160, -256],
        [-480, 192, -256],
        [480, 192, -256],
        [-480, 224, -256],
        [480, 224, -256],
        [-480, 256, -256],
        [480, 256, -256],
        [-480, 288, -256],
        [480, 288, -256],
        [-480, 320, -256],
        [480, 320, -256],
        [-480, 352, -256],
        [480, 352, -256],
        [-480, 384, -256],
        [480, 384, -256],
        [-480, 416, -256],
        [480, 416, -256],
        [-480, 448, -256],
        [480, 448, -256],
        [-480, -448, -224],
        [480, -448, -224],
        [-480, -416, -224],
        [480, -416, -224],
        [-480, -384, -224],
        [480, -384, -224],
        [-480, -352, -224],
        [480, -352, -224],
        [-480, -320, -224],
        [480, -320, -224],
        [-480, -288, -224],
        [480, -288, -224],
        [-480, -256, -224],
        [480, -256, -224],
        [-480, -224, -224],
        [480, -224, -224],
        [-480, -192, -224],
        [480, -192, -224],
        [-480, -160, -224],
        [480, -160, -224],
        [-480, -128, -224],
        [480, -128, -224],
        [-480, -96, -224],
        [480, -96, -224],
        [-480, -64, -224],
        [480, -64, -224],
        [-480, -32, -224],
        [480, -32, -224],
        [-480, 0, -224],
        [480, 0, -224],
        [-480, 32, -224],
        [480, 32, -224],
        [-480, 64, -224],
        [480, 64, -224],
        [-480, 96, -224],
        [480, 96, -224],
        [-480, 128, -224],
        [480, 128, -224],
        [-480, 160, -224],
        [480, 160, -224],
        [-480, 192, -224],
        [480, 192, -224],
        [-480, 224, -224],
        [480, 224, -224],
        [-480, 256, -224],
        [480, 256, -224],
        [-480, 288, -224],
        [480, 288, -224],
        [-480, 320, -224],
        [480, 320, -224],
        [-480, 352, -224],
        [480, 352, -224],
        [-480, 384, -224],
        [480, 384, -224],
        [-480, 416, -224],
        [480, 416, -224],
        [-480, 448, -224],
        [480, 448, -224],
        [-480, -448, -192],
        [480, -448, -192],
        [-480, -416, -192],
        [480, -416, -192],
        [-480, -384, -192],
        [480, -384, -192],
        [-480, -352, -192],
        [480, -352, -192],
        [-480, -320, -192],
        [480, -320, -192],
        [-480, -288, -192],
        [480, -288, -192],
        [-480, -256, -192],
        [480, -256, -192],
        [-480, -224, -192],
        [480, -224, -192],
        [-480, -192, -192],
        [480, -192, -192],
        [-480, -160, -192],
        [480, -160, -192],
        [-480, -128, -192],
        [480, -128, -192],
        [-480, -96, -192],
        [480, -96, -192],
        [-480, -64, -192],
        [480, -64, -192],
        [-480, -32, -192],
        [480, -32, -192],
        [-480, 0, -192],
        [480, 0, -192],
        [-480, 32, -192],
        [480, 32, -192],
        [-480, 64, -192],
        [480, 64, -192],
        [-480, 96, -192],
        [480, 96, -192],
        [-480, 128, -192],
        [480, 128, -192],
        [-480, 160, -192],
        [480, 160, -192],
        [-480, 192, -192],
        [480, 192, -192],
        [-480, 224, -192],
        [480, 224, -192],
        [-480, 256, -192],
        [480, 256, -192],
        [-480, 288, -192],
        [480, 288, -192],
        [-480, 320, -192],
        [480, 320, -192],
        [-480, 352, -192],
        [480, 352, -192],
        [-480, 384, -192],
        [480, 384, -192],
        [-480, 416, -192],
        [480, 416, -192],
        [-480, 448, -192],
        [480, 448, -192],
        [-480, -448, -160],
        [480, -448, -160],
        [-480, -416, -160],
        [480, -416, -160],
        [-480, -384, -160],
        [480, -384, -160],
        [-480, -352, -160],
        [480, -352, -160],
        [-480, -320, -160],
        [480, -320, -160],
        [-480, -288, -160],
        [480, -288, -160],
        [-480, -256, -160],
        [480, -256, -160],
        [-480, -224, -160],
        [480, -224, -160],
        [-480, -192, -160],
        [480, -192, -160],
        [-480, -160, -160],
        [480, -160, -160],
        [-480, -128, -160],
        [480, -128, -160],
        [-480, -96, -160],
        [480, -96, -160],
        [-480, -64, -160],
        [480, -64, -160],
        [-480, -32, -160],
        [480, -32, -160],
        [-480, 0, -160],
        [480, 0, -160],
        [-480, 32, -160],
        [480, 32, -160],
        [-480, 64, -160],
        [480, 64, -160],
        [-480, 96, -160],
        [480, 96, -160],
        [-480, 128, -160],
        [480, 128, -160],
        [-480, 160, -160],
        [480, 160, -160],
        [-480, 192, -160],
        [480, 192, -160],
        [-480, 224, -160],
        [480, 224, -160],
        [-480, 256, -160],
        [480, 256, -160],
        [-480, 288, -160],
        [480, 288, -160],
        [-480, 320, -160],
        [480, 320, -160],
        [-480, 352, -160],
        [480, 352, -160],
        [-480, 384, -160],
        [480, 384, -160],
        [-480, 416, -160],
        [480, 416, -160],
        [-480, 448, -160],
        [480, 448, -160],
        [-480, -448, -128],
        [480, -448, -128],
        [-480, -416, -128],
        [480, -416, -128],
        [-480, -384, -128],
        [480, -384, -128],
        [-480, -352, -128],
        [480, -352, -128],
        [-480, -320, -128],
        [480, -320, -128],
        [-480, -288, -128],
        [480, -288, -128],
        [-480, -256, -128],
        [480, -256, -128],
        [-480, -224, -128],
        [480, -224, -128],
        [-480, -192, -128],
        [480, -192, -128],
        [-480, -160, -128],
        [480, -160, -128],
        [-480, -128, -128],
        [480, -128, -128],
        [-480, -96, -128],
        [480, -96, -128],
        [-480, -64, -128],
        [480, -64, -128],
        [-480, -32, -128],
        [480, -32, -128],
        [-480, 0, -128],
        [480, 0, -128],
        [-480, 32, -128],
        [480, 32, -128],
        [-480, 64, -128],
        [480, 64, -128],
        [-480, 96, -128],
        [480, 96, -128],
        [-480, 128, -128],
        [480, 128, -128],
        [-480, 160, -128],
        [480, 160, -128],
        [-480, 192, -128],
        [480, 192, -128],
        [-480, 224, -128],
        [480, 224, -128],
        [-480, 256, -128],
        [480, 256, -128],
        [-480, 288, -128],
        [480, 288, -128],
        [-480, 320, -128],
        [480, 320, -128],
        [-480, 352, -128],
        [480, 352, -128],
        [-480, 384, -128],
        [480, 384, -128],
        [-480, 416, -128],
        [480, 416, -128],
        [-480, 448, -128],
        [480, 448, -128],
        [-480, -448, -96],
        [480, -448, -96],
        [-480, -416, -96],
        [480, -416, -96],
        [-480, -384, -96],
        [480, -384, -96],
        [-480, -352, -96],
        [480, -352, -96],
        [-480, -320, -96],
        [480, -320, -96],
        [-480, -288, -96],
        [480, -288, -96],
        [-480, -256, -96],
        [480, -256, -96],
        [-480, -224, -96],
        [480, -224, -96],
        [-480, -192, -96],
        [480, -192, -96],
        [-480, -160, -96],
        [480, -160, -96],
        [-480, -128, -96],
        [480, -128, -96],
        [-480, -96, -96],
        [480, -96, -96],
        [-480, -64, -96],
        [480, -64, -96],
        [-480, -32, -96],
        [480, -32, -96],
        [-480, 0, -96],
        [480, 0, -96],
        [-480, 32, -96],
        [480, 32, -96],
        [-480, 64, -96],
        [480, 64, -96],
        [-480, 96, -96],
        [480, 96, -96],
        [-480, 128, -96],
        [480, 128, -96],
        [-480, 160, -96],
        [480, 160, -96],
        [-480, 192, -96],
        [480, 192, -96],
        [-480, 224, -96],
        [480, 224, -96],
        [-480, 256, -96],
        [480, 256, -96],
        [-480, 288, -96],
        [480, 288, -96],
        [-480, 320, -96],
        [480, 320, -96],
        [-480, 352, -96],
        [480, 352, -96],
        [-480, 384, -96],
        [480, 384, -96],
        [-480, 416, -96],
        [480, 416, -96],
        [-480, 448, -96],
        [480, 448, -96],
        [-480, -448, -64],
        [480, -448, -64],
        [-480, -416, -64],
        [480, -416, -64],
        [-480, -384, -64],
        [480, -384, -64],
        [-480, -352, -64],
        [480, -352, -64],
        [-480, -320, -64],
        [480, -320, -64],
        [-480, -288, -64],
        [480, -288, -64],
        [-480, -256, -64],
        [480, -256, -64],
        [-480, -224, -64],
        [480, -224, -64],
        [-480, -192, -64],
        [480, -192, -64],
        [-480, -160, -64],
        [480, -160, -64],
        [-480, -128, -64],
        [480, -128, -64],
        [-480, -96, -64],
        [480, -96, -64],
        [-480, -64, -64],
        [480, -64, -64],
        [-480, -32, -64],
        [480, -32, -64],
        [-480, 0, -64],
        [480, 0, -64],
        [-480, 32, -64],
        [480, 32, -64],
        [-480, 64, -64],
        [480, 64, -64],
        [-480, 96, -64],
        [480, 96, -64],
        [-480, 128, -64],
        [480, 128, -64],
        [-480, 160, -64],
        [480, 160, -64],
        [-480, 192, -64],
        [480, 192, -64],
        [-480, 224, -64],
        [480, 224, -64],
        [-480, 256, -64],
        [480, 256, -64],
        [-480, 288, -64],
        [480, 288, -64],
        [-480, 320, -64],
        [480, 320, -64],
        [-480, 352, -64],
        [480, 352, -64],
        [-480, 384, -64],
        [480, 384, -64],
        [-480, 416, -64],
        [480, 416, -64],
        [-480, 448, -64],
        [480, 448, -64],
        [-480, -448, -32],
        [480, -448, -32],
        [-480, -416, -32],
        [480, -416, -32],
        [-480, -384, -32],
        [480, -384, -32],
        [-480, -352, -32],
        [480, -352, -32],
        [-480, -320, -32],
        [480, -320, -32],
        [-480, -288, -32],
        [480, -288, -32],
        [-480, -256, -32],
        [480, -256, -32],
        [-480, -224, -32],
        [480, -224, -32],
        [-480, -192, -32],
        [480, -192, -32],
        [-480, -160, -32],
        [480, -160, -32],
        [-480, -128, -32],
        [480, -128, -32],
        [-480, -96, -32],
        [480, -96, -32],
        [-480, -64, -32],
        [480, -64, -32],
        [-480, -32, -32],
        [480, -32, -32],
        [-480, 0, -32],
        [480, 0, -32],
        [-480, 32, -32],
        [480, 32, -32],
        [-480, 64, -32],
        [480, 64, -32],
        [-480, 96, -32],
        [480, 96, -32],
        [-480, 128, -32],
        [480, 128, -32],
        [-480, 160, -32],
        [480, 160, -32],
        [-480, 192, -32],
        [480, 192, -32],
        [-480, 224, -32],
        [480, 224, -32],
        [-480, 256, -32],
        [480, 256, -32],
        [-480, 288, -32],
        [480, 288, -32],
        [-480, 320, -32],
        [480, 320, -32],
        [-480, 352, -32],
        [480, 352, -32],
        [-480, 384, -32],
        [480, 384, -32],
        [-480, 416, -32],
        [480, 416, -32],
        [-480, 448, -32],
        [480, 448, -32],
        [-480, -448, 0],
        [480, -448, 0],
        [-480, -416, 0],
        [480, -416, 0],
        [-480, -384, 0],
        [480, -384, 0],
        [-480, -352, 0],
        [480, -352, 0],
        [-480, -320, 0],
        [480, -320, 0],
        [-480, -288, 0],
        [480, -288, 0],
        [-480, -256, 0],
        [480, -256, 0],
        [-480, -224, 0],
        [480, -224, 0],
        [-480, -192, 0],
        [480, -192, 0],
        [-480, -160, 0],
        [480, -160, 0],
        [-480, -128, 0],
        [480, -128, 0],
        [-480, -96, 0],
        [480, -96, 0],
        [-480, -64, 0],
        [480, -64, 0],
        [-480, -32, 0],
        [480, -32, 0],
        [-480, 0, 0],
        [480, 0, 0],
        [-480, 32, 0],
        [480, 32, 0],
        [-480, 64, 0],
        [480, 64, 0],
        [-480, 96, 0],
        [480, 96, 0],
        [-480, 128, 0],
        [480, 128, 0],
        [-480, 160, 0],
        [480, 160, 0],
        [-480, 192, 0],
        [480, 192, 0],
        [-480, 224, 0],
        [480, 224, 0],
        [-480, 256, 0],
        [480, 256, 0],
        [-480, 288, 0],
        [480, 288, 0],
        [-480, 320, 0],
        [480, 320, 0],
        [-480, 352, 0],
        [480, 352, 0],
        [-480, 384, 0],
        [480, 384, 0],
        [-480, 416, 0],
        [480, 416, 0],
        [-480, 448, 0],
        [480, 448, 0],
        [-480, -448, 32],
        [480, -448, 32],
        [-480, -416, 32],
        [480, -416, 32],
        [-480, -384, 32],
        [480, -384, 32],
        [-480, -352, 32],
        [480, -352, 32],
        [-480, -320, 32],
        [480, -320, 32],
        [-480, -288, 32],
        [480, -288, 32],
        [-480, -256, 32],
        [480, -256, 32],
        [-480, -224, 32],
        [480, -224, 32],
        [-480, -192, 32],
        [480, -192, 32],
        [-480, -160, 32],
        [480, -160, 32],
        [-480, -128, 32],
        [480, -128, 32],
        [-480, -96, 32],
        [480, -96, 32],
        [-480, -64, 32],
        [480, -64, 32],
        [-480, -32, 32],
        [480, -32, 32],
        [-480, 0, 32],
        [480, 0, 32],
        [-480, 32, 32],
        [480, 32, 32],
        [-480, 64, 32],
        [480, 64, 32],
        [-480, 96, 32],
        [480, 96, 32],
        [-480, 128, 32],
        [480, 128, 32],
        [-480, 160, 32],
        [480, 160, 32],
        [-480, 192, 32],
        [480, 192, 32],
        [-480, 224, 32],
        [480, 224, 32],
        [-480, 256, 32],
        [480, 256, 32],
        [-480, 288, 32],
        [480, 288, 32],
        [-480, 320, 32],
        [480, 320, 32],
        [-480, 352, 32],
        [480, 352, 32],
        [-480, 384, 32],
        [480, 384, 32],
        [-480, 416, 32],
        [480, 416, 32],
        [-480, 448, 32],
        [480, 448, 32],
        [-480, -448, 64],
        [480, -448, 64],
        [-480, -416, 64],
        [480, -416, 64],
        [-480, -384, 64],
        [480, -384, 64],
        [-480, -352, 64],
        [480, -352, 64],
        [-480, -320, 64],
        [480, -320, 64],
        [-480, -288, 64],
        [480, -288, 64],
        [-480, -256, 64],
        [480, -256, 64],
        [-480, -224, 64],
        [480, -224, 64],
        [-480, -192, 64],
        [480, -192, 64],
        [-480, -160, 64],
        [480, -160, 64],
        [-480, -128, 64],
        [480, -128, 64],
        [-480, -96, 64],
        [480, -96, 64],
        [-480, -64, 64],
        [480, -64, 64],
        [-480, -32, 64],
        [480, -32, 64],
        [-480, 0, 64],
        [480, 0, 64],
        [-480, 32, 64],
        [480, 32, 64],
        [-480, 64, 64],
        [480, 64, 64],
        [-480, 96, 64],
        [480, 96, 64],
        [-480, 128, 64],
        [480, 128, 64],
        [-480, 160, 64],
        [480, 160, 64],
        [-480, 192, 64],
        [480, 192, 64],
        [-480, 224, 64],
        [480, 224, 64],
        [-480, 256, 64],
        [480, 256, 64],
        [-480, 288, 64],
        [480, 288, 64],
        [-480, 320, 64],
        [480, 320, 64],
        [-480, 352, 64],
        [480, 352, 64],
        [-480, 384, 64],
        [480, 384, 64],
        [-480, 416, 64],
        [480, 416, 64],
        [-480, 448, 64],
        [480, 448, 64],
        [-480, -448, 96],
        [480, -448, 96],
        [-480, -416, 96],
        [480, -416, 96],
        [-480, -384, 96],
        [480, -384, 96],
        [-480, -352, 96],
        [480, -352, 96],
        [-480, -320, 96],
        [480, -320, 96],
        [-480, -288, 96],
        [480, -288, 96],
        [-480, -256, 96],
        [480, -256, 96],
        [-480, -224, 96],
        [480, -224, 96],
        [-480, -192, 96],
        [480, -192, 96],
        [-480, -160, 96],
        [480, -160, 96],
        [-480, -128, 96],
        [480, -128, 96],
        [-480, -96, 96],
        [480, -96, 96],
        [-480, -64, 96],
        [480, -64, 96],
        [-480, -32, 96],
        [480, -32, 96],
        [-480, 0, 96],
        [480, 0, 96],
        [-480, 32, 96],
        [480, 32, 96],
        [-480, 64, 96],
        [480, 64, 96],
        [-480, 96, 96],
        [480, 96, 96],
        [-480, 128, 96],
        [480, 128, 96],
        [-480, 160, 96],
        [480, 160, 96],
        [-480, 192, 96],
        [480, 192, 96],
        [-480, 224, 96],
        [480, 224, 96],
        [-480, 256, 96],
        [480, 256, 96],
        [-480, 288, 96],
        [480, 288, 96],
        [-480, 320, 96],
        [480, 320, 96],
        [-480, 352, 96],
        [480, 352, 96],
        [-480, 384, 96],
        [480, 384, 96],
        [-480, 416, 96],
        [480, 416, 96],
        [-480, 448, 96],
        [480, 448, 96],
        [-480, -448, 128],
        [480, -448, 128],
        [-480, -416, 128],
        [480, -416, 128],
        [-480, -384, 128],
        [480, -384, 128],
        [-480, -352, 128],
        [480, -352, 128],
        [-480, -320, 128],
        [480, -320, 128],
        [-480, -288, 128],
        [480, -288, 128],
        [-480, -256, 128],
        [480, -256, 128],
        [-480, -224, 128],
        [480, -224, 128],
        [-480, -192, 128],
        [480, -192, 128],
        [-480, -160, 128],
        [480, -160, 128],
        [-480, -128, 128],
        [480, -128, 128],
        [-480, -96, 128],
        [480, -96, 128],
        [-480, -64, 128],
        [480, -64, 128],
        [-480, -32, 128],
        [480, -32, 128],
        [-480, 0, 128],
        [480, 0, 128],
        [-480, 32, 128],
        [480, 32, 128],
        [-480, 64, 128],
        [480, 64, 128],
        [-480, 96, 128],
        [480, 96, 128],
        [-480, 128, 128],
        [480, 128, 128],
        [-480, 160, 128],
        [480, 160, 128],
        [-480, 192, 128],
        [480, 192, 128],
        [-480, 224, 128],
        [480, 224, 128],
        [-480, 256, 128],
        [480, 256, 128],
        [-480, 288, 128],
        [480, 288, 128],
        [-480, 320, 128],
        [480, 320, 128],
        [-480, 352, 128],
        [480, 352, 128],
        [-480, 384, 128],
        [480, 384, 128],
        [-480, 416, 128],
        [480, 416, 128],
        [-480, 448, 128],
        [480, 448, 128],
        [-480, -448, 160],
        [480, -448, 160],
        [-480, -416, 160],
        [480, -416, 160],
        [-480, -384, 160],
        [480, -384, 160],
        [-480, -352, 160],
        [480, -352, 160],
        [-480, -320, 160],
        [480, -320, 160],
        [-480, -288, 160],
        [480, -288, 160],
        [-480, -256, 160],
        [480, -256, 160],
        [-480, -224, 160],
        [480, -224, 160],
        [-480, -192, 160],
        [480, -192, 160],
        [-480, -160, 160],
        [480, -160, 160],
        [-480, -128, 160],
        [480, -128, 160],
        [-480, -96, 160],
        [480, -96, 160],
        [-480, -64, 160],
        [480, -64, 160],
        [-480, -32, 160],
        [480, -32, 160],
        [-480, 0, 160],
        [480, 0, 160],
        [-480, 32, 160],
        [480, 32, 160],
        [-480, 64, 160],
        [480, 64, 160],
        [-480, 96, 160],
        [480, 96, 160],
        [-480, 128, 160],
        [480, 128, 160],
        [-480, 160, 160],
        [480, 160, 160],
        [-480, 192, 160],
        [480, 192, 160],
        [-480, 224, 160],
        [480, 224, 160],
        [-480, 256, 160],
        [480, 256, 160],
        [-480, 288, 160],
        [480, 288, 160],
        [-480, 320, 160],
        [480, 320, 160],
        [-480, 352, 160],
        [480, 352, 160],
        [-480, 384, 160],
        [480, 384, 160],
        [-480, 416, 160],
        [480, 416, 160],
        [-480, 448, 160],
        [480, 448, 160],
        [-480, -448, 192],
        [480, -448, 192],
        [-480, -416, 192],
        [480, -416, 192],
        [-480, -384, 192],
        [480, -384, 192],
        [-480, -352, 192],
        [480, -352, 192],
        [-480, -320, 192],
        [480, -320, 192],
        [-480, -288, 192],
        [480, -288, 192],
        [-480, -256, 192],
        [480, -256, 192],
        [-480, -224, 192],
        [480, -224, 192],
        [-480, -192, 192],
        [480, -192, 192],
        [-480, -160, 192],
        [480, -160, 192],
        [-480, -128, 192],
        [480, -128, 192],
        [-480, -96, 192],
        [480, -96, 192],
        [-480, -64, 192],
        [480, -64, 192],
        [-480, -32, 192],
        [480, -32, 192],
        [-480, 0, 192],
        [480, 0, 192],
        [-480, 32, 192],
        [480, 32, 192],
        [-480, 64, 192],
        [480, 64, 192],
        [-480, 96, 192],
        [480, 96, 192],
        [-480, 128, 192],
        [480, 128, 192],
        [-480, 160, 192],
        [480, 160, 192],
        [-480, 192, 192],
        [480, 192, 192],
        [-480, 224, 192],
        [480, 224, 192],
        [-480, 256, 192],
        [480, 256, 192],
        [-480, 288, 192],
        [480, 288, 192],
        [-480, 320, 192],
        [480, 320, 192],
        [-480, 352, 192],
        [480, 352, 192],
        [-480, 384, 192],
        [480, 384, 192],
        [-480, 416, 192],
        [480, 416, 192],
        [-480, 448, 192],
        [480, 448, 192],
        [-480, -448, 224],
        [480, -448, 224],
        [-480, -416, 224],
        [480, -416, 224],
        [-480, -384, 224],
        [480, -384, 224],
        [-480, -352, 224],
        [480, -352, 224],
        [-480, -320, 224],
        [480, -320, 224],
        [-480, -288, 224],
        [480, -288, 224],
        [-480, -256, 224],
        [480, -256, 224],
        [-480, -224, 224],
        [480, -224, 224],
        [-480, -192, 224],
        [480, -192, 224],
        [-480, -160, 224],
        [480, -160, 224],
        [-480, -128, 224],
        [480, -128, 224],
        [-480, -96, 224],
        [480, -96, 224],
        [-480, -64, 224],
        [480, -64, 224],
        [-480, -32, 224],
        [480, -32, 224],
        [-480, 0, 224],
        [480, 0, 224],
        [-480, 32, 224],
        [480, 32, 224],
        [-480, 64, 224],
        [480, 64, 224],
        [-480, 96, 224],
        [480, 96, 224],
        [-480, 128, 224],
        [480, 128, 224],
        [-480, 160, 224],
        [480, 160, 224],
        [-480, 192, 224],
        [480, 192, 224],
        [-480, 224, 224],
        [480, 224, 224],
        [-480, 256, 224],
        [480, 256, 224],
        [-480, 288, 224],
        [480, 288, 224],
        [-480, 320, 224],
        [480, 320, 224],
        [-480, 352, 224],
        [480, 352, 224],
        [-480, 384, 224],
        [480, 384, 224],
        [-480, 416, 224],
        [480, 416, 224],
        [-480, 448, 224],
        [480, 448, 224],
        [-480, -448, 256],
        [480, -448, 256],
        [-480, -416, 256],
        [480, -416, 256],
        [-480, -384, 256],
        [480, -384, 256],
        [-480, -352, 256],
        [480, -352, 256],
        [-480, -320, 256],
        [480, -320, 256],
        [-480, -288, 256],
        [480, -288, 256],
        [-480, -256, 256],
        [480, -256, 256],
        [-480, -224, 256],
        [480, -224, 256],
        [-480, -192, 256],
        [480, -192, 256],
        [-480, -160, 256],
        [480, -160, 256],
        [-480, -128, 256],
        [480, -128, 256],
        [-480, -96, 256],
        [480, -96, 256],
        [-480, -64, 256],
        [480, -64, 256],
        [-480, -32, 256],
        [480, -32, 256],
        [-480, 0, 256],
        [480, 0, 256],
        [-480, 32, 256],
        [480, 32, 256],
        [-480, 64, 256],
        [480, 64, 256],
        [-480, 96, 256],
        [480, 96, 256],
        [-480, 128, 256],
        [480, 128, 256],
        [-480, 160, 256],
        [480, 160, 256],
        [-480, 192, 256],
        [480, 192, 256],
        [-480, 224, 256],
        [480, 224, 256],
        [-480, 256, 256],
        [480, 256, 256],
        [-480, 288, 256],
        [480, 288, 256],
        [-480, 320, 256],
        [480, 320, 256],
        [-480, 352, 256],
        [480, 352, 256],
        [-480, 384, 256],
        [480, 384, 256],
        [-480, 416, 256],
        [480, 416, 256],
        [-480, 448, 256],
        [480, 448, 256],
        [-480, -448, 288],
        [480, -448, 288],
        [-480, -416, 288],
        [480, -416, 288],
        [-480, -384, 288],
        [480, -384, 288],
        [-480, -352, 288],
        [480, -352, 288],
        [-480, -320, 288],
        [480, -320, 288],
        [-480, -288, 288],
        [480, -288, 288],
        [-480, -256, 288],
        [480, -256, 288],
        [-480, -224, 288],
        [480, -224, 288],
        [-480, -192, 288],
        [480, -192, 288],
        [-480, -160, 288],
        [480, -160, 288],
        [-480, -128, 288],
        [480, -128, 288],
        [-480, -96, 288],
        [480, -96, 288],
        [-480, -64, 288],
        [480, -64, 288],
        [-480, -32, 288],
        [480, -32, 288],
        [-480, 0, 288],
        [480, 0, 288],
        [-480, 32, 288],
        [480, 32, 288],
        [-480, 64, 288],
        [480, 64, 288],
        [-480, 96, 288],
        [480, 96, 288],
        [-480, 128, 288],
        [480, 128, 288],
        [-480, 160, 288],
        [480, 160, 288],
        [-480, 192, 288],
        [480, 192, 288],
        [-480, 224, 288],
        [480, 224, 288],
        [-480, 256, 288],
        [480, 256, 288],
        [-480, 288, 288],
        [480, 288, 288],
        [-480, 320, 288],
        [480, 320, 288],
        [-480, 352, 288],
        [480, 352, 288],
        [-480, 384, 288],
        [480, 384, 288],
        [-480, 416, 288],
        [480, 416, 288],
        [-480, 448, 288],
        [480, 448, 288],
        [-480, -448, 320],
        [480, -448, 320],
        [-480, -416, 320],
        [480, -416, 320],
        [-480, -384, 320],
        [480, -384, 320],
        [-480, -352, 320],
        [480, -352, 320],
        [-480, -320, 320],
        [480, -320, 320],
        [-480, -288, 320],
        [480, -288, 320],
        [-480, -256, 320],
        [480, -256, 320],
        [-480, -224, 320],
        [480, -224, 320],
        [-480, -192, 320],
        [480, -192, 320],
        [-480, -160, 320],
        [480, -160, 320],
        [-480, -128, 320],
        [480, -128, 320],
        [-480, -96, 320],
        [480, -96, 320],
        [-480, -64, 320],
        [480, -64, 320],
        [-480, -32, 320],
        [480, -32, 320],
        [-480, 0, 320],
        [480, 0, 320],
        [-480, 32, 320],
        [480, 32, 320],
        [-480, 64, 320],
        [480, 64, 320],
        [-480, 96, 320],
        [480, 96, 320],
        [-480, 128, 320],
        [480, 128, 320],
        [-480, 160, 320],
        [480, 160, 320],
        [-480, 192, 320],
        [480, 192, 320],
        [-480, 224, 320],
        [480, 224, 320],
        [-480, 256, 320],
        [480, 256, 320],
        [-480, 288, 320],
        [480, 288, 320],
        [-480, 320, 320],
        [480, 320, 320],
        [-480, 352, 320],
        [480, 352, 320],
        [-480, 384, 320],
        [480, 384, 320],
        [-480, 416, 320],
        [480, 416, 320],
        [-480, 448, 320],
        [480, 448, 320],
        [-480, -448, 352],
        [480, -448, 352],
        [-480, -416, 352],
        [480, -416, 352],
        [-480, -384, 352],
        [480, -384, 352],
        [-480, -352, 352],
        [480, -352, 352],
        [-480, -320, 352],
        [480, -320, 352],
        [-480, -288, 352],
        [480, -288, 352],
        [-480, -256, 352],
        [480, -256, 352],
        [-480, -224, 352],
        [480, -224, 352],
        [-480, -192, 352],
        [480, -192, 352],
        [-480, -160, 352],
        [480, -160, 352],
        [-480, -128, 352],
        [480, -128, 352],
        [-480, -96, 352],
        [480, -96, 352],
        [-480, -64, 352],
        [480, -64, 352],
        [-480, -32, 352],
        [480, -32, 352],
        [-480, 0, 352],
        [480, 0, 352],
        [-480, 32, 352],
        [480, 32, 352],
        [-480, 64, 352],
        [480, 64, 352],
        [-480, 96, 352],
        [480, 96, 352],
        [-480, 128, 352],
        [480, 128, 352],
        [-480, 160, 352],
        [480, 160, 352],
        [-480, 192, 352],
        [480, 192, 352],
        [-480, 224, 352],
        [480, 224, 352],
        [-480, 256, 352],
        [480, 256, 352],
        [-480, 288, 352],
        [480, 288, 352],
        [-480, 320, 352],
        [480, 320, 352],
        [-480, 352, 352],
        [480, 352, 352],
        [-480, 384, 352],
        [480, 384, 352],
        [-480, 416, 352],
        [480, 416, 352],
        [-480, 448, 352],
        [480, 448, 352],
        [-480, -448, 384],
        [480, -448, 384],
        [-480, -416, 384],
        [480, -416, 384],
        [-480, -384, 384],
        [480, -384, 384],
        [-480, -352, 384],
        [480, -352, 384],
        [-480, -320, 384],
        [480, -320, 384],
        [-480, -288, 384],
        [480, -288, 384],
        [-480, -256, 384],
        [480, -256, 384],
        [-480, -224, 384],
        [480, -224, 384],
        [-480, -192, 384],
        [480, -192, 384],
        [-480, -160, 384],
        [480, -160, 384],
        [-480, -128, 384],
        [480, -128, 384],
        [-480, -96, 384],
        [480, -96, 384],
        [-480, -64, 384],
        [480, -64, 384],
        [-480, -32, 384],
        [480, -32, 384],
        [-480, 0, 384],
        [480, 0, 384],
        [-480, 32, 384],
        [480, 32, 384],
        [-480, 64, 384],
        [480, 64, 384],
        [-480, 96, 384],
        [480, 96, 384],
        [-480, 128, 384],
        [480, 128, 384],
        [-480, 160, 384],
        [480, 160, 384],
        [-480, 192, 384],
        [480, 192, 384],
        [-480, 224, 384],
        [480, 224, 384],
        [-480, 256, 384],
        [480, 256, 384],
        [-480, 288, 384],
        [480, 288, 384],
        [-480, 320, 384],
        [480, 320, 384],
        [-480, 352, 384],
        [480, 352, 384],
        [-480, 384, 384],
        [480, 384, 384],
        [-480, 416, 384],
        [480, 416, 384],
        [-480, 448, 384],
        [480, 448, 384],
        [-480, -448, 416],
        [480, -448, 416],
        [-480, -416, 416],
        [480, -416, 416],
        [-480, -384, 416],
        [480, -384, 416],
        [-480, -352, 416],
        [480, -352, 416],
        [-480, -320, 416],
        [480, -320, 416],
        [-480, -288, 416],
        [480, -288, 416],
        [-480, -256, 416],
        [480, -256, 416],
        [-480, -224, 416],
        [480, -224, 416],
        [-480, -192, 416],
        [480, -192, 416],
        [-480, -160, 416],
        [480, -160, 416],
        [-480, -128, 416],
        [480, -128, 416],
        [-480, -96, 416],
        [480, -96, 416],
        [-480, -64, 416],
        [480, -64, 416],
        [-480, -32, 416],
        [480, -32, 416],
        [-480, 0, 416],
        [480, 0, 416],
        [-480, 32, 416],
        [480, 32, 416],
        [-480, 64, 416],
        [480, 64, 416],
        [-480, 96, 416],
        [480, 96, 416],
        [-480, 128, 416],
        [480, 128, 416],
        [-480, 160, 416],
        [480, 160, 416],
        [-480, 192, 416],
        [480, 192, 416],
        [-480, 224, 416],
        [480, 224, 416],
        [-480, 256, 416],
        [480, 256, 416],
        [-480, 288, 416],
        [480, 288, 416],
        [-480, 320, 416],
        [480, 320, 416],
        [-480, 352, 416],
        [480, 352, 416],
        [-480, 384, 416],
        [480, 384, 416],
        [-480, 416, 416],
        [480, 416, 416],
        [-480, 448, 416],
        [480, 448, 416],
        [-480, -448, 448],
        [480, -448, 448],
        [-480, -416, 448],
        [480, -416, 448],
        [-480, -384, 448],
        [480, -384, 448],
        [-480, -352, 448],
        [480, -352, 448],
        [-480, -320, 448],
        [480, -320, 448],
        [-480, -288, 448],
        [480, -288, 448],
        [-480, -256, 448],
        [480, -256, 448],
        [-480, -224, 448],
        [480, -224, 448],
        [-480, -192, 448],
        [480, -192, 448],
        [-480, -160, 448],
        [480, -160, 448],
        [-480, -128, 448],
        [480, -128, 448],
        [-480, -96, 448],
        [480, -96, 448],
        [-480, -64, 448],
        [480, -64, 448],
        [-480, -32, 448],
        [480, -32, 448],
        [-480, 0, 448],
        [480, 0, 448],
        [-480, 32, 448],
        [480, 32, 448],
        [-480, 64, 448],
        [480, 64, 448],
        [-480, 96, 448],
        [480, 96, 448],
        [-480, 128, 448],
        [480, 128, 448],
        [-480, 160, 448],
        [480, 160, 448],
        [-480, 192, 448],
        [480, 192, 448],
        [-480, 224, 448],
        [480, 224, 448],
        [-480, 256, 448],
        [480, 256, 448],
        [-480, 288, 448],
        [480, 288, 448],
        [-480, 320, 448],
        [480, 320, 448],
        [-480, 352, 448],
        [480, 352, 448],
        [-480, 384, 448],
        [480, 384, 448],
        [-480, 416, 448],
        [480, 416, 448],
        [-480, 448, 448],
        [480, 448, 448]],
    '16': [[-512, -512, -512],
        [-512, -512, 512],
        [-512, -480, -512],
        [-512, -480, 512],
        [-512, -448, -512],
        [-512, -448, 512],
        [-512, -416, -512],
        [-512, -416, 512],
        [-512, -384, -512],
        [-512, -384, 512],
        [-512, -352, -512],
        [-512, -352, 512],
        [-512, -320, -512],
        [-512, -320, 512],
        [-512, -288, -512],
        [-512, -288, 512],
        [-512, -256, -512],
        [-512, -256, 512],
        [-512, -224, -512],
        [-512, -224, 512],
        [-512, -192, -512],
        [-512, -192, 512],
        [-512, -160, -512],
        [-512, -160, 512],
        [-512, -128, -512],
        [-512, -128, 512],
        [-512, -96, -512],
        [-512, -96, 512],
        [-512, -64, -512],
        [-512, -64, 512],
        [-512, -32, -512],
        [-512, -32, 512],
        [-512, 0, -512],
        [-512, 0, 512],
        [-512, 32, -512],
        [-512, 32, 512],
        [-512, 64, -512],
        [-512, 64, 512],
        [-512, 96, -512],
        [-512, 96, 512],
        [-512, 128, -512],
        [-512, 128, 512],
        [-512, 160, -512],
        [-512, 160, 512],
        [-512, 192, -512],
        [-512, 192, 512],
        [-512, 224, -512],
        [-512, 224, 512],
        [-512, 256, -512],
        [-512, 256, 512],
        [-512, 288, -512],
        [-512, 288, 512],
        [-512, 320, -512],
        [-512, 320, 512],
        [-512, 352, -512],
        [-512, 352, 512],
        [-512, 384, -512],
        [-512, 384, 512],
        [-512, 416, -512],
        [-512, 416, 512],
        [-512, 448, -512],
        [-512, 448, 512],
        [-512, 480, -512],
        [-512, 480, 512],
        [-512, 512, -512],
        [-512, 512, 512],
        [-512, -512, -480],
        [-512, 512, -480],
        [-512, -512, -448],
        [-512, 512, -448],
        [-512, -512, -416],
        [-512, 512, -416],
        [-512, -512, -384],
        [-512, 512, -384],
        [-512, -512, -352],
        [-512, 512, -352],
        [-512, -512, -320],
        [-512, 512, -320],
        [-512, -512, -288],
        [-512, 512, -288],
        [-512, -512, -256],
        [-512, 512, -256],
        [-512, -512, -224],
        [-512, 512, -224],
        [-512, -512, -192],
        [-512, 512, -192],
        [-512, -512, -160],
        [-512, 512, -160],
        [-512, -512, -128],
        [-512, 512, -128],
        [-512, -512, -96],
        [-512, 512, -96],
        [-512, -512, -64],
        [-512, 512, -64],
        [-512, -512, -32],
        [-512, 512, -32],
        [-512, -512, 0],
        [-512, 512, 0],
        [-512, -512, 32],
        [-512, 512, 32],
        [-512, -512, 64],
        [-512, 512, 64],
        [-512, -512, 96],
        [-512, 512, 96],
        [-512, -512, 128],
        [-512, 512, 128],
        [-512, -512, 160],
        [-512, 512, 160],
        [-512, -512, 192],
        [-512, 512, 192],
        [-512, -512, 224],
        [-512, 512, 224],
        [-512, -512, 256],
        [-512, 512, 256],
        [-512, -512, 288],
        [-512, 512, 288],
        [-512, -512, 320],
        [-512, 512, 320],
        [-512, -512, 352],
        [-512, 512, 352],
        [-512, -512, 384],
        [-512, 512, 384],
        [-512, -512, 416],
        [-512, 512, 416],
        [-512, -512, 448],
        [-512, 512, 448],
        [-512, -512, 480],
        [-512, 512, 480],
        [-480, -512, -512],
        [-480, -512, 512],
        [-480, -480, -512],
        [-480, -480, 512],
        [-480, -448, -512],
        [-480, -448, 512],
        [-480, -416, -512],
        [-480, -416, 512],
        [-480, -384, -512],
        [-480, -384, 512],
        [-480, -352, -512],
        [-480, -352, 512],
        [-480, -320, -512],
        [-480, -320, 512],
        [-480, -288, -512],
        [-480, -288, 512],
        [-480, -256, -512],
        [-480, -256, 512],
        [-480, -224, -512],
        [-480, -224, 512],
        [-480, -192, -512],
        [-480, -192, 512],
        [-480, -160, -512],
        [-480, -160, 512],
        [-480, -128, -512],
        [-480, -128, 512],
        [-480, -96, -512],
        [-480, -96, 512],
        [-480, -64, -512],
        [-480, -64, 512],
        [-480, -32, -512],
        [-480, -32, 512],
        [-480, 0, -512],
        [-480, 0, 512],
        [-480, 32, -512],
        [-480, 32, 512],
        [-480, 64, -512],
        [-480, 64, 512],
        [-480, 96, -512],
        [-480, 96, 512],
        [-480, 128, -512],
        [-480, 128, 512],
        [-480, 160, -512],
        [-480, 160, 512],
        [-480, 192, -512],
        [-480, 192, 512],
        [-480, 224, -512],
        [-480, 224, 512],
        [-480, 256, -512],
        [-480, 256, 512],
        [-480, 288, -512],
        [-480, 288, 512],
        [-480, 320, -512],
        [-480, 320, 512],
        [-480, 352, -512],
        [-480, 352, 512],
        [-480, 384, -512],
        [-480, 384, 512],
        [-480, 416, -512],
        [-480, 416, 512],
        [-480, 448, -512],
        [-480, 448, 512],
        [-480, 480, -512],
        [-480, 480, 512],
        [-480, 512, -512],
        [-480, 512, 512],
        [-480, -512, -480],
        [-480, 512, -480],
        [-480, -512, -448],
        [-480, 512, -448],
        [-480, -512, -416],
        [-480, 512, -416],
        [-480, -512, -384],
        [-480, 512, -384],
        [-480, -512, -352],
        [-480, 512, -352],
        [-480, -512, -320],
        [-480, 512, -320],
        [-480, -512, -288],
        [-480, 512, -288],
        [-480, -512, -256],
        [-480, 512, -256],
        [-480, -512, -224],
        [-480, 512, -224],
        [-480, -512, -192],
        [-480, 512, -192],
        [-480, -512, -160],
        [-480, 512, -160],
        [-480, -512, -128],
        [-480, 512, -128],
        [-480, -512, -96],
        [-480, 512, -96],
        [-480, -512, -64],
        [-480, 512, -64],
        [-480, -512, -32],
        [-480, 512, -32],
        [-480, -512, 0],
        [-480, 512, 0],
        [-480, -512, 32],
        [-480, 512, 32],
        [-480, -512, 64],
        [-480, 512, 64],
        [-480, -512, 96],
        [-480, 512, 96],
        [-480, -512, 128],
        [-480, 512, 128],
        [-480, -512, 160],
        [-480, 512, 160],
        [-480, -512, 192],
        [-480, 512, 192],
        [-480, -512, 224],
        [-480, 512, 224],
        [-480, -512, 256],
        [-480, 512, 256],
        [-480, -512, 288],
        [-480, 512, 288],
        [-480, -512, 320],
        [-480, 512, 320],
        [-480, -512, 352],
        [-480, 512, 352],
        [-480, -512, 384],
        [-480, 512, 384],
        [-480, -512, 416],
        [-480, 512, 416],
        [-480, -512, 448],
        [-480, 512, 448],
        [-480, -512, 480],
        [-480, 512, 480],
        [-448, -512, -512],
        [-448, -512, 512],
        [-448, -480, -512],
        [-448, -480, 512],
        [-448, -448, -512],
        [-448, -448, 512],
        [-448, -416, -512],
        [-448, -416, 512],
        [-448, -384, -512],
        [-448, -384, 512],
        [-448, -352, -512],
        [-448, -352, 512],
        [-448, -320, -512],
        [-448, -320, 512],
        [-448, -288, -512],
        [-448, -288, 512],
        [-448, -256, -512],
        [-448, -256, 512],
        [-448, -224, -512],
        [-448, -224, 512],
        [-448, -192, -512],
        [-448, -192, 512],
        [-448, -160, -512],
        [-448, -160, 512],
        [-448, -128, -512],
        [-448, -128, 512],
        [-448, -96, -512],
        [-448, -96, 512],
        [-448, -64, -512],
        [-448, -64, 512],
        [-448, -32, -512],
        [-448, -32, 512],
        [-448, 0, -512],
        [-448, 0, 512],
        [-448, 32, -512],
        [-448, 32, 512],
        [-448, 64, -512],
        [-448, 64, 512],
        [-448, 96, -512],
        [-448, 96, 512],
        [-448, 128, -512],
        [-448, 128, 512],
        [-448, 160, -512],
        [-448, 160, 512],
        [-448, 192, -512],
        [-448, 192, 512],
        [-448, 224, -512],
        [-448, 224, 512],
        [-448, 256, -512],
        [-448, 256, 512],
        [-448, 288, -512],
        [-448, 288, 512],
        [-448, 320, -512],
        [-448, 320, 512],
        [-448, 352, -512],
        [-448, 352, 512],
        [-448, 384, -512],
        [-448, 384, 512],
        [-448, 416, -512],
        [-448, 416, 512],
        [-448, 448, -512],
        [-448, 448, 512],
        [-448, 480, -512],
        [-448, 480, 512],
        [-448, 512, -512],
        [-448, 512, 512],
        [-448, -512, -480],
        [-448, 512, -480],
        [-448, -512, -448],
        [-448, 512, -448],
        [-448, -512, -416],
        [-448, 512, -416],
        [-448, -512, -384],
        [-448, 512, -384],
        [-448, -512, -352],
        [-448, 512, -352],
        [-448, -512, -320],
        [-448, 512, -320],
        [-448, -512, -288],
        [-448, 512, -288],
        [-448, -512, -256],
        [-448, 512, -256],
        [-448, -512, -224],
        [-448, 512, -224],
        [-448, -512, -192],
        [-448, 512, -192],
        [-448, -512, -160],
        [-448, 512, -160],
        [-448, -512, -128],
        [-448, 512, -128],
        [-448, -512, -96],
        [-448, 512, -96],
        [-448, -512, -64],
        [-448, 512, -64],
        [-448, -512, -32],
        [-448, 512, -32],
        [-448, -512, 0],
        [-448, 512, 0],
        [-448, -512, 32],
        [-448, 512, 32],
        [-448, -512, 64],
        [-448, 512, 64],
        [-448, -512, 96],
        [-448, 512, 96],
        [-448, -512, 128],
        [-448, 512, 128],
        [-448, -512, 160],
        [-448, 512, 160],
        [-448, -512, 192],
        [-448, 512, 192],
        [-448, -512, 224],
        [-448, 512, 224],
        [-448, -512, 256],
        [-448, 512, 256],
        [-448, -512, 288],
        [-448, 512, 288],
        [-448, -512, 320],
        [-448, 512, 320],
        [-448, -512, 352],
        [-448, 512, 352],
        [-448, -512, 384],
        [-448, 512, 384],
        [-448, -512, 416],
        [-448, 512, 416],
        [-448, -512, 448],
        [-448, 512, 448],
        [-448, -512, 480],
        [-448, 512, 480],
        [-416, -512, -512],
        [-416, -512, 512],
        [-416, -480, -512],
        [-416, -480, 512],
        [-416, -448, -512],
        [-416, -448, 512],
        [-416, -416, -512],
        [-416, -416, 512],
        [-416, -384, -512],
        [-416, -384, 512],
        [-416, -352, -512],
        [-416, -352, 512],
        [-416, -320, -512],
        [-416, -320, 512],
        [-416, -288, -512],
        [-416, -288, 512],
        [-416, -256, -512],
        [-416, -256, 512],
        [-416, -224, -512],
        [-416, -224, 512],
        [-416, -192, -512],
        [-416, -192, 512],
        [-416, -160, -512],
        [-416, -160, 512],
        [-416, -128, -512],
        [-416, -128, 512],
        [-416, -96, -512],
        [-416, -96, 512],
        [-416, -64, -512],
        [-416, -64, 512],
        [-416, -32, -512],
        [-416, -32, 512],
        [-416, 0, -512],
        [-416, 0, 512],
        [-416, 32, -512],
        [-416, 32, 512],
        [-416, 64, -512],
        [-416, 64, 512],
        [-416, 96, -512],
        [-416, 96, 512],
        [-416, 128, -512],
        [-416, 128, 512],
        [-416, 160, -512],
        [-416, 160, 512],
        [-416, 192, -512],
        [-416, 192, 512],
        [-416, 224, -512],
        [-416, 224, 512],
        [-416, 256, -512],
        [-416, 256, 512],
        [-416, 288, -512],
        [-416, 288, 512],
        [-416, 320, -512],
        [-416, 320, 512],
        [-416, 352, -512],
        [-416, 352, 512],
        [-416, 384, -512],
        [-416, 384, 512],
        [-416, 416, -512],
        [-416, 416, 512],
        [-416, 448, -512],
        [-416, 448, 512],
        [-416, 480, -512],
        [-416, 480, 512],
        [-416, 512, -512],
        [-416, 512, 512],
        [-416, -512, -480],
        [-416, 512, -480],
        [-416, -512, -448],
        [-416, 512, -448],
        [-416, -512, -416],
        [-416, 512, -416],
        [-416, -512, -384],
        [-416, 512, -384],
        [-416, -512, -352],
        [-416, 512, -352],
        [-416, -512, -320],
        [-416, 512, -320],
        [-416, -512, -288],
        [-416, 512, -288],
        [-416, -512, -256],
        [-416, 512, -256],
        [-416, -512, -224],
        [-416, 512, -224],
        [-416, -512, -192],
        [-416, 512, -192],
        [-416, -512, -160],
        [-416, 512, -160],
        [-416, -512, -128],
        [-416, 512, -128],
        [-416, -512, -96],
        [-416, 512, -96],
        [-416, -512, -64],
        [-416, 512, -64],
        [-416, -512, -32],
        [-416, 512, -32],
        [-416, -512, 0],
        [-416, 512, 0],
        [-416, -512, 32],
        [-416, 512, 32],
        [-416, -512, 64],
        [-416, 512, 64],
        [-416, -512, 96],
        [-416, 512, 96],
        [-416, -512, 128],
        [-416, 512, 128],
        [-416, -512, 160],
        [-416, 512, 160],
        [-416, -512, 192],
        [-416, 512, 192],
        [-416, -512, 224],
        [-416, 512, 224],
        [-416, -512, 256],
        [-416, 512, 256],
        [-416, -512, 288],
        [-416, 512, 288],
        [-416, -512, 320],
        [-416, 512, 320],
        [-416, -512, 352],
        [-416, 512, 352],
        [-416, -512, 384],
        [-416, 512, 384],
        [-416, -512, 416],
        [-416, 512, 416],
        [-416, -512, 448],
        [-416, 512, 448],
        [-416, -512, 480],
        [-416, 512, 480],
        [-384, -512, -512],
        [-384, -512, 512],
        [-384, -480, -512],
        [-384, -480, 512],
        [-384, -448, -512],
        [-384, -448, 512],
        [-384, -416, -512],
        [-384, -416, 512],
        [-384, -384, -512],
        [-384, -384, 512],
        [-384, -352, -512],
        [-384, -352, 512],
        [-384, -320, -512],
        [-384, -320, 512],
        [-384, -288, -512],
        [-384, -288, 512],
        [-384, -256, -512],
        [-384, -256, 512],
        [-384, -224, -512],
        [-384, -224, 512],
        [-384, -192, -512],
        [-384, -192, 512],
        [-384, -160, -512],
        [-384, -160, 512],
        [-384, -128, -512],
        [-384, -128, 512],
        [-384, -96, -512],
        [-384, -96, 512],
        [-384, -64, -512],
        [-384, -64, 512],
        [-384, -32, -512],
        [-384, -32, 512],
        [-384, 0, -512],
        [-384, 0, 512],
        [-384, 32, -512],
        [-384, 32, 512],
        [-384, 64, -512],
        [-384, 64, 512],
        [-384, 96, -512],
        [-384, 96, 512],
        [-384, 128, -512],
        [-384, 128, 512],
        [-384, 160, -512],
        [-384, 160, 512],
        [-384, 192, -512],
        [-384, 192, 512],
        [-384, 224, -512],
        [-384, 224, 512],
        [-384, 256, -512],
        [-384, 256, 512],
        [-384, 288, -512],
        [-384, 288, 512],
        [-384, 320, -512],
        [-384, 320, 512],
        [-384, 352, -512],
        [-384, 352, 512],
        [-384, 384, -512],
        [-384, 384, 512],
        [-384, 416, -512],
        [-384, 416, 512],
        [-384, 448, -512],
        [-384, 448, 512],
        [-384, 480, -512],
        [-384, 480, 512],
        [-384, 512, -512],
        [-384, 512, 512],
        [-384, -512, -480],
        [-384, 512, -480],
        [-384, -512, -448],
        [-384, 512, -448],
        [-384, -512, -416],
        [-384, 512, -416],
        [-384, -512, -384],
        [-384, 512, -384],
        [-384, -512, -352],
        [-384, 512, -352],
        [-384, -512, -320],
        [-384, 512, -320],
        [-384, -512, -288],
        [-384, 512, -288],
        [-384, -512, -256],
        [-384, 512, -256],
        [-384, -512, -224],
        [-384, 512, -224],
        [-384, -512, -192],
        [-384, 512, -192],
        [-384, -512, -160],
        [-384, 512, -160],
        [-384, -512, -128],
        [-384, 512, -128],
        [-384, -512, -96],
        [-384, 512, -96],
        [-384, -512, -64],
        [-384, 512, -64],
        [-384, -512, -32],
        [-384, 512, -32],
        [-384, -512, 0],
        [-384, 512, 0],
        [-384, -512, 32],
        [-384, 512, 32],
        [-384, -512, 64],
        [-384, 512, 64],
        [-384, -512, 96],
        [-384, 512, 96],
        [-384, -512, 128],
        [-384, 512, 128],
        [-384, -512, 160],
        [-384, 512, 160],
        [-384, -512, 192],
        [-384, 512, 192],
        [-384, -512, 224],
        [-384, 512, 224],
        [-384, -512, 256],
        [-384, 512, 256],
        [-384, -512, 288],
        [-384, 512, 288],
        [-384, -512, 320],
        [-384, 512, 320],
        [-384, -512, 352],
        [-384, 512, 352],
        [-384, -512, 384],
        [-384, 512, 384],
        [-384, -512, 416],
        [-384, 512, 416],
        [-384, -512, 448],
        [-384, 512, 448],
        [-384, -512, 480],
        [-384, 512, 480],
        [-352, -512, -512],
        [-352, -512, 512],
        [-352, -480, -512],
        [-352, -480, 512],
        [-352, -448, -512],
        [-352, -448, 512],
        [-352, -416, -512],
        [-352, -416, 512],
        [-352, -384, -512],
        [-352, -384, 512],
        [-352, -352, -512],
        [-352, -352, 512],
        [-352, -320, -512],
        [-352, -320, 512],
        [-352, -288, -512],
        [-352, -288, 512],
        [-352, -256, -512],
        [-352, -256, 512],
        [-352, -224, -512],
        [-352, -224, 512],
        [-352, -192, -512],
        [-352, -192, 512],
        [-352, -160, -512],
        [-352, -160, 512],
        [-352, -128, -512],
        [-352, -128, 512],
        [-352, -96, -512],
        [-352, -96, 512],
        [-352, -64, -512],
        [-352, -64, 512],
        [-352, -32, -512],
        [-352, -32, 512],
        [-352, 0, -512],
        [-352, 0, 512],
        [-352, 32, -512],
        [-352, 32, 512],
        [-352, 64, -512],
        [-352, 64, 512],
        [-352, 96, -512],
        [-352, 96, 512],
        [-352, 128, -512],
        [-352, 128, 512],
        [-352, 160, -512],
        [-352, 160, 512],
        [-352, 192, -512],
        [-352, 192, 512],
        [-352, 224, -512],
        [-352, 224, 512],
        [-352, 256, -512],
        [-352, 256, 512],
        [-352, 288, -512],
        [-352, 288, 512],
        [-352, 320, -512],
        [-352, 320, 512],
        [-352, 352, -512],
        [-352, 352, 512],
        [-352, 384, -512],
        [-352, 384, 512],
        [-352, 416, -512],
        [-352, 416, 512],
        [-352, 448, -512],
        [-352, 448, 512],
        [-352, 480, -512],
        [-352, 480, 512],
        [-352, 512, -512],
        [-352, 512, 512],
        [-352, -512, -480],
        [-352, 512, -480],
        [-352, -512, -448],
        [-352, 512, -448],
        [-352, -512, -416],
        [-352, 512, -416],
        [-352, -512, -384],
        [-352, 512, -384],
        [-352, -512, -352],
        [-352, 512, -352],
        [-352, -512, -320],
        [-352, 512, -320],
        [-352, -512, -288],
        [-352, 512, -288],
        [-352, -512, -256],
        [-352, 512, -256],
        [-352, -512, -224],
        [-352, 512, -224],
        [-352, -512, -192],
        [-352, 512, -192],
        [-352, -512, -160],
        [-352, 512, -160],
        [-352, -512, -128],
        [-352, 512, -128],
        [-352, -512, -96],
        [-352, 512, -96],
        [-352, -512, -64],
        [-352, 512, -64],
        [-352, -512, -32],
        [-352, 512, -32],
        [-352, -512, 0],
        [-352, 512, 0],
        [-352, -512, 32],
        [-352, 512, 32],
        [-352, -512, 64],
        [-352, 512, 64],
        [-352, -512, 96],
        [-352, 512, 96],
        [-352, -512, 128],
        [-352, 512, 128],
        [-352, -512, 160],
        [-352, 512, 160],
        [-352, -512, 192],
        [-352, 512, 192],
        [-352, -512, 224],
        [-352, 512, 224],
        [-352, -512, 256],
        [-352, 512, 256],
        [-352, -512, 288],
        [-352, 512, 288],
        [-352, -512, 320],
        [-352, 512, 320],
        [-352, -512, 352],
        [-352, 512, 352],
        [-352, -512, 384],
        [-352, 512, 384],
        [-352, -512, 416],
        [-352, 512, 416],
        [-352, -512, 448],
        [-352, 512, 448],
        [-352, -512, 480],
        [-352, 512, 480],
        [-320, -512, -512],
        [-320, -512, 512],
        [-320, -480, -512],
        [-320, -480, 512],
        [-320, -448, -512],
        [-320, -448, 512],
        [-320, -416, -512],
        [-320, -416, 512],
        [-320, -384, -512],
        [-320, -384, 512],
        [-320, -352, -512],
        [-320, -352, 512],
        [-320, -320, -512],
        [-320, -320, 512],
        [-320, -288, -512],
        [-320, -288, 512],
        [-320, -256, -512],
        [-320, -256, 512],
        [-320, -224, -512],
        [-320, -224, 512],
        [-320, -192, -512],
        [-320, -192, 512],
        [-320, -160, -512],
        [-320, -160, 512],
        [-320, -128, -512],
        [-320, -128, 512],
        [-320, -96, -512],
        [-320, -96, 512],
        [-320, -64, -512],
        [-320, -64, 512],
        [-320, -32, -512],
        [-320, -32, 512],
        [-320, 0, -512],
        [-320, 0, 512],
        [-320, 32, -512],
        [-320, 32, 512],
        [-320, 64, -512],
        [-320, 64, 512],
        [-320, 96, -512],
        [-320, 96, 512],
        [-320, 128, -512],
        [-320, 128, 512],
        [-320, 160, -512],
        [-320, 160, 512],
        [-320, 192, -512],
        [-320, 192, 512],
        [-320, 224, -512],
        [-320, 224, 512],
        [-320, 256, -512],
        [-320, 256, 512],
        [-320, 288, -512],
        [-320, 288, 512],
        [-320, 320, -512],
        [-320, 320, 512],
        [-320, 352, -512],
        [-320, 352, 512],
        [-320, 384, -512],
        [-320, 384, 512],
        [-320, 416, -512],
        [-320, 416, 512],
        [-320, 448, -512],
        [-320, 448, 512],
        [-320, 480, -512],
        [-320, 480, 512],
        [-320, 512, -512],
        [-320, 512, 512],
        [-320, -512, -480],
        [-320, 512, -480],
        [-320, -512, -448],
        [-320, 512, -448],
        [-320, -512, -416],
        [-320, 512, -416],
        [-320, -512, -384],
        [-320, 512, -384],
        [-320, -512, -352],
        [-320, 512, -352],
        [-320, -512, -320],
        [-320, 512, -320],
        [-320, -512, -288],
        [-320, 512, -288],
        [-320, -512, -256],
        [-320, 512, -256],
        [-320, -512, -224],
        [-320, 512, -224],
        [-320, -512, -192],
        [-320, 512, -192],
        [-320, -512, -160],
        [-320, 512, -160],
        [-320, -512, -128],
        [-320, 512, -128],
        [-320, -512, -96],
        [-320, 512, -96],
        [-320, -512, -64],
        [-320, 512, -64],
        [-320, -512, -32],
        [-320, 512, -32],
        [-320, -512, 0],
        [-320, 512, 0],
        [-320, -512, 32],
        [-320, 512, 32],
        [-320, -512, 64],
        [-320, 512, 64],
        [-320, -512, 96],
        [-320, 512, 96],
        [-320, -512, 128],
        [-320, 512, 128],
        [-320, -512, 160],
        [-320, 512, 160],
        [-320, -512, 192],
        [-320, 512, 192],
        [-320, -512, 224],
        [-320, 512, 224],
        [-320, -512, 256],
        [-320, 512, 256],
        [-320, -512, 288],
        [-320, 512, 288],
        [-320, -512, 320],
        [-320, 512, 320],
        [-320, -512, 352],
        [-320, 512, 352],
        [-320, -512, 384],
        [-320, 512, 384],
        [-320, -512, 416],
        [-320, 512, 416],
        [-320, -512, 448],
        [-320, 512, 448],
        [-320, -512, 480],
        [-320, 512, 480],
        [-288, -512, -512],
        [-288, -512, 512],
        [-288, -480, -512],
        [-288, -480, 512],
        [-288, -448, -512],
        [-288, -448, 512],
        [-288, -416, -512],
        [-288, -416, 512],
        [-288, -384, -512],
        [-288, -384, 512],
        [-288, -352, -512],
        [-288, -352, 512],
        [-288, -320, -512],
        [-288, -320, 512],
        [-288, -288, -512],
        [-288, -288, 512],
        [-288, -256, -512],
        [-288, -256, 512],
        [-288, -224, -512],
        [-288, -224, 512],
        [-288, -192, -512],
        [-288, -192, 512],
        [-288, -160, -512],
        [-288, -160, 512],
        [-288, -128, -512],
        [-288, -128, 512],
        [-288, -96, -512],
        [-288, -96, 512],
        [-288, -64, -512],
        [-288, -64, 512],
        [-288, -32, -512],
        [-288, -32, 512],
        [-288, 0, -512],
        [-288, 0, 512],
        [-288, 32, -512],
        [-288, 32, 512],
        [-288, 64, -512],
        [-288, 64, 512],
        [-288, 96, -512],
        [-288, 96, 512],
        [-288, 128, -512],
        [-288, 128, 512],
        [-288, 160, -512],
        [-288, 160, 512],
        [-288, 192, -512],
        [-288, 192, 512],
        [-288, 224, -512],
        [-288, 224, 512],
        [-288, 256, -512],
        [-288, 256, 512],
        [-288, 288, -512],
        [-288, 288, 512],
        [-288, 320, -512],
        [-288, 320, 512],
        [-288, 352, -512],
        [-288, 352, 512],
        [-288, 384, -512],
        [-288, 384, 512],
        [-288, 416, -512],
        [-288, 416, 512],
        [-288, 448, -512],
        [-288, 448, 512],
        [-288, 480, -512],
        [-288, 480, 512],
        [-288, 512, -512],
        [-288, 512, 512],
        [-288, -512, -480],
        [-288, 512, -480],
        [-288, -512, -448],
        [-288, 512, -448],
        [-288, -512, -416],
        [-288, 512, -416],
        [-288, -512, -384],
        [-288, 512, -384],
        [-288, -512, -352],
        [-288, 512, -352],
        [-288, -512, -320],
        [-288, 512, -320],
        [-288, -512, -288],
        [-288, 512, -288],
        [-288, -512, -256],
        [-288, 512, -256],
        [-288, -512, -224],
        [-288, 512, -224],
        [-288, -512, -192],
        [-288, 512, -192],
        [-288, -512, -160],
        [-288, 512, -160],
        [-288, -512, -128],
        [-288, 512, -128],
        [-288, -512, -96],
        [-288, 512, -96],
        [-288, -512, -64],
        [-288, 512, -64],
        [-288, -512, -32],
        [-288, 512, -32],
        [-288, -512, 0],
        [-288, 512, 0],
        [-288, -512, 32],
        [-288, 512, 32],
        [-288, -512, 64],
        [-288, 512, 64],
        [-288, -512, 96],
        [-288, 512, 96],
        [-288, -512, 128],
        [-288, 512, 128],
        [-288, -512, 160],
        [-288, 512, 160],
        [-288, -512, 192],
        [-288, 512, 192],
        [-288, -512, 224],
        [-288, 512, 224],
        [-288, -512, 256],
        [-288, 512, 256],
        [-288, -512, 288],
        [-288, 512, 288],
        [-288, -512, 320],
        [-288, 512, 320],
        [-288, -512, 352],
        [-288, 512, 352],
        [-288, -512, 384],
        [-288, 512, 384],
        [-288, -512, 416],
        [-288, 512, 416],
        [-288, -512, 448],
        [-288, 512, 448],
        [-288, -512, 480],
        [-288, 512, 480],
        [-256, -512, -512],
        [-256, -512, 512],
        [-256, -480, -512],
        [-256, -480, 512],
        [-256, -448, -512],
        [-256, -448, 512],
        [-256, -416, -512],
        [-256, -416, 512],
        [-256, -384, -512],
        [-256, -384, 512],
        [-256, -352, -512],
        [-256, -352, 512],
        [-256, -320, -512],
        [-256, -320, 512],
        [-256, -288, -512],
        [-256, -288, 512],
        [-256, -256, -512],
        [-256, -256, 512],
        [-256, -224, -512],
        [-256, -224, 512],
        [-256, -192, -512],
        [-256, -192, 512],
        [-256, -160, -512],
        [-256, -160, 512],
        [-256, -128, -512],
        [-256, -128, 512],
        [-256, -96, -512],
        [-256, -96, 512],
        [-256, -64, -512],
        [-256, -64, 512],
        [-256, -32, -512],
        [-256, -32, 512],
        [-256, 0, -512],
        [-256, 0, 512],
        [-256, 32, -512],
        [-256, 32, 512],
        [-256, 64, -512],
        [-256, 64, 512],
        [-256, 96, -512],
        [-256, 96, 512],
        [-256, 128, -512],
        [-256, 128, 512],
        [-256, 160, -512],
        [-256, 160, 512],
        [-256, 192, -512],
        [-256, 192, 512],
        [-256, 224, -512],
        [-256, 224, 512],
        [-256, 256, -512],
        [-256, 256, 512],
        [-256, 288, -512],
        [-256, 288, 512],
        [-256, 320, -512],
        [-256, 320, 512],
        [-256, 352, -512],
        [-256, 352, 512],
        [-256, 384, -512],
        [-256, 384, 512],
        [-256, 416, -512],
        [-256, 416, 512],
        [-256, 448, -512],
        [-256, 448, 512],
        [-256, 480, -512],
        [-256, 480, 512],
        [-256, 512, -512],
        [-256, 512, 512],
        [-256, -512, -480],
        [-256, 512, -480],
        [-256, -512, -448],
        [-256, 512, -448],
        [-256, -512, -416],
        [-256, 512, -416],
        [-256, -512, -384],
        [-256, 512, -384],
        [-256, -512, -352],
        [-256, 512, -352],
        [-256, -512, -320],
        [-256, 512, -320],
        [-256, -512, -288],
        [-256, 512, -288],
        [-256, -512, -256],
        [-256, 512, -256],
        [-256, -512, -224],
        [-256, 512, -224],
        [-256, -512, -192],
        [-256, 512, -192],
        [-256, -512, -160],
        [-256, 512, -160],
        [-256, -512, -128],
        [-256, 512, -128],
        [-256, -512, -96],
        [-256, 512, -96],
        [-256, -512, -64],
        [-256, 512, -64],
        [-256, -512, -32],
        [-256, 512, -32],
        [-256, -512, 0],
        [-256, 512, 0],
        [-256, -512, 32],
        [-256, 512, 32],
        [-256, -512, 64],
        [-256, 512, 64],
        [-256, -512, 96],
        [-256, 512, 96],
        [-256, -512, 128],
        [-256, 512, 128],
        [-256, -512, 160],
        [-256, 512, 160],
        [-256, -512, 192],
        [-256, 512, 192],
        [-256, -512, 224],
        [-256, 512, 224],
        [-256, -512, 256],
        [-256, 512, 256],
        [-256, -512, 288],
        [-256, 512, 288],
        [-256, -512, 320],
        [-256, 512, 320],
        [-256, -512, 352],
        [-256, 512, 352],
        [-256, -512, 384],
        [-256, 512, 384],
        [-256, -512, 416],
        [-256, 512, 416],
        [-256, -512, 448],
        [-256, 512, 448],
        [-256, -512, 480],
        [-256, 512, 480],
        [-224, -512, -512],
        [-224, -512, 512],
        [-224, -480, -512],
        [-224, -480, 512],
        [-224, -448, -512],
        [-224, -448, 512],
        [-224, -416, -512],
        [-224, -416, 512],
        [-224, -384, -512],
        [-224, -384, 512],
        [-224, -352, -512],
        [-224, -352, 512],
        [-224, -320, -512],
        [-224, -320, 512],
        [-224, -288, -512],
        [-224, -288, 512],
        [-224, -256, -512],
        [-224, -256, 512],
        [-224, -224, -512],
        [-224, -224, 512],
        [-224, -192, -512],
        [-224, -192, 512],
        [-224, -160, -512],
        [-224, -160, 512],
        [-224, -128, -512],
        [-224, -128, 512],
        [-224, -96, -512],
        [-224, -96, 512],
        [-224, -64, -512],
        [-224, -64, 512],
        [-224, -32, -512],
        [-224, -32, 512],
        [-224, 0, -512],
        [-224, 0, 512],
        [-224, 32, -512],
        [-224, 32, 512],
        [-224, 64, -512],
        [-224, 64, 512],
        [-224, 96, -512],
        [-224, 96, 512],
        [-224, 128, -512],
        [-224, 128, 512],
        [-224, 160, -512],
        [-224, 160, 512],
        [-224, 192, -512],
        [-224, 192, 512],
        [-224, 224, -512],
        [-224, 224, 512],
        [-224, 256, -512],
        [-224, 256, 512],
        [-224, 288, -512],
        [-224, 288, 512],
        [-224, 320, -512],
        [-224, 320, 512],
        [-224, 352, -512],
        [-224, 352, 512],
        [-224, 384, -512],
        [-224, 384, 512],
        [-224, 416, -512],
        [-224, 416, 512],
        [-224, 448, -512],
        [-224, 448, 512],
        [-224, 480, -512],
        [-224, 480, 512],
        [-224, 512, -512],
        [-224, 512, 512],
        [-224, -512, -480],
        [-224, 512, -480],
        [-224, -512, -448],
        [-224, 512, -448],
        [-224, -512, -416],
        [-224, 512, -416],
        [-224, -512, -384],
        [-224, 512, -384],
        [-224, -512, -352],
        [-224, 512, -352],
        [-224, -512, -320],
        [-224, 512, -320],
        [-224, -512, -288],
        [-224, 512, -288],
        [-224, -512, -256],
        [-224, 512, -256],
        [-224, -512, -224],
        [-224, 512, -224],
        [-224, -512, -192],
        [-224, 512, -192],
        [-224, -512, -160],
        [-224, 512, -160],
        [-224, -512, -128],
        [-224, 512, -128],
        [-224, -512, -96],
        [-224, 512, -96],
        [-224, -512, -64],
        [-224, 512, -64],
        [-224, -512, -32],
        [-224, 512, -32],
        [-224, -512, 0],
        [-224, 512, 0],
        [-224, -512, 32],
        [-224, 512, 32],
        [-224, -512, 64],
        [-224, 512, 64],
        [-224, -512, 96],
        [-224, 512, 96],
        [-224, -512, 128],
        [-224, 512, 128],
        [-224, -512, 160],
        [-224, 512, 160],
        [-224, -512, 192],
        [-224, 512, 192],
        [-224, -512, 224],
        [-224, 512, 224],
        [-224, -512, 256],
        [-224, 512, 256],
        [-224, -512, 288],
        [-224, 512, 288],
        [-224, -512, 320],
        [-224, 512, 320],
        [-224, -512, 352],
        [-224, 512, 352],
        [-224, -512, 384],
        [-224, 512, 384],
        [-224, -512, 416],
        [-224, 512, 416],
        [-224, -512, 448],
        [-224, 512, 448],
        [-224, -512, 480],
        [-224, 512, 480],
        [-192, -512, -512],
        [-192, -512, 512],
        [-192, -480, -512],
        [-192, -480, 512],
        [-192, -448, -512],
        [-192, -448, 512],
        [-192, -416, -512],
        [-192, -416, 512],
        [-192, -384, -512],
        [-192, -384, 512],
        [-192, -352, -512],
        [-192, -352, 512],
        [-192, -320, -512],
        [-192, -320, 512],
        [-192, -288, -512],
        [-192, -288, 512],
        [-192, -256, -512],
        [-192, -256, 512],
        [-192, -224, -512],
        [-192, -224, 512],
        [-192, -192, -512],
        [-192, -192, 512],
        [-192, -160, -512],
        [-192, -160, 512],
        [-192, -128, -512],
        [-192, -128, 512],
        [-192, -96, -512],
        [-192, -96, 512],
        [-192, -64, -512],
        [-192, -64, 512],
        [-192, -32, -512],
        [-192, -32, 512],
        [-192, 0, -512],
        [-192, 0, 512],
        [-192, 32, -512],
        [-192, 32, 512],
        [-192, 64, -512],
        [-192, 64, 512],
        [-192, 96, -512],
        [-192, 96, 512],
        [-192, 128, -512],
        [-192, 128, 512],
        [-192, 160, -512],
        [-192, 160, 512],
        [-192, 192, -512],
        [-192, 192, 512],
        [-192, 224, -512],
        [-192, 224, 512],
        [-192, 256, -512],
        [-192, 256, 512],
        [-192, 288, -512],
        [-192, 288, 512],
        [-192, 320, -512],
        [-192, 320, 512],
        [-192, 352, -512],
        [-192, 352, 512],
        [-192, 384, -512],
        [-192, 384, 512],
        [-192, 416, -512],
        [-192, 416, 512],
        [-192, 448, -512],
        [-192, 448, 512],
        [-192, 480, -512],
        [-192, 480, 512],
        [-192, 512, -512],
        [-192, 512, 512],
        [-192, -512, -480],
        [-192, 512, -480],
        [-192, -512, -448],
        [-192, 512, -448],
        [-192, -512, -416],
        [-192, 512, -416],
        [-192, -512, -384],
        [-192, 512, -384],
        [-192, -512, -352],
        [-192, 512, -352],
        [-192, -512, -320],
        [-192, 512, -320],
        [-192, -512, -288],
        [-192, 512, -288],
        [-192, -512, -256],
        [-192, 512, -256],
        [-192, -512, -224],
        [-192, 512, -224],
        [-192, -512, -192],
        [-192, 512, -192],
        [-192, -512, -160],
        [-192, 512, -160],
        [-192, -512, -128],
        [-192, 512, -128],
        [-192, -512, -96],
        [-192, 512, -96],
        [-192, -512, -64],
        [-192, 512, -64],
        [-192, -512, -32],
        [-192, 512, -32],
        [-192, -512, 0],
        [-192, 512, 0],
        [-192, -512, 32],
        [-192, 512, 32],
        [-192, -512, 64],
        [-192, 512, 64],
        [-192, -512, 96],
        [-192, 512, 96],
        [-192, -512, 128],
        [-192, 512, 128],
        [-192, -512, 160],
        [-192, 512, 160],
        [-192, -512, 192],
        [-192, 512, 192],
        [-192, -512, 224],
        [-192, 512, 224],
        [-192, -512, 256],
        [-192, 512, 256],
        [-192, -512, 288],
        [-192, 512, 288],
        [-192, -512, 320],
        [-192, 512, 320],
        [-192, -512, 352],
        [-192, 512, 352],
        [-192, -512, 384],
        [-192, 512, 384],
        [-192, -512, 416],
        [-192, 512, 416],
        [-192, -512, 448],
        [-192, 512, 448],
        [-192, -512, 480],
        [-192, 512, 480],
        [-160, -512, -512],
        [-160, -512, 512],
        [-160, -480, -512],
        [-160, -480, 512],
        [-160, -448, -512],
        [-160, -448, 512],
        [-160, -416, -512],
        [-160, -416, 512],
        [-160, -384, -512],
        [-160, -384, 512],
        [-160, -352, -512],
        [-160, -352, 512],
        [-160, -320, -512],
        [-160, -320, 512],
        [-160, -288, -512],
        [-160, -288, 512],
        [-160, -256, -512],
        [-160, -256, 512],
        [-160, -224, -512],
        [-160, -224, 512],
        [-160, -192, -512],
        [-160, -192, 512],
        [-160, -160, -512],
        [-160, -160, 512],
        [-160, -128, -512],
        [-160, -128, 512],
        [-160, -96, -512],
        [-160, -96, 512],
        [-160, -64, -512],
        [-160, -64, 512],
        [-160, -32, -512],
        [-160, -32, 512],
        [-160, 0, -512],
        [-160, 0, 512],
        [-160, 32, -512],
        [-160, 32, 512],
        [-160, 64, -512],
        [-160, 64, 512],
        [-160, 96, -512],
        [-160, 96, 512],
        [-160, 128, -512],
        [-160, 128, 512],
        [-160, 160, -512],
        [-160, 160, 512],
        [-160, 192, -512],
        [-160, 192, 512],
        [-160, 224, -512],
        [-160, 224, 512],
        [-160, 256, -512],
        [-160, 256, 512],
        [-160, 288, -512],
        [-160, 288, 512],
        [-160, 320, -512],
        [-160, 320, 512],
        [-160, 352, -512],
        [-160, 352, 512],
        [-160, 384, -512],
        [-160, 384, 512],
        [-160, 416, -512],
        [-160, 416, 512],
        [-160, 448, -512],
        [-160, 448, 512],
        [-160, 480, -512],
        [-160, 480, 512],
        [-160, 512, -512],
        [-160, 512, 512],
        [-160, -512, -480],
        [-160, 512, -480],
        [-160, -512, -448],
        [-160, 512, -448],
        [-160, -512, -416],
        [-160, 512, -416],
        [-160, -512, -384],
        [-160, 512, -384],
        [-160, -512, -352],
        [-160, 512, -352],
        [-160, -512, -320],
        [-160, 512, -320],
        [-160, -512, -288],
        [-160, 512, -288],
        [-160, -512, -256],
        [-160, 512, -256],
        [-160, -512, -224],
        [-160, 512, -224],
        [-160, -512, -192],
        [-160, 512, -192],
        [-160, -512, -160],
        [-160, 512, -160],
        [-160, -512, -128],
        [-160, 512, -128],
        [-160, -512, -96],
        [-160, 512, -96],
        [-160, -512, -64],
        [-160, 512, -64],
        [-160, -512, -32],
        [-160, 512, -32],
        [-160, -512, 0],
        [-160, 512, 0],
        [-160, -512, 32],
        [-160, 512, 32],
        [-160, -512, 64],
        [-160, 512, 64],
        [-160, -512, 96],
        [-160, 512, 96],
        [-160, -512, 128],
        [-160, 512, 128],
        [-160, -512, 160],
        [-160, 512, 160],
        [-160, -512, 192],
        [-160, 512, 192],
        [-160, -512, 224],
        [-160, 512, 224],
        [-160, -512, 256],
        [-160, 512, 256],
        [-160, -512, 288],
        [-160, 512, 288],
        [-160, -512, 320],
        [-160, 512, 320],
        [-160, -512, 352],
        [-160, 512, 352],
        [-160, -512, 384],
        [-160, 512, 384],
        [-160, -512, 416],
        [-160, 512, 416],
        [-160, -512, 448],
        [-160, 512, 448],
        [-160, -512, 480],
        [-160, 512, 480],
        [-128, -512, -512],
        [-128, -512, 512],
        [-128, -480, -512],
        [-128, -480, 512],
        [-128, -448, -512],
        [-128, -448, 512],
        [-128, -416, -512],
        [-128, -416, 512],
        [-128, -384, -512],
        [-128, -384, 512],
        [-128, -352, -512],
        [-128, -352, 512],
        [-128, -320, -512],
        [-128, -320, 512],
        [-128, -288, -512],
        [-128, -288, 512],
        [-128, -256, -512],
        [-128, -256, 512],
        [-128, -224, -512],
        [-128, -224, 512],
        [-128, -192, -512],
        [-128, -192, 512],
        [-128, -160, -512],
        [-128, -160, 512],
        [-128, -128, -512],
        [-128, -128, 512],
        [-128, -96, -512],
        [-128, -96, 512],
        [-128, -64, -512],
        [-128, -64, 512],
        [-128, -32, -512],
        [-128, -32, 512],
        [-128, 0, -512],
        [-128, 0, 512],
        [-128, 32, -512],
        [-128, 32, 512],
        [-128, 64, -512],
        [-128, 64, 512],
        [-128, 96, -512],
        [-128, 96, 512],
        [-128, 128, -512],
        [-128, 128, 512],
        [-128, 160, -512],
        [-128, 160, 512],
        [-128, 192, -512],
        [-128, 192, 512],
        [-128, 224, -512],
        [-128, 224, 512],
        [-128, 256, -512],
        [-128, 256, 512],
        [-128, 288, -512],
        [-128, 288, 512],
        [-128, 320, -512],
        [-128, 320, 512],
        [-128, 352, -512],
        [-128, 352, 512],
        [-128, 384, -512],
        [-128, 384, 512],
        [-128, 416, -512],
        [-128, 416, 512],
        [-128, 448, -512],
        [-128, 448, 512],
        [-128, 480, -512],
        [-128, 480, 512],
        [-128, 512, -512],
        [-128, 512, 512],
        [-128, -512, -480],
        [-128, 512, -480],
        [-128, -512, -448],
        [-128, 512, -448],
        [-128, -512, -416],
        [-128, 512, -416],
        [-128, -512, -384],
        [-128, 512, -384],
        [-128, -512, -352],
        [-128, 512, -352],
        [-128, -512, -320],
        [-128, 512, -320],
        [-128, -512, -288],
        [-128, 512, -288],
        [-128, -512, -256],
        [-128, 512, -256],
        [-128, -512, -224],
        [-128, 512, -224],
        [-128, -512, -192],
        [-128, 512, -192],
        [-128, -512, -160],
        [-128, 512, -160],
        [-128, -512, -128],
        [-128, 512, -128],
        [-128, -512, -96],
        [-128, 512, -96],
        [-128, -512, -64],
        [-128, 512, -64],
        [-128, -512, -32],
        [-128, 512, -32],
        [-128, -512, 0],
        [-128, 512, 0],
        [-128, -512, 32],
        [-128, 512, 32],
        [-128, -512, 64],
        [-128, 512, 64],
        [-128, -512, 96],
        [-128, 512, 96],
        [-128, -512, 128],
        [-128, 512, 128],
        [-128, -512, 160],
        [-128, 512, 160],
        [-128, -512, 192],
        [-128, 512, 192],
        [-128, -512, 224],
        [-128, 512, 224],
        [-128, -512, 256],
        [-128, 512, 256],
        [-128, -512, 288],
        [-128, 512, 288],
        [-128, -512, 320],
        [-128, 512, 320],
        [-128, -512, 352],
        [-128, 512, 352],
        [-128, -512, 384],
        [-128, 512, 384],
        [-128, -512, 416],
        [-128, 512, 416],
        [-128, -512, 448],
        [-128, 512, 448],
        [-128, -512, 480],
        [-128, 512, 480],
        [-96, -512, -512],
        [-96, -512, 512],
        [-96, -480, -512],
        [-96, -480, 512],
        [-96, -448, -512],
        [-96, -448, 512],
        [-96, -416, -512],
        [-96, -416, 512],
        [-96, -384, -512],
        [-96, -384, 512],
        [-96, -352, -512],
        [-96, -352, 512],
        [-96, -320, -512],
        [-96, -320, 512],
        [-96, -288, -512],
        [-96, -288, 512],
        [-96, -256, -512],
        [-96, -256, 512],
        [-96, -224, -512],
        [-96, -224, 512],
        [-96, -192, -512],
        [-96, -192, 512],
        [-96, -160, -512],
        [-96, -160, 512],
        [-96, -128, -512],
        [-96, -128, 512],
        [-96, -96, -512],
        [-96, -96, 512],
        [-96, -64, -512],
        [-96, -64, 512],
        [-96, -32, -512],
        [-96, -32, 512],
        [-96, 0, -512],
        [-96, 0, 512],
        [-96, 32, -512],
        [-96, 32, 512],
        [-96, 64, -512],
        [-96, 64, 512],
        [-96, 96, -512],
        [-96, 96, 512],
        [-96, 128, -512],
        [-96, 128, 512],
        [-96, 160, -512],
        [-96, 160, 512],
        [-96, 192, -512],
        [-96, 192, 512],
        [-96, 224, -512],
        [-96, 224, 512],
        [-96, 256, -512],
        [-96, 256, 512],
        [-96, 288, -512],
        [-96, 288, 512],
        [-96, 320, -512],
        [-96, 320, 512],
        [-96, 352, -512],
        [-96, 352, 512],
        [-96, 384, -512],
        [-96, 384, 512],
        [-96, 416, -512],
        [-96, 416, 512],
        [-96, 448, -512],
        [-96, 448, 512],
        [-96, 480, -512],
        [-96, 480, 512],
        [-96, 512, -512],
        [-96, 512, 512],
        [-96, -512, -480],
        [-96, 512, -480],
        [-96, -512, -448],
        [-96, 512, -448],
        [-96, -512, -416],
        [-96, 512, -416],
        [-96, -512, -384],
        [-96, 512, -384],
        [-96, -512, -352],
        [-96, 512, -352],
        [-96, -512, -320],
        [-96, 512, -320],
        [-96, -512, -288],
        [-96, 512, -288],
        [-96, -512, -256],
        [-96, 512, -256],
        [-96, -512, -224],
        [-96, 512, -224],
        [-96, -512, -192],
        [-96, 512, -192],
        [-96, -512, -160],
        [-96, 512, -160],
        [-96, -512, -128],
        [-96, 512, -128],
        [-96, -512, -96],
        [-96, 512, -96],
        [-96, -512, -64],
        [-96, 512, -64],
        [-96, -512, -32],
        [-96, 512, -32],
        [-96, -512, 0],
        [-96, 512, 0],
        [-96, -512, 32],
        [-96, 512, 32],
        [-96, -512, 64],
        [-96, 512, 64],
        [-96, -512, 96],
        [-96, 512, 96],
        [-96, -512, 128],
        [-96, 512, 128],
        [-96, -512, 160],
        [-96, 512, 160],
        [-96, -512, 192],
        [-96, 512, 192],
        [-96, -512, 224],
        [-96, 512, 224],
        [-96, -512, 256],
        [-96, 512, 256],
        [-96, -512, 288],
        [-96, 512, 288],
        [-96, -512, 320],
        [-96, 512, 320],
        [-96, -512, 352],
        [-96, 512, 352],
        [-96, -512, 384],
        [-96, 512, 384],
        [-96, -512, 416],
        [-96, 512, 416],
        [-96, -512, 448],
        [-96, 512, 448],
        [-96, -512, 480],
        [-96, 512, 480],
        [-64, -512, -512],
        [-64, -512, 512],
        [-64, -480, -512],
        [-64, -480, 512],
        [-64, -448, -512],
        [-64, -448, 512],
        [-64, -416, -512],
        [-64, -416, 512],
        [-64, -384, -512],
        [-64, -384, 512],
        [-64, -352, -512],
        [-64, -352, 512],
        [-64, -320, -512],
        [-64, -320, 512],
        [-64, -288, -512],
        [-64, -288, 512],
        [-64, -256, -512],
        [-64, -256, 512],
        [-64, -224, -512],
        [-64, -224, 512],
        [-64, -192, -512],
        [-64, -192, 512],
        [-64, -160, -512],
        [-64, -160, 512],
        [-64, -128, -512],
        [-64, -128, 512],
        [-64, -96, -512],
        [-64, -96, 512],
        [-64, -64, -512],
        [-64, -64, 512],
        [-64, -32, -512],
        [-64, -32, 512],
        [-64, 0, -512],
        [-64, 0, 512],
        [-64, 32, -512],
        [-64, 32, 512],
        [-64, 64, -512],
        [-64, 64, 512],
        [-64, 96, -512],
        [-64, 96, 512],
        [-64, 128, -512],
        [-64, 128, 512],
        [-64, 160, -512],
        [-64, 160, 512],
        [-64, 192, -512],
        [-64, 192, 512],
        [-64, 224, -512],
        [-64, 224, 512],
        [-64, 256, -512],
        [-64, 256, 512],
        [-64, 288, -512],
        [-64, 288, 512],
        [-64, 320, -512],
        [-64, 320, 512],
        [-64, 352, -512],
        [-64, 352, 512],
        [-64, 384, -512],
        [-64, 384, 512],
        [-64, 416, -512],
        [-64, 416, 512],
        [-64, 448, -512],
        [-64, 448, 512],
        [-64, 480, -512],
        [-64, 480, 512],
        [-64, 512, -512],
        [-64, 512, 512],
        [-64, -512, -480],
        [-64, 512, -480],
        [-64, -512, -448],
        [-64, 512, -448],
        [-64, -512, -416],
        [-64, 512, -416],
        [-64, -512, -384],
        [-64, 512, -384],
        [-64, -512, -352],
        [-64, 512, -352],
        [-64, -512, -320],
        [-64, 512, -320],
        [-64, -512, -288],
        [-64, 512, -288],
        [-64, -512, -256],
        [-64, 512, -256],
        [-64, -512, -224],
        [-64, 512, -224],
        [-64, -512, -192],
        [-64, 512, -192],
        [-64, -512, -160],
        [-64, 512, -160],
        [-64, -512, -128],
        [-64, 512, -128],
        [-64, -512, -96],
        [-64, 512, -96],
        [-64, -512, -64],
        [-64, 512, -64],
        [-64, -512, -32],
        [-64, 512, -32],
        [-64, -512, 0],
        [-64, 512, 0],
        [-64, -512, 32],
        [-64, 512, 32],
        [-64, -512, 64],
        [-64, 512, 64],
        [-64, -512, 96],
        [-64, 512, 96],
        [-64, -512, 128],
        [-64, 512, 128],
        [-64, -512, 160],
        [-64, 512, 160],
        [-64, -512, 192],
        [-64, 512, 192],
        [-64, -512, 224],
        [-64, 512, 224],
        [-64, -512, 256],
        [-64, 512, 256],
        [-64, -512, 288],
        [-64, 512, 288],
        [-64, -512, 320],
        [-64, 512, 320],
        [-64, -512, 352],
        [-64, 512, 352],
        [-64, -512, 384],
        [-64, 512, 384],
        [-64, -512, 416],
        [-64, 512, 416],
        [-64, -512, 448],
        [-64, 512, 448],
        [-64, -512, 480],
        [-64, 512, 480],
        [-32, -512, -512],
        [-32, -512, 512],
        [-32, -480, -512],
        [-32, -480, 512],
        [-32, -448, -512],
        [-32, -448, 512],
        [-32, -416, -512],
        [-32, -416, 512],
        [-32, -384, -512],
        [-32, -384, 512],
        [-32, -352, -512],
        [-32, -352, 512],
        [-32, -320, -512],
        [-32, -320, 512],
        [-32, -288, -512],
        [-32, -288, 512],
        [-32, -256, -512],
        [-32, -256, 512],
        [-32, -224, -512],
        [-32, -224, 512],
        [-32, -192, -512],
        [-32, -192, 512],
        [-32, -160, -512],
        [-32, -160, 512],
        [-32, -128, -512],
        [-32, -128, 512],
        [-32, -96, -512],
        [-32, -96, 512],
        [-32, -64, -512],
        [-32, -64, 512],
        [-32, -32, -512],
        [-32, -32, 512],
        [-32, 0, -512],
        [-32, 0, 512],
        [-32, 32, -512],
        [-32, 32, 512],
        [-32, 64, -512],
        [-32, 64, 512],
        [-32, 96, -512],
        [-32, 96, 512],
        [-32, 128, -512],
        [-32, 128, 512],
        [-32, 160, -512],
        [-32, 160, 512],
        [-32, 192, -512],
        [-32, 192, 512],
        [-32, 224, -512],
        [-32, 224, 512],
        [-32, 256, -512],
        [-32, 256, 512],
        [-32, 288, -512],
        [-32, 288, 512],
        [-32, 320, -512],
        [-32, 320, 512],
        [-32, 352, -512],
        [-32, 352, 512],
        [-32, 384, -512],
        [-32, 384, 512],
        [-32, 416, -512],
        [-32, 416, 512],
        [-32, 448, -512],
        [-32, 448, 512],
        [-32, 480, -512],
        [-32, 480, 512],
        [-32, 512, -512],
        [-32, 512, 512],
        [-32, -512, -480],
        [-32, 512, -480],
        [-32, -512, -448],
        [-32, 512, -448],
        [-32, -512, -416],
        [-32, 512, -416],
        [-32, -512, -384],
        [-32, 512, -384],
        [-32, -512, -352],
        [-32, 512, -352],
        [-32, -512, -320],
        [-32, 512, -320],
        [-32, -512, -288],
        [-32, 512, -288],
        [-32, -512, -256],
        [-32, 512, -256],
        [-32, -512, -224],
        [-32, 512, -224],
        [-32, -512, -192],
        [-32, 512, -192],
        [-32, -512, -160],
        [-32, 512, -160],
        [-32, -512, -128],
        [-32, 512, -128],
        [-32, -512, -96],
        [-32, 512, -96],
        [-32, -512, -64],
        [-32, 512, -64],
        [-32, -512, -32],
        [-32, 512, -32],
        [-32, -512, 0],
        [-32, 512, 0],
        [-32, -512, 32],
        [-32, 512, 32],
        [-32, -512, 64],
        [-32, 512, 64],
        [-32, -512, 96],
        [-32, 512, 96],
        [-32, -512, 128],
        [-32, 512, 128],
        [-32, -512, 160],
        [-32, 512, 160],
        [-32, -512, 192],
        [-32, 512, 192],
        [-32, -512, 224],
        [-32, 512, 224],
        [-32, -512, 256],
        [-32, 512, 256],
        [-32, -512, 288],
        [-32, 512, 288],
        [-32, -512, 320],
        [-32, 512, 320],
        [-32, -512, 352],
        [-32, 512, 352],
        [-32, -512, 384],
        [-32, 512, 384],
        [-32, -512, 416],
        [-32, 512, 416],
        [-32, -512, 448],
        [-32, 512, 448],
        [-32, -512, 480],
        [-32, 512, 480],
        [0, -512, -512],
        [0, -512, 512],
        [0, -480, -512],
        [0, -480, 512],
        [0, -448, -512],
        [0, -448, 512],
        [0, -416, -512],
        [0, -416, 512],
        [0, -384, -512],
        [0, -384, 512],
        [0, -352, -512],
        [0, -352, 512],
        [0, -320, -512],
        [0, -320, 512],
        [0, -288, -512],
        [0, -288, 512],
        [0, -256, -512],
        [0, -256, 512],
        [0, -224, -512],
        [0, -224, 512],
        [0, -192, -512],
        [0, -192, 512],
        [0, -160, -512],
        [0, -160, 512],
        [0, -128, -512],
        [0, -128, 512],
        [0, -96, -512],
        [0, -96, 512],
        [0, -64, -512],
        [0, -64, 512],
        [0, -32, -512],
        [0, -32, 512],
        [0, 0, -512],
        [0, 0, 512],
        [0, 32, -512],
        [0, 32, 512],
        [0, 64, -512],
        [0, 64, 512],
        [0, 96, -512],
        [0, 96, 512],
        [0, 128, -512],
        [0, 128, 512],
        [0, 160, -512],
        [0, 160, 512],
        [0, 192, -512],
        [0, 192, 512],
        [0, 224, -512],
        [0, 224, 512],
        [0, 256, -512],
        [0, 256, 512],
        [0, 288, -512],
        [0, 288, 512],
        [0, 320, -512],
        [0, 320, 512],
        [0, 352, -512],
        [0, 352, 512],
        [0, 384, -512],
        [0, 384, 512],
        [0, 416, -512],
        [0, 416, 512],
        [0, 448, -512],
        [0, 448, 512],
        [0, 480, -512],
        [0, 480, 512],
        [0, 512, -512],
        [0, 512, 512],
        [0, -512, -480],
        [0, 512, -480],
        [0, -512, -448],
        [0, 512, -448],
        [0, -512, -416],
        [0, 512, -416],
        [0, -512, -384],
        [0, 512, -384],
        [0, -512, -352],
        [0, 512, -352],
        [0, -512, -320],
        [0, 512, -320],
        [0, -512, -288],
        [0, 512, -288],
        [0, -512, -256],
        [0, 512, -256],
        [0, -512, -224],
        [0, 512, -224],
        [0, -512, -192],
        [0, 512, -192],
        [0, -512, -160],
        [0, 512, -160],
        [0, -512, -128],
        [0, 512, -128],
        [0, -512, -96],
        [0, 512, -96],
        [0, -512, -64],
        [0, 512, -64],
        [0, -512, -32],
        [0, 512, -32],
        [0, -512, 0],
        [0, 512, 0],
        [0, -512, 32],
        [0, 512, 32],
        [0, -512, 64],
        [0, 512, 64],
        [0, -512, 96],
        [0, 512, 96],
        [0, -512, 128],
        [0, 512, 128],
        [0, -512, 160],
        [0, 512, 160],
        [0, -512, 192],
        [0, 512, 192],
        [0, -512, 224],
        [0, 512, 224],
        [0, -512, 256],
        [0, 512, 256],
        [0, -512, 288],
        [0, 512, 288],
        [0, -512, 320],
        [0, 512, 320],
        [0, -512, 352],
        [0, 512, 352],
        [0, -512, 384],
        [0, 512, 384],
        [0, -512, 416],
        [0, 512, 416],
        [0, -512, 448],
        [0, 512, 448],
        [0, -512, 480],
        [0, 512, 480],
        [32, -512, -512],
        [32, -512, 512],
        [32, -480, -512],
        [32, -480, 512],
        [32, -448, -512],
        [32, -448, 512],
        [32, -416, -512],
        [32, -416, 512],
        [32, -384, -512],
        [32, -384, 512],
        [32, -352, -512],
        [32, -352, 512],
        [32, -320, -512],
        [32, -320, 512],
        [32, -288, -512],
        [32, -288, 512],
        [32, -256, -512],
        [32, -256, 512],
        [32, -224, -512],
        [32, -224, 512],
        [32, -192, -512],
        [32, -192, 512],
        [32, -160, -512],
        [32, -160, 512],
        [32, -128, -512],
        [32, -128, 512],
        [32, -96, -512],
        [32, -96, 512],
        [32, -64, -512],
        [32, -64, 512],
        [32, -32, -512],
        [32, -32, 512],
        [32, 0, -512],
        [32, 0, 512],
        [32, 32, -512],
        [32, 32, 512],
        [32, 64, -512],
        [32, 64, 512],
        [32, 96, -512],
        [32, 96, 512],
        [32, 128, -512],
        [32, 128, 512],
        [32, 160, -512],
        [32, 160, 512],
        [32, 192, -512],
        [32, 192, 512],
        [32, 224, -512],
        [32, 224, 512],
        [32, 256, -512],
        [32, 256, 512],
        [32, 288, -512],
        [32, 288, 512],
        [32, 320, -512],
        [32, 320, 512],
        [32, 352, -512],
        [32, 352, 512],
        [32, 384, -512],
        [32, 384, 512],
        [32, 416, -512],
        [32, 416, 512],
        [32, 448, -512],
        [32, 448, 512],
        [32, 480, -512],
        [32, 480, 512],
        [32, 512, -512],
        [32, 512, 512],
        [32, -512, -480],
        [32, 512, -480],
        [32, -512, -448],
        [32, 512, -448],
        [32, -512, -416],
        [32, 512, -416],
        [32, -512, -384],
        [32, 512, -384],
        [32, -512, -352],
        [32, 512, -352],
        [32, -512, -320],
        [32, 512, -320],
        [32, -512, -288],
        [32, 512, -288],
        [32, -512, -256],
        [32, 512, -256],
        [32, -512, -224],
        [32, 512, -224],
        [32, -512, -192],
        [32, 512, -192],
        [32, -512, -160],
        [32, 512, -160],
        [32, -512, -128],
        [32, 512, -128],
        [32, -512, -96],
        [32, 512, -96],
        [32, -512, -64],
        [32, 512, -64],
        [32, -512, -32],
        [32, 512, -32],
        [32, -512, 0],
        [32, 512, 0],
        [32, -512, 32],
        [32, 512, 32],
        [32, -512, 64],
        [32, 512, 64],
        [32, -512, 96],
        [32, 512, 96],
        [32, -512, 128],
        [32, 512, 128],
        [32, -512, 160],
        [32, 512, 160],
        [32, -512, 192],
        [32, 512, 192],
        [32, -512, 224],
        [32, 512, 224],
        [32, -512, 256],
        [32, 512, 256],
        [32, -512, 288],
        [32, 512, 288],
        [32, -512, 320],
        [32, 512, 320],
        [32, -512, 352],
        [32, 512, 352],
        [32, -512, 384],
        [32, 512, 384],
        [32, -512, 416],
        [32, 512, 416],
        [32, -512, 448],
        [32, 512, 448],
        [32, -512, 480],
        [32, 512, 480],
        [64, -512, -512],
        [64, -512, 512],
        [64, -480, -512],
        [64, -480, 512],
        [64, -448, -512],
        [64, -448, 512],
        [64, -416, -512],
        [64, -416, 512],
        [64, -384, -512],
        [64, -384, 512],
        [64, -352, -512],
        [64, -352, 512],
        [64, -320, -512],
        [64, -320, 512],
        [64, -288, -512],
        [64, -288, 512],
        [64, -256, -512],
        [64, -256, 512],
        [64, -224, -512],
        [64, -224, 512],
        [64, -192, -512],
        [64, -192, 512],
        [64, -160, -512],
        [64, -160, 512],
        [64, -128, -512],
        [64, -128, 512],
        [64, -96, -512],
        [64, -96, 512],
        [64, -64, -512],
        [64, -64, 512],
        [64, -32, -512],
        [64, -32, 512],
        [64, 0, -512],
        [64, 0, 512],
        [64, 32, -512],
        [64, 32, 512],
        [64, 64, -512],
        [64, 64, 512],
        [64, 96, -512],
        [64, 96, 512],
        [64, 128, -512],
        [64, 128, 512],
        [64, 160, -512],
        [64, 160, 512],
        [64, 192, -512],
        [64, 192, 512],
        [64, 224, -512],
        [64, 224, 512],
        [64, 256, -512],
        [64, 256, 512],
        [64, 288, -512],
        [64, 288, 512],
        [64, 320, -512],
        [64, 320, 512],
        [64, 352, -512],
        [64, 352, 512],
        [64, 384, -512],
        [64, 384, 512],
        [64, 416, -512],
        [64, 416, 512],
        [64, 448, -512],
        [64, 448, 512],
        [64, 480, -512],
        [64, 480, 512],
        [64, 512, -512],
        [64, 512, 512],
        [64, -512, -480],
        [64, 512, -480],
        [64, -512, -448],
        [64, 512, -448],
        [64, -512, -416],
        [64, 512, -416],
        [64, -512, -384],
        [64, 512, -384],
        [64, -512, -352],
        [64, 512, -352],
        [64, -512, -320],
        [64, 512, -320],
        [64, -512, -288],
        [64, 512, -288],
        [64, -512, -256],
        [64, 512, -256],
        [64, -512, -224],
        [64, 512, -224],
        [64, -512, -192],
        [64, 512, -192],
        [64, -512, -160],
        [64, 512, -160],
        [64, -512, -128],
        [64, 512, -128],
        [64, -512, -96],
        [64, 512, -96],
        [64, -512, -64],
        [64, 512, -64],
        [64, -512, -32],
        [64, 512, -32],
        [64, -512, 0],
        [64, 512, 0],
        [64, -512, 32],
        [64, 512, 32],
        [64, -512, 64],
        [64, 512, 64],
        [64, -512, 96],
        [64, 512, 96],
        [64, -512, 128],
        [64, 512, 128],
        [64, -512, 160],
        [64, 512, 160],
        [64, -512, 192],
        [64, 512, 192],
        [64, -512, 224],
        [64, 512, 224],
        [64, -512, 256],
        [64, 512, 256],
        [64, -512, 288],
        [64, 512, 288],
        [64, -512, 320],
        [64, 512, 320],
        [64, -512, 352],
        [64, 512, 352],
        [64, -512, 384],
        [64, 512, 384],
        [64, -512, 416],
        [64, 512, 416],
        [64, -512, 448],
        [64, 512, 448],
        [64, -512, 480],
        [64, 512, 480],
        [96, -512, -512],
        [96, -512, 512],
        [96, -480, -512],
        [96, -480, 512],
        [96, -448, -512],
        [96, -448, 512],
        [96, -416, -512],
        [96, -416, 512],
        [96, -384, -512],
        [96, -384, 512],
        [96, -352, -512],
        [96, -352, 512],
        [96, -320, -512],
        [96, -320, 512],
        [96, -288, -512],
        [96, -288, 512],
        [96, -256, -512],
        [96, -256, 512],
        [96, -224, -512],
        [96, -224, 512],
        [96, -192, -512],
        [96, -192, 512],
        [96, -160, -512],
        [96, -160, 512],
        [96, -128, -512],
        [96, -128, 512],
        [96, -96, -512],
        [96, -96, 512],
        [96, -64, -512],
        [96, -64, 512],
        [96, -32, -512],
        [96, -32, 512],
        [96, 0, -512],
        [96, 0, 512],
        [96, 32, -512],
        [96, 32, 512],
        [96, 64, -512],
        [96, 64, 512],
        [96, 96, -512],
        [96, 96, 512],
        [96, 128, -512],
        [96, 128, 512],
        [96, 160, -512],
        [96, 160, 512],
        [96, 192, -512],
        [96, 192, 512],
        [96, 224, -512],
        [96, 224, 512],
        [96, 256, -512],
        [96, 256, 512],
        [96, 288, -512],
        [96, 288, 512],
        [96, 320, -512],
        [96, 320, 512],
        [96, 352, -512],
        [96, 352, 512],
        [96, 384, -512],
        [96, 384, 512],
        [96, 416, -512],
        [96, 416, 512],
        [96, 448, -512],
        [96, 448, 512],
        [96, 480, -512],
        [96, 480, 512],
        [96, 512, -512],
        [96, 512, 512],
        [96, -512, -480],
        [96, 512, -480],
        [96, -512, -448],
        [96, 512, -448],
        [96, -512, -416],
        [96, 512, -416],
        [96, -512, -384],
        [96, 512, -384],
        [96, -512, -352],
        [96, 512, -352],
        [96, -512, -320],
        [96, 512, -320],
        [96, -512, -288],
        [96, 512, -288],
        [96, -512, -256],
        [96, 512, -256],
        [96, -512, -224],
        [96, 512, -224],
        [96, -512, -192],
        [96, 512, -192],
        [96, -512, -160],
        [96, 512, -160],
        [96, -512, -128],
        [96, 512, -128],
        [96, -512, -96],
        [96, 512, -96],
        [96, -512, -64],
        [96, 512, -64],
        [96, -512, -32],
        [96, 512, -32],
        [96, -512, 0],
        [96, 512, 0],
        [96, -512, 32],
        [96, 512, 32],
        [96, -512, 64],
        [96, 512, 64],
        [96, -512, 96],
        [96, 512, 96],
        [96, -512, 128],
        [96, 512, 128],
        [96, -512, 160],
        [96, 512, 160],
        [96, -512, 192],
        [96, 512, 192],
        [96, -512, 224],
        [96, 512, 224],
        [96, -512, 256],
        [96, 512, 256],
        [96, -512, 288],
        [96, 512, 288],
        [96, -512, 320],
        [96, 512, 320],
        [96, -512, 352],
        [96, 512, 352],
        [96, -512, 384],
        [96, 512, 384],
        [96, -512, 416],
        [96, 512, 416],
        [96, -512, 448],
        [96, 512, 448],
        [96, -512, 480],
        [96, 512, 480],
        [128, -512, -512],
        [128, -512, 512],
        [128, -480, -512],
        [128, -480, 512],
        [128, -448, -512],
        [128, -448, 512],
        [128, -416, -512],
        [128, -416, 512],
        [128, -384, -512],
        [128, -384, 512],
        [128, -352, -512],
        [128, -352, 512],
        [128, -320, -512],
        [128, -320, 512],
        [128, -288, -512],
        [128, -288, 512],
        [128, -256, -512],
        [128, -256, 512],
        [128, -224, -512],
        [128, -224, 512],
        [128, -192, -512],
        [128, -192, 512],
        [128, -160, -512],
        [128, -160, 512],
        [128, -128, -512],
        [128, -128, 512],
        [128, -96, -512],
        [128, -96, 512],
        [128, -64, -512],
        [128, -64, 512],
        [128, -32, -512],
        [128, -32, 512],
        [128, 0, -512],
        [128, 0, 512],
        [128, 32, -512],
        [128, 32, 512],
        [128, 64, -512],
        [128, 64, 512],
        [128, 96, -512],
        [128, 96, 512],
        [128, 128, -512],
        [128, 128, 512],
        [128, 160, -512],
        [128, 160, 512],
        [128, 192, -512],
        [128, 192, 512],
        [128, 224, -512],
        [128, 224, 512],
        [128, 256, -512],
        [128, 256, 512],
        [128, 288, -512],
        [128, 288, 512],
        [128, 320, -512],
        [128, 320, 512],
        [128, 352, -512],
        [128, 352, 512],
        [128, 384, -512],
        [128, 384, 512],
        [128, 416, -512],
        [128, 416, 512],
        [128, 448, -512],
        [128, 448, 512],
        [128, 480, -512],
        [128, 480, 512],
        [128, 512, -512],
        [128, 512, 512],
        [128, -512, -480],
        [128, 512, -480],
        [128, -512, -448],
        [128, 512, -448],
        [128, -512, -416],
        [128, 512, -416],
        [128, -512, -384],
        [128, 512, -384],
        [128, -512, -352],
        [128, 512, -352],
        [128, -512, -320],
        [128, 512, -320],
        [128, -512, -288],
        [128, 512, -288],
        [128, -512, -256],
        [128, 512, -256],
        [128, -512, -224],
        [128, 512, -224],
        [128, -512, -192],
        [128, 512, -192],
        [128, -512, -160],
        [128, 512, -160],
        [128, -512, -128],
        [128, 512, -128],
        [128, -512, -96],
        [128, 512, -96],
        [128, -512, -64],
        [128, 512, -64],
        [128, -512, -32],
        [128, 512, -32],
        [128, -512, 0],
        [128, 512, 0],
        [128, -512, 32],
        [128, 512, 32],
        [128, -512, 64],
        [128, 512, 64],
        [128, -512, 96],
        [128, 512, 96],
        [128, -512, 128],
        [128, 512, 128],
        [128, -512, 160],
        [128, 512, 160],
        [128, -512, 192],
        [128, 512, 192],
        [128, -512, 224],
        [128, 512, 224],
        [128, -512, 256],
        [128, 512, 256],
        [128, -512, 288],
        [128, 512, 288],
        [128, -512, 320],
        [128, 512, 320],
        [128, -512, 352],
        [128, 512, 352],
        [128, -512, 384],
        [128, 512, 384],
        [128, -512, 416],
        [128, 512, 416],
        [128, -512, 448],
        [128, 512, 448],
        [128, -512, 480],
        [128, 512, 480],
        [160, -512, -512],
        [160, -512, 512],
        [160, -480, -512],
        [160, -480, 512],
        [160, -448, -512],
        [160, -448, 512],
        [160, -416, -512],
        [160, -416, 512],
        [160, -384, -512],
        [160, -384, 512],
        [160, -352, -512],
        [160, -352, 512],
        [160, -320, -512],
        [160, -320, 512],
        [160, -288, -512],
        [160, -288, 512],
        [160, -256, -512],
        [160, -256, 512],
        [160, -224, -512],
        [160, -224, 512],
        [160, -192, -512],
        [160, -192, 512],
        [160, -160, -512],
        [160, -160, 512],
        [160, -128, -512],
        [160, -128, 512],
        [160, -96, -512],
        [160, -96, 512],
        [160, -64, -512],
        [160, -64, 512],
        [160, -32, -512],
        [160, -32, 512],
        [160, 0, -512],
        [160, 0, 512],
        [160, 32, -512],
        [160, 32, 512],
        [160, 64, -512],
        [160, 64, 512],
        [160, 96, -512],
        [160, 96, 512],
        [160, 128, -512],
        [160, 128, 512],
        [160, 160, -512],
        [160, 160, 512],
        [160, 192, -512],
        [160, 192, 512],
        [160, 224, -512],
        [160, 224, 512],
        [160, 256, -512],
        [160, 256, 512],
        [160, 288, -512],
        [160, 288, 512],
        [160, 320, -512],
        [160, 320, 512],
        [160, 352, -512],
        [160, 352, 512],
        [160, 384, -512],
        [160, 384, 512],
        [160, 416, -512],
        [160, 416, 512],
        [160, 448, -512],
        [160, 448, 512],
        [160, 480, -512],
        [160, 480, 512],
        [160, 512, -512],
        [160, 512, 512],
        [160, -512, -480],
        [160, 512, -480],
        [160, -512, -448],
        [160, 512, -448],
        [160, -512, -416],
        [160, 512, -416],
        [160, -512, -384],
        [160, 512, -384],
        [160, -512, -352],
        [160, 512, -352],
        [160, -512, -320],
        [160, 512, -320],
        [160, -512, -288],
        [160, 512, -288],
        [160, -512, -256],
        [160, 512, -256],
        [160, -512, -224],
        [160, 512, -224],
        [160, -512, -192],
        [160, 512, -192],
        [160, -512, -160],
        [160, 512, -160],
        [160, -512, -128],
        [160, 512, -128],
        [160, -512, -96],
        [160, 512, -96],
        [160, -512, -64],
        [160, 512, -64],
        [160, -512, -32],
        [160, 512, -32],
        [160, -512, 0],
        [160, 512, 0],
        [160, -512, 32],
        [160, 512, 32],
        [160, -512, 64],
        [160, 512, 64],
        [160, -512, 96],
        [160, 512, 96],
        [160, -512, 128],
        [160, 512, 128],
        [160, -512, 160],
        [160, 512, 160],
        [160, -512, 192],
        [160, 512, 192],
        [160, -512, 224],
        [160, 512, 224],
        [160, -512, 256],
        [160, 512, 256],
        [160, -512, 288],
        [160, 512, 288],
        [160, -512, 320],
        [160, 512, 320],
        [160, -512, 352],
        [160, 512, 352],
        [160, -512, 384],
        [160, 512, 384],
        [160, -512, 416],
        [160, 512, 416],
        [160, -512, 448],
        [160, 512, 448],
        [160, -512, 480],
        [160, 512, 480],
        [192, -512, -512],
        [192, -512, 512],
        [192, -480, -512],
        [192, -480, 512],
        [192, -448, -512],
        [192, -448, 512],
        [192, -416, -512],
        [192, -416, 512],
        [192, -384, -512],
        [192, -384, 512],
        [192, -352, -512],
        [192, -352, 512],
        [192, -320, -512],
        [192, -320, 512],
        [192, -288, -512],
        [192, -288, 512],
        [192, -256, -512],
        [192, -256, 512],
        [192, -224, -512],
        [192, -224, 512],
        [192, -192, -512],
        [192, -192, 512],
        [192, -160, -512],
        [192, -160, 512],
        [192, -128, -512],
        [192, -128, 512],
        [192, -96, -512],
        [192, -96, 512],
        [192, -64, -512],
        [192, -64, 512],
        [192, -32, -512],
        [192, -32, 512],
        [192, 0, -512],
        [192, 0, 512],
        [192, 32, -512],
        [192, 32, 512],
        [192, 64, -512],
        [192, 64, 512],
        [192, 96, -512],
        [192, 96, 512],
        [192, 128, -512],
        [192, 128, 512],
        [192, 160, -512],
        [192, 160, 512],
        [192, 192, -512],
        [192, 192, 512],
        [192, 224, -512],
        [192, 224, 512],
        [192, 256, -512],
        [192, 256, 512],
        [192, 288, -512],
        [192, 288, 512],
        [192, 320, -512],
        [192, 320, 512],
        [192, 352, -512],
        [192, 352, 512],
        [192, 384, -512],
        [192, 384, 512],
        [192, 416, -512],
        [192, 416, 512],
        [192, 448, -512],
        [192, 448, 512],
        [192, 480, -512],
        [192, 480, 512],
        [192, 512, -512],
        [192, 512, 512],
        [192, -512, -480],
        [192, 512, -480],
        [192, -512, -448],
        [192, 512, -448],
        [192, -512, -416],
        [192, 512, -416],
        [192, -512, -384],
        [192, 512, -384],
        [192, -512, -352],
        [192, 512, -352],
        [192, -512, -320],
        [192, 512, -320],
        [192, -512, -288],
        [192, 512, -288],
        [192, -512, -256],
        [192, 512, -256],
        [192, -512, -224],
        [192, 512, -224],
        [192, -512, -192],
        [192, 512, -192],
        [192, -512, -160],
        [192, 512, -160],
        [192, -512, -128],
        [192, 512, -128],
        [192, -512, -96],
        [192, 512, -96],
        [192, -512, -64],
        [192, 512, -64],
        [192, -512, -32],
        [192, 512, -32],
        [192, -512, 0],
        [192, 512, 0],
        [192, -512, 32],
        [192, 512, 32],
        [192, -512, 64],
        [192, 512, 64],
        [192, -512, 96],
        [192, 512, 96],
        [192, -512, 128],
        [192, 512, 128],
        [192, -512, 160],
        [192, 512, 160],
        [192, -512, 192],
        [192, 512, 192],
        [192, -512, 224],
        [192, 512, 224],
        [192, -512, 256],
        [192, 512, 256],
        [192, -512, 288],
        [192, 512, 288],
        [192, -512, 320],
        [192, 512, 320],
        [192, -512, 352],
        [192, 512, 352],
        [192, -512, 384],
        [192, 512, 384],
        [192, -512, 416],
        [192, 512, 416],
        [192, -512, 448],
        [192, 512, 448],
        [192, -512, 480],
        [192, 512, 480],
        [224, -512, -512],
        [224, -512, 512],
        [224, -480, -512],
        [224, -480, 512],
        [224, -448, -512],
        [224, -448, 512],
        [224, -416, -512],
        [224, -416, 512],
        [224, -384, -512],
        [224, -384, 512],
        [224, -352, -512],
        [224, -352, 512],
        [224, -320, -512],
        [224, -320, 512],
        [224, -288, -512],
        [224, -288, 512],
        [224, -256, -512],
        [224, -256, 512],
        [224, -224, -512],
        [224, -224, 512],
        [224, -192, -512],
        [224, -192, 512],
        [224, -160, -512],
        [224, -160, 512],
        [224, -128, -512],
        [224, -128, 512],
        [224, -96, -512],
        [224, -96, 512],
        [224, -64, -512],
        [224, -64, 512],
        [224, -32, -512],
        [224, -32, 512],
        [224, 0, -512],
        [224, 0, 512],
        [224, 32, -512],
        [224, 32, 512],
        [224, 64, -512],
        [224, 64, 512],
        [224, 96, -512],
        [224, 96, 512],
        [224, 128, -512],
        [224, 128, 512],
        [224, 160, -512],
        [224, 160, 512],
        [224, 192, -512],
        [224, 192, 512],
        [224, 224, -512],
        [224, 224, 512],
        [224, 256, -512],
        [224, 256, 512],
        [224, 288, -512],
        [224, 288, 512],
        [224, 320, -512],
        [224, 320, 512],
        [224, 352, -512],
        [224, 352, 512],
        [224, 384, -512],
        [224, 384, 512],
        [224, 416, -512],
        [224, 416, 512],
        [224, 448, -512],
        [224, 448, 512],
        [224, 480, -512],
        [224, 480, 512],
        [224, 512, -512],
        [224, 512, 512],
        [224, -512, -480],
        [224, 512, -480],
        [224, -512, -448],
        [224, 512, -448],
        [224, -512, -416],
        [224, 512, -416],
        [224, -512, -384],
        [224, 512, -384],
        [224, -512, -352],
        [224, 512, -352],
        [224, -512, -320],
        [224, 512, -320],
        [224, -512, -288],
        [224, 512, -288],
        [224, -512, -256],
        [224, 512, -256],
        [224, -512, -224],
        [224, 512, -224],
        [224, -512, -192],
        [224, 512, -192],
        [224, -512, -160],
        [224, 512, -160],
        [224, -512, -128],
        [224, 512, -128],
        [224, -512, -96],
        [224, 512, -96],
        [224, -512, -64],
        [224, 512, -64],
        [224, -512, -32],
        [224, 512, -32],
        [224, -512, 0],
        [224, 512, 0],
        [224, -512, 32],
        [224, 512, 32],
        [224, -512, 64],
        [224, 512, 64],
        [224, -512, 96],
        [224, 512, 96],
        [224, -512, 128],
        [224, 512, 128],
        [224, -512, 160],
        [224, 512, 160],
        [224, -512, 192],
        [224, 512, 192],
        [224, -512, 224],
        [224, 512, 224],
        [224, -512, 256],
        [224, 512, 256],
        [224, -512, 288],
        [224, 512, 288],
        [224, -512, 320],
        [224, 512, 320],
        [224, -512, 352],
        [224, 512, 352],
        [224, -512, 384],
        [224, 512, 384],
        [224, -512, 416],
        [224, 512, 416],
        [224, -512, 448],
        [224, 512, 448],
        [224, -512, 480],
        [224, 512, 480],
        [256, -512, -512],
        [256, -512, 512],
        [256, -480, -512],
        [256, -480, 512],
        [256, -448, -512],
        [256, -448, 512],
        [256, -416, -512],
        [256, -416, 512],
        [256, -384, -512],
        [256, -384, 512],
        [256, -352, -512],
        [256, -352, 512],
        [256, -320, -512],
        [256, -320, 512],
        [256, -288, -512],
        [256, -288, 512],
        [256, -256, -512],
        [256, -256, 512],
        [256, -224, -512],
        [256, -224, 512],
        [256, -192, -512],
        [256, -192, 512],
        [256, -160, -512],
        [256, -160, 512],
        [256, -128, -512],
        [256, -128, 512],
        [256, -96, -512],
        [256, -96, 512],
        [256, -64, -512],
        [256, -64, 512],
        [256, -32, -512],
        [256, -32, 512],
        [256, 0, -512],
        [256, 0, 512],
        [256, 32, -512],
        [256, 32, 512],
        [256, 64, -512],
        [256, 64, 512],
        [256, 96, -512],
        [256, 96, 512],
        [256, 128, -512],
        [256, 128, 512],
        [256, 160, -512],
        [256, 160, 512],
        [256, 192, -512],
        [256, 192, 512],
        [256, 224, -512],
        [256, 224, 512],
        [256, 256, -512],
        [256, 256, 512],
        [256, 288, -512],
        [256, 288, 512],
        [256, 320, -512],
        [256, 320, 512],
        [256, 352, -512],
        [256, 352, 512],
        [256, 384, -512],
        [256, 384, 512],
        [256, 416, -512],
        [256, 416, 512],
        [256, 448, -512],
        [256, 448, 512],
        [256, 480, -512],
        [256, 480, 512],
        [256, 512, -512],
        [256, 512, 512],
        [256, -512, -480],
        [256, 512, -480],
        [256, -512, -448],
        [256, 512, -448],
        [256, -512, -416],
        [256, 512, -416],
        [256, -512, -384],
        [256, 512, -384],
        [256, -512, -352],
        [256, 512, -352],
        [256, -512, -320],
        [256, 512, -320],
        [256, -512, -288],
        [256, 512, -288],
        [256, -512, -256],
        [256, 512, -256],
        [256, -512, -224],
        [256, 512, -224],
        [256, -512, -192],
        [256, 512, -192],
        [256, -512, -160],
        [256, 512, -160],
        [256, -512, -128],
        [256, 512, -128],
        [256, -512, -96],
        [256, 512, -96],
        [256, -512, -64],
        [256, 512, -64],
        [256, -512, -32],
        [256, 512, -32],
        [256, -512, 0],
        [256, 512, 0],
        [256, -512, 32],
        [256, 512, 32],
        [256, -512, 64],
        [256, 512, 64],
        [256, -512, 96],
        [256, 512, 96],
        [256, -512, 128],
        [256, 512, 128],
        [256, -512, 160],
        [256, 512, 160],
        [256, -512, 192],
        [256, 512, 192],
        [256, -512, 224],
        [256, 512, 224],
        [256, -512, 256],
        [256, 512, 256],
        [256, -512, 288],
        [256, 512, 288],
        [256, -512, 320],
        [256, 512, 320],
        [256, -512, 352],
        [256, 512, 352],
        [256, -512, 384],
        [256, 512, 384],
        [256, -512, 416],
        [256, 512, 416],
        [256, -512, 448],
        [256, 512, 448],
        [256, -512, 480],
        [256, 512, 480],
        [288, -512, -512],
        [288, -512, 512],
        [288, -480, -512],
        [288, -480, 512],
        [288, -448, -512],
        [288, -448, 512],
        [288, -416, -512],
        [288, -416, 512],
        [288, -384, -512],
        [288, -384, 512],
        [288, -352, -512],
        [288, -352, 512],
        [288, -320, -512],
        [288, -320, 512],
        [288, -288, -512],
        [288, -288, 512],
        [288, -256, -512],
        [288, -256, 512],
        [288, -224, -512],
        [288, -224, 512],
        [288, -192, -512],
        [288, -192, 512],
        [288, -160, -512],
        [288, -160, 512],
        [288, -128, -512],
        [288, -128, 512],
        [288, -96, -512],
        [288, -96, 512],
        [288, -64, -512],
        [288, -64, 512],
        [288, -32, -512],
        [288, -32, 512],
        [288, 0, -512],
        [288, 0, 512],
        [288, 32, -512],
        [288, 32, 512],
        [288, 64, -512],
        [288, 64, 512],
        [288, 96, -512],
        [288, 96, 512],
        [288, 128, -512],
        [288, 128, 512],
        [288, 160, -512],
        [288, 160, 512],
        [288, 192, -512],
        [288, 192, 512],
        [288, 224, -512],
        [288, 224, 512],
        [288, 256, -512],
        [288, 256, 512],
        [288, 288, -512],
        [288, 288, 512],
        [288, 320, -512],
        [288, 320, 512],
        [288, 352, -512],
        [288, 352, 512],
        [288, 384, -512],
        [288, 384, 512],
        [288, 416, -512],
        [288, 416, 512],
        [288, 448, -512],
        [288, 448, 512],
        [288, 480, -512],
        [288, 480, 512],
        [288, 512, -512],
        [288, 512, 512],
        [288, -512, -480],
        [288, 512, -480],
        [288, -512, -448],
        [288, 512, -448],
        [288, -512, -416],
        [288, 512, -416],
        [288, -512, -384],
        [288, 512, -384],
        [288, -512, -352],
        [288, 512, -352],
        [288, -512, -320],
        [288, 512, -320],
        [288, -512, -288],
        [288, 512, -288],
        [288, -512, -256],
        [288, 512, -256],
        [288, -512, -224],
        [288, 512, -224],
        [288, -512, -192],
        [288, 512, -192],
        [288, -512, -160],
        [288, 512, -160],
        [288, -512, -128],
        [288, 512, -128],
        [288, -512, -96],
        [288, 512, -96],
        [288, -512, -64],
        [288, 512, -64],
        [288, -512, -32],
        [288, 512, -32],
        [288, -512, 0],
        [288, 512, 0],
        [288, -512, 32],
        [288, 512, 32],
        [288, -512, 64],
        [288, 512, 64],
        [288, -512, 96],
        [288, 512, 96],
        [288, -512, 128],
        [288, 512, 128],
        [288, -512, 160],
        [288, 512, 160],
        [288, -512, 192],
        [288, 512, 192],
        [288, -512, 224],
        [288, 512, 224],
        [288, -512, 256],
        [288, 512, 256],
        [288, -512, 288],
        [288, 512, 288],
        [288, -512, 320],
        [288, 512, 320],
        [288, -512, 352],
        [288, 512, 352],
        [288, -512, 384],
        [288, 512, 384],
        [288, -512, 416],
        [288, 512, 416],
        [288, -512, 448],
        [288, 512, 448],
        [288, -512, 480],
        [288, 512, 480],
        [320, -512, -512],
        [320, -512, 512],
        [320, -480, -512],
        [320, -480, 512],
        [320, -448, -512],
        [320, -448, 512],
        [320, -416, -512],
        [320, -416, 512],
        [320, -384, -512],
        [320, -384, 512],
        [320, -352, -512],
        [320, -352, 512],
        [320, -320, -512],
        [320, -320, 512],
        [320, -288, -512],
        [320, -288, 512],
        [320, -256, -512],
        [320, -256, 512],
        [320, -224, -512],
        [320, -224, 512],
        [320, -192, -512],
        [320, -192, 512],
        [320, -160, -512],
        [320, -160, 512],
        [320, -128, -512],
        [320, -128, 512],
        [320, -96, -512],
        [320, -96, 512],
        [320, -64, -512],
        [320, -64, 512],
        [320, -32, -512],
        [320, -32, 512],
        [320, 0, -512],
        [320, 0, 512],
        [320, 32, -512],
        [320, 32, 512],
        [320, 64, -512],
        [320, 64, 512],
        [320, 96, -512],
        [320, 96, 512],
        [320, 128, -512],
        [320, 128, 512],
        [320, 160, -512],
        [320, 160, 512],
        [320, 192, -512],
        [320, 192, 512],
        [320, 224, -512],
        [320, 224, 512],
        [320, 256, -512],
        [320, 256, 512],
        [320, 288, -512],
        [320, 288, 512],
        [320, 320, -512],
        [320, 320, 512],
        [320, 352, -512],
        [320, 352, 512],
        [320, 384, -512],
        [320, 384, 512],
        [320, 416, -512],
        [320, 416, 512],
        [320, 448, -512],
        [320, 448, 512],
        [320, 480, -512],
        [320, 480, 512],
        [320, 512, -512],
        [320, 512, 512],
        [320, -512, -480],
        [320, 512, -480],
        [320, -512, -448],
        [320, 512, -448],
        [320, -512, -416],
        [320, 512, -416],
        [320, -512, -384],
        [320, 512, -384],
        [320, -512, -352],
        [320, 512, -352],
        [320, -512, -320],
        [320, 512, -320],
        [320, -512, -288],
        [320, 512, -288],
        [320, -512, -256],
        [320, 512, -256],
        [320, -512, -224],
        [320, 512, -224],
        [320, -512, -192],
        [320, 512, -192],
        [320, -512, -160],
        [320, 512, -160],
        [320, -512, -128],
        [320, 512, -128],
        [320, -512, -96],
        [320, 512, -96],
        [320, -512, -64],
        [320, 512, -64],
        [320, -512, -32],
        [320, 512, -32],
        [320, -512, 0],
        [320, 512, 0],
        [320, -512, 32],
        [320, 512, 32],
        [320, -512, 64],
        [320, 512, 64],
        [320, -512, 96],
        [320, 512, 96],
        [320, -512, 128],
        [320, 512, 128],
        [320, -512, 160],
        [320, 512, 160],
        [320, -512, 192],
        [320, 512, 192],
        [320, -512, 224],
        [320, 512, 224],
        [320, -512, 256],
        [320, 512, 256],
        [320, -512, 288],
        [320, 512, 288],
        [320, -512, 320],
        [320, 512, 320],
        [320, -512, 352],
        [320, 512, 352],
        [320, -512, 384],
        [320, 512, 384],
        [320, -512, 416],
        [320, 512, 416],
        [320, -512, 448],
        [320, 512, 448],
        [320, -512, 480],
        [320, 512, 480],
        [352, -512, -512],
        [352, -512, 512],
        [352, -480, -512],
        [352, -480, 512],
        [352, -448, -512],
        [352, -448, 512],
        [352, -416, -512],
        [352, -416, 512],
        [352, -384, -512],
        [352, -384, 512],
        [352, -352, -512],
        [352, -352, 512],
        [352, -320, -512],
        [352, -320, 512],
        [352, -288, -512],
        [352, -288, 512],
        [352, -256, -512],
        [352, -256, 512],
        [352, -224, -512],
        [352, -224, 512],
        [352, -192, -512],
        [352, -192, 512],
        [352, -160, -512],
        [352, -160, 512],
        [352, -128, -512],
        [352, -128, 512],
        [352, -96, -512],
        [352, -96, 512],
        [352, -64, -512],
        [352, -64, 512],
        [352, -32, -512],
        [352, -32, 512],
        [352, 0, -512],
        [352, 0, 512],
        [352, 32, -512],
        [352, 32, 512],
        [352, 64, -512],
        [352, 64, 512],
        [352, 96, -512],
        [352, 96, 512],
        [352, 128, -512],
        [352, 128, 512],
        [352, 160, -512],
        [352, 160, 512],
        [352, 192, -512],
        [352, 192, 512],
        [352, 224, -512],
        [352, 224, 512],
        [352, 256, -512],
        [352, 256, 512],
        [352, 288, -512],
        [352, 288, 512],
        [352, 320, -512],
        [352, 320, 512],
        [352, 352, -512],
        [352, 352, 512],
        [352, 384, -512],
        [352, 384, 512],
        [352, 416, -512],
        [352, 416, 512],
        [352, 448, -512],
        [352, 448, 512],
        [352, 480, -512],
        [352, 480, 512],
        [352, 512, -512],
        [352, 512, 512],
        [352, -512, -480],
        [352, 512, -480],
        [352, -512, -448],
        [352, 512, -448],
        [352, -512, -416],
        [352, 512, -416],
        [352, -512, -384],
        [352, 512, -384],
        [352, -512, -352],
        [352, 512, -352],
        [352, -512, -320],
        [352, 512, -320],
        [352, -512, -288],
        [352, 512, -288],
        [352, -512, -256],
        [352, 512, -256],
        [352, -512, -224],
        [352, 512, -224],
        [352, -512, -192],
        [352, 512, -192],
        [352, -512, -160],
        [352, 512, -160],
        [352, -512, -128],
        [352, 512, -128],
        [352, -512, -96],
        [352, 512, -96],
        [352, -512, -64],
        [352, 512, -64],
        [352, -512, -32],
        [352, 512, -32],
        [352, -512, 0],
        [352, 512, 0],
        [352, -512, 32],
        [352, 512, 32],
        [352, -512, 64],
        [352, 512, 64],
        [352, -512, 96],
        [352, 512, 96],
        [352, -512, 128],
        [352, 512, 128],
        [352, -512, 160],
        [352, 512, 160],
        [352, -512, 192],
        [352, 512, 192],
        [352, -512, 224],
        [352, 512, 224],
        [352, -512, 256],
        [352, 512, 256],
        [352, -512, 288],
        [352, 512, 288],
        [352, -512, 320],
        [352, 512, 320],
        [352, -512, 352],
        [352, 512, 352],
        [352, -512, 384],
        [352, 512, 384],
        [352, -512, 416],
        [352, 512, 416],
        [352, -512, 448],
        [352, 512, 448],
        [352, -512, 480],
        [352, 512, 480],
        [384, -512, -512],
        [384, -512, 512],
        [384, -480, -512],
        [384, -480, 512],
        [384, -448, -512],
        [384, -448, 512],
        [384, -416, -512],
        [384, -416, 512],
        [384, -384, -512],
        [384, -384, 512],
        [384, -352, -512],
        [384, -352, 512],
        [384, -320, -512],
        [384, -320, 512],
        [384, -288, -512],
        [384, -288, 512],
        [384, -256, -512],
        [384, -256, 512],
        [384, -224, -512],
        [384, -224, 512],
        [384, -192, -512],
        [384, -192, 512],
        [384, -160, -512],
        [384, -160, 512],
        [384, -128, -512],
        [384, -128, 512],
        [384, -96, -512],
        [384, -96, 512],
        [384, -64, -512],
        [384, -64, 512],
        [384, -32, -512],
        [384, -32, 512],
        [384, 0, -512],
        [384, 0, 512],
        [384, 32, -512],
        [384, 32, 512],
        [384, 64, -512],
        [384, 64, 512],
        [384, 96, -512],
        [384, 96, 512],
        [384, 128, -512],
        [384, 128, 512],
        [384, 160, -512],
        [384, 160, 512],
        [384, 192, -512],
        [384, 192, 512],
        [384, 224, -512],
        [384, 224, 512],
        [384, 256, -512],
        [384, 256, 512],
        [384, 288, -512],
        [384, 288, 512],
        [384, 320, -512],
        [384, 320, 512],
        [384, 352, -512],
        [384, 352, 512],
        [384, 384, -512],
        [384, 384, 512],
        [384, 416, -512],
        [384, 416, 512],
        [384, 448, -512],
        [384, 448, 512],
        [384, 480, -512],
        [384, 480, 512],
        [384, 512, -512],
        [384, 512, 512],
        [384, -512, -480],
        [384, 512, -480],
        [384, -512, -448],
        [384, 512, -448],
        [384, -512, -416],
        [384, 512, -416],
        [384, -512, -384],
        [384, 512, -384],
        [384, -512, -352],
        [384, 512, -352],
        [384, -512, -320],
        [384, 512, -320],
        [384, -512, -288],
        [384, 512, -288],
        [384, -512, -256],
        [384, 512, -256],
        [384, -512, -224],
        [384, 512, -224],
        [384, -512, -192],
        [384, 512, -192],
        [384, -512, -160],
        [384, 512, -160],
        [384, -512, -128],
        [384, 512, -128],
        [384, -512, -96],
        [384, 512, -96],
        [384, -512, -64],
        [384, 512, -64],
        [384, -512, -32],
        [384, 512, -32],
        [384, -512, 0],
        [384, 512, 0],
        [384, -512, 32],
        [384, 512, 32],
        [384, -512, 64],
        [384, 512, 64],
        [384, -512, 96],
        [384, 512, 96],
        [384, -512, 128],
        [384, 512, 128],
        [384, -512, 160],
        [384, 512, 160],
        [384, -512, 192],
        [384, 512, 192],
        [384, -512, 224],
        [384, 512, 224],
        [384, -512, 256],
        [384, 512, 256],
        [384, -512, 288],
        [384, 512, 288],
        [384, -512, 320],
        [384, 512, 320],
        [384, -512, 352],
        [384, 512, 352],
        [384, -512, 384],
        [384, 512, 384],
        [384, -512, 416],
        [384, 512, 416],
        [384, -512, 448],
        [384, 512, 448],
        [384, -512, 480],
        [384, 512, 480],
        [416, -512, -512],
        [416, -512, 512],
        [416, -480, -512],
        [416, -480, 512],
        [416, -448, -512],
        [416, -448, 512],
        [416, -416, -512],
        [416, -416, 512],
        [416, -384, -512],
        [416, -384, 512],
        [416, -352, -512],
        [416, -352, 512],
        [416, -320, -512],
        [416, -320, 512],
        [416, -288, -512],
        [416, -288, 512],
        [416, -256, -512],
        [416, -256, 512],
        [416, -224, -512],
        [416, -224, 512],
        [416, -192, -512],
        [416, -192, 512],
        [416, -160, -512],
        [416, -160, 512],
        [416, -128, -512],
        [416, -128, 512],
        [416, -96, -512],
        [416, -96, 512],
        [416, -64, -512],
        [416, -64, 512],
        [416, -32, -512],
        [416, -32, 512],
        [416, 0, -512],
        [416, 0, 512],
        [416, 32, -512],
        [416, 32, 512],
        [416, 64, -512],
        [416, 64, 512],
        [416, 96, -512],
        [416, 96, 512],
        [416, 128, -512],
        [416, 128, 512],
        [416, 160, -512],
        [416, 160, 512],
        [416, 192, -512],
        [416, 192, 512],
        [416, 224, -512],
        [416, 224, 512],
        [416, 256, -512],
        [416, 256, 512],
        [416, 288, -512],
        [416, 288, 512],
        [416, 320, -512],
        [416, 320, 512],
        [416, 352, -512],
        [416, 352, 512],
        [416, 384, -512],
        [416, 384, 512],
        [416, 416, -512],
        [416, 416, 512],
        [416, 448, -512],
        [416, 448, 512],
        [416, 480, -512],
        [416, 480, 512],
        [416, 512, -512],
        [416, 512, 512],
        [416, -512, -480],
        [416, 512, -480],
        [416, -512, -448],
        [416, 512, -448],
        [416, -512, -416],
        [416, 512, -416],
        [416, -512, -384],
        [416, 512, -384],
        [416, -512, -352],
        [416, 512, -352],
        [416, -512, -320],
        [416, 512, -320],
        [416, -512, -288],
        [416, 512, -288],
        [416, -512, -256],
        [416, 512, -256],
        [416, -512, -224],
        [416, 512, -224],
        [416, -512, -192],
        [416, 512, -192],
        [416, -512, -160],
        [416, 512, -160],
        [416, -512, -128],
        [416, 512, -128],
        [416, -512, -96],
        [416, 512, -96],
        [416, -512, -64],
        [416, 512, -64],
        [416, -512, -32],
        [416, 512, -32],
        [416, -512, 0],
        [416, 512, 0],
        [416, -512, 32],
        [416, 512, 32],
        [416, -512, 64],
        [416, 512, 64],
        [416, -512, 96],
        [416, 512, 96],
        [416, -512, 128],
        [416, 512, 128],
        [416, -512, 160],
        [416, 512, 160],
        [416, -512, 192],
        [416, 512, 192],
        [416, -512, 224],
        [416, 512, 224],
        [416, -512, 256],
        [416, 512, 256],
        [416, -512, 288],
        [416, 512, 288],
        [416, -512, 320],
        [416, 512, 320],
        [416, -512, 352],
        [416, 512, 352],
        [416, -512, 384],
        [416, 512, 384],
        [416, -512, 416],
        [416, 512, 416],
        [416, -512, 448],
        [416, 512, 448],
        [416, -512, 480],
        [416, 512, 480],
        [448, -512, -512],
        [448, -512, 512],
        [448, -480, -512],
        [448, -480, 512],
        [448, -448, -512],
        [448, -448, 512],
        [448, -416, -512],
        [448, -416, 512],
        [448, -384, -512],
        [448, -384, 512],
        [448, -352, -512],
        [448, -352, 512],
        [448, -320, -512],
        [448, -320, 512],
        [448, -288, -512],
        [448, -288, 512],
        [448, -256, -512],
        [448, -256, 512],
        [448, -224, -512],
        [448, -224, 512],
        [448, -192, -512],
        [448, -192, 512],
        [448, -160, -512],
        [448, -160, 512],
        [448, -128, -512],
        [448, -128, 512],
        [448, -96, -512],
        [448, -96, 512],
        [448, -64, -512],
        [448, -64, 512],
        [448, -32, -512],
        [448, -32, 512],
        [448, 0, -512],
        [448, 0, 512],
        [448, 32, -512],
        [448, 32, 512],
        [448, 64, -512],
        [448, 64, 512],
        [448, 96, -512],
        [448, 96, 512],
        [448, 128, -512],
        [448, 128, 512],
        [448, 160, -512],
        [448, 160, 512],
        [448, 192, -512],
        [448, 192, 512],
        [448, 224, -512],
        [448, 224, 512],
        [448, 256, -512],
        [448, 256, 512],
        [448, 288, -512],
        [448, 288, 512],
        [448, 320, -512],
        [448, 320, 512],
        [448, 352, -512],
        [448, 352, 512],
        [448, 384, -512],
        [448, 384, 512],
        [448, 416, -512],
        [448, 416, 512],
        [448, 448, -512],
        [448, 448, 512],
        [448, 480, -512],
        [448, 480, 512],
        [448, 512, -512],
        [448, 512, 512],
        [448, -512, -480],
        [448, 512, -480],
        [448, -512, -448],
        [448, 512, -448],
        [448, -512, -416],
        [448, 512, -416],
        [448, -512, -384],
        [448, 512, -384],
        [448, -512, -352],
        [448, 512, -352],
        [448, -512, -320],
        [448, 512, -320],
        [448, -512, -288],
        [448, 512, -288],
        [448, -512, -256],
        [448, 512, -256],
        [448, -512, -224],
        [448, 512, -224],
        [448, -512, -192],
        [448, 512, -192],
        [448, -512, -160],
        [448, 512, -160],
        [448, -512, -128],
        [448, 512, -128],
        [448, -512, -96],
        [448, 512, -96],
        [448, -512, -64],
        [448, 512, -64],
        [448, -512, -32],
        [448, 512, -32],
        [448, -512, 0],
        [448, 512, 0],
        [448, -512, 32],
        [448, 512, 32],
        [448, -512, 64],
        [448, 512, 64],
        [448, -512, 96],
        [448, 512, 96],
        [448, -512, 128],
        [448, 512, 128],
        [448, -512, 160],
        [448, 512, 160],
        [448, -512, 192],
        [448, 512, 192],
        [448, -512, 224],
        [448, 512, 224],
        [448, -512, 256],
        [448, 512, 256],
        [448, -512, 288],
        [448, 512, 288],
        [448, -512, 320],
        [448, 512, 320],
        [448, -512, 352],
        [448, 512, 352],
        [448, -512, 384],
        [448, 512, 384],
        [448, -512, 416],
        [448, 512, 416],
        [448, -512, 448],
        [448, 512, 448],
        [448, -512, 480],
        [448, 512, 480],
        [480, -512, -512],
        [480, -512, 512],
        [480, -480, -512],
        [480, -480, 512],
        [480, -448, -512],
        [480, -448, 512],
        [480, -416, -512],
        [480, -416, 512],
        [480, -384, -512],
        [480, -384, 512],
        [480, -352, -512],
        [480, -352, 512],
        [480, -320, -512],
        [480, -320, 512],
        [480, -288, -512],
        [480, -288, 512],
        [480, -256, -512],
        [480, -256, 512],
        [480, -224, -512],
        [480, -224, 512],
        [480, -192, -512],
        [480, -192, 512],
        [480, -160, -512],
        [480, -160, 512],
        [480, -128, -512],
        [480, -128, 512],
        [480, -96, -512],
        [480, -96, 512],
        [480, -64, -512],
        [480, -64, 512],
        [480, -32, -512],
        [480, -32, 512],
        [480, 0, -512],
        [480, 0, 512],
        [480, 32, -512],
        [480, 32, 512],
        [480, 64, -512],
        [480, 64, 512],
        [480, 96, -512],
        [480, 96, 512],
        [480, 128, -512],
        [480, 128, 512],
        [480, 160, -512],
        [480, 160, 512],
        [480, 192, -512],
        [480, 192, 512],
        [480, 224, -512],
        [480, 224, 512],
        [480, 256, -512],
        [480, 256, 512],
        [480, 288, -512],
        [480, 288, 512],
        [480, 320, -512],
        [480, 320, 512],
        [480, 352, -512],
        [480, 352, 512],
        [480, 384, -512],
        [480, 384, 512],
        [480, 416, -512],
        [480, 416, 512],
        [480, 448, -512],
        [480, 448, 512],
        [480, 480, -512],
        [480, 480, 512],
        [480, 512, -512],
        [480, 512, 512],
        [480, -512, -480],
        [480, 512, -480],
        [480, -512, -448],
        [480, 512, -448],
        [480, -512, -416],
        [480, 512, -416],
        [480, -512, -384],
        [480, 512, -384],
        [480, -512, -352],
        [480, 512, -352],
        [480, -512, -320],
        [480, 512, -320],
        [480, -512, -288],
        [480, 512, -288],
        [480, -512, -256],
        [480, 512, -256],
        [480, -512, -224],
        [480, 512, -224],
        [480, -512, -192],
        [480, 512, -192],
        [480, -512, -160],
        [480, 512, -160],
        [480, -512, -128],
        [480, 512, -128],
        [480, -512, -96],
        [480, 512, -96],
        [480, -512, -64],
        [480, 512, -64],
        [480, -512, -32],
        [480, 512, -32],
        [480, -512, 0],
        [480, 512, 0],
        [480, -512, 32],
        [480, 512, 32],
        [480, -512, 64],
        [480, 512, 64],
        [480, -512, 96],
        [480, 512, 96],
        [480, -512, 128],
        [480, 512, 128],
        [480, -512, 160],
        [480, 512, 160],
        [480, -512, 192],
        [480, 512, 192],
        [480, -512, 224],
        [480, 512, 224],
        [480, -512, 256],
        [480, 512, 256],
        [480, -512, 288],
        [480, 512, 288],
        [480, -512, 320],
        [480, 512, 320],
        [480, -512, 352],
        [480, 512, 352],
        [480, -512, 384],
        [480, 512, 384],
        [480, -512, 416],
        [480, 512, 416],
        [480, -512, 448],
        [480, 512, 448],
        [480, -512, 480],
        [480, 512, 480],
        [512, -512, -512],
        [512, -512, 512],
        [512, -480, -512],
        [512, -480, 512],
        [512, -448, -512],
        [512, -448, 512],
        [512, -416, -512],
        [512, -416, 512],
        [512, -384, -512],
        [512, -384, 512],
        [512, -352, -512],
        [512, -352, 512],
        [512, -320, -512],
        [512, -320, 512],
        [512, -288, -512],
        [512, -288, 512],
        [512, -256, -512],
        [512, -256, 512],
        [512, -224, -512],
        [512, -224, 512],
        [512, -192, -512],
        [512, -192, 512],
        [512, -160, -512],
        [512, -160, 512],
        [512, -128, -512],
        [512, -128, 512],
        [512, -96, -512],
        [512, -96, 512],
        [512, -64, -512],
        [512, -64, 512],
        [512, -32, -512],
        [512, -32, 512],
        [512, 0, -512],
        [512, 0, 512],
        [512, 32, -512],
        [512, 32, 512],
        [512, 64, -512],
        [512, 64, 512],
        [512, 96, -512],
        [512, 96, 512],
        [512, 128, -512],
        [512, 128, 512],
        [512, 160, -512],
        [512, 160, 512],
        [512, 192, -512],
        [512, 192, 512],
        [512, 224, -512],
        [512, 224, 512],
        [512, 256, -512],
        [512, 256, 512],
        [512, 288, -512],
        [512, 288, 512],
        [512, 320, -512],
        [512, 320, 512],
        [512, 352, -512],
        [512, 352, 512],
        [512, 384, -512],
        [512, 384, 512],
        [512, 416, -512],
        [512, 416, 512],
        [512, 448, -512],
        [512, 448, 512],
        [512, 480, -512],
        [512, 480, 512],
        [512, 512, -512],
        [512, 512, 512],
        [512, -512, -480],
        [512, 512, -480],
        [512, -512, -448],
        [512, 512, -448],
        [512, -512, -416],
        [512, 512, -416],
        [512, -512, -384],
        [512, 512, -384],
        [512, -512, -352],
        [512, 512, -352],
        [512, -512, -320],
        [512, 512, -320],
        [512, -512, -288],
        [512, 512, -288],
        [512, -512, -256],
        [512, 512, -256],
        [512, -512, -224],
        [512, 512, -224],
        [512, -512, -192],
        [512, 512, -192],
        [512, -512, -160],
        [512, 512, -160],
        [512, -512, -128],
        [512, 512, -128],
        [512, -512, -96],
        [512, 512, -96],
        [512, -512, -64],
        [512, 512, -64],
        [512, -512, -32],
        [512, 512, -32],
        [512, -512, 0],
        [512, 512, 0],
        [512, -512, 32],
        [512, 512, 32],
        [512, -512, 64],
        [512, 512, 64],
        [512, -512, 96],
        [512, 512, 96],
        [512, -512, 128],
        [512, 512, 128],
        [512, -512, 160],
        [512, 512, 160],
        [512, -512, 192],
        [512, 512, 192],
        [512, -512, 224],
        [512, 512, 224],
        [512, -512, 256],
        [512, 512, 256],
        [512, -512, 288],
        [512, 512, 288],
        [512, -512, 320],
        [512, 512, 320],
        [512, -512, 352],
        [512, 512, 352],
        [512, -512, 384],
        [512, 512, 384],
        [512, -512, 416],
        [512, 512, 416],
        [512, -512, 448],
        [512, 512, 448],
        [512, -512, 480],
        [512, 512, 480],
        [-512, -480, -480],
        [512, -480, -480],
        [-512, -448, -480],
        [512, -448, -480],
        [-512, -416, -480],
        [512, -416, -480],
        [-512, -384, -480],
        [512, -384, -480],
        [-512, -352, -480],
        [512, -352, -480],
        [-512, -320, -480],
        [512, -320, -480],
        [-512, -288, -480],
        [512, -288, -480],
        [-512, -256, -480],
        [512, -256, -480],
        [-512, -224, -480],
        [512, -224, -480],
        [-512, -192, -480],
        [512, -192, -480],
        [-512, -160, -480],
        [512, -160, -480],
        [-512, -128, -480],
        [512, -128, -480],
        [-512, -96, -480],
        [512, -96, -480],
        [-512, -64, -480],
        [512, -64, -480],
        [-512, -32, -480],
        [512, -32, -480],
        [-512, 0, -480],
        [512, 0, -480],
        [-512, 32, -480],
        [512, 32, -480],
        [-512, 64, -480],
        [512, 64, -480],
        [-512, 96, -480],
        [512, 96, -480],
        [-512, 128, -480],
        [512, 128, -480],
        [-512, 160, -480],
        [512, 160, -480],
        [-512, 192, -480],
        [512, 192, -480],
        [-512, 224, -480],
        [512, 224, -480],
        [-512, 256, -480],
        [512, 256, -480],
        [-512, 288, -480],
        [512, 288, -480],
        [-512, 320, -480],
        [512, 320, -480],
        [-512, 352, -480],
        [512, 352, -480],
        [-512, 384, -480],
        [512, 384, -480],
        [-512, 416, -480],
        [512, 416, -480],
        [-512, 448, -480],
        [512, 448, -480],
        [-512, 480, -480],
        [512, 480, -480],
        [-512, -480, -448],
        [512, -480, -448],
        [-512, -448, -448],
        [512, -448, -448],
        [-512, -416, -448],
        [512, -416, -448],
        [-512, -384, -448],
        [512, -384, -448],
        [-512, -352, -448],
        [512, -352, -448],
        [-512, -320, -448],
        [512, -320, -448],
        [-512, -288, -448],
        [512, -288, -448],
        [-512, -256, -448],
        [512, -256, -448],
        [-512, -224, -448],
        [512, -224, -448],
        [-512, -192, -448],
        [512, -192, -448],
        [-512, -160, -448],
        [512, -160, -448],
        [-512, -128, -448],
        [512, -128, -448],
        [-512, -96, -448],
        [512, -96, -448],
        [-512, -64, -448],
        [512, -64, -448],
        [-512, -32, -448],
        [512, -32, -448],
        [-512, 0, -448],
        [512, 0, -448],
        [-512, 32, -448],
        [512, 32, -448],
        [-512, 64, -448],
        [512, 64, -448],
        [-512, 96, -448],
        [512, 96, -448],
        [-512, 128, -448],
        [512, 128, -448],
        [-512, 160, -448],
        [512, 160, -448],
        [-512, 192, -448],
        [512, 192, -448],
        [-512, 224, -448],
        [512, 224, -448],
        [-512, 256, -448],
        [512, 256, -448],
        [-512, 288, -448],
        [512, 288, -448],
        [-512, 320, -448],
        [512, 320, -448],
        [-512, 352, -448],
        [512, 352, -448],
        [-512, 384, -448],
        [512, 384, -448],
        [-512, 416, -448],
        [512, 416, -448],
        [-512, 448, -448],
        [512, 448, -448],
        [-512, 480, -448],
        [512, 480, -448],
        [-512, -480, -416],
        [512, -480, -416],
        [-512, -448, -416],
        [512, -448, -416],
        [-512, -416, -416],
        [512, -416, -416],
        [-512, -384, -416],
        [512, -384, -416],
        [-512, -352, -416],
        [512, -352, -416],
        [-512, -320, -416],
        [512, -320, -416],
        [-512, -288, -416],
        [512, -288, -416],
        [-512, -256, -416],
        [512, -256, -416],
        [-512, -224, -416],
        [512, -224, -416],
        [-512, -192, -416],
        [512, -192, -416],
        [-512, -160, -416],
        [512, -160, -416],
        [-512, -128, -416],
        [512, -128, -416],
        [-512, -96, -416],
        [512, -96, -416],
        [-512, -64, -416],
        [512, -64, -416],
        [-512, -32, -416],
        [512, -32, -416],
        [-512, 0, -416],
        [512, 0, -416],
        [-512, 32, -416],
        [512, 32, -416],
        [-512, 64, -416],
        [512, 64, -416],
        [-512, 96, -416],
        [512, 96, -416],
        [-512, 128, -416],
        [512, 128, -416],
        [-512, 160, -416],
        [512, 160, -416],
        [-512, 192, -416],
        [512, 192, -416],
        [-512, 224, -416],
        [512, 224, -416],
        [-512, 256, -416],
        [512, 256, -416],
        [-512, 288, -416],
        [512, 288, -416],
        [-512, 320, -416],
        [512, 320, -416],
        [-512, 352, -416],
        [512, 352, -416],
        [-512, 384, -416],
        [512, 384, -416],
        [-512, 416, -416],
        [512, 416, -416],
        [-512, 448, -416],
        [512, 448, -416],
        [-512, 480, -416],
        [512, 480, -416],
        [-512, -480, -384],
        [512, -480, -384],
        [-512, -448, -384],
        [512, -448, -384],
        [-512, -416, -384],
        [512, -416, -384],
        [-512, -384, -384],
        [512, -384, -384],
        [-512, -352, -384],
        [512, -352, -384],
        [-512, -320, -384],
        [512, -320, -384],
        [-512, -288, -384],
        [512, -288, -384],
        [-512, -256, -384],
        [512, -256, -384],
        [-512, -224, -384],
        [512, -224, -384],
        [-512, -192, -384],
        [512, -192, -384],
        [-512, -160, -384],
        [512, -160, -384],
        [-512, -128, -384],
        [512, -128, -384],
        [-512, -96, -384],
        [512, -96, -384],
        [-512, -64, -384],
        [512, -64, -384],
        [-512, -32, -384],
        [512, -32, -384],
        [-512, 0, -384],
        [512, 0, -384],
        [-512, 32, -384],
        [512, 32, -384],
        [-512, 64, -384],
        [512, 64, -384],
        [-512, 96, -384],
        [512, 96, -384],
        [-512, 128, -384],
        [512, 128, -384],
        [-512, 160, -384],
        [512, 160, -384],
        [-512, 192, -384],
        [512, 192, -384],
        [-512, 224, -384],
        [512, 224, -384],
        [-512, 256, -384],
        [512, 256, -384],
        [-512, 288, -384],
        [512, 288, -384],
        [-512, 320, -384],
        [512, 320, -384],
        [-512, 352, -384],
        [512, 352, -384],
        [-512, 384, -384],
        [512, 384, -384],
        [-512, 416, -384],
        [512, 416, -384],
        [-512, 448, -384],
        [512, 448, -384],
        [-512, 480, -384],
        [512, 480, -384],
        [-512, -480, -352],
        [512, -480, -352],
        [-512, -448, -352],
        [512, -448, -352],
        [-512, -416, -352],
        [512, -416, -352],
        [-512, -384, -352],
        [512, -384, -352],
        [-512, -352, -352],
        [512, -352, -352],
        [-512, -320, -352],
        [512, -320, -352],
        [-512, -288, -352],
        [512, -288, -352],
        [-512, -256, -352],
        [512, -256, -352],
        [-512, -224, -352],
        [512, -224, -352],
        [-512, -192, -352],
        [512, -192, -352],
        [-512, -160, -352],
        [512, -160, -352],
        [-512, -128, -352],
        [512, -128, -352],
        [-512, -96, -352],
        [512, -96, -352],
        [-512, -64, -352],
        [512, -64, -352],
        [-512, -32, -352],
        [512, -32, -352],
        [-512, 0, -352],
        [512, 0, -352],
        [-512, 32, -352],
        [512, 32, -352],
        [-512, 64, -352],
        [512, 64, -352],
        [-512, 96, -352],
        [512, 96, -352],
        [-512, 128, -352],
        [512, 128, -352],
        [-512, 160, -352],
        [512, 160, -352],
        [-512, 192, -352],
        [512, 192, -352],
        [-512, 224, -352],
        [512, 224, -352],
        [-512, 256, -352],
        [512, 256, -352],
        [-512, 288, -352],
        [512, 288, -352],
        [-512, 320, -352],
        [512, 320, -352],
        [-512, 352, -352],
        [512, 352, -352],
        [-512, 384, -352],
        [512, 384, -352],
        [-512, 416, -352],
        [512, 416, -352],
        [-512, 448, -352],
        [512, 448, -352],
        [-512, 480, -352],
        [512, 480, -352],
        [-512, -480, -320],
        [512, -480, -320],
        [-512, -448, -320],
        [512, -448, -320],
        [-512, -416, -320],
        [512, -416, -320],
        [-512, -384, -320],
        [512, -384, -320],
        [-512, -352, -320],
        [512, -352, -320],
        [-512, -320, -320],
        [512, -320, -320],
        [-512, -288, -320],
        [512, -288, -320],
        [-512, -256, -320],
        [512, -256, -320],
        [-512, -224, -320],
        [512, -224, -320],
        [-512, -192, -320],
        [512, -192, -320],
        [-512, -160, -320],
        [512, -160, -320],
        [-512, -128, -320],
        [512, -128, -320],
        [-512, -96, -320],
        [512, -96, -320],
        [-512, -64, -320],
        [512, -64, -320],
        [-512, -32, -320],
        [512, -32, -320],
        [-512, 0, -320],
        [512, 0, -320],
        [-512, 32, -320],
        [512, 32, -320],
        [-512, 64, -320],
        [512, 64, -320],
        [-512, 96, -320],
        [512, 96, -320],
        [-512, 128, -320],
        [512, 128, -320],
        [-512, 160, -320],
        [512, 160, -320],
        [-512, 192, -320],
        [512, 192, -320],
        [-512, 224, -320],
        [512, 224, -320],
        [-512, 256, -320],
        [512, 256, -320],
        [-512, 288, -320],
        [512, 288, -320],
        [-512, 320, -320],
        [512, 320, -320],
        [-512, 352, -320],
        [512, 352, -320],
        [-512, 384, -320],
        [512, 384, -320],
        [-512, 416, -320],
        [512, 416, -320],
        [-512, 448, -320],
        [512, 448, -320],
        [-512, 480, -320],
        [512, 480, -320],
        [-512, -480, -288],
        [512, -480, -288],
        [-512, -448, -288],
        [512, -448, -288],
        [-512, -416, -288],
        [512, -416, -288],
        [-512, -384, -288],
        [512, -384, -288],
        [-512, -352, -288],
        [512, -352, -288],
        [-512, -320, -288],
        [512, -320, -288],
        [-512, -288, -288],
        [512, -288, -288],
        [-512, -256, -288],
        [512, -256, -288],
        [-512, -224, -288],
        [512, -224, -288],
        [-512, -192, -288],
        [512, -192, -288],
        [-512, -160, -288],
        [512, -160, -288],
        [-512, -128, -288],
        [512, -128, -288],
        [-512, -96, -288],
        [512, -96, -288],
        [-512, -64, -288],
        [512, -64, -288],
        [-512, -32, -288],
        [512, -32, -288],
        [-512, 0, -288],
        [512, 0, -288],
        [-512, 32, -288],
        [512, 32, -288],
        [-512, 64, -288],
        [512, 64, -288],
        [-512, 96, -288],
        [512, 96, -288],
        [-512, 128, -288],
        [512, 128, -288],
        [-512, 160, -288],
        [512, 160, -288],
        [-512, 192, -288],
        [512, 192, -288],
        [-512, 224, -288],
        [512, 224, -288],
        [-512, 256, -288],
        [512, 256, -288],
        [-512, 288, -288],
        [512, 288, -288],
        [-512, 320, -288],
        [512, 320, -288],
        [-512, 352, -288],
        [512, 352, -288],
        [-512, 384, -288],
        [512, 384, -288],
        [-512, 416, -288],
        [512, 416, -288],
        [-512, 448, -288],
        [512, 448, -288],
        [-512, 480, -288],
        [512, 480, -288],
        [-512, -480, -256],
        [512, -480, -256],
        [-512, -448, -256],
        [512, -448, -256],
        [-512, -416, -256],
        [512, -416, -256],
        [-512, -384, -256],
        [512, -384, -256],
        [-512, -352, -256],
        [512, -352, -256],
        [-512, -320, -256],
        [512, -320, -256],
        [-512, -288, -256],
        [512, -288, -256],
        [-512, -256, -256],
        [512, -256, -256],
        [-512, -224, -256],
        [512, -224, -256],
        [-512, -192, -256],
        [512, -192, -256],
        [-512, -160, -256],
        [512, -160, -256],
        [-512, -128, -256],
        [512, -128, -256],
        [-512, -96, -256],
        [512, -96, -256],
        [-512, -64, -256],
        [512, -64, -256],
        [-512, -32, -256],
        [512, -32, -256],
        [-512, 0, -256],
        [512, 0, -256],
        [-512, 32, -256],
        [512, 32, -256],
        [-512, 64, -256],
        [512, 64, -256],
        [-512, 96, -256],
        [512, 96, -256],
        [-512, 128, -256],
        [512, 128, -256],
        [-512, 160, -256],
        [512, 160, -256],
        [-512, 192, -256],
        [512, 192, -256],
        [-512, 224, -256],
        [512, 224, -256],
        [-512, 256, -256],
        [512, 256, -256],
        [-512, 288, -256],
        [512, 288, -256],
        [-512, 320, -256],
        [512, 320, -256],
        [-512, 352, -256],
        [512, 352, -256],
        [-512, 384, -256],
        [512, 384, -256],
        [-512, 416, -256],
        [512, 416, -256],
        [-512, 448, -256],
        [512, 448, -256],
        [-512, 480, -256],
        [512, 480, -256],
        [-512, -480, -224],
        [512, -480, -224],
        [-512, -448, -224],
        [512, -448, -224],
        [-512, -416, -224],
        [512, -416, -224],
        [-512, -384, -224],
        [512, -384, -224],
        [-512, -352, -224],
        [512, -352, -224],
        [-512, -320, -224],
        [512, -320, -224],
        [-512, -288, -224],
        [512, -288, -224],
        [-512, -256, -224],
        [512, -256, -224],
        [-512, -224, -224],
        [512, -224, -224],
        [-512, -192, -224],
        [512, -192, -224],
        [-512, -160, -224],
        [512, -160, -224],
        [-512, -128, -224],
        [512, -128, -224],
        [-512, -96, -224],
        [512, -96, -224],
        [-512, -64, -224],
        [512, -64, -224],
        [-512, -32, -224],
        [512, -32, -224],
        [-512, 0, -224],
        [512, 0, -224],
        [-512, 32, -224],
        [512, 32, -224],
        [-512, 64, -224],
        [512, 64, -224],
        [-512, 96, -224],
        [512, 96, -224],
        [-512, 128, -224],
        [512, 128, -224],
        [-512, 160, -224],
        [512, 160, -224],
        [-512, 192, -224],
        [512, 192, -224],
        [-512, 224, -224],
        [512, 224, -224],
        [-512, 256, -224],
        [512, 256, -224],
        [-512, 288, -224],
        [512, 288, -224],
        [-512, 320, -224],
        [512, 320, -224],
        [-512, 352, -224],
        [512, 352, -224],
        [-512, 384, -224],
        [512, 384, -224],
        [-512, 416, -224],
        [512, 416, -224],
        [-512, 448, -224],
        [512, 448, -224],
        [-512, 480, -224],
        [512, 480, -224],
        [-512, -480, -192],
        [512, -480, -192],
        [-512, -448, -192],
        [512, -448, -192],
        [-512, -416, -192],
        [512, -416, -192],
        [-512, -384, -192],
        [512, -384, -192],
        [-512, -352, -192],
        [512, -352, -192],
        [-512, -320, -192],
        [512, -320, -192],
        [-512, -288, -192],
        [512, -288, -192],
        [-512, -256, -192],
        [512, -256, -192],
        [-512, -224, -192],
        [512, -224, -192],
        [-512, -192, -192],
        [512, -192, -192],
        [-512, -160, -192],
        [512, -160, -192],
        [-512, -128, -192],
        [512, -128, -192],
        [-512, -96, -192],
        [512, -96, -192],
        [-512, -64, -192],
        [512, -64, -192],
        [-512, -32, -192],
        [512, -32, -192],
        [-512, 0, -192],
        [512, 0, -192],
        [-512, 32, -192],
        [512, 32, -192],
        [-512, 64, -192],
        [512, 64, -192],
        [-512, 96, -192],
        [512, 96, -192],
        [-512, 128, -192],
        [512, 128, -192],
        [-512, 160, -192],
        [512, 160, -192],
        [-512, 192, -192],
        [512, 192, -192],
        [-512, 224, -192],
        [512, 224, -192],
        [-512, 256, -192],
        [512, 256, -192],
        [-512, 288, -192],
        [512, 288, -192],
        [-512, 320, -192],
        [512, 320, -192],
        [-512, 352, -192],
        [512, 352, -192],
        [-512, 384, -192],
        [512, 384, -192],
        [-512, 416, -192],
        [512, 416, -192],
        [-512, 448, -192],
        [512, 448, -192],
        [-512, 480, -192],
        [512, 480, -192],
        [-512, -480, -160],
        [512, -480, -160],
        [-512, -448, -160],
        [512, -448, -160],
        [-512, -416, -160],
        [512, -416, -160],
        [-512, -384, -160],
        [512, -384, -160],
        [-512, -352, -160],
        [512, -352, -160],
        [-512, -320, -160],
        [512, -320, -160],
        [-512, -288, -160],
        [512, -288, -160],
        [-512, -256, -160],
        [512, -256, -160],
        [-512, -224, -160],
        [512, -224, -160],
        [-512, -192, -160],
        [512, -192, -160],
        [-512, -160, -160],
        [512, -160, -160],
        [-512, -128, -160],
        [512, -128, -160],
        [-512, -96, -160],
        [512, -96, -160],
        [-512, -64, -160],
        [512, -64, -160],
        [-512, -32, -160],
        [512, -32, -160],
        [-512, 0, -160],
        [512, 0, -160],
        [-512, 32, -160],
        [512, 32, -160],
        [-512, 64, -160],
        [512, 64, -160],
        [-512, 96, -160],
        [512, 96, -160],
        [-512, 128, -160],
        [512, 128, -160],
        [-512, 160, -160],
        [512, 160, -160],
        [-512, 192, -160],
        [512, 192, -160],
        [-512, 224, -160],
        [512, 224, -160],
        [-512, 256, -160],
        [512, 256, -160],
        [-512, 288, -160],
        [512, 288, -160],
        [-512, 320, -160],
        [512, 320, -160],
        [-512, 352, -160],
        [512, 352, -160],
        [-512, 384, -160],
        [512, 384, -160],
        [-512, 416, -160],
        [512, 416, -160],
        [-512, 448, -160],
        [512, 448, -160],
        [-512, 480, -160],
        [512, 480, -160],
        [-512, -480, -128],
        [512, -480, -128],
        [-512, -448, -128],
        [512, -448, -128],
        [-512, -416, -128],
        [512, -416, -128],
        [-512, -384, -128],
        [512, -384, -128],
        [-512, -352, -128],
        [512, -352, -128],
        [-512, -320, -128],
        [512, -320, -128],
        [-512, -288, -128],
        [512, -288, -128],
        [-512, -256, -128],
        [512, -256, -128],
        [-512, -224, -128],
        [512, -224, -128],
        [-512, -192, -128],
        [512, -192, -128],
        [-512, -160, -128],
        [512, -160, -128],
        [-512, -128, -128],
        [512, -128, -128],
        [-512, -96, -128],
        [512, -96, -128],
        [-512, -64, -128],
        [512, -64, -128],
        [-512, -32, -128],
        [512, -32, -128],
        [-512, 0, -128],
        [512, 0, -128],
        [-512, 32, -128],
        [512, 32, -128],
        [-512, 64, -128],
        [512, 64, -128],
        [-512, 96, -128],
        [512, 96, -128],
        [-512, 128, -128],
        [512, 128, -128],
        [-512, 160, -128],
        [512, 160, -128],
        [-512, 192, -128],
        [512, 192, -128],
        [-512, 224, -128],
        [512, 224, -128],
        [-512, 256, -128],
        [512, 256, -128],
        [-512, 288, -128],
        [512, 288, -128],
        [-512, 320, -128],
        [512, 320, -128],
        [-512, 352, -128],
        [512, 352, -128],
        [-512, 384, -128],
        [512, 384, -128],
        [-512, 416, -128],
        [512, 416, -128],
        [-512, 448, -128],
        [512, 448, -128],
        [-512, 480, -128],
        [512, 480, -128],
        [-512, -480, -96],
        [512, -480, -96],
        [-512, -448, -96],
        [512, -448, -96],
        [-512, -416, -96],
        [512, -416, -96],
        [-512, -384, -96],
        [512, -384, -96],
        [-512, -352, -96],
        [512, -352, -96],
        [-512, -320, -96],
        [512, -320, -96],
        [-512, -288, -96],
        [512, -288, -96],
        [-512, -256, -96],
        [512, -256, -96],
        [-512, -224, -96],
        [512, -224, -96],
        [-512, -192, -96],
        [512, -192, -96],
        [-512, -160, -96],
        [512, -160, -96],
        [-512, -128, -96],
        [512, -128, -96],
        [-512, -96, -96],
        [512, -96, -96],
        [-512, -64, -96],
        [512, -64, -96],
        [-512, -32, -96],
        [512, -32, -96],
        [-512, 0, -96],
        [512, 0, -96],
        [-512, 32, -96],
        [512, 32, -96],
        [-512, 64, -96],
        [512, 64, -96],
        [-512, 96, -96],
        [512, 96, -96],
        [-512, 128, -96],
        [512, 128, -96],
        [-512, 160, -96],
        [512, 160, -96],
        [-512, 192, -96],
        [512, 192, -96],
        [-512, 224, -96],
        [512, 224, -96],
        [-512, 256, -96],
        [512, 256, -96],
        [-512, 288, -96],
        [512, 288, -96],
        [-512, 320, -96],
        [512, 320, -96],
        [-512, 352, -96],
        [512, 352, -96],
        [-512, 384, -96],
        [512, 384, -96],
        [-512, 416, -96],
        [512, 416, -96],
        [-512, 448, -96],
        [512, 448, -96],
        [-512, 480, -96],
        [512, 480, -96],
        [-512, -480, -64],
        [512, -480, -64],
        [-512, -448, -64],
        [512, -448, -64],
        [-512, -416, -64],
        [512, -416, -64],
        [-512, -384, -64],
        [512, -384, -64],
        [-512, -352, -64],
        [512, -352, -64],
        [-512, -320, -64],
        [512, -320, -64],
        [-512, -288, -64],
        [512, -288, -64],
        [-512, -256, -64],
        [512, -256, -64],
        [-512, -224, -64],
        [512, -224, -64],
        [-512, -192, -64],
        [512, -192, -64],
        [-512, -160, -64],
        [512, -160, -64],
        [-512, -128, -64],
        [512, -128, -64],
        [-512, -96, -64],
        [512, -96, -64],
        [-512, -64, -64],
        [512, -64, -64],
        [-512, -32, -64],
        [512, -32, -64],
        [-512, 0, -64],
        [512, 0, -64],
        [-512, 32, -64],
        [512, 32, -64],
        [-512, 64, -64],
        [512, 64, -64],
        [-512, 96, -64],
        [512, 96, -64],
        [-512, 128, -64],
        [512, 128, -64],
        [-512, 160, -64],
        [512, 160, -64],
        [-512, 192, -64],
        [512, 192, -64],
        [-512, 224, -64],
        [512, 224, -64],
        [-512, 256, -64],
        [512, 256, -64],
        [-512, 288, -64],
        [512, 288, -64],
        [-512, 320, -64],
        [512, 320, -64],
        [-512, 352, -64],
        [512, 352, -64],
        [-512, 384, -64],
        [512, 384, -64],
        [-512, 416, -64],
        [512, 416, -64],
        [-512, 448, -64],
        [512, 448, -64],
        [-512, 480, -64],
        [512, 480, -64],
        [-512, -480, -32],
        [512, -480, -32],
        [-512, -448, -32],
        [512, -448, -32],
        [-512, -416, -32],
        [512, -416, -32],
        [-512, -384, -32],
        [512, -384, -32],
        [-512, -352, -32],
        [512, -352, -32],
        [-512, -320, -32],
        [512, -320, -32],
        [-512, -288, -32],
        [512, -288, -32],
        [-512, -256, -32],
        [512, -256, -32],
        [-512, -224, -32],
        [512, -224, -32],
        [-512, -192, -32],
        [512, -192, -32],
        [-512, -160, -32],
        [512, -160, -32],
        [-512, -128, -32],
        [512, -128, -32],
        [-512, -96, -32],
        [512, -96, -32],
        [-512, -64, -32],
        [512, -64, -32],
        [-512, -32, -32],
        [512, -32, -32],
        [-512, 0, -32],
        [512, 0, -32],
        [-512, 32, -32],
        [512, 32, -32],
        [-512, 64, -32],
        [512, 64, -32],
        [-512, 96, -32],
        [512, 96, -32],
        [-512, 128, -32],
        [512, 128, -32],
        [-512, 160, -32],
        [512, 160, -32],
        [-512, 192, -32],
        [512, 192, -32],
        [-512, 224, -32],
        [512, 224, -32],
        [-512, 256, -32],
        [512, 256, -32],
        [-512, 288, -32],
        [512, 288, -32],
        [-512, 320, -32],
        [512, 320, -32],
        [-512, 352, -32],
        [512, 352, -32],
        [-512, 384, -32],
        [512, 384, -32],
        [-512, 416, -32],
        [512, 416, -32],
        [-512, 448, -32],
        [512, 448, -32],
        [-512, 480, -32],
        [512, 480, -32],
        [-512, -480, 0],
        [512, -480, 0],
        [-512, -448, 0],
        [512, -448, 0],
        [-512, -416, 0],
        [512, -416, 0],
        [-512, -384, 0],
        [512, -384, 0],
        [-512, -352, 0],
        [512, -352, 0],
        [-512, -320, 0],
        [512, -320, 0],
        [-512, -288, 0],
        [512, -288, 0],
        [-512, -256, 0],
        [512, -256, 0],
        [-512, -224, 0],
        [512, -224, 0],
        [-512, -192, 0],
        [512, -192, 0],
        [-512, -160, 0],
        [512, -160, 0],
        [-512, -128, 0],
        [512, -128, 0],
        [-512, -96, 0],
        [512, -96, 0],
        [-512, -64, 0],
        [512, -64, 0],
        [-512, -32, 0],
        [512, -32, 0],
        [-512, 0, 0],
        [512, 0, 0],
        [-512, 32, 0],
        [512, 32, 0],
        [-512, 64, 0],
        [512, 64, 0],
        [-512, 96, 0],
        [512, 96, 0],
        [-512, 128, 0],
        [512, 128, 0],
        [-512, 160, 0],
        [512, 160, 0],
        [-512, 192, 0],
        [512, 192, 0],
        [-512, 224, 0],
        [512, 224, 0],
        [-512, 256, 0],
        [512, 256, 0],
        [-512, 288, 0],
        [512, 288, 0],
        [-512, 320, 0],
        [512, 320, 0],
        [-512, 352, 0],
        [512, 352, 0],
        [-512, 384, 0],
        [512, 384, 0],
        [-512, 416, 0],
        [512, 416, 0],
        [-512, 448, 0],
        [512, 448, 0],
        [-512, 480, 0],
        [512, 480, 0],
        [-512, -480, 32],
        [512, -480, 32],
        [-512, -448, 32],
        [512, -448, 32],
        [-512, -416, 32],
        [512, -416, 32],
        [-512, -384, 32],
        [512, -384, 32],
        [-512, -352, 32],
        [512, -352, 32],
        [-512, -320, 32],
        [512, -320, 32],
        [-512, -288, 32],
        [512, -288, 32],
        [-512, -256, 32],
        [512, -256, 32],
        [-512, -224, 32],
        [512, -224, 32],
        [-512, -192, 32],
        [512, -192, 32],
        [-512, -160, 32],
        [512, -160, 32],
        [-512, -128, 32],
        [512, -128, 32],
        [-512, -96, 32],
        [512, -96, 32],
        [-512, -64, 32],
        [512, -64, 32],
        [-512, -32, 32],
        [512, -32, 32],
        [-512, 0, 32],
        [512, 0, 32],
        [-512, 32, 32],
        [512, 32, 32],
        [-512, 64, 32],
        [512, 64, 32],
        [-512, 96, 32],
        [512, 96, 32],
        [-512, 128, 32],
        [512, 128, 32],
        [-512, 160, 32],
        [512, 160, 32],
        [-512, 192, 32],
        [512, 192, 32],
        [-512, 224, 32],
        [512, 224, 32],
        [-512, 256, 32],
        [512, 256, 32],
        [-512, 288, 32],
        [512, 288, 32],
        [-512, 320, 32],
        [512, 320, 32],
        [-512, 352, 32],
        [512, 352, 32],
        [-512, 384, 32],
        [512, 384, 32],
        [-512, 416, 32],
        [512, 416, 32],
        [-512, 448, 32],
        [512, 448, 32],
        [-512, 480, 32],
        [512, 480, 32],
        [-512, -480, 64],
        [512, -480, 64],
        [-512, -448, 64],
        [512, -448, 64],
        [-512, -416, 64],
        [512, -416, 64],
        [-512, -384, 64],
        [512, -384, 64],
        [-512, -352, 64],
        [512, -352, 64],
        [-512, -320, 64],
        [512, -320, 64],
        [-512, -288, 64],
        [512, -288, 64],
        [-512, -256, 64],
        [512, -256, 64],
        [-512, -224, 64],
        [512, -224, 64],
        [-512, -192, 64],
        [512, -192, 64],
        [-512, -160, 64],
        [512, -160, 64],
        [-512, -128, 64],
        [512, -128, 64],
        [-512, -96, 64],
        [512, -96, 64],
        [-512, -64, 64],
        [512, -64, 64],
        [-512, -32, 64],
        [512, -32, 64],
        [-512, 0, 64],
        [512, 0, 64],
        [-512, 32, 64],
        [512, 32, 64],
        [-512, 64, 64],
        [512, 64, 64],
        [-512, 96, 64],
        [512, 96, 64],
        [-512, 128, 64],
        [512, 128, 64],
        [-512, 160, 64],
        [512, 160, 64],
        [-512, 192, 64],
        [512, 192, 64],
        [-512, 224, 64],
        [512, 224, 64],
        [-512, 256, 64],
        [512, 256, 64],
        [-512, 288, 64],
        [512, 288, 64],
        [-512, 320, 64],
        [512, 320, 64],
        [-512, 352, 64],
        [512, 352, 64],
        [-512, 384, 64],
        [512, 384, 64],
        [-512, 416, 64],
        [512, 416, 64],
        [-512, 448, 64],
        [512, 448, 64],
        [-512, 480, 64],
        [512, 480, 64],
        [-512, -480, 96],
        [512, -480, 96],
        [-512, -448, 96],
        [512, -448, 96],
        [-512, -416, 96],
        [512, -416, 96],
        [-512, -384, 96],
        [512, -384, 96],
        [-512, -352, 96],
        [512, -352, 96],
        [-512, -320, 96],
        [512, -320, 96],
        [-512, -288, 96],
        [512, -288, 96],
        [-512, -256, 96],
        [512, -256, 96],
        [-512, -224, 96],
        [512, -224, 96],
        [-512, -192, 96],
        [512, -192, 96],
        [-512, -160, 96],
        [512, -160, 96],
        [-512, -128, 96],
        [512, -128, 96],
        [-512, -96, 96],
        [512, -96, 96],
        [-512, -64, 96],
        [512, -64, 96],
        [-512, -32, 96],
        [512, -32, 96],
        [-512, 0, 96],
        [512, 0, 96],
        [-512, 32, 96],
        [512, 32, 96],
        [-512, 64, 96],
        [512, 64, 96],
        [-512, 96, 96],
        [512, 96, 96],
        [-512, 128, 96],
        [512, 128, 96],
        [-512, 160, 96],
        [512, 160, 96],
        [-512, 192, 96],
        [512, 192, 96],
        [-512, 224, 96],
        [512, 224, 96],
        [-512, 256, 96],
        [512, 256, 96],
        [-512, 288, 96],
        [512, 288, 96],
        [-512, 320, 96],
        [512, 320, 96],
        [-512, 352, 96],
        [512, 352, 96],
        [-512, 384, 96],
        [512, 384, 96],
        [-512, 416, 96],
        [512, 416, 96],
        [-512, 448, 96],
        [512, 448, 96],
        [-512, 480, 96],
        [512, 480, 96],
        [-512, -480, 128],
        [512, -480, 128],
        [-512, -448, 128],
        [512, -448, 128],
        [-512, -416, 128],
        [512, -416, 128],
        [-512, -384, 128],
        [512, -384, 128],
        [-512, -352, 128],
        [512, -352, 128],
        [-512, -320, 128],
        [512, -320, 128],
        [-512, -288, 128],
        [512, -288, 128],
        [-512, -256, 128],
        [512, -256, 128],
        [-512, -224, 128],
        [512, -224, 128],
        [-512, -192, 128],
        [512, -192, 128],
        [-512, -160, 128],
        [512, -160, 128],
        [-512, -128, 128],
        [512, -128, 128],
        [-512, -96, 128],
        [512, -96, 128],
        [-512, -64, 128],
        [512, -64, 128],
        [-512, -32, 128],
        [512, -32, 128],
        [-512, 0, 128],
        [512, 0, 128],
        [-512, 32, 128],
        [512, 32, 128],
        [-512, 64, 128],
        [512, 64, 128],
        [-512, 96, 128],
        [512, 96, 128],
        [-512, 128, 128],
        [512, 128, 128],
        [-512, 160, 128],
        [512, 160, 128],
        [-512, 192, 128],
        [512, 192, 128],
        [-512, 224, 128],
        [512, 224, 128],
        [-512, 256, 128],
        [512, 256, 128],
        [-512, 288, 128],
        [512, 288, 128],
        [-512, 320, 128],
        [512, 320, 128],
        [-512, 352, 128],
        [512, 352, 128],
        [-512, 384, 128],
        [512, 384, 128],
        [-512, 416, 128],
        [512, 416, 128],
        [-512, 448, 128],
        [512, 448, 128],
        [-512, 480, 128],
        [512, 480, 128],
        [-512, -480, 160],
        [512, -480, 160],
        [-512, -448, 160],
        [512, -448, 160],
        [-512, -416, 160],
        [512, -416, 160],
        [-512, -384, 160],
        [512, -384, 160],
        [-512, -352, 160],
        [512, -352, 160],
        [-512, -320, 160],
        [512, -320, 160],
        [-512, -288, 160],
        [512, -288, 160],
        [-512, -256, 160],
        [512, -256, 160],
        [-512, -224, 160],
        [512, -224, 160],
        [-512, -192, 160],
        [512, -192, 160],
        [-512, -160, 160],
        [512, -160, 160],
        [-512, -128, 160],
        [512, -128, 160],
        [-512, -96, 160],
        [512, -96, 160],
        [-512, -64, 160],
        [512, -64, 160],
        [-512, -32, 160],
        [512, -32, 160],
        [-512, 0, 160],
        [512, 0, 160],
        [-512, 32, 160],
        [512, 32, 160],
        [-512, 64, 160],
        [512, 64, 160],
        [-512, 96, 160],
        [512, 96, 160],
        [-512, 128, 160],
        [512, 128, 160],
        [-512, 160, 160],
        [512, 160, 160],
        [-512, 192, 160],
        [512, 192, 160],
        [-512, 224, 160],
        [512, 224, 160],
        [-512, 256, 160],
        [512, 256, 160],
        [-512, 288, 160],
        [512, 288, 160],
        [-512, 320, 160],
        [512, 320, 160],
        [-512, 352, 160],
        [512, 352, 160],
        [-512, 384, 160],
        [512, 384, 160],
        [-512, 416, 160],
        [512, 416, 160],
        [-512, 448, 160],
        [512, 448, 160],
        [-512, 480, 160],
        [512, 480, 160],
        [-512, -480, 192],
        [512, -480, 192],
        [-512, -448, 192],
        [512, -448, 192],
        [-512, -416, 192],
        [512, -416, 192],
        [-512, -384, 192],
        [512, -384, 192],
        [-512, -352, 192],
        [512, -352, 192],
        [-512, -320, 192],
        [512, -320, 192],
        [-512, -288, 192],
        [512, -288, 192],
        [-512, -256, 192],
        [512, -256, 192],
        [-512, -224, 192],
        [512, -224, 192],
        [-512, -192, 192],
        [512, -192, 192],
        [-512, -160, 192],
        [512, -160, 192],
        [-512, -128, 192],
        [512, -128, 192],
        [-512, -96, 192],
        [512, -96, 192],
        [-512, -64, 192],
        [512, -64, 192],
        [-512, -32, 192],
        [512, -32, 192],
        [-512, 0, 192],
        [512, 0, 192],
        [-512, 32, 192],
        [512, 32, 192],
        [-512, 64, 192],
        [512, 64, 192],
        [-512, 96, 192],
        [512, 96, 192],
        [-512, 128, 192],
        [512, 128, 192],
        [-512, 160, 192],
        [512, 160, 192],
        [-512, 192, 192],
        [512, 192, 192],
        [-512, 224, 192],
        [512, 224, 192],
        [-512, 256, 192],
        [512, 256, 192],
        [-512, 288, 192],
        [512, 288, 192],
        [-512, 320, 192],
        [512, 320, 192],
        [-512, 352, 192],
        [512, 352, 192],
        [-512, 384, 192],
        [512, 384, 192],
        [-512, 416, 192],
        [512, 416, 192],
        [-512, 448, 192],
        [512, 448, 192],
        [-512, 480, 192],
        [512, 480, 192],
        [-512, -480, 224],
        [512, -480, 224],
        [-512, -448, 224],
        [512, -448, 224],
        [-512, -416, 224],
        [512, -416, 224],
        [-512, -384, 224],
        [512, -384, 224],
        [-512, -352, 224],
        [512, -352, 224],
        [-512, -320, 224],
        [512, -320, 224],
        [-512, -288, 224],
        [512, -288, 224],
        [-512, -256, 224],
        [512, -256, 224],
        [-512, -224, 224],
        [512, -224, 224],
        [-512, -192, 224],
        [512, -192, 224],
        [-512, -160, 224],
        [512, -160, 224],
        [-512, -128, 224],
        [512, -128, 224],
        [-512, -96, 224],
        [512, -96, 224],
        [-512, -64, 224],
        [512, -64, 224],
        [-512, -32, 224],
        [512, -32, 224],
        [-512, 0, 224],
        [512, 0, 224],
        [-512, 32, 224],
        [512, 32, 224],
        [-512, 64, 224],
        [512, 64, 224],
        [-512, 96, 224],
        [512, 96, 224],
        [-512, 128, 224],
        [512, 128, 224],
        [-512, 160, 224],
        [512, 160, 224],
        [-512, 192, 224],
        [512, 192, 224],
        [-512, 224, 224],
        [512, 224, 224],
        [-512, 256, 224],
        [512, 256, 224],
        [-512, 288, 224],
        [512, 288, 224],
        [-512, 320, 224],
        [512, 320, 224],
        [-512, 352, 224],
        [512, 352, 224],
        [-512, 384, 224],
        [512, 384, 224],
        [-512, 416, 224],
        [512, 416, 224],
        [-512, 448, 224],
        [512, 448, 224],
        [-512, 480, 224],
        [512, 480, 224],
        [-512, -480, 256],
        [512, -480, 256],
        [-512, -448, 256],
        [512, -448, 256],
        [-512, -416, 256],
        [512, -416, 256],
        [-512, -384, 256],
        [512, -384, 256],
        [-512, -352, 256],
        [512, -352, 256],
        [-512, -320, 256],
        [512, -320, 256],
        [-512, -288, 256],
        [512, -288, 256],
        [-512, -256, 256],
        [512, -256, 256],
        [-512, -224, 256],
        [512, -224, 256],
        [-512, -192, 256],
        [512, -192, 256],
        [-512, -160, 256],
        [512, -160, 256],
        [-512, -128, 256],
        [512, -128, 256],
        [-512, -96, 256],
        [512, -96, 256],
        [-512, -64, 256],
        [512, -64, 256],
        [-512, -32, 256],
        [512, -32, 256],
        [-512, 0, 256],
        [512, 0, 256],
        [-512, 32, 256],
        [512, 32, 256],
        [-512, 64, 256],
        [512, 64, 256],
        [-512, 96, 256],
        [512, 96, 256],
        [-512, 128, 256],
        [512, 128, 256],
        [-512, 160, 256],
        [512, 160, 256],
        [-512, 192, 256],
        [512, 192, 256],
        [-512, 224, 256],
        [512, 224, 256],
        [-512, 256, 256],
        [512, 256, 256],
        [-512, 288, 256],
        [512, 288, 256],
        [-512, 320, 256],
        [512, 320, 256],
        [-512, 352, 256],
        [512, 352, 256],
        [-512, 384, 256],
        [512, 384, 256],
        [-512, 416, 256],
        [512, 416, 256],
        [-512, 448, 256],
        [512, 448, 256],
        [-512, 480, 256],
        [512, 480, 256],
        [-512, -480, 288],
        [512, -480, 288],
        [-512, -448, 288],
        [512, -448, 288],
        [-512, -416, 288],
        [512, -416, 288],
        [-512, -384, 288],
        [512, -384, 288],
        [-512, -352, 288],
        [512, -352, 288],
        [-512, -320, 288],
        [512, -320, 288],
        [-512, -288, 288],
        [512, -288, 288],
        [-512, -256, 288],
        [512, -256, 288],
        [-512, -224, 288],
        [512, -224, 288],
        [-512, -192, 288],
        [512, -192, 288],
        [-512, -160, 288],
        [512, -160, 288],
        [-512, -128, 288],
        [512, -128, 288],
        [-512, -96, 288],
        [512, -96, 288],
        [-512, -64, 288],
        [512, -64, 288],
        [-512, -32, 288],
        [512, -32, 288],
        [-512, 0, 288],
        [512, 0, 288],
        [-512, 32, 288],
        [512, 32, 288],
        [-512, 64, 288],
        [512, 64, 288],
        [-512, 96, 288],
        [512, 96, 288],
        [-512, 128, 288],
        [512, 128, 288],
        [-512, 160, 288],
        [512, 160, 288],
        [-512, 192, 288],
        [512, 192, 288],
        [-512, 224, 288],
        [512, 224, 288],
        [-512, 256, 288],
        [512, 256, 288],
        [-512, 288, 288],
        [512, 288, 288],
        [-512, 320, 288],
        [512, 320, 288],
        [-512, 352, 288],
        [512, 352, 288],
        [-512, 384, 288],
        [512, 384, 288],
        [-512, 416, 288],
        [512, 416, 288],
        [-512, 448, 288],
        [512, 448, 288],
        [-512, 480, 288],
        [512, 480, 288],
        [-512, -480, 320],
        [512, -480, 320],
        [-512, -448, 320],
        [512, -448, 320],
        [-512, -416, 320],
        [512, -416, 320],
        [-512, -384, 320],
        [512, -384, 320],
        [-512, -352, 320],
        [512, -352, 320],
        [-512, -320, 320],
        [512, -320, 320],
        [-512, -288, 320],
        [512, -288, 320],
        [-512, -256, 320],
        [512, -256, 320],
        [-512, -224, 320],
        [512, -224, 320],
        [-512, -192, 320],
        [512, -192, 320],
        [-512, -160, 320],
        [512, -160, 320],
        [-512, -128, 320],
        [512, -128, 320],
        [-512, -96, 320],
        [512, -96, 320],
        [-512, -64, 320],
        [512, -64, 320],
        [-512, -32, 320],
        [512, -32, 320],
        [-512, 0, 320],
        [512, 0, 320],
        [-512, 32, 320],
        [512, 32, 320],
        [-512, 64, 320],
        [512, 64, 320],
        [-512, 96, 320],
        [512, 96, 320],
        [-512, 128, 320],
        [512, 128, 320],
        [-512, 160, 320],
        [512, 160, 320],
        [-512, 192, 320],
        [512, 192, 320],
        [-512, 224, 320],
        [512, 224, 320],
        [-512, 256, 320],
        [512, 256, 320],
        [-512, 288, 320],
        [512, 288, 320],
        [-512, 320, 320],
        [512, 320, 320],
        [-512, 352, 320],
        [512, 352, 320],
        [-512, 384, 320],
        [512, 384, 320],
        [-512, 416, 320],
        [512, 416, 320],
        [-512, 448, 320],
        [512, 448, 320],
        [-512, 480, 320],
        [512, 480, 320],
        [-512, -480, 352],
        [512, -480, 352],
        [-512, -448, 352],
        [512, -448, 352],
        [-512, -416, 352],
        [512, -416, 352],
        [-512, -384, 352],
        [512, -384, 352],
        [-512, -352, 352],
        [512, -352, 352],
        [-512, -320, 352],
        [512, -320, 352],
        [-512, -288, 352],
        [512, -288, 352],
        [-512, -256, 352],
        [512, -256, 352],
        [-512, -224, 352],
        [512, -224, 352],
        [-512, -192, 352],
        [512, -192, 352],
        [-512, -160, 352],
        [512, -160, 352],
        [-512, -128, 352],
        [512, -128, 352],
        [-512, -96, 352],
        [512, -96, 352],
        [-512, -64, 352],
        [512, -64, 352],
        [-512, -32, 352],
        [512, -32, 352],
        [-512, 0, 352],
        [512, 0, 352],
        [-512, 32, 352],
        [512, 32, 352],
        [-512, 64, 352],
        [512, 64, 352],
        [-512, 96, 352],
        [512, 96, 352],
        [-512, 128, 352],
        [512, 128, 352],
        [-512, 160, 352],
        [512, 160, 352],
        [-512, 192, 352],
        [512, 192, 352],
        [-512, 224, 352],
        [512, 224, 352],
        [-512, 256, 352],
        [512, 256, 352],
        [-512, 288, 352],
        [512, 288, 352],
        [-512, 320, 352],
        [512, 320, 352],
        [-512, 352, 352],
        [512, 352, 352],
        [-512, 384, 352],
        [512, 384, 352],
        [-512, 416, 352],
        [512, 416, 352],
        [-512, 448, 352],
        [512, 448, 352],
        [-512, 480, 352],
        [512, 480, 352],
        [-512, -480, 384],
        [512, -480, 384],
        [-512, -448, 384],
        [512, -448, 384],
        [-512, -416, 384],
        [512, -416, 384],
        [-512, -384, 384],
        [512, -384, 384],
        [-512, -352, 384],
        [512, -352, 384],
        [-512, -320, 384],
        [512, -320, 384],
        [-512, -288, 384],
        [512, -288, 384],
        [-512, -256, 384],
        [512, -256, 384],
        [-512, -224, 384],
        [512, -224, 384],
        [-512, -192, 384],
        [512, -192, 384],
        [-512, -160, 384],
        [512, -160, 384],
        [-512, -128, 384],
        [512, -128, 384],
        [-512, -96, 384],
        [512, -96, 384],
        [-512, -64, 384],
        [512, -64, 384],
        [-512, -32, 384],
        [512, -32, 384],
        [-512, 0, 384],
        [512, 0, 384],
        [-512, 32, 384],
        [512, 32, 384],
        [-512, 64, 384],
        [512, 64, 384],
        [-512, 96, 384],
        [512, 96, 384],
        [-512, 128, 384],
        [512, 128, 384],
        [-512, 160, 384],
        [512, 160, 384],
        [-512, 192, 384],
        [512, 192, 384],
        [-512, 224, 384],
        [512, 224, 384],
        [-512, 256, 384],
        [512, 256, 384],
        [-512, 288, 384],
        [512, 288, 384],
        [-512, 320, 384],
        [512, 320, 384],
        [-512, 352, 384],
        [512, 352, 384],
        [-512, 384, 384],
        [512, 384, 384],
        [-512, 416, 384],
        [512, 416, 384],
        [-512, 448, 384],
        [512, 448, 384],
        [-512, 480, 384],
        [512, 480, 384],
        [-512, -480, 416],
        [512, -480, 416],
        [-512, -448, 416],
        [512, -448, 416],
        [-512, -416, 416],
        [512, -416, 416],
        [-512, -384, 416],
        [512, -384, 416],
        [-512, -352, 416],
        [512, -352, 416],
        [-512, -320, 416],
        [512, -320, 416],
        [-512, -288, 416],
        [512, -288, 416],
        [-512, -256, 416],
        [512, -256, 416],
        [-512, -224, 416],
        [512, -224, 416],
        [-512, -192, 416],
        [512, -192, 416],
        [-512, -160, 416],
        [512, -160, 416],
        [-512, -128, 416],
        [512, -128, 416],
        [-512, -96, 416],
        [512, -96, 416],
        [-512, -64, 416],
        [512, -64, 416],
        [-512, -32, 416],
        [512, -32, 416],
        [-512, 0, 416],
        [512, 0, 416],
        [-512, 32, 416],
        [512, 32, 416],
        [-512, 64, 416],
        [512, 64, 416],
        [-512, 96, 416],
        [512, 96, 416],
        [-512, 128, 416],
        [512, 128, 416],
        [-512, 160, 416],
        [512, 160, 416],
        [-512, 192, 416],
        [512, 192, 416],
        [-512, 224, 416],
        [512, 224, 416],
        [-512, 256, 416],
        [512, 256, 416],
        [-512, 288, 416],
        [512, 288, 416],
        [-512, 320, 416],
        [512, 320, 416],
        [-512, 352, 416],
        [512, 352, 416],
        [-512, 384, 416],
        [512, 384, 416],
        [-512, 416, 416],
        [512, 416, 416],
        [-512, 448, 416],
        [512, 448, 416],
        [-512, 480, 416],
        [512, 480, 416],
        [-512, -480, 448],
        [512, -480, 448],
        [-512, -448, 448],
        [512, -448, 448],
        [-512, -416, 448],
        [512, -416, 448],
        [-512, -384, 448],
        [512, -384, 448],
        [-512, -352, 448],
        [512, -352, 448],
        [-512, -320, 448],
        [512, -320, 448],
        [-512, -288, 448],
        [512, -288, 448],
        [-512, -256, 448],
        [512, -256, 448],
        [-512, -224, 448],
        [512, -224, 448],
        [-512, -192, 448],
        [512, -192, 448],
        [-512, -160, 448],
        [512, -160, 448],
        [-512, -128, 448],
        [512, -128, 448],
        [-512, -96, 448],
        [512, -96, 448],
        [-512, -64, 448],
        [512, -64, 448],
        [-512, -32, 448],
        [512, -32, 448],
        [-512, 0, 448],
        [512, 0, 448],
        [-512, 32, 448],
        [512, 32, 448],
        [-512, 64, 448],
        [512, 64, 448],
        [-512, 96, 448],
        [512, 96, 448],
        [-512, 128, 448],
        [512, 128, 448],
        [-512, 160, 448],
        [512, 160, 448],
        [-512, 192, 448],
        [512, 192, 448],
        [-512, 224, 448],
        [512, 224, 448],
        [-512, 256, 448],
        [512, 256, 448],
        [-512, 288, 448],
        [512, 288, 448],
        [-512, 320, 448],
        [512, 320, 448],
        [-512, 352, 448],
        [512, 352, 448],
        [-512, 384, 448],
        [512, 384, 448],
        [-512, 416, 448],
        [512, 416, 448],
        [-512, 448, 448],
        [512, 448, 448],
        [-512, 480, 448],
        [512, 480, 448],
        [-512, -480, 480],
        [512, -480, 480],
        [-512, -448, 480],
        [512, -448, 480],
        [-512, -416, 480],
        [512, -416, 480],
        [-512, -384, 480],
        [512, -384, 480],
        [-512, -352, 480],
        [512, -352, 480],
        [-512, -320, 480],
        [512, -320, 480],
        [-512, -288, 480],
        [512, -288, 480],
        [-512, -256, 480],
        [512, -256, 480],
        [-512, -224, 480],
        [512, -224, 480],
        [-512, -192, 480],
        [512, -192, 480],
        [-512, -160, 480],
        [512, -160, 480],
        [-512, -128, 480],
        [512, -128, 480],
        [-512, -96, 480],
        [512, -96, 480],
        [-512, -64, 480],
        [512, -64, 480],
        [-512, -32, 480],
        [512, -32, 480],
        [-512, 0, 480],
        [512, 0, 480],
        [-512, 32, 480],
        [512, 32, 480],
        [-512, 64, 480],
        [512, 64, 480],
        [-512, 96, 480],
        [512, 96, 480],
        [-512, 128, 480],
        [512, 128, 480],
        [-512, 160, 480],
        [512, 160, 480],
        [-512, 192, 480],
        [512, 192, 480],
        [-512, 224, 480],
        [512, 224, 480],
        [-512, 256, 480],
        [512, 256, 480],
        [-512, 288, 480],
        [512, 288, 480],
        [-512, 320, 480],
        [512, 320, 480],
        [-512, 352, 480],
        [512, 352, 480],
        [-512, 384, 480],
        [512, 384, 480],
        [-512, 416, 480],
        [512, 416, 480],
        [-512, 448, 480],
        [512, 448, 480],
        [-512, 480, 480],
        [512, 480, 480]],
    '17': [[-544, -544, -544],
        [-544, -544, 544],
        [-544, -512, -544],
        [-544, -512, 544],
        [-544, -480, -544],
        [-544, -480, 544],
        [-544, -448, -544],
        [-544, -448, 544],
        [-544, -416, -544],
        [-544, -416, 544],
        [-544, -384, -544],
        [-544, -384, 544],
        [-544, -352, -544],
        [-544, -352, 544],
        [-544, -320, -544],
        [-544, -320, 544],
        [-544, -288, -544],
        [-544, -288, 544],
        [-544, -256, -544],
        [-544, -256, 544],
        [-544, -224, -544],
        [-544, -224, 544],
        [-544, -192, -544],
        [-544, -192, 544],
        [-544, -160, -544],
        [-544, -160, 544],
        [-544, -128, -544],
        [-544, -128, 544],
        [-544, -96, -544],
        [-544, -96, 544],
        [-544, -64, -544],
        [-544, -64, 544],
        [-544, -32, -544],
        [-544, -32, 544],
        [-544, 0, -544],
        [-544, 0, 544],
        [-544, 32, -544],
        [-544, 32, 544],
        [-544, 64, -544],
        [-544, 64, 544],
        [-544, 96, -544],
        [-544, 96, 544],
        [-544, 128, -544],
        [-544, 128, 544],
        [-544, 160, -544],
        [-544, 160, 544],
        [-544, 192, -544],
        [-544, 192, 544],
        [-544, 224, -544],
        [-544, 224, 544],
        [-544, 256, -544],
        [-544, 256, 544],
        [-544, 288, -544],
        [-544, 288, 544],
        [-544, 320, -544],
        [-544, 320, 544],
        [-544, 352, -544],
        [-544, 352, 544],
        [-544, 384, -544],
        [-544, 384, 544],
        [-544, 416, -544],
        [-544, 416, 544],
        [-544, 448, -544],
        [-544, 448, 544],
        [-544, 480, -544],
        [-544, 480, 544],
        [-544, 512, -544],
        [-544, 512, 544],
        [-544, 544, -544],
        [-544, 544, 544],
        [-544, -544, -512],
        [-544, 544, -512],
        [-544, -544, -480],
        [-544, 544, -480],
        [-544, -544, -448],
        [-544, 544, -448],
        [-544, -544, -416],
        [-544, 544, -416],
        [-544, -544, -384],
        [-544, 544, -384],
        [-544, -544, -352],
        [-544, 544, -352],
        [-544, -544, -320],
        [-544, 544, -320],
        [-544, -544, -288],
        [-544, 544, -288],
        [-544, -544, -256],
        [-544, 544, -256],
        [-544, -544, -224],
        [-544, 544, -224],
        [-544, -544, -192],
        [-544, 544, -192],
        [-544, -544, -160],
        [-544, 544, -160],
        [-544, -544, -128],
        [-544, 544, -128],
        [-544, -544, -96],
        [-544, 544, -96],
        [-544, -544, -64],
        [-544, 544, -64],
        [-544, -544, -32],
        [-544, 544, -32],
        [-544, -544, 0],
        [-544, 544, 0],
        [-544, -544, 32],
        [-544, 544, 32],
        [-544, -544, 64],
        [-544, 544, 64],
        [-544, -544, 96],
        [-544, 544, 96],
        [-544, -544, 128],
        [-544, 544, 128],
        [-544, -544, 160],
        [-544, 544, 160],
        [-544, -544, 192],
        [-544, 544, 192],
        [-544, -544, 224],
        [-544, 544, 224],
        [-544, -544, 256],
        [-544, 544, 256],
        [-544, -544, 288],
        [-544, 544, 288],
        [-544, -544, 320],
        [-544, 544, 320],
        [-544, -544, 352],
        [-544, 544, 352],
        [-544, -544, 384],
        [-544, 544, 384],
        [-544, -544, 416],
        [-544, 544, 416],
        [-544, -544, 448],
        [-544, 544, 448],
        [-544, -544, 480],
        [-544, 544, 480],
        [-544, -544, 512],
        [-544, 544, 512],
        [-512, -544, -544],
        [-512, -544, 544],
        [-512, -512, -544],
        [-512, -512, 544],
        [-512, -480, -544],
        [-512, -480, 544],
        [-512, -448, -544],
        [-512, -448, 544],
        [-512, -416, -544],
        [-512, -416, 544],
        [-512, -384, -544],
        [-512, -384, 544],
        [-512, -352, -544],
        [-512, -352, 544],
        [-512, -320, -544],
        [-512, -320, 544],
        [-512, -288, -544],
        [-512, -288, 544],
        [-512, -256, -544],
        [-512, -256, 544],
        [-512, -224, -544],
        [-512, -224, 544],
        [-512, -192, -544],
        [-512, -192, 544],
        [-512, -160, -544],
        [-512, -160, 544],
        [-512, -128, -544],
        [-512, -128, 544],
        [-512, -96, -544],
        [-512, -96, 544],
        [-512, -64, -544],
        [-512, -64, 544],
        [-512, -32, -544],
        [-512, -32, 544],
        [-512, 0, -544],
        [-512, 0, 544],
        [-512, 32, -544],
        [-512, 32, 544],
        [-512, 64, -544],
        [-512, 64, 544],
        [-512, 96, -544],
        [-512, 96, 544],
        [-512, 128, -544],
        [-512, 128, 544],
        [-512, 160, -544],
        [-512, 160, 544],
        [-512, 192, -544],
        [-512, 192, 544],
        [-512, 224, -544],
        [-512, 224, 544],
        [-512, 256, -544],
        [-512, 256, 544],
        [-512, 288, -544],
        [-512, 288, 544],
        [-512, 320, -544],
        [-512, 320, 544],
        [-512, 352, -544],
        [-512, 352, 544],
        [-512, 384, -544],
        [-512, 384, 544],
        [-512, 416, -544],
        [-512, 416, 544],
        [-512, 448, -544],
        [-512, 448, 544],
        [-512, 480, -544],
        [-512, 480, 544],
        [-512, 512, -544],
        [-512, 512, 544],
        [-512, 544, -544],
        [-512, 544, 544],
        [-512, -544, -512],
        [-512, 544, -512],
        [-512, -544, -480],
        [-512, 544, -480],
        [-512, -544, -448],
        [-512, 544, -448],
        [-512, -544, -416],
        [-512, 544, -416],
        [-512, -544, -384],
        [-512, 544, -384],
        [-512, -544, -352],
        [-512, 544, -352],
        [-512, -544, -320],
        [-512, 544, -320],
        [-512, -544, -288],
        [-512, 544, -288],
        [-512, -544, -256],
        [-512, 544, -256],
        [-512, -544, -224],
        [-512, 544, -224],
        [-512, -544, -192],
        [-512, 544, -192],
        [-512, -544, -160],
        [-512, 544, -160],
        [-512, -544, -128],
        [-512, 544, -128],
        [-512, -544, -96],
        [-512, 544, -96],
        [-512, -544, -64],
        [-512, 544, -64],
        [-512, -544, -32],
        [-512, 544, -32],
        [-512, -544, 0],
        [-512, 544, 0],
        [-512, -544, 32],
        [-512, 544, 32],
        [-512, -544, 64],
        [-512, 544, 64],
        [-512, -544, 96],
        [-512, 544, 96],
        [-512, -544, 128],
        [-512, 544, 128],
        [-512, -544, 160],
        [-512, 544, 160],
        [-512, -544, 192],
        [-512, 544, 192],
        [-512, -544, 224],
        [-512, 544, 224],
        [-512, -544, 256],
        [-512, 544, 256],
        [-512, -544, 288],
        [-512, 544, 288],
        [-512, -544, 320],
        [-512, 544, 320],
        [-512, -544, 352],
        [-512, 544, 352],
        [-512, -544, 384],
        [-512, 544, 384],
        [-512, -544, 416],
        [-512, 544, 416],
        [-512, -544, 448],
        [-512, 544, 448],
        [-512, -544, 480],
        [-512, 544, 480],
        [-512, -544, 512],
        [-512, 544, 512],
        [-480, -544, -544],
        [-480, -544, 544],
        [-480, -512, -544],
        [-480, -512, 544],
        [-480, -480, -544],
        [-480, -480, 544],
        [-480, -448, -544],
        [-480, -448, 544],
        [-480, -416, -544],
        [-480, -416, 544],
        [-480, -384, -544],
        [-480, -384, 544],
        [-480, -352, -544],
        [-480, -352, 544],
        [-480, -320, -544],
        [-480, -320, 544],
        [-480, -288, -544],
        [-480, -288, 544],
        [-480, -256, -544],
        [-480, -256, 544],
        [-480, -224, -544],
        [-480, -224, 544],
        [-480, -192, -544],
        [-480, -192, 544],
        [-480, -160, -544],
        [-480, -160, 544],
        [-480, -128, -544],
        [-480, -128, 544],
        [-480, -96, -544],
        [-480, -96, 544],
        [-480, -64, -544],
        [-480, -64, 544],
        [-480, -32, -544],
        [-480, -32, 544],
        [-480, 0, -544],
        [-480, 0, 544],
        [-480, 32, -544],
        [-480, 32, 544],
        [-480, 64, -544],
        [-480, 64, 544],
        [-480, 96, -544],
        [-480, 96, 544],
        [-480, 128, -544],
        [-480, 128, 544],
        [-480, 160, -544],
        [-480, 160, 544],
        [-480, 192, -544],
        [-480, 192, 544],
        [-480, 224, -544],
        [-480, 224, 544],
        [-480, 256, -544],
        [-480, 256, 544],
        [-480, 288, -544],
        [-480, 288, 544],
        [-480, 320, -544],
        [-480, 320, 544],
        [-480, 352, -544],
        [-480, 352, 544],
        [-480, 384, -544],
        [-480, 384, 544],
        [-480, 416, -544],
        [-480, 416, 544],
        [-480, 448, -544],
        [-480, 448, 544],
        [-480, 480, -544],
        [-480, 480, 544],
        [-480, 512, -544],
        [-480, 512, 544],
        [-480, 544, -544],
        [-480, 544, 544],
        [-480, -544, -512],
        [-480, 544, -512],
        [-480, -544, -480],
        [-480, 544, -480],
        [-480, -544, -448],
        [-480, 544, -448],
        [-480, -544, -416],
        [-480, 544, -416],
        [-480, -544, -384],
        [-480, 544, -384],
        [-480, -544, -352],
        [-480, 544, -352],
        [-480, -544, -320],
        [-480, 544, -320],
        [-480, -544, -288],
        [-480, 544, -288],
        [-480, -544, -256],
        [-480, 544, -256],
        [-480, -544, -224],
        [-480, 544, -224],
        [-480, -544, -192],
        [-480, 544, -192],
        [-480, -544, -160],
        [-480, 544, -160],
        [-480, -544, -128],
        [-480, 544, -128],
        [-480, -544, -96],
        [-480, 544, -96],
        [-480, -544, -64],
        [-480, 544, -64],
        [-480, -544, -32],
        [-480, 544, -32],
        [-480, -544, 0],
        [-480, 544, 0],
        [-480, -544, 32],
        [-480, 544, 32],
        [-480, -544, 64],
        [-480, 544, 64],
        [-480, -544, 96],
        [-480, 544, 96],
        [-480, -544, 128],
        [-480, 544, 128],
        [-480, -544, 160],
        [-480, 544, 160],
        [-480, -544, 192],
        [-480, 544, 192],
        [-480, -544, 224],
        [-480, 544, 224],
        [-480, -544, 256],
        [-480, 544, 256],
        [-480, -544, 288],
        [-480, 544, 288],
        [-480, -544, 320],
        [-480, 544, 320],
        [-480, -544, 352],
        [-480, 544, 352],
        [-480, -544, 384],
        [-480, 544, 384],
        [-480, -544, 416],
        [-480, 544, 416],
        [-480, -544, 448],
        [-480, 544, 448],
        [-480, -544, 480],
        [-480, 544, 480],
        [-480, -544, 512],
        [-480, 544, 512],
        [-448, -544, -544],
        [-448, -544, 544],
        [-448, -512, -544],
        [-448, -512, 544],
        [-448, -480, -544],
        [-448, -480, 544],
        [-448, -448, -544],
        [-448, -448, 544],
        [-448, -416, -544],
        [-448, -416, 544],
        [-448, -384, -544],
        [-448, -384, 544],
        [-448, -352, -544],
        [-448, -352, 544],
        [-448, -320, -544],
        [-448, -320, 544],
        [-448, -288, -544],
        [-448, -288, 544],
        [-448, -256, -544],
        [-448, -256, 544],
        [-448, -224, -544],
        [-448, -224, 544],
        [-448, -192, -544],
        [-448, -192, 544],
        [-448, -160, -544],
        [-448, -160, 544],
        [-448, -128, -544],
        [-448, -128, 544],
        [-448, -96, -544],
        [-448, -96, 544],
        [-448, -64, -544],
        [-448, -64, 544],
        [-448, -32, -544],
        [-448, -32, 544],
        [-448, 0, -544],
        [-448, 0, 544],
        [-448, 32, -544],
        [-448, 32, 544],
        [-448, 64, -544],
        [-448, 64, 544],
        [-448, 96, -544],
        [-448, 96, 544],
        [-448, 128, -544],
        [-448, 128, 544],
        [-448, 160, -544],
        [-448, 160, 544],
        [-448, 192, -544],
        [-448, 192, 544],
        [-448, 224, -544],
        [-448, 224, 544],
        [-448, 256, -544],
        [-448, 256, 544],
        [-448, 288, -544],
        [-448, 288, 544],
        [-448, 320, -544],
        [-448, 320, 544],
        [-448, 352, -544],
        [-448, 352, 544],
        [-448, 384, -544],
        [-448, 384, 544],
        [-448, 416, -544],
        [-448, 416, 544],
        [-448, 448, -544],
        [-448, 448, 544],
        [-448, 480, -544],
        [-448, 480, 544],
        [-448, 512, -544],
        [-448, 512, 544],
        [-448, 544, -544],
        [-448, 544, 544],
        [-448, -544, -512],
        [-448, 544, -512],
        [-448, -544, -480],
        [-448, 544, -480],
        [-448, -544, -448],
        [-448, 544, -448],
        [-448, -544, -416],
        [-448, 544, -416],
        [-448, -544, -384],
        [-448, 544, -384],
        [-448, -544, -352],
        [-448, 544, -352],
        [-448, -544, -320],
        [-448, 544, -320],
        [-448, -544, -288],
        [-448, 544, -288],
        [-448, -544, -256],
        [-448, 544, -256],
        [-448, -544, -224],
        [-448, 544, -224],
        [-448, -544, -192],
        [-448, 544, -192],
        [-448, -544, -160],
        [-448, 544, -160],
        [-448, -544, -128],
        [-448, 544, -128],
        [-448, -544, -96],
        [-448, 544, -96],
        [-448, -544, -64],
        [-448, 544, -64],
        [-448, -544, -32],
        [-448, 544, -32],
        [-448, -544, 0],
        [-448, 544, 0],
        [-448, -544, 32],
        [-448, 544, 32],
        [-448, -544, 64],
        [-448, 544, 64],
        [-448, -544, 96],
        [-448, 544, 96],
        [-448, -544, 128],
        [-448, 544, 128],
        [-448, -544, 160],
        [-448, 544, 160],
        [-448, -544, 192],
        [-448, 544, 192],
        [-448, -544, 224],
        [-448, 544, 224],
        [-448, -544, 256],
        [-448, 544, 256],
        [-448, -544, 288],
        [-448, 544, 288],
        [-448, -544, 320],
        [-448, 544, 320],
        [-448, -544, 352],
        [-448, 544, 352],
        [-448, -544, 384],
        [-448, 544, 384],
        [-448, -544, 416],
        [-448, 544, 416],
        [-448, -544, 448],
        [-448, 544, 448],
        [-448, -544, 480],
        [-448, 544, 480],
        [-448, -544, 512],
        [-448, 544, 512],
        [-416, -544, -544],
        [-416, -544, 544],
        [-416, -512, -544],
        [-416, -512, 544],
        [-416, -480, -544],
        [-416, -480, 544],
        [-416, -448, -544],
        [-416, -448, 544],
        [-416, -416, -544],
        [-416, -416, 544],
        [-416, -384, -544],
        [-416, -384, 544],
        [-416, -352, -544],
        [-416, -352, 544],
        [-416, -320, -544],
        [-416, -320, 544],
        [-416, -288, -544],
        [-416, -288, 544],
        [-416, -256, -544],
        [-416, -256, 544],
        [-416, -224, -544],
        [-416, -224, 544],
        [-416, -192, -544],
        [-416, -192, 544],
        [-416, -160, -544],
        [-416, -160, 544],
        [-416, -128, -544],
        [-416, -128, 544],
        [-416, -96, -544],
        [-416, -96, 544],
        [-416, -64, -544],
        [-416, -64, 544],
        [-416, -32, -544],
        [-416, -32, 544],
        [-416, 0, -544],
        [-416, 0, 544],
        [-416, 32, -544],
        [-416, 32, 544],
        [-416, 64, -544],
        [-416, 64, 544],
        [-416, 96, -544],
        [-416, 96, 544],
        [-416, 128, -544],
        [-416, 128, 544],
        [-416, 160, -544],
        [-416, 160, 544],
        [-416, 192, -544],
        [-416, 192, 544],
        [-416, 224, -544],
        [-416, 224, 544],
        [-416, 256, -544],
        [-416, 256, 544],
        [-416, 288, -544],
        [-416, 288, 544],
        [-416, 320, -544],
        [-416, 320, 544],
        [-416, 352, -544],
        [-416, 352, 544],
        [-416, 384, -544],
        [-416, 384, 544],
        [-416, 416, -544],
        [-416, 416, 544],
        [-416, 448, -544],
        [-416, 448, 544],
        [-416, 480, -544],
        [-416, 480, 544],
        [-416, 512, -544],
        [-416, 512, 544],
        [-416, 544, -544],
        [-416, 544, 544],
        [-416, -544, -512],
        [-416, 544, -512],
        [-416, -544, -480],
        [-416, 544, -480],
        [-416, -544, -448],
        [-416, 544, -448],
        [-416, -544, -416],
        [-416, 544, -416],
        [-416, -544, -384],
        [-416, 544, -384],
        [-416, -544, -352],
        [-416, 544, -352],
        [-416, -544, -320],
        [-416, 544, -320],
        [-416, -544, -288],
        [-416, 544, -288],
        [-416, -544, -256],
        [-416, 544, -256],
        [-416, -544, -224],
        [-416, 544, -224],
        [-416, -544, -192],
        [-416, 544, -192],
        [-416, -544, -160],
        [-416, 544, -160],
        [-416, -544, -128],
        [-416, 544, -128],
        [-416, -544, -96],
        [-416, 544, -96],
        [-416, -544, -64],
        [-416, 544, -64],
        [-416, -544, -32],
        [-416, 544, -32],
        [-416, -544, 0],
        [-416, 544, 0],
        [-416, -544, 32],
        [-416, 544, 32],
        [-416, -544, 64],
        [-416, 544, 64],
        [-416, -544, 96],
        [-416, 544, 96],
        [-416, -544, 128],
        [-416, 544, 128],
        [-416, -544, 160],
        [-416, 544, 160],
        [-416, -544, 192],
        [-416, 544, 192],
        [-416, -544, 224],
        [-416, 544, 224],
        [-416, -544, 256],
        [-416, 544, 256],
        [-416, -544, 288],
        [-416, 544, 288],
        [-416, -544, 320],
        [-416, 544, 320],
        [-416, -544, 352],
        [-416, 544, 352],
        [-416, -544, 384],
        [-416, 544, 384],
        [-416, -544, 416],
        [-416, 544, 416],
        [-416, -544, 448],
        [-416, 544, 448],
        [-416, -544, 480],
        [-416, 544, 480],
        [-416, -544, 512],
        [-416, 544, 512],
        [-384, -544, -544],
        [-384, -544, 544],
        [-384, -512, -544],
        [-384, -512, 544],
        [-384, -480, -544],
        [-384, -480, 544],
        [-384, -448, -544],
        [-384, -448, 544],
        [-384, -416, -544],
        [-384, -416, 544],
        [-384, -384, -544],
        [-384, -384, 544],
        [-384, -352, -544],
        [-384, -352, 544],
        [-384, -320, -544],
        [-384, -320, 544],
        [-384, -288, -544],
        [-384, -288, 544],
        [-384, -256, -544],
        [-384, -256, 544],
        [-384, -224, -544],
        [-384, -224, 544],
        [-384, -192, -544],
        [-384, -192, 544],
        [-384, -160, -544],
        [-384, -160, 544],
        [-384, -128, -544],
        [-384, -128, 544],
        [-384, -96, -544],
        [-384, -96, 544],
        [-384, -64, -544],
        [-384, -64, 544],
        [-384, -32, -544],
        [-384, -32, 544],
        [-384, 0, -544],
        [-384, 0, 544],
        [-384, 32, -544],
        [-384, 32, 544],
        [-384, 64, -544],
        [-384, 64, 544],
        [-384, 96, -544],
        [-384, 96, 544],
        [-384, 128, -544],
        [-384, 128, 544],
        [-384, 160, -544],
        [-384, 160, 544],
        [-384, 192, -544],
        [-384, 192, 544],
        [-384, 224, -544],
        [-384, 224, 544],
        [-384, 256, -544],
        [-384, 256, 544],
        [-384, 288, -544],
        [-384, 288, 544],
        [-384, 320, -544],
        [-384, 320, 544],
        [-384, 352, -544],
        [-384, 352, 544],
        [-384, 384, -544],
        [-384, 384, 544],
        [-384, 416, -544],
        [-384, 416, 544],
        [-384, 448, -544],
        [-384, 448, 544],
        [-384, 480, -544],
        [-384, 480, 544],
        [-384, 512, -544],
        [-384, 512, 544],
        [-384, 544, -544],
        [-384, 544, 544],
        [-384, -544, -512],
        [-384, 544, -512],
        [-384, -544, -480],
        [-384, 544, -480],
        [-384, -544, -448],
        [-384, 544, -448],
        [-384, -544, -416],
        [-384, 544, -416],
        [-384, -544, -384],
        [-384, 544, -384],
        [-384, -544, -352],
        [-384, 544, -352],
        [-384, -544, -320],
        [-384, 544, -320],
        [-384, -544, -288],
        [-384, 544, -288],
        [-384, -544, -256],
        [-384, 544, -256],
        [-384, -544, -224],
        [-384, 544, -224],
        [-384, -544, -192],
        [-384, 544, -192],
        [-384, -544, -160],
        [-384, 544, -160],
        [-384, -544, -128],
        [-384, 544, -128],
        [-384, -544, -96],
        [-384, 544, -96],
        [-384, -544, -64],
        [-384, 544, -64],
        [-384, -544, -32],
        [-384, 544, -32],
        [-384, -544, 0],
        [-384, 544, 0],
        [-384, -544, 32],
        [-384, 544, 32],
        [-384, -544, 64],
        [-384, 544, 64],
        [-384, -544, 96],
        [-384, 544, 96],
        [-384, -544, 128],
        [-384, 544, 128],
        [-384, -544, 160],
        [-384, 544, 160],
        [-384, -544, 192],
        [-384, 544, 192],
        [-384, -544, 224],
        [-384, 544, 224],
        [-384, -544, 256],
        [-384, 544, 256],
        [-384, -544, 288],
        [-384, 544, 288],
        [-384, -544, 320],
        [-384, 544, 320],
        [-384, -544, 352],
        [-384, 544, 352],
        [-384, -544, 384],
        [-384, 544, 384],
        [-384, -544, 416],
        [-384, 544, 416],
        [-384, -544, 448],
        [-384, 544, 448],
        [-384, -544, 480],
        [-384, 544, 480],
        [-384, -544, 512],
        [-384, 544, 512],
        [-352, -544, -544],
        [-352, -544, 544],
        [-352, -512, -544],
        [-352, -512, 544],
        [-352, -480, -544],
        [-352, -480, 544],
        [-352, -448, -544],
        [-352, -448, 544],
        [-352, -416, -544],
        [-352, -416, 544],
        [-352, -384, -544],
        [-352, -384, 544],
        [-352, -352, -544],
        [-352, -352, 544],
        [-352, -320, -544],
        [-352, -320, 544],
        [-352, -288, -544],
        [-352, -288, 544],
        [-352, -256, -544],
        [-352, -256, 544],
        [-352, -224, -544],
        [-352, -224, 544],
        [-352, -192, -544],
        [-352, -192, 544],
        [-352, -160, -544],
        [-352, -160, 544],
        [-352, -128, -544],
        [-352, -128, 544],
        [-352, -96, -544],
        [-352, -96, 544],
        [-352, -64, -544],
        [-352, -64, 544],
        [-352, -32, -544],
        [-352, -32, 544],
        [-352, 0, -544],
        [-352, 0, 544],
        [-352, 32, -544],
        [-352, 32, 544],
        [-352, 64, -544],
        [-352, 64, 544],
        [-352, 96, -544],
        [-352, 96, 544],
        [-352, 128, -544],
        [-352, 128, 544],
        [-352, 160, -544],
        [-352, 160, 544],
        [-352, 192, -544],
        [-352, 192, 544],
        [-352, 224, -544],
        [-352, 224, 544],
        [-352, 256, -544],
        [-352, 256, 544],
        [-352, 288, -544],
        [-352, 288, 544],
        [-352, 320, -544],
        [-352, 320, 544],
        [-352, 352, -544],
        [-352, 352, 544],
        [-352, 384, -544],
        [-352, 384, 544],
        [-352, 416, -544],
        [-352, 416, 544],
        [-352, 448, -544],
        [-352, 448, 544],
        [-352, 480, -544],
        [-352, 480, 544],
        [-352, 512, -544],
        [-352, 512, 544],
        [-352, 544, -544],
        [-352, 544, 544],
        [-352, -544, -512],
        [-352, 544, -512],
        [-352, -544, -480],
        [-352, 544, -480],
        [-352, -544, -448],
        [-352, 544, -448],
        [-352, -544, -416],
        [-352, 544, -416],
        [-352, -544, -384],
        [-352, 544, -384],
        [-352, -544, -352],
        [-352, 544, -352],
        [-352, -544, -320],
        [-352, 544, -320],
        [-352, -544, -288],
        [-352, 544, -288],
        [-352, -544, -256],
        [-352, 544, -256],
        [-352, -544, -224],
        [-352, 544, -224],
        [-352, -544, -192],
        [-352, 544, -192],
        [-352, -544, -160],
        [-352, 544, -160],
        [-352, -544, -128],
        [-352, 544, -128],
        [-352, -544, -96],
        [-352, 544, -96],
        [-352, -544, -64],
        [-352, 544, -64],
        [-352, -544, -32],
        [-352, 544, -32],
        [-352, -544, 0],
        [-352, 544, 0],
        [-352, -544, 32],
        [-352, 544, 32],
        [-352, -544, 64],
        [-352, 544, 64],
        [-352, -544, 96],
        [-352, 544, 96],
        [-352, -544, 128],
        [-352, 544, 128],
        [-352, -544, 160],
        [-352, 544, 160],
        [-352, -544, 192],
        [-352, 544, 192],
        [-352, -544, 224],
        [-352, 544, 224],
        [-352, -544, 256],
        [-352, 544, 256],
        [-352, -544, 288],
        [-352, 544, 288],
        [-352, -544, 320],
        [-352, 544, 320],
        [-352, -544, 352],
        [-352, 544, 352],
        [-352, -544, 384],
        [-352, 544, 384],
        [-352, -544, 416],
        [-352, 544, 416],
        [-352, -544, 448],
        [-352, 544, 448],
        [-352, -544, 480],
        [-352, 544, 480],
        [-352, -544, 512],
        [-352, 544, 512],
        [-320, -544, -544],
        [-320, -544, 544],
        [-320, -512, -544],
        [-320, -512, 544],
        [-320, -480, -544],
        [-320, -480, 544],
        [-320, -448, -544],
        [-320, -448, 544],
        [-320, -416, -544],
        [-320, -416, 544],
        [-320, -384, -544],
        [-320, -384, 544],
        [-320, -352, -544],
        [-320, -352, 544],
        [-320, -320, -544],
        [-320, -320, 544],
        [-320, -288, -544],
        [-320, -288, 544],
        [-320, -256, -544],
        [-320, -256, 544],
        [-320, -224, -544],
        [-320, -224, 544],
        [-320, -192, -544],
        [-320, -192, 544],
        [-320, -160, -544],
        [-320, -160, 544],
        [-320, -128, -544],
        [-320, -128, 544],
        [-320, -96, -544],
        [-320, -96, 544],
        [-320, -64, -544],
        [-320, -64, 544],
        [-320, -32, -544],
        [-320, -32, 544],
        [-320, 0, -544],
        [-320, 0, 544],
        [-320, 32, -544],
        [-320, 32, 544],
        [-320, 64, -544],
        [-320, 64, 544],
        [-320, 96, -544],
        [-320, 96, 544],
        [-320, 128, -544],
        [-320, 128, 544],
        [-320, 160, -544],
        [-320, 160, 544],
        [-320, 192, -544],
        [-320, 192, 544],
        [-320, 224, -544],
        [-320, 224, 544],
        [-320, 256, -544],
        [-320, 256, 544],
        [-320, 288, -544],
        [-320, 288, 544],
        [-320, 320, -544],
        [-320, 320, 544],
        [-320, 352, -544],
        [-320, 352, 544],
        [-320, 384, -544],
        [-320, 384, 544],
        [-320, 416, -544],
        [-320, 416, 544],
        [-320, 448, -544],
        [-320, 448, 544],
        [-320, 480, -544],
        [-320, 480, 544],
        [-320, 512, -544],
        [-320, 512, 544],
        [-320, 544, -544],
        [-320, 544, 544],
        [-320, -544, -512],
        [-320, 544, -512],
        [-320, -544, -480],
        [-320, 544, -480],
        [-320, -544, -448],
        [-320, 544, -448],
        [-320, -544, -416],
        [-320, 544, -416],
        [-320, -544, -384],
        [-320, 544, -384],
        [-320, -544, -352],
        [-320, 544, -352],
        [-320, -544, -320],
        [-320, 544, -320],
        [-320, -544, -288],
        [-320, 544, -288],
        [-320, -544, -256],
        [-320, 544, -256],
        [-320, -544, -224],
        [-320, 544, -224],
        [-320, -544, -192],
        [-320, 544, -192],
        [-320, -544, -160],
        [-320, 544, -160],
        [-320, -544, -128],
        [-320, 544, -128],
        [-320, -544, -96],
        [-320, 544, -96],
        [-320, -544, -64],
        [-320, 544, -64],
        [-320, -544, -32],
        [-320, 544, -32],
        [-320, -544, 0],
        [-320, 544, 0],
        [-320, -544, 32],
        [-320, 544, 32],
        [-320, -544, 64],
        [-320, 544, 64],
        [-320, -544, 96],
        [-320, 544, 96],
        [-320, -544, 128],
        [-320, 544, 128],
        [-320, -544, 160],
        [-320, 544, 160],
        [-320, -544, 192],
        [-320, 544, 192],
        [-320, -544, 224],
        [-320, 544, 224],
        [-320, -544, 256],
        [-320, 544, 256],
        [-320, -544, 288],
        [-320, 544, 288],
        [-320, -544, 320],
        [-320, 544, 320],
        [-320, -544, 352],
        [-320, 544, 352],
        [-320, -544, 384],
        [-320, 544, 384],
        [-320, -544, 416],
        [-320, 544, 416],
        [-320, -544, 448],
        [-320, 544, 448],
        [-320, -544, 480],
        [-320, 544, 480],
        [-320, -544, 512],
        [-320, 544, 512],
        [-288, -544, -544],
        [-288, -544, 544],
        [-288, -512, -544],
        [-288, -512, 544],
        [-288, -480, -544],
        [-288, -480, 544],
        [-288, -448, -544],
        [-288, -448, 544],
        [-288, -416, -544],
        [-288, -416, 544],
        [-288, -384, -544],
        [-288, -384, 544],
        [-288, -352, -544],
        [-288, -352, 544],
        [-288, -320, -544],
        [-288, -320, 544],
        [-288, -288, -544],
        [-288, -288, 544],
        [-288, -256, -544],
        [-288, -256, 544],
        [-288, -224, -544],
        [-288, -224, 544],
        [-288, -192, -544],
        [-288, -192, 544],
        [-288, -160, -544],
        [-288, -160, 544],
        [-288, -128, -544],
        [-288, -128, 544],
        [-288, -96, -544],
        [-288, -96, 544],
        [-288, -64, -544],
        [-288, -64, 544],
        [-288, -32, -544],
        [-288, -32, 544],
        [-288, 0, -544],
        [-288, 0, 544],
        [-288, 32, -544],
        [-288, 32, 544],
        [-288, 64, -544],
        [-288, 64, 544],
        [-288, 96, -544],
        [-288, 96, 544],
        [-288, 128, -544],
        [-288, 128, 544],
        [-288, 160, -544],
        [-288, 160, 544],
        [-288, 192, -544],
        [-288, 192, 544],
        [-288, 224, -544],
        [-288, 224, 544],
        [-288, 256, -544],
        [-288, 256, 544],
        [-288, 288, -544],
        [-288, 288, 544],
        [-288, 320, -544],
        [-288, 320, 544],
        [-288, 352, -544],
        [-288, 352, 544],
        [-288, 384, -544],
        [-288, 384, 544],
        [-288, 416, -544],
        [-288, 416, 544],
        [-288, 448, -544],
        [-288, 448, 544],
        [-288, 480, -544],
        [-288, 480, 544],
        [-288, 512, -544],
        [-288, 512, 544],
        [-288, 544, -544],
        [-288, 544, 544],
        [-288, -544, -512],
        [-288, 544, -512],
        [-288, -544, -480],
        [-288, 544, -480],
        [-288, -544, -448],
        [-288, 544, -448],
        [-288, -544, -416],
        [-288, 544, -416],
        [-288, -544, -384],
        [-288, 544, -384],
        [-288, -544, -352],
        [-288, 544, -352],
        [-288, -544, -320],
        [-288, 544, -320],
        [-288, -544, -288],
        [-288, 544, -288],
        [-288, -544, -256],
        [-288, 544, -256],
        [-288, -544, -224],
        [-288, 544, -224],
        [-288, -544, -192],
        [-288, 544, -192],
        [-288, -544, -160],
        [-288, 544, -160],
        [-288, -544, -128],
        [-288, 544, -128],
        [-288, -544, -96],
        [-288, 544, -96],
        [-288, -544, -64],
        [-288, 544, -64],
        [-288, -544, -32],
        [-288, 544, -32],
        [-288, -544, 0],
        [-288, 544, 0],
        [-288, -544, 32],
        [-288, 544, 32],
        [-288, -544, 64],
        [-288, 544, 64],
        [-288, -544, 96],
        [-288, 544, 96],
        [-288, -544, 128],
        [-288, 544, 128],
        [-288, -544, 160],
        [-288, 544, 160],
        [-288, -544, 192],
        [-288, 544, 192],
        [-288, -544, 224],
        [-288, 544, 224],
        [-288, -544, 256],
        [-288, 544, 256],
        [-288, -544, 288],
        [-288, 544, 288],
        [-288, -544, 320],
        [-288, 544, 320],
        [-288, -544, 352],
        [-288, 544, 352],
        [-288, -544, 384],
        [-288, 544, 384],
        [-288, -544, 416],
        [-288, 544, 416],
        [-288, -544, 448],
        [-288, 544, 448],
        [-288, -544, 480],
        [-288, 544, 480],
        [-288, -544, 512],
        [-288, 544, 512],
        [-256, -544, -544],
        [-256, -544, 544],
        [-256, -512, -544],
        [-256, -512, 544],
        [-256, -480, -544],
        [-256, -480, 544],
        [-256, -448, -544],
        [-256, -448, 544],
        [-256, -416, -544],
        [-256, -416, 544],
        [-256, -384, -544],
        [-256, -384, 544],
        [-256, -352, -544],
        [-256, -352, 544],
        [-256, -320, -544],
        [-256, -320, 544],
        [-256, -288, -544],
        [-256, -288, 544],
        [-256, -256, -544],
        [-256, -256, 544],
        [-256, -224, -544],
        [-256, -224, 544],
        [-256, -192, -544],
        [-256, -192, 544],
        [-256, -160, -544],
        [-256, -160, 544],
        [-256, -128, -544],
        [-256, -128, 544],
        [-256, -96, -544],
        [-256, -96, 544],
        [-256, -64, -544],
        [-256, -64, 544],
        [-256, -32, -544],
        [-256, -32, 544],
        [-256, 0, -544],
        [-256, 0, 544],
        [-256, 32, -544],
        [-256, 32, 544],
        [-256, 64, -544],
        [-256, 64, 544],
        [-256, 96, -544],
        [-256, 96, 544],
        [-256, 128, -544],
        [-256, 128, 544],
        [-256, 160, -544],
        [-256, 160, 544],
        [-256, 192, -544],
        [-256, 192, 544],
        [-256, 224, -544],
        [-256, 224, 544],
        [-256, 256, -544],
        [-256, 256, 544],
        [-256, 288, -544],
        [-256, 288, 544],
        [-256, 320, -544],
        [-256, 320, 544],
        [-256, 352, -544],
        [-256, 352, 544],
        [-256, 384, -544],
        [-256, 384, 544],
        [-256, 416, -544],
        [-256, 416, 544],
        [-256, 448, -544],
        [-256, 448, 544],
        [-256, 480, -544],
        [-256, 480, 544],
        [-256, 512, -544],
        [-256, 512, 544],
        [-256, 544, -544],
        [-256, 544, 544],
        [-256, -544, -512],
        [-256, 544, -512],
        [-256, -544, -480],
        [-256, 544, -480],
        [-256, -544, -448],
        [-256, 544, -448],
        [-256, -544, -416],
        [-256, 544, -416],
        [-256, -544, -384],
        [-256, 544, -384],
        [-256, -544, -352],
        [-256, 544, -352],
        [-256, -544, -320],
        [-256, 544, -320],
        [-256, -544, -288],
        [-256, 544, -288],
        [-256, -544, -256],
        [-256, 544, -256],
        [-256, -544, -224],
        [-256, 544, -224],
        [-256, -544, -192],
        [-256, 544, -192],
        [-256, -544, -160],
        [-256, 544, -160],
        [-256, -544, -128],
        [-256, 544, -128],
        [-256, -544, -96],
        [-256, 544, -96],
        [-256, -544, -64],
        [-256, 544, -64],
        [-256, -544, -32],
        [-256, 544, -32],
        [-256, -544, 0],
        [-256, 544, 0],
        [-256, -544, 32],
        [-256, 544, 32],
        [-256, -544, 64],
        [-256, 544, 64],
        [-256, -544, 96],
        [-256, 544, 96],
        [-256, -544, 128],
        [-256, 544, 128],
        [-256, -544, 160],
        [-256, 544, 160],
        [-256, -544, 192],
        [-256, 544, 192],
        [-256, -544, 224],
        [-256, 544, 224],
        [-256, -544, 256],
        [-256, 544, 256],
        [-256, -544, 288],
        [-256, 544, 288],
        [-256, -544, 320],
        [-256, 544, 320],
        [-256, -544, 352],
        [-256, 544, 352],
        [-256, -544, 384],
        [-256, 544, 384],
        [-256, -544, 416],
        [-256, 544, 416],
        [-256, -544, 448],
        [-256, 544, 448],
        [-256, -544, 480],
        [-256, 544, 480],
        [-256, -544, 512],
        [-256, 544, 512],
        [-224, -544, -544],
        [-224, -544, 544],
        [-224, -512, -544],
        [-224, -512, 544],
        [-224, -480, -544],
        [-224, -480, 544],
        [-224, -448, -544],
        [-224, -448, 544],
        [-224, -416, -544],
        [-224, -416, 544],
        [-224, -384, -544],
        [-224, -384, 544],
        [-224, -352, -544],
        [-224, -352, 544],
        [-224, -320, -544],
        [-224, -320, 544],
        [-224, -288, -544],
        [-224, -288, 544],
        [-224, -256, -544],
        [-224, -256, 544],
        [-224, -224, -544],
        [-224, -224, 544],
        [-224, -192, -544],
        [-224, -192, 544],
        [-224, -160, -544],
        [-224, -160, 544],
        [-224, -128, -544],
        [-224, -128, 544],
        [-224, -96, -544],
        [-224, -96, 544],
        [-224, -64, -544],
        [-224, -64, 544],
        [-224, -32, -544],
        [-224, -32, 544],
        [-224, 0, -544],
        [-224, 0, 544],
        [-224, 32, -544],
        [-224, 32, 544],
        [-224, 64, -544],
        [-224, 64, 544],
        [-224, 96, -544],
        [-224, 96, 544],
        [-224, 128, -544],
        [-224, 128, 544],
        [-224, 160, -544],
        [-224, 160, 544],
        [-224, 192, -544],
        [-224, 192, 544],
        [-224, 224, -544],
        [-224, 224, 544],
        [-224, 256, -544],
        [-224, 256, 544],
        [-224, 288, -544],
        [-224, 288, 544],
        [-224, 320, -544],
        [-224, 320, 544],
        [-224, 352, -544],
        [-224, 352, 544],
        [-224, 384, -544],
        [-224, 384, 544],
        [-224, 416, -544],
        [-224, 416, 544],
        [-224, 448, -544],
        [-224, 448, 544],
        [-224, 480, -544],
        [-224, 480, 544],
        [-224, 512, -544],
        [-224, 512, 544],
        [-224, 544, -544],
        [-224, 544, 544],
        [-224, -544, -512],
        [-224, 544, -512],
        [-224, -544, -480],
        [-224, 544, -480],
        [-224, -544, -448],
        [-224, 544, -448],
        [-224, -544, -416],
        [-224, 544, -416],
        [-224, -544, -384],
        [-224, 544, -384],
        [-224, -544, -352],
        [-224, 544, -352],
        [-224, -544, -320],
        [-224, 544, -320],
        [-224, -544, -288],
        [-224, 544, -288],
        [-224, -544, -256],
        [-224, 544, -256],
        [-224, -544, -224],
        [-224, 544, -224],
        [-224, -544, -192],
        [-224, 544, -192],
        [-224, -544, -160],
        [-224, 544, -160],
        [-224, -544, -128],
        [-224, 544, -128],
        [-224, -544, -96],
        [-224, 544, -96],
        [-224, -544, -64],
        [-224, 544, -64],
        [-224, -544, -32],
        [-224, 544, -32],
        [-224, -544, 0],
        [-224, 544, 0],
        [-224, -544, 32],
        [-224, 544, 32],
        [-224, -544, 64],
        [-224, 544, 64],
        [-224, -544, 96],
        [-224, 544, 96],
        [-224, -544, 128],
        [-224, 544, 128],
        [-224, -544, 160],
        [-224, 544, 160],
        [-224, -544, 192],
        [-224, 544, 192],
        [-224, -544, 224],
        [-224, 544, 224],
        [-224, -544, 256],
        [-224, 544, 256],
        [-224, -544, 288],
        [-224, 544, 288],
        [-224, -544, 320],
        [-224, 544, 320],
        [-224, -544, 352],
        [-224, 544, 352],
        [-224, -544, 384],
        [-224, 544, 384],
        [-224, -544, 416],
        [-224, 544, 416],
        [-224, -544, 448],
        [-224, 544, 448],
        [-224, -544, 480],
        [-224, 544, 480],
        [-224, -544, 512],
        [-224, 544, 512],
        [-192, -544, -544],
        [-192, -544, 544],
        [-192, -512, -544],
        [-192, -512, 544],
        [-192, -480, -544],
        [-192, -480, 544],
        [-192, -448, -544],
        [-192, -448, 544],
        [-192, -416, -544],
        [-192, -416, 544],
        [-192, -384, -544],
        [-192, -384, 544],
        [-192, -352, -544],
        [-192, -352, 544],
        [-192, -320, -544],
        [-192, -320, 544],
        [-192, -288, -544],
        [-192, -288, 544],
        [-192, -256, -544],
        [-192, -256, 544],
        [-192, -224, -544],
        [-192, -224, 544],
        [-192, -192, -544],
        [-192, -192, 544],
        [-192, -160, -544],
        [-192, -160, 544],
        [-192, -128, -544],
        [-192, -128, 544],
        [-192, -96, -544],
        [-192, -96, 544],
        [-192, -64, -544],
        [-192, -64, 544],
        [-192, -32, -544],
        [-192, -32, 544],
        [-192, 0, -544],
        [-192, 0, 544],
        [-192, 32, -544],
        [-192, 32, 544],
        [-192, 64, -544],
        [-192, 64, 544],
        [-192, 96, -544],
        [-192, 96, 544],
        [-192, 128, -544],
        [-192, 128, 544],
        [-192, 160, -544],
        [-192, 160, 544],
        [-192, 192, -544],
        [-192, 192, 544],
        [-192, 224, -544],
        [-192, 224, 544],
        [-192, 256, -544],
        [-192, 256, 544],
        [-192, 288, -544],
        [-192, 288, 544],
        [-192, 320, -544],
        [-192, 320, 544],
        [-192, 352, -544],
        [-192, 352, 544],
        [-192, 384, -544],
        [-192, 384, 544],
        [-192, 416, -544],
        [-192, 416, 544],
        [-192, 448, -544],
        [-192, 448, 544],
        [-192, 480, -544],
        [-192, 480, 544],
        [-192, 512, -544],
        [-192, 512, 544],
        [-192, 544, -544],
        [-192, 544, 544],
        [-192, -544, -512],
        [-192, 544, -512],
        [-192, -544, -480],
        [-192, 544, -480],
        [-192, -544, -448],
        [-192, 544, -448],
        [-192, -544, -416],
        [-192, 544, -416],
        [-192, -544, -384],
        [-192, 544, -384],
        [-192, -544, -352],
        [-192, 544, -352],
        [-192, -544, -320],
        [-192, 544, -320],
        [-192, -544, -288],
        [-192, 544, -288],
        [-192, -544, -256],
        [-192, 544, -256],
        [-192, -544, -224],
        [-192, 544, -224],
        [-192, -544, -192],
        [-192, 544, -192],
        [-192, -544, -160],
        [-192, 544, -160],
        [-192, -544, -128],
        [-192, 544, -128],
        [-192, -544, -96],
        [-192, 544, -96],
        [-192, -544, -64],
        [-192, 544, -64],
        [-192, -544, -32],
        [-192, 544, -32],
        [-192, -544, 0],
        [-192, 544, 0],
        [-192, -544, 32],
        [-192, 544, 32],
        [-192, -544, 64],
        [-192, 544, 64],
        [-192, -544, 96],
        [-192, 544, 96],
        [-192, -544, 128],
        [-192, 544, 128],
        [-192, -544, 160],
        [-192, 544, 160],
        [-192, -544, 192],
        [-192, 544, 192],
        [-192, -544, 224],
        [-192, 544, 224],
        [-192, -544, 256],
        [-192, 544, 256],
        [-192, -544, 288],
        [-192, 544, 288],
        [-192, -544, 320],
        [-192, 544, 320],
        [-192, -544, 352],
        [-192, 544, 352],
        [-192, -544, 384],
        [-192, 544, 384],
        [-192, -544, 416],
        [-192, 544, 416],
        [-192, -544, 448],
        [-192, 544, 448],
        [-192, -544, 480],
        [-192, 544, 480],
        [-192, -544, 512],
        [-192, 544, 512],
        [-160, -544, -544],
        [-160, -544, 544],
        [-160, -512, -544],
        [-160, -512, 544],
        [-160, -480, -544],
        [-160, -480, 544],
        [-160, -448, -544],
        [-160, -448, 544],
        [-160, -416, -544],
        [-160, -416, 544],
        [-160, -384, -544],
        [-160, -384, 544],
        [-160, -352, -544],
        [-160, -352, 544],
        [-160, -320, -544],
        [-160, -320, 544],
        [-160, -288, -544],
        [-160, -288, 544],
        [-160, -256, -544],
        [-160, -256, 544],
        [-160, -224, -544],
        [-160, -224, 544],
        [-160, -192, -544],
        [-160, -192, 544],
        [-160, -160, -544],
        [-160, -160, 544],
        [-160, -128, -544],
        [-160, -128, 544],
        [-160, -96, -544],
        [-160, -96, 544],
        [-160, -64, -544],
        [-160, -64, 544],
        [-160, -32, -544],
        [-160, -32, 544],
        [-160, 0, -544],
        [-160, 0, 544],
        [-160, 32, -544],
        [-160, 32, 544],
        [-160, 64, -544],
        [-160, 64, 544],
        [-160, 96, -544],
        [-160, 96, 544],
        [-160, 128, -544],
        [-160, 128, 544],
        [-160, 160, -544],
        [-160, 160, 544],
        [-160, 192, -544],
        [-160, 192, 544],
        [-160, 224, -544],
        [-160, 224, 544],
        [-160, 256, -544],
        [-160, 256, 544],
        [-160, 288, -544],
        [-160, 288, 544],
        [-160, 320, -544],
        [-160, 320, 544],
        [-160, 352, -544],
        [-160, 352, 544],
        [-160, 384, -544],
        [-160, 384, 544],
        [-160, 416, -544],
        [-160, 416, 544],
        [-160, 448, -544],
        [-160, 448, 544],
        [-160, 480, -544],
        [-160, 480, 544],
        [-160, 512, -544],
        [-160, 512, 544],
        [-160, 544, -544],
        [-160, 544, 544],
        [-160, -544, -512],
        [-160, 544, -512],
        [-160, -544, -480],
        [-160, 544, -480],
        [-160, -544, -448],
        [-160, 544, -448],
        [-160, -544, -416],
        [-160, 544, -416],
        [-160, -544, -384],
        [-160, 544, -384],
        [-160, -544, -352],
        [-160, 544, -352],
        [-160, -544, -320],
        [-160, 544, -320],
        [-160, -544, -288],
        [-160, 544, -288],
        [-160, -544, -256],
        [-160, 544, -256],
        [-160, -544, -224],
        [-160, 544, -224],
        [-160, -544, -192],
        [-160, 544, -192],
        [-160, -544, -160],
        [-160, 544, -160],
        [-160, -544, -128],
        [-160, 544, -128],
        [-160, -544, -96],
        [-160, 544, -96],
        [-160, -544, -64],
        [-160, 544, -64],
        [-160, -544, -32],
        [-160, 544, -32],
        [-160, -544, 0],
        [-160, 544, 0],
        [-160, -544, 32],
        [-160, 544, 32],
        [-160, -544, 64],
        [-160, 544, 64],
        [-160, -544, 96],
        [-160, 544, 96],
        [-160, -544, 128],
        [-160, 544, 128],
        [-160, -544, 160],
        [-160, 544, 160],
        [-160, -544, 192],
        [-160, 544, 192],
        [-160, -544, 224],
        [-160, 544, 224],
        [-160, -544, 256],
        [-160, 544, 256],
        [-160, -544, 288],
        [-160, 544, 288],
        [-160, -544, 320],
        [-160, 544, 320],
        [-160, -544, 352],
        [-160, 544, 352],
        [-160, -544, 384],
        [-160, 544, 384],
        [-160, -544, 416],
        [-160, 544, 416],
        [-160, -544, 448],
        [-160, 544, 448],
        [-160, -544, 480],
        [-160, 544, 480],
        [-160, -544, 512],
        [-160, 544, 512],
        [-128, -544, -544],
        [-128, -544, 544],
        [-128, -512, -544],
        [-128, -512, 544],
        [-128, -480, -544],
        [-128, -480, 544],
        [-128, -448, -544],
        [-128, -448, 544],
        [-128, -416, -544],
        [-128, -416, 544],
        [-128, -384, -544],
        [-128, -384, 544],
        [-128, -352, -544],
        [-128, -352, 544],
        [-128, -320, -544],
        [-128, -320, 544],
        [-128, -288, -544],
        [-128, -288, 544],
        [-128, -256, -544],
        [-128, -256, 544],
        [-128, -224, -544],
        [-128, -224, 544],
        [-128, -192, -544],
        [-128, -192, 544],
        [-128, -160, -544],
        [-128, -160, 544],
        [-128, -128, -544],
        [-128, -128, 544],
        [-128, -96, -544],
        [-128, -96, 544],
        [-128, -64, -544],
        [-128, -64, 544],
        [-128, -32, -544],
        [-128, -32, 544],
        [-128, 0, -544],
        [-128, 0, 544],
        [-128, 32, -544],
        [-128, 32, 544],
        [-128, 64, -544],
        [-128, 64, 544],
        [-128, 96, -544],
        [-128, 96, 544],
        [-128, 128, -544],
        [-128, 128, 544],
        [-128, 160, -544],
        [-128, 160, 544],
        [-128, 192, -544],
        [-128, 192, 544],
        [-128, 224, -544],
        [-128, 224, 544],
        [-128, 256, -544],
        [-128, 256, 544],
        [-128, 288, -544],
        [-128, 288, 544],
        [-128, 320, -544],
        [-128, 320, 544],
        [-128, 352, -544],
        [-128, 352, 544],
        [-128, 384, -544],
        [-128, 384, 544],
        [-128, 416, -544],
        [-128, 416, 544],
        [-128, 448, -544],
        [-128, 448, 544],
        [-128, 480, -544],
        [-128, 480, 544],
        [-128, 512, -544],
        [-128, 512, 544],
        [-128, 544, -544],
        [-128, 544, 544],
        [-128, -544, -512],
        [-128, 544, -512],
        [-128, -544, -480],
        [-128, 544, -480],
        [-128, -544, -448],
        [-128, 544, -448],
        [-128, -544, -416],
        [-128, 544, -416],
        [-128, -544, -384],
        [-128, 544, -384],
        [-128, -544, -352],
        [-128, 544, -352],
        [-128, -544, -320],
        [-128, 544, -320],
        [-128, -544, -288],
        [-128, 544, -288],
        [-128, -544, -256],
        [-128, 544, -256],
        [-128, -544, -224],
        [-128, 544, -224],
        [-128, -544, -192],
        [-128, 544, -192],
        [-128, -544, -160],
        [-128, 544, -160],
        [-128, -544, -128],
        [-128, 544, -128],
        [-128, -544, -96],
        [-128, 544, -96],
        [-128, -544, -64],
        [-128, 544, -64],
        [-128, -544, -32],
        [-128, 544, -32],
        [-128, -544, 0],
        [-128, 544, 0],
        [-128, -544, 32],
        [-128, 544, 32],
        [-128, -544, 64],
        [-128, 544, 64],
        [-128, -544, 96],
        [-128, 544, 96],
        [-128, -544, 128],
        [-128, 544, 128],
        [-128, -544, 160],
        [-128, 544, 160],
        [-128, -544, 192],
        [-128, 544, 192],
        [-128, -544, 224],
        [-128, 544, 224],
        [-128, -544, 256],
        [-128, 544, 256],
        [-128, -544, 288],
        [-128, 544, 288],
        [-128, -544, 320],
        [-128, 544, 320],
        [-128, -544, 352],
        [-128, 544, 352],
        [-128, -544, 384],
        [-128, 544, 384],
        [-128, -544, 416],
        [-128, 544, 416],
        [-128, -544, 448],
        [-128, 544, 448],
        [-128, -544, 480],
        [-128, 544, 480],
        [-128, -544, 512],
        [-128, 544, 512],
        [-96, -544, -544],
        [-96, -544, 544],
        [-96, -512, -544],
        [-96, -512, 544],
        [-96, -480, -544],
        [-96, -480, 544],
        [-96, -448, -544],
        [-96, -448, 544],
        [-96, -416, -544],
        [-96, -416, 544],
        [-96, -384, -544],
        [-96, -384, 544],
        [-96, -352, -544],
        [-96, -352, 544],
        [-96, -320, -544],
        [-96, -320, 544],
        [-96, -288, -544],
        [-96, -288, 544],
        [-96, -256, -544],
        [-96, -256, 544],
        [-96, -224, -544],
        [-96, -224, 544],
        [-96, -192, -544],
        [-96, -192, 544],
        [-96, -160, -544],
        [-96, -160, 544],
        [-96, -128, -544],
        [-96, -128, 544],
        [-96, -96, -544],
        [-96, -96, 544],
        [-96, -64, -544],
        [-96, -64, 544],
        [-96, -32, -544],
        [-96, -32, 544],
        [-96, 0, -544],
        [-96, 0, 544],
        [-96, 32, -544],
        [-96, 32, 544],
        [-96, 64, -544],
        [-96, 64, 544],
        [-96, 96, -544],
        [-96, 96, 544],
        [-96, 128, -544],
        [-96, 128, 544],
        [-96, 160, -544],
        [-96, 160, 544],
        [-96, 192, -544],
        [-96, 192, 544],
        [-96, 224, -544],
        [-96, 224, 544],
        [-96, 256, -544],
        [-96, 256, 544],
        [-96, 288, -544],
        [-96, 288, 544],
        [-96, 320, -544],
        [-96, 320, 544],
        [-96, 352, -544],
        [-96, 352, 544],
        [-96, 384, -544],
        [-96, 384, 544],
        [-96, 416, -544],
        [-96, 416, 544],
        [-96, 448, -544],
        [-96, 448, 544],
        [-96, 480, -544],
        [-96, 480, 544],
        [-96, 512, -544],
        [-96, 512, 544],
        [-96, 544, -544],
        [-96, 544, 544],
        [-96, -544, -512],
        [-96, 544, -512],
        [-96, -544, -480],
        [-96, 544, -480],
        [-96, -544, -448],
        [-96, 544, -448],
        [-96, -544, -416],
        [-96, 544, -416],
        [-96, -544, -384],
        [-96, 544, -384],
        [-96, -544, -352],
        [-96, 544, -352],
        [-96, -544, -320],
        [-96, 544, -320],
        [-96, -544, -288],
        [-96, 544, -288],
        [-96, -544, -256],
        [-96, 544, -256],
        [-96, -544, -224],
        [-96, 544, -224],
        [-96, -544, -192],
        [-96, 544, -192],
        [-96, -544, -160],
        [-96, 544, -160],
        [-96, -544, -128],
        [-96, 544, -128],
        [-96, -544, -96],
        [-96, 544, -96],
        [-96, -544, -64],
        [-96, 544, -64],
        [-96, -544, -32],
        [-96, 544, -32],
        [-96, -544, 0],
        [-96, 544, 0],
        [-96, -544, 32],
        [-96, 544, 32],
        [-96, -544, 64],
        [-96, 544, 64],
        [-96, -544, 96],
        [-96, 544, 96],
        [-96, -544, 128],
        [-96, 544, 128],
        [-96, -544, 160],
        [-96, 544, 160],
        [-96, -544, 192],
        [-96, 544, 192],
        [-96, -544, 224],
        [-96, 544, 224],
        [-96, -544, 256],
        [-96, 544, 256],
        [-96, -544, 288],
        [-96, 544, 288],
        [-96, -544, 320],
        [-96, 544, 320],
        [-96, -544, 352],
        [-96, 544, 352],
        [-96, -544, 384],
        [-96, 544, 384],
        [-96, -544, 416],
        [-96, 544, 416],
        [-96, -544, 448],
        [-96, 544, 448],
        [-96, -544, 480],
        [-96, 544, 480],
        [-96, -544, 512],
        [-96, 544, 512],
        [-64, -544, -544],
        [-64, -544, 544],
        [-64, -512, -544],
        [-64, -512, 544],
        [-64, -480, -544],
        [-64, -480, 544],
        [-64, -448, -544],
        [-64, -448, 544],
        [-64, -416, -544],
        [-64, -416, 544],
        [-64, -384, -544],
        [-64, -384, 544],
        [-64, -352, -544],
        [-64, -352, 544],
        [-64, -320, -544],
        [-64, -320, 544],
        [-64, -288, -544],
        [-64, -288, 544],
        [-64, -256, -544],
        [-64, -256, 544],
        [-64, -224, -544],
        [-64, -224, 544],
        [-64, -192, -544],
        [-64, -192, 544],
        [-64, -160, -544],
        [-64, -160, 544],
        [-64, -128, -544],
        [-64, -128, 544],
        [-64, -96, -544],
        [-64, -96, 544],
        [-64, -64, -544],
        [-64, -64, 544],
        [-64, -32, -544],
        [-64, -32, 544],
        [-64, 0, -544],
        [-64, 0, 544],
        [-64, 32, -544],
        [-64, 32, 544],
        [-64, 64, -544],
        [-64, 64, 544],
        [-64, 96, -544],
        [-64, 96, 544],
        [-64, 128, -544],
        [-64, 128, 544],
        [-64, 160, -544],
        [-64, 160, 544],
        [-64, 192, -544],
        [-64, 192, 544],
        [-64, 224, -544],
        [-64, 224, 544],
        [-64, 256, -544],
        [-64, 256, 544],
        [-64, 288, -544],
        [-64, 288, 544],
        [-64, 320, -544],
        [-64, 320, 544],
        [-64, 352, -544],
        [-64, 352, 544],
        [-64, 384, -544],
        [-64, 384, 544],
        [-64, 416, -544],
        [-64, 416, 544],
        [-64, 448, -544],
        [-64, 448, 544],
        [-64, 480, -544],
        [-64, 480, 544],
        [-64, 512, -544],
        [-64, 512, 544],
        [-64, 544, -544],
        [-64, 544, 544],
        [-64, -544, -512],
        [-64, 544, -512],
        [-64, -544, -480],
        [-64, 544, -480],
        [-64, -544, -448],
        [-64, 544, -448],
        [-64, -544, -416],
        [-64, 544, -416],
        [-64, -544, -384],
        [-64, 544, -384],
        [-64, -544, -352],
        [-64, 544, -352],
        [-64, -544, -320],
        [-64, 544, -320],
        [-64, -544, -288],
        [-64, 544, -288],
        [-64, -544, -256],
        [-64, 544, -256],
        [-64, -544, -224],
        [-64, 544, -224],
        [-64, -544, -192],
        [-64, 544, -192],
        [-64, -544, -160],
        [-64, 544, -160],
        [-64, -544, -128],
        [-64, 544, -128],
        [-64, -544, -96],
        [-64, 544, -96],
        [-64, -544, -64],
        [-64, 544, -64],
        [-64, -544, -32],
        [-64, 544, -32],
        [-64, -544, 0],
        [-64, 544, 0],
        [-64, -544, 32],
        [-64, 544, 32],
        [-64, -544, 64],
        [-64, 544, 64],
        [-64, -544, 96],
        [-64, 544, 96],
        [-64, -544, 128],
        [-64, 544, 128],
        [-64, -544, 160],
        [-64, 544, 160],
        [-64, -544, 192],
        [-64, 544, 192],
        [-64, -544, 224],
        [-64, 544, 224],
        [-64, -544, 256],
        [-64, 544, 256],
        [-64, -544, 288],
        [-64, 544, 288],
        [-64, -544, 320],
        [-64, 544, 320],
        [-64, -544, 352],
        [-64, 544, 352],
        [-64, -544, 384],
        [-64, 544, 384],
        [-64, -544, 416],
        [-64, 544, 416],
        [-64, -544, 448],
        [-64, 544, 448],
        [-64, -544, 480],
        [-64, 544, 480],
        [-64, -544, 512],
        [-64, 544, 512],
        [-32, -544, -544],
        [-32, -544, 544],
        [-32, -512, -544],
        [-32, -512, 544],
        [-32, -480, -544],
        [-32, -480, 544],
        [-32, -448, -544],
        [-32, -448, 544],
        [-32, -416, -544],
        [-32, -416, 544],
        [-32, -384, -544],
        [-32, -384, 544],
        [-32, -352, -544],
        [-32, -352, 544],
        [-32, -320, -544],
        [-32, -320, 544],
        [-32, -288, -544],
        [-32, -288, 544],
        [-32, -256, -544],
        [-32, -256, 544],
        [-32, -224, -544],
        [-32, -224, 544],
        [-32, -192, -544],
        [-32, -192, 544],
        [-32, -160, -544],
        [-32, -160, 544],
        [-32, -128, -544],
        [-32, -128, 544],
        [-32, -96, -544],
        [-32, -96, 544],
        [-32, -64, -544],
        [-32, -64, 544],
        [-32, -32, -544],
        [-32, -32, 544],
        [-32, 0, -544],
        [-32, 0, 544],
        [-32, 32, -544],
        [-32, 32, 544],
        [-32, 64, -544],
        [-32, 64, 544],
        [-32, 96, -544],
        [-32, 96, 544],
        [-32, 128, -544],
        [-32, 128, 544],
        [-32, 160, -544],
        [-32, 160, 544],
        [-32, 192, -544],
        [-32, 192, 544],
        [-32, 224, -544],
        [-32, 224, 544],
        [-32, 256, -544],
        [-32, 256, 544],
        [-32, 288, -544],
        [-32, 288, 544],
        [-32, 320, -544],
        [-32, 320, 544],
        [-32, 352, -544],
        [-32, 352, 544],
        [-32, 384, -544],
        [-32, 384, 544],
        [-32, 416, -544],
        [-32, 416, 544],
        [-32, 448, -544],
        [-32, 448, 544],
        [-32, 480, -544],
        [-32, 480, 544],
        [-32, 512, -544],
        [-32, 512, 544],
        [-32, 544, -544],
        [-32, 544, 544],
        [-32, -544, -512],
        [-32, 544, -512],
        [-32, -544, -480],
        [-32, 544, -480],
        [-32, -544, -448],
        [-32, 544, -448],
        [-32, -544, -416],
        [-32, 544, -416],
        [-32, -544, -384],
        [-32, 544, -384],
        [-32, -544, -352],
        [-32, 544, -352],
        [-32, -544, -320],
        [-32, 544, -320],
        [-32, -544, -288],
        [-32, 544, -288],
        [-32, -544, -256],
        [-32, 544, -256],
        [-32, -544, -224],
        [-32, 544, -224],
        [-32, -544, -192],
        [-32, 544, -192],
        [-32, -544, -160],
        [-32, 544, -160],
        [-32, -544, -128],
        [-32, 544, -128],
        [-32, -544, -96],
        [-32, 544, -96],
        [-32, -544, -64],
        [-32, 544, -64],
        [-32, -544, -32],
        [-32, 544, -32],
        [-32, -544, 0],
        [-32, 544, 0],
        [-32, -544, 32],
        [-32, 544, 32],
        [-32, -544, 64],
        [-32, 544, 64],
        [-32, -544, 96],
        [-32, 544, 96],
        [-32, -544, 128],
        [-32, 544, 128],
        [-32, -544, 160],
        [-32, 544, 160],
        [-32, -544, 192],
        [-32, 544, 192],
        [-32, -544, 224],
        [-32, 544, 224],
        [-32, -544, 256],
        [-32, 544, 256],
        [-32, -544, 288],
        [-32, 544, 288],
        [-32, -544, 320],
        [-32, 544, 320],
        [-32, -544, 352],
        [-32, 544, 352],
        [-32, -544, 384],
        [-32, 544, 384],
        [-32, -544, 416],
        [-32, 544, 416],
        [-32, -544, 448],
        [-32, 544, 448],
        [-32, -544, 480],
        [-32, 544, 480],
        [-32, -544, 512],
        [-32, 544, 512],
        [0, -544, -544],
        [0, -544, 544],
        [0, -512, -544],
        [0, -512, 544],
        [0, -480, -544],
        [0, -480, 544],
        [0, -448, -544],
        [0, -448, 544],
        [0, -416, -544],
        [0, -416, 544],
        [0, -384, -544],
        [0, -384, 544],
        [0, -352, -544],
        [0, -352, 544],
        [0, -320, -544],
        [0, -320, 544],
        [0, -288, -544],
        [0, -288, 544],
        [0, -256, -544],
        [0, -256, 544],
        [0, -224, -544],
        [0, -224, 544],
        [0, -192, -544],
        [0, -192, 544],
        [0, -160, -544],
        [0, -160, 544],
        [0, -128, -544],
        [0, -128, 544],
        [0, -96, -544],
        [0, -96, 544],
        [0, -64, -544],
        [0, -64, 544],
        [0, -32, -544],
        [0, -32, 544],
        [0, 0, -544],
        [0, 0, 544],
        [0, 32, -544],
        [0, 32, 544],
        [0, 64, -544],
        [0, 64, 544],
        [0, 96, -544],
        [0, 96, 544],
        [0, 128, -544],
        [0, 128, 544],
        [0, 160, -544],
        [0, 160, 544],
        [0, 192, -544],
        [0, 192, 544],
        [0, 224, -544],
        [0, 224, 544],
        [0, 256, -544],
        [0, 256, 544],
        [0, 288, -544],
        [0, 288, 544],
        [0, 320, -544],
        [0, 320, 544],
        [0, 352, -544],
        [0, 352, 544],
        [0, 384, -544],
        [0, 384, 544],
        [0, 416, -544],
        [0, 416, 544],
        [0, 448, -544],
        [0, 448, 544],
        [0, 480, -544],
        [0, 480, 544],
        [0, 512, -544],
        [0, 512, 544],
        [0, 544, -544],
        [0, 544, 544],
        [0, -544, -512],
        [0, 544, -512],
        [0, -544, -480],
        [0, 544, -480],
        [0, -544, -448],
        [0, 544, -448],
        [0, -544, -416],
        [0, 544, -416],
        [0, -544, -384],
        [0, 544, -384],
        [0, -544, -352],
        [0, 544, -352],
        [0, -544, -320],
        [0, 544, -320],
        [0, -544, -288],
        [0, 544, -288],
        [0, -544, -256],
        [0, 544, -256],
        [0, -544, -224],
        [0, 544, -224],
        [0, -544, -192],
        [0, 544, -192],
        [0, -544, -160],
        [0, 544, -160],
        [0, -544, -128],
        [0, 544, -128],
        [0, -544, -96],
        [0, 544, -96],
        [0, -544, -64],
        [0, 544, -64],
        [0, -544, -32],
        [0, 544, -32],
        [0, -544, 0],
        [0, 544, 0],
        [0, -544, 32],
        [0, 544, 32],
        [0, -544, 64],
        [0, 544, 64],
        [0, -544, 96],
        [0, 544, 96],
        [0, -544, 128],
        [0, 544, 128],
        [0, -544, 160],
        [0, 544, 160],
        [0, -544, 192],
        [0, 544, 192],
        [0, -544, 224],
        [0, 544, 224],
        [0, -544, 256],
        [0, 544, 256],
        [0, -544, 288],
        [0, 544, 288],
        [0, -544, 320],
        [0, 544, 320],
        [0, -544, 352],
        [0, 544, 352],
        [0, -544, 384],
        [0, 544, 384],
        [0, -544, 416],
        [0, 544, 416],
        [0, -544, 448],
        [0, 544, 448],
        [0, -544, 480],
        [0, 544, 480],
        [0, -544, 512],
        [0, 544, 512],
        [32, -544, -544],
        [32, -544, 544],
        [32, -512, -544],
        [32, -512, 544],
        [32, -480, -544],
        [32, -480, 544],
        [32, -448, -544],
        [32, -448, 544],
        [32, -416, -544],
        [32, -416, 544],
        [32, -384, -544],
        [32, -384, 544],
        [32, -352, -544],
        [32, -352, 544],
        [32, -320, -544],
        [32, -320, 544],
        [32, -288, -544],
        [32, -288, 544],
        [32, -256, -544],
        [32, -256, 544],
        [32, -224, -544],
        [32, -224, 544],
        [32, -192, -544],
        [32, -192, 544],
        [32, -160, -544],
        [32, -160, 544],
        [32, -128, -544],
        [32, -128, 544],
        [32, -96, -544],
        [32, -96, 544],
        [32, -64, -544],
        [32, -64, 544],
        [32, -32, -544],
        [32, -32, 544],
        [32, 0, -544],
        [32, 0, 544],
        [32, 32, -544],
        [32, 32, 544],
        [32, 64, -544],
        [32, 64, 544],
        [32, 96, -544],
        [32, 96, 544],
        [32, 128, -544],
        [32, 128, 544],
        [32, 160, -544],
        [32, 160, 544],
        [32, 192, -544],
        [32, 192, 544],
        [32, 224, -544],
        [32, 224, 544],
        [32, 256, -544],
        [32, 256, 544],
        [32, 288, -544],
        [32, 288, 544],
        [32, 320, -544],
        [32, 320, 544],
        [32, 352, -544],
        [32, 352, 544],
        [32, 384, -544],
        [32, 384, 544],
        [32, 416, -544],
        [32, 416, 544],
        [32, 448, -544],
        [32, 448, 544],
        [32, 480, -544],
        [32, 480, 544],
        [32, 512, -544],
        [32, 512, 544],
        [32, 544, -544],
        [32, 544, 544],
        [32, -544, -512],
        [32, 544, -512],
        [32, -544, -480],
        [32, 544, -480],
        [32, -544, -448],
        [32, 544, -448],
        [32, -544, -416],
        [32, 544, -416],
        [32, -544, -384],
        [32, 544, -384],
        [32, -544, -352],
        [32, 544, -352],
        [32, -544, -320],
        [32, 544, -320],
        [32, -544, -288],
        [32, 544, -288],
        [32, -544, -256],
        [32, 544, -256],
        [32, -544, -224],
        [32, 544, -224],
        [32, -544, -192],
        [32, 544, -192],
        [32, -544, -160],
        [32, 544, -160],
        [32, -544, -128],
        [32, 544, -128],
        [32, -544, -96],
        [32, 544, -96],
        [32, -544, -64],
        [32, 544, -64],
        [32, -544, -32],
        [32, 544, -32],
        [32, -544, 0],
        [32, 544, 0],
        [32, -544, 32],
        [32, 544, 32],
        [32, -544, 64],
        [32, 544, 64],
        [32, -544, 96],
        [32, 544, 96],
        [32, -544, 128],
        [32, 544, 128],
        [32, -544, 160],
        [32, 544, 160],
        [32, -544, 192],
        [32, 544, 192],
        [32, -544, 224],
        [32, 544, 224],
        [32, -544, 256],
        [32, 544, 256],
        [32, -544, 288],
        [32, 544, 288],
        [32, -544, 320],
        [32, 544, 320],
        [32, -544, 352],
        [32, 544, 352],
        [32, -544, 384],
        [32, 544, 384],
        [32, -544, 416],
        [32, 544, 416],
        [32, -544, 448],
        [32, 544, 448],
        [32, -544, 480],
        [32, 544, 480],
        [32, -544, 512],
        [32, 544, 512],
        [64, -544, -544],
        [64, -544, 544],
        [64, -512, -544],
        [64, -512, 544],
        [64, -480, -544],
        [64, -480, 544],
        [64, -448, -544],
        [64, -448, 544],
        [64, -416, -544],
        [64, -416, 544],
        [64, -384, -544],
        [64, -384, 544],
        [64, -352, -544],
        [64, -352, 544],
        [64, -320, -544],
        [64, -320, 544],
        [64, -288, -544],
        [64, -288, 544],
        [64, -256, -544],
        [64, -256, 544],
        [64, -224, -544],
        [64, -224, 544],
        [64, -192, -544],
        [64, -192, 544],
        [64, -160, -544],
        [64, -160, 544],
        [64, -128, -544],
        [64, -128, 544],
        [64, -96, -544],
        [64, -96, 544],
        [64, -64, -544],
        [64, -64, 544],
        [64, -32, -544],
        [64, -32, 544],
        [64, 0, -544],
        [64, 0, 544],
        [64, 32, -544],
        [64, 32, 544],
        [64, 64, -544],
        [64, 64, 544],
        [64, 96, -544],
        [64, 96, 544],
        [64, 128, -544],
        [64, 128, 544],
        [64, 160, -544],
        [64, 160, 544],
        [64, 192, -544],
        [64, 192, 544],
        [64, 224, -544],
        [64, 224, 544],
        [64, 256, -544],
        [64, 256, 544],
        [64, 288, -544],
        [64, 288, 544],
        [64, 320, -544],
        [64, 320, 544],
        [64, 352, -544],
        [64, 352, 544],
        [64, 384, -544],
        [64, 384, 544],
        [64, 416, -544],
        [64, 416, 544],
        [64, 448, -544],
        [64, 448, 544],
        [64, 480, -544],
        [64, 480, 544],
        [64, 512, -544],
        [64, 512, 544],
        [64, 544, -544],
        [64, 544, 544],
        [64, -544, -512],
        [64, 544, -512],
        [64, -544, -480],
        [64, 544, -480],
        [64, -544, -448],
        [64, 544, -448],
        [64, -544, -416],
        [64, 544, -416],
        [64, -544, -384],
        [64, 544, -384],
        [64, -544, -352],
        [64, 544, -352],
        [64, -544, -320],
        [64, 544, -320],
        [64, -544, -288],
        [64, 544, -288],
        [64, -544, -256],
        [64, 544, -256],
        [64, -544, -224],
        [64, 544, -224],
        [64, -544, -192],
        [64, 544, -192],
        [64, -544, -160],
        [64, 544, -160],
        [64, -544, -128],
        [64, 544, -128],
        [64, -544, -96],
        [64, 544, -96],
        [64, -544, -64],
        [64, 544, -64],
        [64, -544, -32],
        [64, 544, -32],
        [64, -544, 0],
        [64, 544, 0],
        [64, -544, 32],
        [64, 544, 32],
        [64, -544, 64],
        [64, 544, 64],
        [64, -544, 96],
        [64, 544, 96],
        [64, -544, 128],
        [64, 544, 128],
        [64, -544, 160],
        [64, 544, 160],
        [64, -544, 192],
        [64, 544, 192],
        [64, -544, 224],
        [64, 544, 224],
        [64, -544, 256],
        [64, 544, 256],
        [64, -544, 288],
        [64, 544, 288],
        [64, -544, 320],
        [64, 544, 320],
        [64, -544, 352],
        [64, 544, 352],
        [64, -544, 384],
        [64, 544, 384],
        [64, -544, 416],
        [64, 544, 416],
        [64, -544, 448],
        [64, 544, 448],
        [64, -544, 480],
        [64, 544, 480],
        [64, -544, 512],
        [64, 544, 512],
        [96, -544, -544],
        [96, -544, 544],
        [96, -512, -544],
        [96, -512, 544],
        [96, -480, -544],
        [96, -480, 544],
        [96, -448, -544],
        [96, -448, 544],
        [96, -416, -544],
        [96, -416, 544],
        [96, -384, -544],
        [96, -384, 544],
        [96, -352, -544],
        [96, -352, 544],
        [96, -320, -544],
        [96, -320, 544],
        [96, -288, -544],
        [96, -288, 544],
        [96, -256, -544],
        [96, -256, 544],
        [96, -224, -544],
        [96, -224, 544],
        [96, -192, -544],
        [96, -192, 544],
        [96, -160, -544],
        [96, -160, 544],
        [96, -128, -544],
        [96, -128, 544],
        [96, -96, -544],
        [96, -96, 544],
        [96, -64, -544],
        [96, -64, 544],
        [96, -32, -544],
        [96, -32, 544],
        [96, 0, -544],
        [96, 0, 544],
        [96, 32, -544],
        [96, 32, 544],
        [96, 64, -544],
        [96, 64, 544],
        [96, 96, -544],
        [96, 96, 544],
        [96, 128, -544],
        [96, 128, 544],
        [96, 160, -544],
        [96, 160, 544],
        [96, 192, -544],
        [96, 192, 544],
        [96, 224, -544],
        [96, 224, 544],
        [96, 256, -544],
        [96, 256, 544],
        [96, 288, -544],
        [96, 288, 544],
        [96, 320, -544],
        [96, 320, 544],
        [96, 352, -544],
        [96, 352, 544],
        [96, 384, -544],
        [96, 384, 544],
        [96, 416, -544],
        [96, 416, 544],
        [96, 448, -544],
        [96, 448, 544],
        [96, 480, -544],
        [96, 480, 544],
        [96, 512, -544],
        [96, 512, 544],
        [96, 544, -544],
        [96, 544, 544],
        [96, -544, -512],
        [96, 544, -512],
        [96, -544, -480],
        [96, 544, -480],
        [96, -544, -448],
        [96, 544, -448],
        [96, -544, -416],
        [96, 544, -416],
        [96, -544, -384],
        [96, 544, -384],
        [96, -544, -352],
        [96, 544, -352],
        [96, -544, -320],
        [96, 544, -320],
        [96, -544, -288],
        [96, 544, -288],
        [96, -544, -256],
        [96, 544, -256],
        [96, -544, -224],
        [96, 544, -224],
        [96, -544, -192],
        [96, 544, -192],
        [96, -544, -160],
        [96, 544, -160],
        [96, -544, -128],
        [96, 544, -128],
        [96, -544, -96],
        [96, 544, -96],
        [96, -544, -64],
        [96, 544, -64],
        [96, -544, -32],
        [96, 544, -32],
        [96, -544, 0],
        [96, 544, 0],
        [96, -544, 32],
        [96, 544, 32],
        [96, -544, 64],
        [96, 544, 64],
        [96, -544, 96],
        [96, 544, 96],
        [96, -544, 128],
        [96, 544, 128],
        [96, -544, 160],
        [96, 544, 160],
        [96, -544, 192],
        [96, 544, 192],
        [96, -544, 224],
        [96, 544, 224],
        [96, -544, 256],
        [96, 544, 256],
        [96, -544, 288],
        [96, 544, 288],
        [96, -544, 320],
        [96, 544, 320],
        [96, -544, 352],
        [96, 544, 352],
        [96, -544, 384],
        [96, 544, 384],
        [96, -544, 416],
        [96, 544, 416],
        [96, -544, 448],
        [96, 544, 448],
        [96, -544, 480],
        [96, 544, 480],
        [96, -544, 512],
        [96, 544, 512],
        [128, -544, -544],
        [128, -544, 544],
        [128, -512, -544],
        [128, -512, 544],
        [128, -480, -544],
        [128, -480, 544],
        [128, -448, -544],
        [128, -448, 544],
        [128, -416, -544],
        [128, -416, 544],
        [128, -384, -544],
        [128, -384, 544],
        [128, -352, -544],
        [128, -352, 544],
        [128, -320, -544],
        [128, -320, 544],
        [128, -288, -544],
        [128, -288, 544],
        [128, -256, -544],
        [128, -256, 544],
        [128, -224, -544],
        [128, -224, 544],
        [128, -192, -544],
        [128, -192, 544],
        [128, -160, -544],
        [128, -160, 544],
        [128, -128, -544],
        [128, -128, 544],
        [128, -96, -544],
        [128, -96, 544],
        [128, -64, -544],
        [128, -64, 544],
        [128, -32, -544],
        [128, -32, 544],
        [128, 0, -544],
        [128, 0, 544],
        [128, 32, -544],
        [128, 32, 544],
        [128, 64, -544],
        [128, 64, 544],
        [128, 96, -544],
        [128, 96, 544],
        [128, 128, -544],
        [128, 128, 544],
        [128, 160, -544],
        [128, 160, 544],
        [128, 192, -544],
        [128, 192, 544],
        [128, 224, -544],
        [128, 224, 544],
        [128, 256, -544],
        [128, 256, 544],
        [128, 288, -544],
        [128, 288, 544],
        [128, 320, -544],
        [128, 320, 544],
        [128, 352, -544],
        [128, 352, 544],
        [128, 384, -544],
        [128, 384, 544],
        [128, 416, -544],
        [128, 416, 544],
        [128, 448, -544],
        [128, 448, 544],
        [128, 480, -544],
        [128, 480, 544],
        [128, 512, -544],
        [128, 512, 544],
        [128, 544, -544],
        [128, 544, 544],
        [128, -544, -512],
        [128, 544, -512],
        [128, -544, -480],
        [128, 544, -480],
        [128, -544, -448],
        [128, 544, -448],
        [128, -544, -416],
        [128, 544, -416],
        [128, -544, -384],
        [128, 544, -384],
        [128, -544, -352],
        [128, 544, -352],
        [128, -544, -320],
        [128, 544, -320],
        [128, -544, -288],
        [128, 544, -288],
        [128, -544, -256],
        [128, 544, -256],
        [128, -544, -224],
        [128, 544, -224],
        [128, -544, -192],
        [128, 544, -192],
        [128, -544, -160],
        [128, 544, -160],
        [128, -544, -128],
        [128, 544, -128],
        [128, -544, -96],
        [128, 544, -96],
        [128, -544, -64],
        [128, 544, -64],
        [128, -544, -32],
        [128, 544, -32],
        [128, -544, 0],
        [128, 544, 0],
        [128, -544, 32],
        [128, 544, 32],
        [128, -544, 64],
        [128, 544, 64],
        [128, -544, 96],
        [128, 544, 96],
        [128, -544, 128],
        [128, 544, 128],
        [128, -544, 160],
        [128, 544, 160],
        [128, -544, 192],
        [128, 544, 192],
        [128, -544, 224],
        [128, 544, 224],
        [128, -544, 256],
        [128, 544, 256],
        [128, -544, 288],
        [128, 544, 288],
        [128, -544, 320],
        [128, 544, 320],
        [128, -544, 352],
        [128, 544, 352],
        [128, -544, 384],
        [128, 544, 384],
        [128, -544, 416],
        [128, 544, 416],
        [128, -544, 448],
        [128, 544, 448],
        [128, -544, 480],
        [128, 544, 480],
        [128, -544, 512],
        [128, 544, 512],
        [160, -544, -544],
        [160, -544, 544],
        [160, -512, -544],
        [160, -512, 544],
        [160, -480, -544],
        [160, -480, 544],
        [160, -448, -544],
        [160, -448, 544],
        [160, -416, -544],
        [160, -416, 544],
        [160, -384, -544],
        [160, -384, 544],
        [160, -352, -544],
        [160, -352, 544],
        [160, -320, -544],
        [160, -320, 544],
        [160, -288, -544],
        [160, -288, 544],
        [160, -256, -544],
        [160, -256, 544],
        [160, -224, -544],
        [160, -224, 544],
        [160, -192, -544],
        [160, -192, 544],
        [160, -160, -544],
        [160, -160, 544],
        [160, -128, -544],
        [160, -128, 544],
        [160, -96, -544],
        [160, -96, 544],
        [160, -64, -544],
        [160, -64, 544],
        [160, -32, -544],
        [160, -32, 544],
        [160, 0, -544],
        [160, 0, 544],
        [160, 32, -544],
        [160, 32, 544],
        [160, 64, -544],
        [160, 64, 544],
        [160, 96, -544],
        [160, 96, 544],
        [160, 128, -544],
        [160, 128, 544],
        [160, 160, -544],
        [160, 160, 544],
        [160, 192, -544],
        [160, 192, 544],
        [160, 224, -544],
        [160, 224, 544],
        [160, 256, -544],
        [160, 256, 544],
        [160, 288, -544],
        [160, 288, 544],
        [160, 320, -544],
        [160, 320, 544],
        [160, 352, -544],
        [160, 352, 544],
        [160, 384, -544],
        [160, 384, 544],
        [160, 416, -544],
        [160, 416, 544],
        [160, 448, -544],
        [160, 448, 544],
        [160, 480, -544],
        [160, 480, 544],
        [160, 512, -544],
        [160, 512, 544],
        [160, 544, -544],
        [160, 544, 544],
        [160, -544, -512],
        [160, 544, -512],
        [160, -544, -480],
        [160, 544, -480],
        [160, -544, -448],
        [160, 544, -448],
        [160, -544, -416],
        [160, 544, -416],
        [160, -544, -384],
        [160, 544, -384],
        [160, -544, -352],
        [160, 544, -352],
        [160, -544, -320],
        [160, 544, -320],
        [160, -544, -288],
        [160, 544, -288],
        [160, -544, -256],
        [160, 544, -256],
        [160, -544, -224],
        [160, 544, -224],
        [160, -544, -192],
        [160, 544, -192],
        [160, -544, -160],
        [160, 544, -160],
        [160, -544, -128],
        [160, 544, -128],
        [160, -544, -96],
        [160, 544, -96],
        [160, -544, -64],
        [160, 544, -64],
        [160, -544, -32],
        [160, 544, -32],
        [160, -544, 0],
        [160, 544, 0],
        [160, -544, 32],
        [160, 544, 32],
        [160, -544, 64],
        [160, 544, 64],
        [160, -544, 96],
        [160, 544, 96],
        [160, -544, 128],
        [160, 544, 128],
        [160, -544, 160],
        [160, 544, 160],
        [160, -544, 192],
        [160, 544, 192],
        [160, -544, 224],
        [160, 544, 224],
        [160, -544, 256],
        [160, 544, 256],
        [160, -544, 288],
        [160, 544, 288],
        [160, -544, 320],
        [160, 544, 320],
        [160, -544, 352],
        [160, 544, 352],
        [160, -544, 384],
        [160, 544, 384],
        [160, -544, 416],
        [160, 544, 416],
        [160, -544, 448],
        [160, 544, 448],
        [160, -544, 480],
        [160, 544, 480],
        [160, -544, 512],
        [160, 544, 512],
        [192, -544, -544],
        [192, -544, 544],
        [192, -512, -544],
        [192, -512, 544],
        [192, -480, -544],
        [192, -480, 544],
        [192, -448, -544],
        [192, -448, 544],
        [192, -416, -544],
        [192, -416, 544],
        [192, -384, -544],
        [192, -384, 544],
        [192, -352, -544],
        [192, -352, 544],
        [192, -320, -544],
        [192, -320, 544],
        [192, -288, -544],
        [192, -288, 544],
        [192, -256, -544],
        [192, -256, 544],
        [192, -224, -544],
        [192, -224, 544],
        [192, -192, -544],
        [192, -192, 544],
        [192, -160, -544],
        [192, -160, 544],
        [192, -128, -544],
        [192, -128, 544],
        [192, -96, -544],
        [192, -96, 544],
        [192, -64, -544],
        [192, -64, 544],
        [192, -32, -544],
        [192, -32, 544],
        [192, 0, -544],
        [192, 0, 544],
        [192, 32, -544],
        [192, 32, 544],
        [192, 64, -544],
        [192, 64, 544],
        [192, 96, -544],
        [192, 96, 544],
        [192, 128, -544],
        [192, 128, 544],
        [192, 160, -544],
        [192, 160, 544],
        [192, 192, -544],
        [192, 192, 544],
        [192, 224, -544],
        [192, 224, 544],
        [192, 256, -544],
        [192, 256, 544],
        [192, 288, -544],
        [192, 288, 544],
        [192, 320, -544],
        [192, 320, 544],
        [192, 352, -544],
        [192, 352, 544],
        [192, 384, -544],
        [192, 384, 544],
        [192, 416, -544],
        [192, 416, 544],
        [192, 448, -544],
        [192, 448, 544],
        [192, 480, -544],
        [192, 480, 544],
        [192, 512, -544],
        [192, 512, 544],
        [192, 544, -544],
        [192, 544, 544],
        [192, -544, -512],
        [192, 544, -512],
        [192, -544, -480],
        [192, 544, -480],
        [192, -544, -448],
        [192, 544, -448],
        [192, -544, -416],
        [192, 544, -416],
        [192, -544, -384],
        [192, 544, -384],
        [192, -544, -352],
        [192, 544, -352],
        [192, -544, -320],
        [192, 544, -320],
        [192, -544, -288],
        [192, 544, -288],
        [192, -544, -256],
        [192, 544, -256],
        [192, -544, -224],
        [192, 544, -224],
        [192, -544, -192],
        [192, 544, -192],
        [192, -544, -160],
        [192, 544, -160],
        [192, -544, -128],
        [192, 544, -128],
        [192, -544, -96],
        [192, 544, -96],
        [192, -544, -64],
        [192, 544, -64],
        [192, -544, -32],
        [192, 544, -32],
        [192, -544, 0],
        [192, 544, 0],
        [192, -544, 32],
        [192, 544, 32],
        [192, -544, 64],
        [192, 544, 64],
        [192, -544, 96],
        [192, 544, 96],
        [192, -544, 128],
        [192, 544, 128],
        [192, -544, 160],
        [192, 544, 160],
        [192, -544, 192],
        [192, 544, 192],
        [192, -544, 224],
        [192, 544, 224],
        [192, -544, 256],
        [192, 544, 256],
        [192, -544, 288],
        [192, 544, 288],
        [192, -544, 320],
        [192, 544, 320],
        [192, -544, 352],
        [192, 544, 352],
        [192, -544, 384],
        [192, 544, 384],
        [192, -544, 416],
        [192, 544, 416],
        [192, -544, 448],
        [192, 544, 448],
        [192, -544, 480],
        [192, 544, 480],
        [192, -544, 512],
        [192, 544, 512],
        [224, -544, -544],
        [224, -544, 544],
        [224, -512, -544],
        [224, -512, 544],
        [224, -480, -544],
        [224, -480, 544],
        [224, -448, -544],
        [224, -448, 544],
        [224, -416, -544],
        [224, -416, 544],
        [224, -384, -544],
        [224, -384, 544],
        [224, -352, -544],
        [224, -352, 544],
        [224, -320, -544],
        [224, -320, 544],
        [224, -288, -544],
        [224, -288, 544],
        [224, -256, -544],
        [224, -256, 544],
        [224, -224, -544],
        [224, -224, 544],
        [224, -192, -544],
        [224, -192, 544],
        [224, -160, -544],
        [224, -160, 544],
        [224, -128, -544],
        [224, -128, 544],
        [224, -96, -544],
        [224, -96, 544],
        [224, -64, -544],
        [224, -64, 544],
        [224, -32, -544],
        [224, -32, 544],
        [224, 0, -544],
        [224, 0, 544],
        [224, 32, -544],
        [224, 32, 544],
        [224, 64, -544],
        [224, 64, 544],
        [224, 96, -544],
        [224, 96, 544],
        [224, 128, -544],
        [224, 128, 544],
        [224, 160, -544],
        [224, 160, 544],
        [224, 192, -544],
        [224, 192, 544],
        [224, 224, -544],
        [224, 224, 544],
        [224, 256, -544],
        [224, 256, 544],
        [224, 288, -544],
        [224, 288, 544],
        [224, 320, -544],
        [224, 320, 544],
        [224, 352, -544],
        [224, 352, 544],
        [224, 384, -544],
        [224, 384, 544],
        [224, 416, -544],
        [224, 416, 544],
        [224, 448, -544],
        [224, 448, 544],
        [224, 480, -544],
        [224, 480, 544],
        [224, 512, -544],
        [224, 512, 544],
        [224, 544, -544],
        [224, 544, 544],
        [224, -544, -512],
        [224, 544, -512],
        [224, -544, -480],
        [224, 544, -480],
        [224, -544, -448],
        [224, 544, -448],
        [224, -544, -416],
        [224, 544, -416],
        [224, -544, -384],
        [224, 544, -384],
        [224, -544, -352],
        [224, 544, -352],
        [224, -544, -320],
        [224, 544, -320],
        [224, -544, -288],
        [224, 544, -288],
        [224, -544, -256],
        [224, 544, -256],
        [224, -544, -224],
        [224, 544, -224],
        [224, -544, -192],
        [224, 544, -192],
        [224, -544, -160],
        [224, 544, -160],
        [224, -544, -128],
        [224, 544, -128],
        [224, -544, -96],
        [224, 544, -96],
        [224, -544, -64],
        [224, 544, -64],
        [224, -544, -32],
        [224, 544, -32],
        [224, -544, 0],
        [224, 544, 0],
        [224, -544, 32],
        [224, 544, 32],
        [224, -544, 64],
        [224, 544, 64],
        [224, -544, 96],
        [224, 544, 96],
        [224, -544, 128],
        [224, 544, 128],
        [224, -544, 160],
        [224, 544, 160],
        [224, -544, 192],
        [224, 544, 192],
        [224, -544, 224],
        [224, 544, 224],
        [224, -544, 256],
        [224, 544, 256],
        [224, -544, 288],
        [224, 544, 288],
        [224, -544, 320],
        [224, 544, 320],
        [224, -544, 352],
        [224, 544, 352],
        [224, -544, 384],
        [224, 544, 384],
        [224, -544, 416],
        [224, 544, 416],
        [224, -544, 448],
        [224, 544, 448],
        [224, -544, 480],
        [224, 544, 480],
        [224, -544, 512],
        [224, 544, 512],
        [256, -544, -544],
        [256, -544, 544],
        [256, -512, -544],
        [256, -512, 544],
        [256, -480, -544],
        [256, -480, 544],
        [256, -448, -544],
        [256, -448, 544],
        [256, -416, -544],
        [256, -416, 544],
        [256, -384, -544],
        [256, -384, 544],
        [256, -352, -544],
        [256, -352, 544],
        [256, -320, -544],
        [256, -320, 544],
        [256, -288, -544],
        [256, -288, 544],
        [256, -256, -544],
        [256, -256, 544],
        [256, -224, -544],
        [256, -224, 544],
        [256, -192, -544],
        [256, -192, 544],
        [256, -160, -544],
        [256, -160, 544],
        [256, -128, -544],
        [256, -128, 544],
        [256, -96, -544],
        [256, -96, 544],
        [256, -64, -544],
        [256, -64, 544],
        [256, -32, -544],
        [256, -32, 544],
        [256, 0, -544],
        [256, 0, 544],
        [256, 32, -544],
        [256, 32, 544],
        [256, 64, -544],
        [256, 64, 544],
        [256, 96, -544],
        [256, 96, 544],
        [256, 128, -544],
        [256, 128, 544],
        [256, 160, -544],
        [256, 160, 544],
        [256, 192, -544],
        [256, 192, 544],
        [256, 224, -544],
        [256, 224, 544],
        [256, 256, -544],
        [256, 256, 544],
        [256, 288, -544],
        [256, 288, 544],
        [256, 320, -544],
        [256, 320, 544],
        [256, 352, -544],
        [256, 352, 544],
        [256, 384, -544],
        [256, 384, 544],
        [256, 416, -544],
        [256, 416, 544],
        [256, 448, -544],
        [256, 448, 544],
        [256, 480, -544],
        [256, 480, 544],
        [256, 512, -544],
        [256, 512, 544],
        [256, 544, -544],
        [256, 544, 544],
        [256, -544, -512],
        [256, 544, -512],
        [256, -544, -480],
        [256, 544, -480],
        [256, -544, -448],
        [256, 544, -448],
        [256, -544, -416],
        [256, 544, -416],
        [256, -544, -384],
        [256, 544, -384],
        [256, -544, -352],
        [256, 544, -352],
        [256, -544, -320],
        [256, 544, -320],
        [256, -544, -288],
        [256, 544, -288],
        [256, -544, -256],
        [256, 544, -256],
        [256, -544, -224],
        [256, 544, -224],
        [256, -544, -192],
        [256, 544, -192],
        [256, -544, -160],
        [256, 544, -160],
        [256, -544, -128],
        [256, 544, -128],
        [256, -544, -96],
        [256, 544, -96],
        [256, -544, -64],
        [256, 544, -64],
        [256, -544, -32],
        [256, 544, -32],
        [256, -544, 0],
        [256, 544, 0],
        [256, -544, 32],
        [256, 544, 32],
        [256, -544, 64],
        [256, 544, 64],
        [256, -544, 96],
        [256, 544, 96],
        [256, -544, 128],
        [256, 544, 128],
        [256, -544, 160],
        [256, 544, 160],
        [256, -544, 192],
        [256, 544, 192],
        [256, -544, 224],
        [256, 544, 224],
        [256, -544, 256],
        [256, 544, 256],
        [256, -544, 288],
        [256, 544, 288],
        [256, -544, 320],
        [256, 544, 320],
        [256, -544, 352],
        [256, 544, 352],
        [256, -544, 384],
        [256, 544, 384],
        [256, -544, 416],
        [256, 544, 416],
        [256, -544, 448],
        [256, 544, 448],
        [256, -544, 480],
        [256, 544, 480],
        [256, -544, 512],
        [256, 544, 512],
        [288, -544, -544],
        [288, -544, 544],
        [288, -512, -544],
        [288, -512, 544],
        [288, -480, -544],
        [288, -480, 544],
        [288, -448, -544],
        [288, -448, 544],
        [288, -416, -544],
        [288, -416, 544],
        [288, -384, -544],
        [288, -384, 544],
        [288, -352, -544],
        [288, -352, 544],
        [288, -320, -544],
        [288, -320, 544],
        [288, -288, -544],
        [288, -288, 544],
        [288, -256, -544],
        [288, -256, 544],
        [288, -224, -544],
        [288, -224, 544],
        [288, -192, -544],
        [288, -192, 544],
        [288, -160, -544],
        [288, -160, 544],
        [288, -128, -544],
        [288, -128, 544],
        [288, -96, -544],
        [288, -96, 544],
        [288, -64, -544],
        [288, -64, 544],
        [288, -32, -544],
        [288, -32, 544],
        [288, 0, -544],
        [288, 0, 544],
        [288, 32, -544],
        [288, 32, 544],
        [288, 64, -544],
        [288, 64, 544],
        [288, 96, -544],
        [288, 96, 544],
        [288, 128, -544],
        [288, 128, 544],
        [288, 160, -544],
        [288, 160, 544],
        [288, 192, -544],
        [288, 192, 544],
        [288, 224, -544],
        [288, 224, 544],
        [288, 256, -544],
        [288, 256, 544],
        [288, 288, -544],
        [288, 288, 544],
        [288, 320, -544],
        [288, 320, 544],
        [288, 352, -544],
        [288, 352, 544],
        [288, 384, -544],
        [288, 384, 544],
        [288, 416, -544],
        [288, 416, 544],
        [288, 448, -544],
        [288, 448, 544],
        [288, 480, -544],
        [288, 480, 544],
        [288, 512, -544],
        [288, 512, 544],
        [288, 544, -544],
        [288, 544, 544],
        [288, -544, -512],
        [288, 544, -512],
        [288, -544, -480],
        [288, 544, -480],
        [288, -544, -448],
        [288, 544, -448],
        [288, -544, -416],
        [288, 544, -416],
        [288, -544, -384],
        [288, 544, -384],
        [288, -544, -352],
        [288, 544, -352],
        [288, -544, -320],
        [288, 544, -320],
        [288, -544, -288],
        [288, 544, -288],
        [288, -544, -256],
        [288, 544, -256],
        [288, -544, -224],
        [288, 544, -224],
        [288, -544, -192],
        [288, 544, -192],
        [288, -544, -160],
        [288, 544, -160],
        [288, -544, -128],
        [288, 544, -128],
        [288, -544, -96],
        [288, 544, -96],
        [288, -544, -64],
        [288, 544, -64],
        [288, -544, -32],
        [288, 544, -32],
        [288, -544, 0],
        [288, 544, 0],
        [288, -544, 32],
        [288, 544, 32],
        [288, -544, 64],
        [288, 544, 64],
        [288, -544, 96],
        [288, 544, 96],
        [288, -544, 128],
        [288, 544, 128],
        [288, -544, 160],
        [288, 544, 160],
        [288, -544, 192],
        [288, 544, 192],
        [288, -544, 224],
        [288, 544, 224],
        [288, -544, 256],
        [288, 544, 256],
        [288, -544, 288],
        [288, 544, 288],
        [288, -544, 320],
        [288, 544, 320],
        [288, -544, 352],
        [288, 544, 352],
        [288, -544, 384],
        [288, 544, 384],
        [288, -544, 416],
        [288, 544, 416],
        [288, -544, 448],
        [288, 544, 448],
        [288, -544, 480],
        [288, 544, 480],
        [288, -544, 512],
        [288, 544, 512],
        [320, -544, -544],
        [320, -544, 544],
        [320, -512, -544],
        [320, -512, 544],
        [320, -480, -544],
        [320, -480, 544],
        [320, -448, -544],
        [320, -448, 544],
        [320, -416, -544],
        [320, -416, 544],
        [320, -384, -544],
        [320, -384, 544],
        [320, -352, -544],
        [320, -352, 544],
        [320, -320, -544],
        [320, -320, 544],
        [320, -288, -544],
        [320, -288, 544],
        [320, -256, -544],
        [320, -256, 544],
        [320, -224, -544],
        [320, -224, 544],
        [320, -192, -544],
        [320, -192, 544],
        [320, -160, -544],
        [320, -160, 544],
        [320, -128, -544],
        [320, -128, 544],
        [320, -96, -544],
        [320, -96, 544],
        [320, -64, -544],
        [320, -64, 544],
        [320, -32, -544],
        [320, -32, 544],
        [320, 0, -544],
        [320, 0, 544],
        [320, 32, -544],
        [320, 32, 544],
        [320, 64, -544],
        [320, 64, 544],
        [320, 96, -544],
        [320, 96, 544],
        [320, 128, -544],
        [320, 128, 544],
        [320, 160, -544],
        [320, 160, 544],
        [320, 192, -544],
        [320, 192, 544],
        [320, 224, -544],
        [320, 224, 544],
        [320, 256, -544],
        [320, 256, 544],
        [320, 288, -544],
        [320, 288, 544],
        [320, 320, -544],
        [320, 320, 544],
        [320, 352, -544],
        [320, 352, 544],
        [320, 384, -544],
        [320, 384, 544],
        [320, 416, -544],
        [320, 416, 544],
        [320, 448, -544],
        [320, 448, 544],
        [320, 480, -544],
        [320, 480, 544],
        [320, 512, -544],
        [320, 512, 544],
        [320, 544, -544],
        [320, 544, 544],
        [320, -544, -512],
        [320, 544, -512],
        [320, -544, -480],
        [320, 544, -480],
        [320, -544, -448],
        [320, 544, -448],
        [320, -544, -416],
        [320, 544, -416],
        [320, -544, -384],
        [320, 544, -384],
        [320, -544, -352],
        [320, 544, -352],
        [320, -544, -320],
        [320, 544, -320],
        [320, -544, -288],
        [320, 544, -288],
        [320, -544, -256],
        [320, 544, -256],
        [320, -544, -224],
        [320, 544, -224],
        [320, -544, -192],
        [320, 544, -192],
        [320, -544, -160],
        [320, 544, -160],
        [320, -544, -128],
        [320, 544, -128],
        [320, -544, -96],
        [320, 544, -96],
        [320, -544, -64],
        [320, 544, -64],
        [320, -544, -32],
        [320, 544, -32],
        [320, -544, 0],
        [320, 544, 0],
        [320, -544, 32],
        [320, 544, 32],
        [320, -544, 64],
        [320, 544, 64],
        [320, -544, 96],
        [320, 544, 96],
        [320, -544, 128],
        [320, 544, 128],
        [320, -544, 160],
        [320, 544, 160],
        [320, -544, 192],
        [320, 544, 192],
        [320, -544, 224],
        [320, 544, 224],
        [320, -544, 256],
        [320, 544, 256],
        [320, -544, 288],
        [320, 544, 288],
        [320, -544, 320],
        [320, 544, 320],
        [320, -544, 352],
        [320, 544, 352],
        [320, -544, 384],
        [320, 544, 384],
        [320, -544, 416],
        [320, 544, 416],
        [320, -544, 448],
        [320, 544, 448],
        [320, -544, 480],
        [320, 544, 480],
        [320, -544, 512],
        [320, 544, 512],
        [352, -544, -544],
        [352, -544, 544],
        [352, -512, -544],
        [352, -512, 544],
        [352, -480, -544],
        [352, -480, 544],
        [352, -448, -544],
        [352, -448, 544],
        [352, -416, -544],
        [352, -416, 544],
        [352, -384, -544],
        [352, -384, 544],
        [352, -352, -544],
        [352, -352, 544],
        [352, -320, -544],
        [352, -320, 544],
        [352, -288, -544],
        [352, -288, 544],
        [352, -256, -544],
        [352, -256, 544],
        [352, -224, -544],
        [352, -224, 544],
        [352, -192, -544],
        [352, -192, 544],
        [352, -160, -544],
        [352, -160, 544],
        [352, -128, -544],
        [352, -128, 544],
        [352, -96, -544],
        [352, -96, 544],
        [352, -64, -544],
        [352, -64, 544],
        [352, -32, -544],
        [352, -32, 544],
        [352, 0, -544],
        [352, 0, 544],
        [352, 32, -544],
        [352, 32, 544],
        [352, 64, -544],
        [352, 64, 544],
        [352, 96, -544],
        [352, 96, 544],
        [352, 128, -544],
        [352, 128, 544],
        [352, 160, -544],
        [352, 160, 544],
        [352, 192, -544],
        [352, 192, 544],
        [352, 224, -544],
        [352, 224, 544],
        [352, 256, -544],
        [352, 256, 544],
        [352, 288, -544],
        [352, 288, 544],
        [352, 320, -544],
        [352, 320, 544],
        [352, 352, -544],
        [352, 352, 544],
        [352, 384, -544],
        [352, 384, 544],
        [352, 416, -544],
        [352, 416, 544],
        [352, 448, -544],
        [352, 448, 544],
        [352, 480, -544],
        [352, 480, 544],
        [352, 512, -544],
        [352, 512, 544],
        [352, 544, -544],
        [352, 544, 544],
        [352, -544, -512],
        [352, 544, -512],
        [352, -544, -480],
        [352, 544, -480],
        [352, -544, -448],
        [352, 544, -448],
        [352, -544, -416],
        [352, 544, -416],
        [352, -544, -384],
        [352, 544, -384],
        [352, -544, -352],
        [352, 544, -352],
        [352, -544, -320],
        [352, 544, -320],
        [352, -544, -288],
        [352, 544, -288],
        [352, -544, -256],
        [352, 544, -256],
        [352, -544, -224],
        [352, 544, -224],
        [352, -544, -192],
        [352, 544, -192],
        [352, -544, -160],
        [352, 544, -160],
        [352, -544, -128],
        [352, 544, -128],
        [352, -544, -96],
        [352, 544, -96],
        [352, -544, -64],
        [352, 544, -64],
        [352, -544, -32],
        [352, 544, -32],
        [352, -544, 0],
        [352, 544, 0],
        [352, -544, 32],
        [352, 544, 32],
        [352, -544, 64],
        [352, 544, 64],
        [352, -544, 96],
        [352, 544, 96],
        [352, -544, 128],
        [352, 544, 128],
        [352, -544, 160],
        [352, 544, 160],
        [352, -544, 192],
        [352, 544, 192],
        [352, -544, 224],
        [352, 544, 224],
        [352, -544, 256],
        [352, 544, 256],
        [352, -544, 288],
        [352, 544, 288],
        [352, -544, 320],
        [352, 544, 320],
        [352, -544, 352],
        [352, 544, 352],
        [352, -544, 384],
        [352, 544, 384],
        [352, -544, 416],
        [352, 544, 416],
        [352, -544, 448],
        [352, 544, 448],
        [352, -544, 480],
        [352, 544, 480],
        [352, -544, 512],
        [352, 544, 512],
        [384, -544, -544],
        [384, -544, 544],
        [384, -512, -544],
        [384, -512, 544],
        [384, -480, -544],
        [384, -480, 544],
        [384, -448, -544],
        [384, -448, 544],
        [384, -416, -544],
        [384, -416, 544],
        [384, -384, -544],
        [384, -384, 544],
        [384, -352, -544],
        [384, -352, 544],
        [384, -320, -544],
        [384, -320, 544],
        [384, -288, -544],
        [384, -288, 544],
        [384, -256, -544],
        [384, -256, 544],
        [384, -224, -544],
        [384, -224, 544],
        [384, -192, -544],
        [384, -192, 544],
        [384, -160, -544],
        [384, -160, 544],
        [384, -128, -544],
        [384, -128, 544],
        [384, -96, -544],
        [384, -96, 544],
        [384, -64, -544],
        [384, -64, 544],
        [384, -32, -544],
        [384, -32, 544],
        [384, 0, -544],
        [384, 0, 544],
        [384, 32, -544],
        [384, 32, 544],
        [384, 64, -544],
        [384, 64, 544],
        [384, 96, -544],
        [384, 96, 544],
        [384, 128, -544],
        [384, 128, 544],
        [384, 160, -544],
        [384, 160, 544],
        [384, 192, -544],
        [384, 192, 544],
        [384, 224, -544],
        [384, 224, 544],
        [384, 256, -544],
        [384, 256, 544],
        [384, 288, -544],
        [384, 288, 544],
        [384, 320, -544],
        [384, 320, 544],
        [384, 352, -544],
        [384, 352, 544],
        [384, 384, -544],
        [384, 384, 544],
        [384, 416, -544],
        [384, 416, 544],
        [384, 448, -544],
        [384, 448, 544],
        [384, 480, -544],
        [384, 480, 544],
        [384, 512, -544],
        [384, 512, 544],
        [384, 544, -544],
        [384, 544, 544],
        [384, -544, -512],
        [384, 544, -512],
        [384, -544, -480],
        [384, 544, -480],
        [384, -544, -448],
        [384, 544, -448],
        [384, -544, -416],
        [384, 544, -416],
        [384, -544, -384],
        [384, 544, -384],
        [384, -544, -352],
        [384, 544, -352],
        [384, -544, -320],
        [384, 544, -320],
        [384, -544, -288],
        [384, 544, -288],
        [384, -544, -256],
        [384, 544, -256],
        [384, -544, -224],
        [384, 544, -224],
        [384, -544, -192],
        [384, 544, -192],
        [384, -544, -160],
        [384, 544, -160],
        [384, -544, -128],
        [384, 544, -128],
        [384, -544, -96],
        [384, 544, -96],
        [384, -544, -64],
        [384, 544, -64],
        [384, -544, -32],
        [384, 544, -32],
        [384, -544, 0],
        [384, 544, 0],
        [384, -544, 32],
        [384, 544, 32],
        [384, -544, 64],
        [384, 544, 64],
        [384, -544, 96],
        [384, 544, 96],
        [384, -544, 128],
        [384, 544, 128],
        [384, -544, 160],
        [384, 544, 160],
        [384, -544, 192],
        [384, 544, 192],
        [384, -544, 224],
        [384, 544, 224],
        [384, -544, 256],
        [384, 544, 256],
        [384, -544, 288],
        [384, 544, 288],
        [384, -544, 320],
        [384, 544, 320],
        [384, -544, 352],
        [384, 544, 352],
        [384, -544, 384],
        [384, 544, 384],
        [384, -544, 416],
        [384, 544, 416],
        [384, -544, 448],
        [384, 544, 448],
        [384, -544, 480],
        [384, 544, 480],
        [384, -544, 512],
        [384, 544, 512],
        [416, -544, -544],
        [416, -544, 544],
        [416, -512, -544],
        [416, -512, 544],
        [416, -480, -544],
        [416, -480, 544],
        [416, -448, -544],
        [416, -448, 544],
        [416, -416, -544],
        [416, -416, 544],
        [416, -384, -544],
        [416, -384, 544],
        [416, -352, -544],
        [416, -352, 544],
        [416, -320, -544],
        [416, -320, 544],
        [416, -288, -544],
        [416, -288, 544],
        [416, -256, -544],
        [416, -256, 544],
        [416, -224, -544],
        [416, -224, 544],
        [416, -192, -544],
        [416, -192, 544],
        [416, -160, -544],
        [416, -160, 544],
        [416, -128, -544],
        [416, -128, 544],
        [416, -96, -544],
        [416, -96, 544],
        [416, -64, -544],
        [416, -64, 544],
        [416, -32, -544],
        [416, -32, 544],
        [416, 0, -544],
        [416, 0, 544],
        [416, 32, -544],
        [416, 32, 544],
        [416, 64, -544],
        [416, 64, 544],
        [416, 96, -544],
        [416, 96, 544],
        [416, 128, -544],
        [416, 128, 544],
        [416, 160, -544],
        [416, 160, 544],
        [416, 192, -544],
        [416, 192, 544],
        [416, 224, -544],
        [416, 224, 544],
        [416, 256, -544],
        [416, 256, 544],
        [416, 288, -544],
        [416, 288, 544],
        [416, 320, -544],
        [416, 320, 544],
        [416, 352, -544],
        [416, 352, 544],
        [416, 384, -544],
        [416, 384, 544],
        [416, 416, -544],
        [416, 416, 544],
        [416, 448, -544],
        [416, 448, 544],
        [416, 480, -544],
        [416, 480, 544],
        [416, 512, -544],
        [416, 512, 544],
        [416, 544, -544],
        [416, 544, 544],
        [416, -544, -512],
        [416, 544, -512],
        [416, -544, -480],
        [416, 544, -480],
        [416, -544, -448],
        [416, 544, -448],
        [416, -544, -416],
        [416, 544, -416],
        [416, -544, -384],
        [416, 544, -384],
        [416, -544, -352],
        [416, 544, -352],
        [416, -544, -320],
        [416, 544, -320],
        [416, -544, -288],
        [416, 544, -288],
        [416, -544, -256],
        [416, 544, -256],
        [416, -544, -224],
        [416, 544, -224],
        [416, -544, -192],
        [416, 544, -192],
        [416, -544, -160],
        [416, 544, -160],
        [416, -544, -128],
        [416, 544, -128],
        [416, -544, -96],
        [416, 544, -96],
        [416, -544, -64],
        [416, 544, -64],
        [416, -544, -32],
        [416, 544, -32],
        [416, -544, 0],
        [416, 544, 0],
        [416, -544, 32],
        [416, 544, 32],
        [416, -544, 64],
        [416, 544, 64],
        [416, -544, 96],
        [416, 544, 96],
        [416, -544, 128],
        [416, 544, 128],
        [416, -544, 160],
        [416, 544, 160],
        [416, -544, 192],
        [416, 544, 192],
        [416, -544, 224],
        [416, 544, 224],
        [416, -544, 256],
        [416, 544, 256],
        [416, -544, 288],
        [416, 544, 288],
        [416, -544, 320],
        [416, 544, 320],
        [416, -544, 352],
        [416, 544, 352],
        [416, -544, 384],
        [416, 544, 384],
        [416, -544, 416],
        [416, 544, 416],
        [416, -544, 448],
        [416, 544, 448],
        [416, -544, 480],
        [416, 544, 480],
        [416, -544, 512],
        [416, 544, 512],
        [448, -544, -544],
        [448, -544, 544],
        [448, -512, -544],
        [448, -512, 544],
        [448, -480, -544],
        [448, -480, 544],
        [448, -448, -544],
        [448, -448, 544],
        [448, -416, -544],
        [448, -416, 544],
        [448, -384, -544],
        [448, -384, 544],
        [448, -352, -544],
        [448, -352, 544],
        [448, -320, -544],
        [448, -320, 544],
        [448, -288, -544],
        [448, -288, 544],
        [448, -256, -544],
        [448, -256, 544],
        [448, -224, -544],
        [448, -224, 544],
        [448, -192, -544],
        [448, -192, 544],
        [448, -160, -544],
        [448, -160, 544],
        [448, -128, -544],
        [448, -128, 544],
        [448, -96, -544],
        [448, -96, 544],
        [448, -64, -544],
        [448, -64, 544],
        [448, -32, -544],
        [448, -32, 544],
        [448, 0, -544],
        [448, 0, 544],
        [448, 32, -544],
        [448, 32, 544],
        [448, 64, -544],
        [448, 64, 544],
        [448, 96, -544],
        [448, 96, 544],
        [448, 128, -544],
        [448, 128, 544],
        [448, 160, -544],
        [448, 160, 544],
        [448, 192, -544],
        [448, 192, 544],
        [448, 224, -544],
        [448, 224, 544],
        [448, 256, -544],
        [448, 256, 544],
        [448, 288, -544],
        [448, 288, 544],
        [448, 320, -544],
        [448, 320, 544],
        [448, 352, -544],
        [448, 352, 544],
        [448, 384, -544],
        [448, 384, 544],
        [448, 416, -544],
        [448, 416, 544],
        [448, 448, -544],
        [448, 448, 544],
        [448, 480, -544],
        [448, 480, 544],
        [448, 512, -544],
        [448, 512, 544],
        [448, 544, -544],
        [448, 544, 544],
        [448, -544, -512],
        [448, 544, -512],
        [448, -544, -480],
        [448, 544, -480],
        [448, -544, -448],
        [448, 544, -448],
        [448, -544, -416],
        [448, 544, -416],
        [448, -544, -384],
        [448, 544, -384],
        [448, -544, -352],
        [448, 544, -352],
        [448, -544, -320],
        [448, 544, -320],
        [448, -544, -288],
        [448, 544, -288],
        [448, -544, -256],
        [448, 544, -256],
        [448, -544, -224],
        [448, 544, -224],
        [448, -544, -192],
        [448, 544, -192],
        [448, -544, -160],
        [448, 544, -160],
        [448, -544, -128],
        [448, 544, -128],
        [448, -544, -96],
        [448, 544, -96],
        [448, -544, -64],
        [448, 544, -64],
        [448, -544, -32],
        [448, 544, -32],
        [448, -544, 0],
        [448, 544, 0],
        [448, -544, 32],
        [448, 544, 32],
        [448, -544, 64],
        [448, 544, 64],
        [448, -544, 96],
        [448, 544, 96],
        [448, -544, 128],
        [448, 544, 128],
        [448, -544, 160],
        [448, 544, 160],
        [448, -544, 192],
        [448, 544, 192],
        [448, -544, 224],
        [448, 544, 224],
        [448, -544, 256],
        [448, 544, 256],
        [448, -544, 288],
        [448, 544, 288],
        [448, -544, 320],
        [448, 544, 320],
        [448, -544, 352],
        [448, 544, 352],
        [448, -544, 384],
        [448, 544, 384],
        [448, -544, 416],
        [448, 544, 416],
        [448, -544, 448],
        [448, 544, 448],
        [448, -544, 480],
        [448, 544, 480],
        [448, -544, 512],
        [448, 544, 512],
        [480, -544, -544],
        [480, -544, 544],
        [480, -512, -544],
        [480, -512, 544],
        [480, -480, -544],
        [480, -480, 544],
        [480, -448, -544],
        [480, -448, 544],
        [480, -416, -544],
        [480, -416, 544],
        [480, -384, -544],
        [480, -384, 544],
        [480, -352, -544],
        [480, -352, 544],
        [480, -320, -544],
        [480, -320, 544],
        [480, -288, -544],
        [480, -288, 544],
        [480, -256, -544],
        [480, -256, 544],
        [480, -224, -544],
        [480, -224, 544],
        [480, -192, -544],
        [480, -192, 544],
        [480, -160, -544],
        [480, -160, 544],
        [480, -128, -544],
        [480, -128, 544],
        [480, -96, -544],
        [480, -96, 544],
        [480, -64, -544],
        [480, -64, 544],
        [480, -32, -544],
        [480, -32, 544],
        [480, 0, -544],
        [480, 0, 544],
        [480, 32, -544],
        [480, 32, 544],
        [480, 64, -544],
        [480, 64, 544],
        [480, 96, -544],
        [480, 96, 544],
        [480, 128, -544],
        [480, 128, 544],
        [480, 160, -544],
        [480, 160, 544],
        [480, 192, -544],
        [480, 192, 544],
        [480, 224, -544],
        [480, 224, 544],
        [480, 256, -544],
        [480, 256, 544],
        [480, 288, -544],
        [480, 288, 544],
        [480, 320, -544],
        [480, 320, 544],
        [480, 352, -544],
        [480, 352, 544],
        [480, 384, -544],
        [480, 384, 544],
        [480, 416, -544],
        [480, 416, 544],
        [480, 448, -544],
        [480, 448, 544],
        [480, 480, -544],
        [480, 480, 544],
        [480, 512, -544],
        [480, 512, 544],
        [480, 544, -544],
        [480, 544, 544],
        [480, -544, -512],
        [480, 544, -512],
        [480, -544, -480],
        [480, 544, -480],
        [480, -544, -448],
        [480, 544, -448],
        [480, -544, -416],
        [480, 544, -416],
        [480, -544, -384],
        [480, 544, -384],
        [480, -544, -352],
        [480, 544, -352],
        [480, -544, -320],
        [480, 544, -320],
        [480, -544, -288],
        [480, 544, -288],
        [480, -544, -256],
        [480, 544, -256],
        [480, -544, -224],
        [480, 544, -224],
        [480, -544, -192],
        [480, 544, -192],
        [480, -544, -160],
        [480, 544, -160],
        [480, -544, -128],
        [480, 544, -128],
        [480, -544, -96],
        [480, 544, -96],
        [480, -544, -64],
        [480, 544, -64],
        [480, -544, -32],
        [480, 544, -32],
        [480, -544, 0],
        [480, 544, 0],
        [480, -544, 32],
        [480, 544, 32],
        [480, -544, 64],
        [480, 544, 64],
        [480, -544, 96],
        [480, 544, 96],
        [480, -544, 128],
        [480, 544, 128],
        [480, -544, 160],
        [480, 544, 160],
        [480, -544, 192],
        [480, 544, 192],
        [480, -544, 224],
        [480, 544, 224],
        [480, -544, 256],
        [480, 544, 256],
        [480, -544, 288],
        [480, 544, 288],
        [480, -544, 320],
        [480, 544, 320],
        [480, -544, 352],
        [480, 544, 352],
        [480, -544, 384],
        [480, 544, 384],
        [480, -544, 416],
        [480, 544, 416],
        [480, -544, 448],
        [480, 544, 448],
        [480, -544, 480],
        [480, 544, 480],
        [480, -544, 512],
        [480, 544, 512],
        [512, -544, -544],
        [512, -544, 544],
        [512, -512, -544],
        [512, -512, 544],
        [512, -480, -544],
        [512, -480, 544],
        [512, -448, -544],
        [512, -448, 544],
        [512, -416, -544],
        [512, -416, 544],
        [512, -384, -544],
        [512, -384, 544],
        [512, -352, -544],
        [512, -352, 544],
        [512, -320, -544],
        [512, -320, 544],
        [512, -288, -544],
        [512, -288, 544],
        [512, -256, -544],
        [512, -256, 544],
        [512, -224, -544],
        [512, -224, 544],
        [512, -192, -544],
        [512, -192, 544],
        [512, -160, -544],
        [512, -160, 544],
        [512, -128, -544],
        [512, -128, 544],
        [512, -96, -544],
        [512, -96, 544],
        [512, -64, -544],
        [512, -64, 544],
        [512, -32, -544],
        [512, -32, 544],
        [512, 0, -544],
        [512, 0, 544],
        [512, 32, -544],
        [512, 32, 544],
        [512, 64, -544],
        [512, 64, 544],
        [512, 96, -544],
        [512, 96, 544],
        [512, 128, -544],
        [512, 128, 544],
        [512, 160, -544],
        [512, 160, 544],
        [512, 192, -544],
        [512, 192, 544],
        [512, 224, -544],
        [512, 224, 544],
        [512, 256, -544],
        [512, 256, 544],
        [512, 288, -544],
        [512, 288, 544],
        [512, 320, -544],
        [512, 320, 544],
        [512, 352, -544],
        [512, 352, 544],
        [512, 384, -544],
        [512, 384, 544],
        [512, 416, -544],
        [512, 416, 544],
        [512, 448, -544],
        [512, 448, 544],
        [512, 480, -544],
        [512, 480, 544],
        [512, 512, -544],
        [512, 512, 544],
        [512, 544, -544],
        [512, 544, 544],
        [512, -544, -512],
        [512, 544, -512],
        [512, -544, -480],
        [512, 544, -480],
        [512, -544, -448],
        [512, 544, -448],
        [512, -544, -416],
        [512, 544, -416],
        [512, -544, -384],
        [512, 544, -384],
        [512, -544, -352],
        [512, 544, -352],
        [512, -544, -320],
        [512, 544, -320],
        [512, -544, -288],
        [512, 544, -288],
        [512, -544, -256],
        [512, 544, -256],
        [512, -544, -224],
        [512, 544, -224],
        [512, -544, -192],
        [512, 544, -192],
        [512, -544, -160],
        [512, 544, -160],
        [512, -544, -128],
        [512, 544, -128],
        [512, -544, -96],
        [512, 544, -96],
        [512, -544, -64],
        [512, 544, -64],
        [512, -544, -32],
        [512, 544, -32],
        [512, -544, 0],
        [512, 544, 0],
        [512, -544, 32],
        [512, 544, 32],
        [512, -544, 64],
        [512, 544, 64],
        [512, -544, 96],
        [512, 544, 96],
        [512, -544, 128],
        [512, 544, 128],
        [512, -544, 160],
        [512, 544, 160],
        [512, -544, 192],
        [512, 544, 192],
        [512, -544, 224],
        [512, 544, 224],
        [512, -544, 256],
        [512, 544, 256],
        [512, -544, 288],
        [512, 544, 288],
        [512, -544, 320],
        [512, 544, 320],
        [512, -544, 352],
        [512, 544, 352],
        [512, -544, 384],
        [512, 544, 384],
        [512, -544, 416],
        [512, 544, 416],
        [512, -544, 448],
        [512, 544, 448],
        [512, -544, 480],
        [512, 544, 480],
        [512, -544, 512],
        [512, 544, 512],
        [544, -544, -544],
        [544, -544, 544],
        [544, -512, -544],
        [544, -512, 544],
        [544, -480, -544],
        [544, -480, 544],
        [544, -448, -544],
        [544, -448, 544],
        [544, -416, -544],
        [544, -416, 544],
        [544, -384, -544],
        [544, -384, 544],
        [544, -352, -544],
        [544, -352, 544],
        [544, -320, -544],
        [544, -320, 544],
        [544, -288, -544],
        [544, -288, 544],
        [544, -256, -544],
        [544, -256, 544],
        [544, -224, -544],
        [544, -224, 544],
        [544, -192, -544],
        [544, -192, 544],
        [544, -160, -544],
        [544, -160, 544],
        [544, -128, -544],
        [544, -128, 544],
        [544, -96, -544],
        [544, -96, 544],
        [544, -64, -544],
        [544, -64, 544],
        [544, -32, -544],
        [544, -32, 544],
        [544, 0, -544],
        [544, 0, 544],
        [544, 32, -544],
        [544, 32, 544],
        [544, 64, -544],
        [544, 64, 544],
        [544, 96, -544],
        [544, 96, 544],
        [544, 128, -544],
        [544, 128, 544],
        [544, 160, -544],
        [544, 160, 544],
        [544, 192, -544],
        [544, 192, 544],
        [544, 224, -544],
        [544, 224, 544],
        [544, 256, -544],
        [544, 256, 544],
        [544, 288, -544],
        [544, 288, 544],
        [544, 320, -544],
        [544, 320, 544],
        [544, 352, -544],
        [544, 352, 544],
        [544, 384, -544],
        [544, 384, 544],
        [544, 416, -544],
        [544, 416, 544],
        [544, 448, -544],
        [544, 448, 544],
        [544, 480, -544],
        [544, 480, 544],
        [544, 512, -544],
        [544, 512, 544],
        [544, 544, -544],
        [544, 544, 544],
        [544, -544, -512],
        [544, 544, -512],
        [544, -544, -480],
        [544, 544, -480],
        [544, -544, -448],
        [544, 544, -448],
        [544, -544, -416],
        [544, 544, -416],
        [544, -544, -384],
        [544, 544, -384],
        [544, -544, -352],
        [544, 544, -352],
        [544, -544, -320],
        [544, 544, -320],
        [544, -544, -288],
        [544, 544, -288],
        [544, -544, -256],
        [544, 544, -256],
        [544, -544, -224],
        [544, 544, -224],
        [544, -544, -192],
        [544, 544, -192],
        [544, -544, -160],
        [544, 544, -160],
        [544, -544, -128],
        [544, 544, -128],
        [544, -544, -96],
        [544, 544, -96],
        [544, -544, -64],
        [544, 544, -64],
        [544, -544, -32],
        [544, 544, -32],
        [544, -544, 0],
        [544, 544, 0],
        [544, -544, 32],
        [544, 544, 32],
        [544, -544, 64],
        [544, 544, 64],
        [544, -544, 96],
        [544, 544, 96],
        [544, -544, 128],
        [544, 544, 128],
        [544, -544, 160],
        [544, 544, 160],
        [544, -544, 192],
        [544, 544, 192],
        [544, -544, 224],
        [544, 544, 224],
        [544, -544, 256],
        [544, 544, 256],
        [544, -544, 288],
        [544, 544, 288],
        [544, -544, 320],
        [544, 544, 320],
        [544, -544, 352],
        [544, 544, 352],
        [544, -544, 384],
        [544, 544, 384],
        [544, -544, 416],
        [544, 544, 416],
        [544, -544, 448],
        [544, 544, 448],
        [544, -544, 480],
        [544, 544, 480],
        [544, -544, 512],
        [544, 544, 512],
        [-544, -512, -512],
        [544, -512, -512],
        [-544, -480, -512],
        [544, -480, -512],
        [-544, -448, -512],
        [544, -448, -512],
        [-544, -416, -512],
        [544, -416, -512],
        [-544, -384, -512],
        [544, -384, -512],
        [-544, -352, -512],
        [544, -352, -512],
        [-544, -320, -512],
        [544, -320, -512],
        [-544, -288, -512],
        [544, -288, -512],
        [-544, -256, -512],
        [544, -256, -512],
        [-544, -224, -512],
        [544, -224, -512],
        [-544, -192, -512],
        [544, -192, -512],
        [-544, -160, -512],
        [544, -160, -512],
        [-544, -128, -512],
        [544, -128, -512],
        [-544, -96, -512],
        [544, -96, -512],
        [-544, -64, -512],
        [544, -64, -512],
        [-544, -32, -512],
        [544, -32, -512],
        [-544, 0, -512],
        [544, 0, -512],
        [-544, 32, -512],
        [544, 32, -512],
        [-544, 64, -512],
        [544, 64, -512],
        [-544, 96, -512],
        [544, 96, -512],
        [-544, 128, -512],
        [544, 128, -512],
        [-544, 160, -512],
        [544, 160, -512],
        [-544, 192, -512],
        [544, 192, -512],
        [-544, 224, -512],
        [544, 224, -512],
        [-544, 256, -512],
        [544, 256, -512],
        [-544, 288, -512],
        [544, 288, -512],
        [-544, 320, -512],
        [544, 320, -512],
        [-544, 352, -512],
        [544, 352, -512],
        [-544, 384, -512],
        [544, 384, -512],
        [-544, 416, -512],
        [544, 416, -512],
        [-544, 448, -512],
        [544, 448, -512],
        [-544, 480, -512],
        [544, 480, -512],
        [-544, 512, -512],
        [544, 512, -512],
        [-544, -512, -480],
        [544, -512, -480],
        [-544, -480, -480],
        [544, -480, -480],
        [-544, -448, -480],
        [544, -448, -480],
        [-544, -416, -480],
        [544, -416, -480],
        [-544, -384, -480],
        [544, -384, -480],
        [-544, -352, -480],
        [544, -352, -480],
        [-544, -320, -480],
        [544, -320, -480],
        [-544, -288, -480],
        [544, -288, -480],
        [-544, -256, -480],
        [544, -256, -480],
        [-544, -224, -480],
        [544, -224, -480],
        [-544, -192, -480],
        [544, -192, -480],
        [-544, -160, -480],
        [544, -160, -480],
        [-544, -128, -480],
        [544, -128, -480],
        [-544, -96, -480],
        [544, -96, -480],
        [-544, -64, -480],
        [544, -64, -480],
        [-544, -32, -480],
        [544, -32, -480],
        [-544, 0, -480],
        [544, 0, -480],
        [-544, 32, -480],
        [544, 32, -480],
        [-544, 64, -480],
        [544, 64, -480],
        [-544, 96, -480],
        [544, 96, -480],
        [-544, 128, -480],
        [544, 128, -480],
        [-544, 160, -480],
        [544, 160, -480],
        [-544, 192, -480],
        [544, 192, -480],
        [-544, 224, -480],
        [544, 224, -480],
        [-544, 256, -480],
        [544, 256, -480],
        [-544, 288, -480],
        [544, 288, -480],
        [-544, 320, -480],
        [544, 320, -480],
        [-544, 352, -480],
        [544, 352, -480],
        [-544, 384, -480],
        [544, 384, -480],
        [-544, 416, -480],
        [544, 416, -480],
        [-544, 448, -480],
        [544, 448, -480],
        [-544, 480, -480],
        [544, 480, -480],
        [-544, 512, -480],
        [544, 512, -480],
        [-544, -512, -448],
        [544, -512, -448],
        [-544, -480, -448],
        [544, -480, -448],
        [-544, -448, -448],
        [544, -448, -448],
        [-544, -416, -448],
        [544, -416, -448],
        [-544, -384, -448],
        [544, -384, -448],
        [-544, -352, -448],
        [544, -352, -448],
        [-544, -320, -448],
        [544, -320, -448],
        [-544, -288, -448],
        [544, -288, -448],
        [-544, -256, -448],
        [544, -256, -448],
        [-544, -224, -448],
        [544, -224, -448],
        [-544, -192, -448],
        [544, -192, -448],
        [-544, -160, -448],
        [544, -160, -448],
        [-544, -128, -448],
        [544, -128, -448],
        [-544, -96, -448],
        [544, -96, -448],
        [-544, -64, -448],
        [544, -64, -448],
        [-544, -32, -448],
        [544, -32, -448],
        [-544, 0, -448],
        [544, 0, -448],
        [-544, 32, -448],
        [544, 32, -448],
        [-544, 64, -448],
        [544, 64, -448],
        [-544, 96, -448],
        [544, 96, -448],
        [-544, 128, -448],
        [544, 128, -448],
        [-544, 160, -448],
        [544, 160, -448],
        [-544, 192, -448],
        [544, 192, -448],
        [-544, 224, -448],
        [544, 224, -448],
        [-544, 256, -448],
        [544, 256, -448],
        [-544, 288, -448],
        [544, 288, -448],
        [-544, 320, -448],
        [544, 320, -448],
        [-544, 352, -448],
        [544, 352, -448],
        [-544, 384, -448],
        [544, 384, -448],
        [-544, 416, -448],
        [544, 416, -448],
        [-544, 448, -448],
        [544, 448, -448],
        [-544, 480, -448],
        [544, 480, -448],
        [-544, 512, -448],
        [544, 512, -448],
        [-544, -512, -416],
        [544, -512, -416],
        [-544, -480, -416],
        [544, -480, -416],
        [-544, -448, -416],
        [544, -448, -416],
        [-544, -416, -416],
        [544, -416, -416],
        [-544, -384, -416],
        [544, -384, -416],
        [-544, -352, -416],
        [544, -352, -416],
        [-544, -320, -416],
        [544, -320, -416],
        [-544, -288, -416],
        [544, -288, -416],
        [-544, -256, -416],
        [544, -256, -416],
        [-544, -224, -416],
        [544, -224, -416],
        [-544, -192, -416],
        [544, -192, -416],
        [-544, -160, -416],
        [544, -160, -416],
        [-544, -128, -416],
        [544, -128, -416],
        [-544, -96, -416],
        [544, -96, -416],
        [-544, -64, -416],
        [544, -64, -416],
        [-544, -32, -416],
        [544, -32, -416],
        [-544, 0, -416],
        [544, 0, -416],
        [-544, 32, -416],
        [544, 32, -416],
        [-544, 64, -416],
        [544, 64, -416],
        [-544, 96, -416],
        [544, 96, -416],
        [-544, 128, -416],
        [544, 128, -416],
        [-544, 160, -416],
        [544, 160, -416],
        [-544, 192, -416],
        [544, 192, -416],
        [-544, 224, -416],
        [544, 224, -416],
        [-544, 256, -416],
        [544, 256, -416],
        [-544, 288, -416],
        [544, 288, -416],
        [-544, 320, -416],
        [544, 320, -416],
        [-544, 352, -416],
        [544, 352, -416],
        [-544, 384, -416],
        [544, 384, -416],
        [-544, 416, -416],
        [544, 416, -416],
        [-544, 448, -416],
        [544, 448, -416],
        [-544, 480, -416],
        [544, 480, -416],
        [-544, 512, -416],
        [544, 512, -416],
        [-544, -512, -384],
        [544, -512, -384],
        [-544, -480, -384],
        [544, -480, -384],
        [-544, -448, -384],
        [544, -448, -384],
        [-544, -416, -384],
        [544, -416, -384],
        [-544, -384, -384],
        [544, -384, -384],
        [-544, -352, -384],
        [544, -352, -384],
        [-544, -320, -384],
        [544, -320, -384],
        [-544, -288, -384],
        [544, -288, -384],
        [-544, -256, -384],
        [544, -256, -384],
        [-544, -224, -384],
        [544, -224, -384],
        [-544, -192, -384],
        [544, -192, -384],
        [-544, -160, -384],
        [544, -160, -384],
        [-544, -128, -384],
        [544, -128, -384],
        [-544, -96, -384],
        [544, -96, -384],
        [-544, -64, -384],
        [544, -64, -384],
        [-544, -32, -384],
        [544, -32, -384],
        [-544, 0, -384],
        [544, 0, -384],
        [-544, 32, -384],
        [544, 32, -384],
        [-544, 64, -384],
        [544, 64, -384],
        [-544, 96, -384],
        [544, 96, -384],
        [-544, 128, -384],
        [544, 128, -384],
        [-544, 160, -384],
        [544, 160, -384],
        [-544, 192, -384],
        [544, 192, -384],
        [-544, 224, -384],
        [544, 224, -384],
        [-544, 256, -384],
        [544, 256, -384],
        [-544, 288, -384],
        [544, 288, -384],
        [-544, 320, -384],
        [544, 320, -384],
        [-544, 352, -384],
        [544, 352, -384],
        [-544, 384, -384],
        [544, 384, -384],
        [-544, 416, -384],
        [544, 416, -384],
        [-544, 448, -384],
        [544, 448, -384],
        [-544, 480, -384],
        [544, 480, -384],
        [-544, 512, -384],
        [544, 512, -384],
        [-544, -512, -352],
        [544, -512, -352],
        [-544, -480, -352],
        [544, -480, -352],
        [-544, -448, -352],
        [544, -448, -352],
        [-544, -416, -352],
        [544, -416, -352],
        [-544, -384, -352],
        [544, -384, -352],
        [-544, -352, -352],
        [544, -352, -352],
        [-544, -320, -352],
        [544, -320, -352],
        [-544, -288, -352],
        [544, -288, -352],
        [-544, -256, -352],
        [544, -256, -352],
        [-544, -224, -352],
        [544, -224, -352],
        [-544, -192, -352],
        [544, -192, -352],
        [-544, -160, -352],
        [544, -160, -352],
        [-544, -128, -352],
        [544, -128, -352],
        [-544, -96, -352],
        [544, -96, -352],
        [-544, -64, -352],
        [544, -64, -352],
        [-544, -32, -352],
        [544, -32, -352],
        [-544, 0, -352],
        [544, 0, -352],
        [-544, 32, -352],
        [544, 32, -352],
        [-544, 64, -352],
        [544, 64, -352],
        [-544, 96, -352],
        [544, 96, -352],
        [-544, 128, -352],
        [544, 128, -352],
        [-544, 160, -352],
        [544, 160, -352],
        [-544, 192, -352],
        [544, 192, -352],
        [-544, 224, -352],
        [544, 224, -352],
        [-544, 256, -352],
        [544, 256, -352],
        [-544, 288, -352],
        [544, 288, -352],
        [-544, 320, -352],
        [544, 320, -352],
        [-544, 352, -352],
        [544, 352, -352],
        [-544, 384, -352],
        [544, 384, -352],
        [-544, 416, -352],
        [544, 416, -352],
        [-544, 448, -352],
        [544, 448, -352],
        [-544, 480, -352],
        [544, 480, -352],
        [-544, 512, -352],
        [544, 512, -352],
        [-544, -512, -320],
        [544, -512, -320],
        [-544, -480, -320],
        [544, -480, -320],
        [-544, -448, -320],
        [544, -448, -320],
        [-544, -416, -320],
        [544, -416, -320],
        [-544, -384, -320],
        [544, -384, -320],
        [-544, -352, -320],
        [544, -352, -320],
        [-544, -320, -320],
        [544, -320, -320],
        [-544, -288, -320],
        [544, -288, -320],
        [-544, -256, -320],
        [544, -256, -320],
        [-544, -224, -320],
        [544, -224, -320],
        [-544, -192, -320],
        [544, -192, -320],
        [-544, -160, -320],
        [544, -160, -320],
        [-544, -128, -320],
        [544, -128, -320],
        [-544, -96, -320],
        [544, -96, -320],
        [-544, -64, -320],
        [544, -64, -320],
        [-544, -32, -320],
        [544, -32, -320],
        [-544, 0, -320],
        [544, 0, -320],
        [-544, 32, -320],
        [544, 32, -320],
        [-544, 64, -320],
        [544, 64, -320],
        [-544, 96, -320],
        [544, 96, -320],
        [-544, 128, -320],
        [544, 128, -320],
        [-544, 160, -320],
        [544, 160, -320],
        [-544, 192, -320],
        [544, 192, -320],
        [-544, 224, -320],
        [544, 224, -320],
        [-544, 256, -320],
        [544, 256, -320],
        [-544, 288, -320],
        [544, 288, -320],
        [-544, 320, -320],
        [544, 320, -320],
        [-544, 352, -320],
        [544, 352, -320],
        [-544, 384, -320],
        [544, 384, -320],
        [-544, 416, -320],
        [544, 416, -320],
        [-544, 448, -320],
        [544, 448, -320],
        [-544, 480, -320],
        [544, 480, -320],
        [-544, 512, -320],
        [544, 512, -320],
        [-544, -512, -288],
        [544, -512, -288],
        [-544, -480, -288],
        [544, -480, -288],
        [-544, -448, -288],
        [544, -448, -288],
        [-544, -416, -288],
        [544, -416, -288],
        [-544, -384, -288],
        [544, -384, -288],
        [-544, -352, -288],
        [544, -352, -288],
        [-544, -320, -288],
        [544, -320, -288],
        [-544, -288, -288],
        [544, -288, -288],
        [-544, -256, -288],
        [544, -256, -288],
        [-544, -224, -288],
        [544, -224, -288],
        [-544, -192, -288],
        [544, -192, -288],
        [-544, -160, -288],
        [544, -160, -288],
        [-544, -128, -288],
        [544, -128, -288],
        [-544, -96, -288],
        [544, -96, -288],
        [-544, -64, -288],
        [544, -64, -288],
        [-544, -32, -288],
        [544, -32, -288],
        [-544, 0, -288],
        [544, 0, -288],
        [-544, 32, -288],
        [544, 32, -288],
        [-544, 64, -288],
        [544, 64, -288],
        [-544, 96, -288],
        [544, 96, -288],
        [-544, 128, -288],
        [544, 128, -288],
        [-544, 160, -288],
        [544, 160, -288],
        [-544, 192, -288],
        [544, 192, -288],
        [-544, 224, -288],
        [544, 224, -288],
        [-544, 256, -288],
        [544, 256, -288],
        [-544, 288, -288],
        [544, 288, -288],
        [-544, 320, -288],
        [544, 320, -288],
        [-544, 352, -288],
        [544, 352, -288],
        [-544, 384, -288],
        [544, 384, -288],
        [-544, 416, -288],
        [544, 416, -288],
        [-544, 448, -288],
        [544, 448, -288],
        [-544, 480, -288],
        [544, 480, -288],
        [-544, 512, -288],
        [544, 512, -288],
        [-544, -512, -256],
        [544, -512, -256],
        [-544, -480, -256],
        [544, -480, -256],
        [-544, -448, -256],
        [544, -448, -256],
        [-544, -416, -256],
        [544, -416, -256],
        [-544, -384, -256],
        [544, -384, -256],
        [-544, -352, -256],
        [544, -352, -256],
        [-544, -320, -256],
        [544, -320, -256],
        [-544, -288, -256],
        [544, -288, -256],
        [-544, -256, -256],
        [544, -256, -256],
        [-544, -224, -256],
        [544, -224, -256],
        [-544, -192, -256],
        [544, -192, -256],
        [-544, -160, -256],
        [544, -160, -256],
        [-544, -128, -256],
        [544, -128, -256],
        [-544, -96, -256],
        [544, -96, -256],
        [-544, -64, -256],
        [544, -64, -256],
        [-544, -32, -256],
        [544, -32, -256],
        [-544, 0, -256],
        [544, 0, -256],
        [-544, 32, -256],
        [544, 32, -256],
        [-544, 64, -256],
        [544, 64, -256],
        [-544, 96, -256],
        [544, 96, -256],
        [-544, 128, -256],
        [544, 128, -256],
        [-544, 160, -256],
        [544, 160, -256],
        [-544, 192, -256],
        [544, 192, -256],
        [-544, 224, -256],
        [544, 224, -256],
        [-544, 256, -256],
        [544, 256, -256],
        [-544, 288, -256],
        [544, 288, -256],
        [-544, 320, -256],
        [544, 320, -256],
        [-544, 352, -256],
        [544, 352, -256],
        [-544, 384, -256],
        [544, 384, -256],
        [-544, 416, -256],
        [544, 416, -256],
        [-544, 448, -256],
        [544, 448, -256],
        [-544, 480, -256],
        [544, 480, -256],
        [-544, 512, -256],
        [544, 512, -256],
        [-544, -512, -224],
        [544, -512, -224],
        [-544, -480, -224],
        [544, -480, -224],
        [-544, -448, -224],
        [544, -448, -224],
        [-544, -416, -224],
        [544, -416, -224],
        [-544, -384, -224],
        [544, -384, -224],
        [-544, -352, -224],
        [544, -352, -224],
        [-544, -320, -224],
        [544, -320, -224],
        [-544, -288, -224],
        [544, -288, -224],
        [-544, -256, -224],
        [544, -256, -224],
        [-544, -224, -224],
        [544, -224, -224],
        [-544, -192, -224],
        [544, -192, -224],
        [-544, -160, -224],
        [544, -160, -224],
        [-544, -128, -224],
        [544, -128, -224],
        [-544, -96, -224],
        [544, -96, -224],
        [-544, -64, -224],
        [544, -64, -224],
        [-544, -32, -224],
        [544, -32, -224],
        [-544, 0, -224],
        [544, 0, -224],
        [-544, 32, -224],
        [544, 32, -224],
        [-544, 64, -224],
        [544, 64, -224],
        [-544, 96, -224],
        [544, 96, -224],
        [-544, 128, -224],
        [544, 128, -224],
        [-544, 160, -224],
        [544, 160, -224],
        [-544, 192, -224],
        [544, 192, -224],
        [-544, 224, -224],
        [544, 224, -224],
        [-544, 256, -224],
        [544, 256, -224],
        [-544, 288, -224],
        [544, 288, -224],
        [-544, 320, -224],
        [544, 320, -224],
        [-544, 352, -224],
        [544, 352, -224],
        [-544, 384, -224],
        [544, 384, -224],
        [-544, 416, -224],
        [544, 416, -224],
        [-544, 448, -224],
        [544, 448, -224],
        [-544, 480, -224],
        [544, 480, -224],
        [-544, 512, -224],
        [544, 512, -224],
        [-544, -512, -192],
        [544, -512, -192],
        [-544, -480, -192],
        [544, -480, -192],
        [-544, -448, -192],
        [544, -448, -192],
        [-544, -416, -192],
        [544, -416, -192],
        [-544, -384, -192],
        [544, -384, -192],
        [-544, -352, -192],
        [544, -352, -192],
        [-544, -320, -192],
        [544, -320, -192],
        [-544, -288, -192],
        [544, -288, -192],
        [-544, -256, -192],
        [544, -256, -192],
        [-544, -224, -192],
        [544, -224, -192],
        [-544, -192, -192],
        [544, -192, -192],
        [-544, -160, -192],
        [544, -160, -192],
        [-544, -128, -192],
        [544, -128, -192],
        [-544, -96, -192],
        [544, -96, -192],
        [-544, -64, -192],
        [544, -64, -192],
        [-544, -32, -192],
        [544, -32, -192],
        [-544, 0, -192],
        [544, 0, -192],
        [-544, 32, -192],
        [544, 32, -192],
        [-544, 64, -192],
        [544, 64, -192],
        [-544, 96, -192],
        [544, 96, -192],
        [-544, 128, -192],
        [544, 128, -192],
        [-544, 160, -192],
        [544, 160, -192],
        [-544, 192, -192],
        [544, 192, -192],
        [-544, 224, -192],
        [544, 224, -192],
        [-544, 256, -192],
        [544, 256, -192],
        [-544, 288, -192],
        [544, 288, -192],
        [-544, 320, -192],
        [544, 320, -192],
        [-544, 352, -192],
        [544, 352, -192],
        [-544, 384, -192],
        [544, 384, -192],
        [-544, 416, -192],
        [544, 416, -192],
        [-544, 448, -192],
        [544, 448, -192],
        [-544, 480, -192],
        [544, 480, -192],
        [-544, 512, -192],
        [544, 512, -192],
        [-544, -512, -160],
        [544, -512, -160],
        [-544, -480, -160],
        [544, -480, -160],
        [-544, -448, -160],
        [544, -448, -160],
        [-544, -416, -160],
        [544, -416, -160],
        [-544, -384, -160],
        [544, -384, -160],
        [-544, -352, -160],
        [544, -352, -160],
        [-544, -320, -160],
        [544, -320, -160],
        [-544, -288, -160],
        [544, -288, -160],
        [-544, -256, -160],
        [544, -256, -160],
        [-544, -224, -160],
        [544, -224, -160],
        [-544, -192, -160],
        [544, -192, -160],
        [-544, -160, -160],
        [544, -160, -160],
        [-544, -128, -160],
        [544, -128, -160],
        [-544, -96, -160],
        [544, -96, -160],
        [-544, -64, -160],
        [544, -64, -160],
        [-544, -32, -160],
        [544, -32, -160],
        [-544, 0, -160],
        [544, 0, -160],
        [-544, 32, -160],
        [544, 32, -160],
        [-544, 64, -160],
        [544, 64, -160],
        [-544, 96, -160],
        [544, 96, -160],
        [-544, 128, -160],
        [544, 128, -160],
        [-544, 160, -160],
        [544, 160, -160],
        [-544, 192, -160],
        [544, 192, -160],
        [-544, 224, -160],
        [544, 224, -160],
        [-544, 256, -160],
        [544, 256, -160],
        [-544, 288, -160],
        [544, 288, -160],
        [-544, 320, -160],
        [544, 320, -160],
        [-544, 352, -160],
        [544, 352, -160],
        [-544, 384, -160],
        [544, 384, -160],
        [-544, 416, -160],
        [544, 416, -160],
        [-544, 448, -160],
        [544, 448, -160],
        [-544, 480, -160],
        [544, 480, -160],
        [-544, 512, -160],
        [544, 512, -160],
        [-544, -512, -128],
        [544, -512, -128],
        [-544, -480, -128],
        [544, -480, -128],
        [-544, -448, -128],
        [544, -448, -128],
        [-544, -416, -128],
        [544, -416, -128],
        [-544, -384, -128],
        [544, -384, -128],
        [-544, -352, -128],
        [544, -352, -128],
        [-544, -320, -128],
        [544, -320, -128],
        [-544, -288, -128],
        [544, -288, -128],
        [-544, -256, -128],
        [544, -256, -128],
        [-544, -224, -128],
        [544, -224, -128],
        [-544, -192, -128],
        [544, -192, -128],
        [-544, -160, -128],
        [544, -160, -128],
        [-544, -128, -128],
        [544, -128, -128],
        [-544, -96, -128],
        [544, -96, -128],
        [-544, -64, -128],
        [544, -64, -128],
        [-544, -32, -128],
        [544, -32, -128],
        [-544, 0, -128],
        [544, 0, -128],
        [-544, 32, -128],
        [544, 32, -128],
        [-544, 64, -128],
        [544, 64, -128],
        [-544, 96, -128],
        [544, 96, -128],
        [-544, 128, -128],
        [544, 128, -128],
        [-544, 160, -128],
        [544, 160, -128],
        [-544, 192, -128],
        [544, 192, -128],
        [-544, 224, -128],
        [544, 224, -128],
        [-544, 256, -128],
        [544, 256, -128],
        [-544, 288, -128],
        [544, 288, -128],
        [-544, 320, -128],
        [544, 320, -128],
        [-544, 352, -128],
        [544, 352, -128],
        [-544, 384, -128],
        [544, 384, -128],
        [-544, 416, -128],
        [544, 416, -128],
        [-544, 448, -128],
        [544, 448, -128],
        [-544, 480, -128],
        [544, 480, -128],
        [-544, 512, -128],
        [544, 512, -128],
        [-544, -512, -96],
        [544, -512, -96],
        [-544, -480, -96],
        [544, -480, -96],
        [-544, -448, -96],
        [544, -448, -96],
        [-544, -416, -96],
        [544, -416, -96],
        [-544, -384, -96],
        [544, -384, -96],
        [-544, -352, -96],
        [544, -352, -96],
        [-544, -320, -96],
        [544, -320, -96],
        [-544, -288, -96],
        [544, -288, -96],
        [-544, -256, -96],
        [544, -256, -96],
        [-544, -224, -96],
        [544, -224, -96],
        [-544, -192, -96],
        [544, -192, -96],
        [-544, -160, -96],
        [544, -160, -96],
        [-544, -128, -96],
        [544, -128, -96],
        [-544, -96, -96],
        [544, -96, -96],
        [-544, -64, -96],
        [544, -64, -96],
        [-544, -32, -96],
        [544, -32, -96],
        [-544, 0, -96],
        [544, 0, -96],
        [-544, 32, -96],
        [544, 32, -96],
        [-544, 64, -96],
        [544, 64, -96],
        [-544, 96, -96],
        [544, 96, -96],
        [-544, 128, -96],
        [544, 128, -96],
        [-544, 160, -96],
        [544, 160, -96],
        [-544, 192, -96],
        [544, 192, -96],
        [-544, 224, -96],
        [544, 224, -96],
        [-544, 256, -96],
        [544, 256, -96],
        [-544, 288, -96],
        [544, 288, -96],
        [-544, 320, -96],
        [544, 320, -96],
        [-544, 352, -96],
        [544, 352, -96],
        [-544, 384, -96],
        [544, 384, -96],
        [-544, 416, -96],
        [544, 416, -96],
        [-544, 448, -96],
        [544, 448, -96],
        [-544, 480, -96],
        [544, 480, -96],
        [-544, 512, -96],
        [544, 512, -96],
        [-544, -512, -64],
        [544, -512, -64],
        [-544, -480, -64],
        [544, -480, -64],
        [-544, -448, -64],
        [544, -448, -64],
        [-544, -416, -64],
        [544, -416, -64],
        [-544, -384, -64],
        [544, -384, -64],
        [-544, -352, -64],
        [544, -352, -64],
        [-544, -320, -64],
        [544, -320, -64],
        [-544, -288, -64],
        [544, -288, -64],
        [-544, -256, -64],
        [544, -256, -64],
        [-544, -224, -64],
        [544, -224, -64],
        [-544, -192, -64],
        [544, -192, -64],
        [-544, -160, -64],
        [544, -160, -64],
        [-544, -128, -64],
        [544, -128, -64],
        [-544, -96, -64],
        [544, -96, -64],
        [-544, -64, -64],
        [544, -64, -64],
        [-544, -32, -64],
        [544, -32, -64],
        [-544, 0, -64],
        [544, 0, -64],
        [-544, 32, -64],
        [544, 32, -64],
        [-544, 64, -64],
        [544, 64, -64],
        [-544, 96, -64],
        [544, 96, -64],
        [-544, 128, -64],
        [544, 128, -64],
        [-544, 160, -64],
        [544, 160, -64],
        [-544, 192, -64],
        [544, 192, -64],
        [-544, 224, -64],
        [544, 224, -64],
        [-544, 256, -64],
        [544, 256, -64],
        [-544, 288, -64],
        [544, 288, -64],
        [-544, 320, -64],
        [544, 320, -64],
        [-544, 352, -64],
        [544, 352, -64],
        [-544, 384, -64],
        [544, 384, -64],
        [-544, 416, -64],
        [544, 416, -64],
        [-544, 448, -64],
        [544, 448, -64],
        [-544, 480, -64],
        [544, 480, -64],
        [-544, 512, -64],
        [544, 512, -64],
        [-544, -512, -32],
        [544, -512, -32],
        [-544, -480, -32],
        [544, -480, -32],
        [-544, -448, -32],
        [544, -448, -32],
        [-544, -416, -32],
        [544, -416, -32],
        [-544, -384, -32],
        [544, -384, -32],
        [-544, -352, -32],
        [544, -352, -32],
        [-544, -320, -32],
        [544, -320, -32],
        [-544, -288, -32],
        [544, -288, -32],
        [-544, -256, -32],
        [544, -256, -32],
        [-544, -224, -32],
        [544, -224, -32],
        [-544, -192, -32],
        [544, -192, -32],
        [-544, -160, -32],
        [544, -160, -32],
        [-544, -128, -32],
        [544, -128, -32],
        [-544, -96, -32],
        [544, -96, -32],
        [-544, -64, -32],
        [544, -64, -32],
        [-544, -32, -32],
        [544, -32, -32],
        [-544, 0, -32],
        [544, 0, -32],
        [-544, 32, -32],
        [544, 32, -32],
        [-544, 64, -32],
        [544, 64, -32],
        [-544, 96, -32],
        [544, 96, -32],
        [-544, 128, -32],
        [544, 128, -32],
        [-544, 160, -32],
        [544, 160, -32],
        [-544, 192, -32],
        [544, 192, -32],
        [-544, 224, -32],
        [544, 224, -32],
        [-544, 256, -32],
        [544, 256, -32],
        [-544, 288, -32],
        [544, 288, -32],
        [-544, 320, -32],
        [544, 320, -32],
        [-544, 352, -32],
        [544, 352, -32],
        [-544, 384, -32],
        [544, 384, -32],
        [-544, 416, -32],
        [544, 416, -32],
        [-544, 448, -32],
        [544, 448, -32],
        [-544, 480, -32],
        [544, 480, -32],
        [-544, 512, -32],
        [544, 512, -32],
        [-544, -512, 0],
        [544, -512, 0],
        [-544, -480, 0],
        [544, -480, 0],
        [-544, -448, 0],
        [544, -448, 0],
        [-544, -416, 0],
        [544, -416, 0],
        [-544, -384, 0],
        [544, -384, 0],
        [-544, -352, 0],
        [544, -352, 0],
        [-544, -320, 0],
        [544, -320, 0],
        [-544, -288, 0],
        [544, -288, 0],
        [-544, -256, 0],
        [544, -256, 0],
        [-544, -224, 0],
        [544, -224, 0],
        [-544, -192, 0],
        [544, -192, 0],
        [-544, -160, 0],
        [544, -160, 0],
        [-544, -128, 0],
        [544, -128, 0],
        [-544, -96, 0],
        [544, -96, 0],
        [-544, -64, 0],
        [544, -64, 0],
        [-544, -32, 0],
        [544, -32, 0],
        [-544, 0, 0],
        [544, 0, 0],
        [-544, 32, 0],
        [544, 32, 0],
        [-544, 64, 0],
        [544, 64, 0],
        [-544, 96, 0],
        [544, 96, 0],
        [-544, 128, 0],
        [544, 128, 0],
        [-544, 160, 0],
        [544, 160, 0],
        [-544, 192, 0],
        [544, 192, 0],
        [-544, 224, 0],
        [544, 224, 0],
        [-544, 256, 0],
        [544, 256, 0],
        [-544, 288, 0],
        [544, 288, 0],
        [-544, 320, 0],
        [544, 320, 0],
        [-544, 352, 0],
        [544, 352, 0],
        [-544, 384, 0],
        [544, 384, 0],
        [-544, 416, 0],
        [544, 416, 0],
        [-544, 448, 0],
        [544, 448, 0],
        [-544, 480, 0],
        [544, 480, 0],
        [-544, 512, 0],
        [544, 512, 0],
        [-544, -512, 32],
        [544, -512, 32],
        [-544, -480, 32],
        [544, -480, 32],
        [-544, -448, 32],
        [544, -448, 32],
        [-544, -416, 32],
        [544, -416, 32],
        [-544, -384, 32],
        [544, -384, 32],
        [-544, -352, 32],
        [544, -352, 32],
        [-544, -320, 32],
        [544, -320, 32],
        [-544, -288, 32],
        [544, -288, 32],
        [-544, -256, 32],
        [544, -256, 32],
        [-544, -224, 32],
        [544, -224, 32],
        [-544, -192, 32],
        [544, -192, 32],
        [-544, -160, 32],
        [544, -160, 32],
        [-544, -128, 32],
        [544, -128, 32],
        [-544, -96, 32],
        [544, -96, 32],
        [-544, -64, 32],
        [544, -64, 32],
        [-544, -32, 32],
        [544, -32, 32],
        [-544, 0, 32],
        [544, 0, 32],
        [-544, 32, 32],
        [544, 32, 32],
        [-544, 64, 32],
        [544, 64, 32],
        [-544, 96, 32],
        [544, 96, 32],
        [-544, 128, 32],
        [544, 128, 32],
        [-544, 160, 32],
        [544, 160, 32],
        [-544, 192, 32],
        [544, 192, 32],
        [-544, 224, 32],
        [544, 224, 32],
        [-544, 256, 32],
        [544, 256, 32],
        [-544, 288, 32],
        [544, 288, 32],
        [-544, 320, 32],
        [544, 320, 32],
        [-544, 352, 32],
        [544, 352, 32],
        [-544, 384, 32],
        [544, 384, 32],
        [-544, 416, 32],
        [544, 416, 32],
        [-544, 448, 32],
        [544, 448, 32],
        [-544, 480, 32],
        [544, 480, 32],
        [-544, 512, 32],
        [544, 512, 32],
        [-544, -512, 64],
        [544, -512, 64],
        [-544, -480, 64],
        [544, -480, 64],
        [-544, -448, 64],
        [544, -448, 64],
        [-544, -416, 64],
        [544, -416, 64],
        [-544, -384, 64],
        [544, -384, 64],
        [-544, -352, 64],
        [544, -352, 64],
        [-544, -320, 64],
        [544, -320, 64],
        [-544, -288, 64],
        [544, -288, 64],
        [-544, -256, 64],
        [544, -256, 64],
        [-544, -224, 64],
        [544, -224, 64],
        [-544, -192, 64],
        [544, -192, 64],
        [-544, -160, 64],
        [544, -160, 64],
        [-544, -128, 64],
        [544, -128, 64],
        [-544, -96, 64],
        [544, -96, 64],
        [-544, -64, 64],
        [544, -64, 64],
        [-544, -32, 64],
        [544, -32, 64],
        [-544, 0, 64],
        [544, 0, 64],
        [-544, 32, 64],
        [544, 32, 64],
        [-544, 64, 64],
        [544, 64, 64],
        [-544, 96, 64],
        [544, 96, 64],
        [-544, 128, 64],
        [544, 128, 64],
        [-544, 160, 64],
        [544, 160, 64],
        [-544, 192, 64],
        [544, 192, 64],
        [-544, 224, 64],
        [544, 224, 64],
        [-544, 256, 64],
        [544, 256, 64],
        [-544, 288, 64],
        [544, 288, 64],
        [-544, 320, 64],
        [544, 320, 64],
        [-544, 352, 64],
        [544, 352, 64],
        [-544, 384, 64],
        [544, 384, 64],
        [-544, 416, 64],
        [544, 416, 64],
        [-544, 448, 64],
        [544, 448, 64],
        [-544, 480, 64],
        [544, 480, 64],
        [-544, 512, 64],
        [544, 512, 64],
        [-544, -512, 96],
        [544, -512, 96],
        [-544, -480, 96],
        [544, -480, 96],
        [-544, -448, 96],
        [544, -448, 96],
        [-544, -416, 96],
        [544, -416, 96],
        [-544, -384, 96],
        [544, -384, 96],
        [-544, -352, 96],
        [544, -352, 96],
        [-544, -320, 96],
        [544, -320, 96],
        [-544, -288, 96],
        [544, -288, 96],
        [-544, -256, 96],
        [544, -256, 96],
        [-544, -224, 96],
        [544, -224, 96],
        [-544, -192, 96],
        [544, -192, 96],
        [-544, -160, 96],
        [544, -160, 96],
        [-544, -128, 96],
        [544, -128, 96],
        [-544, -96, 96],
        [544, -96, 96],
        [-544, -64, 96],
        [544, -64, 96],
        [-544, -32, 96],
        [544, -32, 96],
        [-544, 0, 96],
        [544, 0, 96],
        [-544, 32, 96],
        [544, 32, 96],
        [-544, 64, 96],
        [544, 64, 96],
        [-544, 96, 96],
        [544, 96, 96],
        [-544, 128, 96],
        [544, 128, 96],
        [-544, 160, 96],
        [544, 160, 96],
        [-544, 192, 96],
        [544, 192, 96],
        [-544, 224, 96],
        [544, 224, 96],
        [-544, 256, 96],
        [544, 256, 96],
        [-544, 288, 96],
        [544, 288, 96],
        [-544, 320, 96],
        [544, 320, 96],
        [-544, 352, 96],
        [544, 352, 96],
        [-544, 384, 96],
        [544, 384, 96],
        [-544, 416, 96],
        [544, 416, 96],
        [-544, 448, 96],
        [544, 448, 96],
        [-544, 480, 96],
        [544, 480, 96],
        [-544, 512, 96],
        [544, 512, 96],
        [-544, -512, 128],
        [544, -512, 128],
        [-544, -480, 128],
        [544, -480, 128],
        [-544, -448, 128],
        [544, -448, 128],
        [-544, -416, 128],
        [544, -416, 128],
        [-544, -384, 128],
        [544, -384, 128],
        [-544, -352, 128],
        [544, -352, 128],
        [-544, -320, 128],
        [544, -320, 128],
        [-544, -288, 128],
        [544, -288, 128],
        [-544, -256, 128],
        [544, -256, 128],
        [-544, -224, 128],
        [544, -224, 128],
        [-544, -192, 128],
        [544, -192, 128],
        [-544, -160, 128],
        [544, -160, 128],
        [-544, -128, 128],
        [544, -128, 128],
        [-544, -96, 128],
        [544, -96, 128],
        [-544, -64, 128],
        [544, -64, 128],
        [-544, -32, 128],
        [544, -32, 128],
        [-544, 0, 128],
        [544, 0, 128],
        [-544, 32, 128],
        [544, 32, 128],
        [-544, 64, 128],
        [544, 64, 128],
        [-544, 96, 128],
        [544, 96, 128],
        [-544, 128, 128],
        [544, 128, 128],
        [-544, 160, 128],
        [544, 160, 128],
        [-544, 192, 128],
        [544, 192, 128],
        [-544, 224, 128],
        [544, 224, 128],
        [-544, 256, 128],
        [544, 256, 128],
        [-544, 288, 128],
        [544, 288, 128],
        [-544, 320, 128],
        [544, 320, 128],
        [-544, 352, 128],
        [544, 352, 128],
        [-544, 384, 128],
        [544, 384, 128],
        [-544, 416, 128],
        [544, 416, 128],
        [-544, 448, 128],
        [544, 448, 128],
        [-544, 480, 128],
        [544, 480, 128],
        [-544, 512, 128],
        [544, 512, 128],
        [-544, -512, 160],
        [544, -512, 160],
        [-544, -480, 160],
        [544, -480, 160],
        [-544, -448, 160],
        [544, -448, 160],
        [-544, -416, 160],
        [544, -416, 160],
        [-544, -384, 160],
        [544, -384, 160],
        [-544, -352, 160],
        [544, -352, 160],
        [-544, -320, 160],
        [544, -320, 160],
        [-544, -288, 160],
        [544, -288, 160],
        [-544, -256, 160],
        [544, -256, 160],
        [-544, -224, 160],
        [544, -224, 160],
        [-544, -192, 160],
        [544, -192, 160],
        [-544, -160, 160],
        [544, -160, 160],
        [-544, -128, 160],
        [544, -128, 160],
        [-544, -96, 160],
        [544, -96, 160],
        [-544, -64, 160],
        [544, -64, 160],
        [-544, -32, 160],
        [544, -32, 160],
        [-544, 0, 160],
        [544, 0, 160],
        [-544, 32, 160],
        [544, 32, 160],
        [-544, 64, 160],
        [544, 64, 160],
        [-544, 96, 160],
        [544, 96, 160],
        [-544, 128, 160],
        [544, 128, 160],
        [-544, 160, 160],
        [544, 160, 160],
        [-544, 192, 160],
        [544, 192, 160],
        [-544, 224, 160],
        [544, 224, 160],
        [-544, 256, 160],
        [544, 256, 160],
        [-544, 288, 160],
        [544, 288, 160],
        [-544, 320, 160],
        [544, 320, 160],
        [-544, 352, 160],
        [544, 352, 160],
        [-544, 384, 160],
        [544, 384, 160],
        [-544, 416, 160],
        [544, 416, 160],
        [-544, 448, 160],
        [544, 448, 160],
        [-544, 480, 160],
        [544, 480, 160],
        [-544, 512, 160],
        [544, 512, 160],
        [-544, -512, 192],
        [544, -512, 192],
        [-544, -480, 192],
        [544, -480, 192],
        [-544, -448, 192],
        [544, -448, 192],
        [-544, -416, 192],
        [544, -416, 192],
        [-544, -384, 192],
        [544, -384, 192],
        [-544, -352, 192],
        [544, -352, 192],
        [-544, -320, 192],
        [544, -320, 192],
        [-544, -288, 192],
        [544, -288, 192],
        [-544, -256, 192],
        [544, -256, 192],
        [-544, -224, 192],
        [544, -224, 192],
        [-544, -192, 192],
        [544, -192, 192],
        [-544, -160, 192],
        [544, -160, 192],
        [-544, -128, 192],
        [544, -128, 192],
        [-544, -96, 192],
        [544, -96, 192],
        [-544, -64, 192],
        [544, -64, 192],
        [-544, -32, 192],
        [544, -32, 192],
        [-544, 0, 192],
        [544, 0, 192],
        [-544, 32, 192],
        [544, 32, 192],
        [-544, 64, 192],
        [544, 64, 192],
        [-544, 96, 192],
        [544, 96, 192],
        [-544, 128, 192],
        [544, 128, 192],
        [-544, 160, 192],
        [544, 160, 192],
        [-544, 192, 192],
        [544, 192, 192],
        [-544, 224, 192],
        [544, 224, 192],
        [-544, 256, 192],
        [544, 256, 192],
        [-544, 288, 192],
        [544, 288, 192],
        [-544, 320, 192],
        [544, 320, 192],
        [-544, 352, 192],
        [544, 352, 192],
        [-544, 384, 192],
        [544, 384, 192],
        [-544, 416, 192],
        [544, 416, 192],
        [-544, 448, 192],
        [544, 448, 192],
        [-544, 480, 192],
        [544, 480, 192],
        [-544, 512, 192],
        [544, 512, 192],
        [-544, -512, 224],
        [544, -512, 224],
        [-544, -480, 224],
        [544, -480, 224],
        [-544, -448, 224],
        [544, -448, 224],
        [-544, -416, 224],
        [544, -416, 224],
        [-544, -384, 224],
        [544, -384, 224],
        [-544, -352, 224],
        [544, -352, 224],
        [-544, -320, 224],
        [544, -320, 224],
        [-544, -288, 224],
        [544, -288, 224],
        [-544, -256, 224],
        [544, -256, 224],
        [-544, -224, 224],
        [544, -224, 224],
        [-544, -192, 224],
        [544, -192, 224],
        [-544, -160, 224],
        [544, -160, 224],
        [-544, -128, 224],
        [544, -128, 224],
        [-544, -96, 224],
        [544, -96, 224],
        [-544, -64, 224],
        [544, -64, 224],
        [-544, -32, 224],
        [544, -32, 224],
        [-544, 0, 224],
        [544, 0, 224],
        [-544, 32, 224],
        [544, 32, 224],
        [-544, 64, 224],
        [544, 64, 224],
        [-544, 96, 224],
        [544, 96, 224],
        [-544, 128, 224],
        [544, 128, 224],
        [-544, 160, 224],
        [544, 160, 224],
        [-544, 192, 224],
        [544, 192, 224],
        [-544, 224, 224],
        [544, 224, 224],
        [-544, 256, 224],
        [544, 256, 224],
        [-544, 288, 224],
        [544, 288, 224],
        [-544, 320, 224],
        [544, 320, 224],
        [-544, 352, 224],
        [544, 352, 224],
        [-544, 384, 224],
        [544, 384, 224],
        [-544, 416, 224],
        [544, 416, 224],
        [-544, 448, 224],
        [544, 448, 224],
        [-544, 480, 224],
        [544, 480, 224],
        [-544, 512, 224],
        [544, 512, 224],
        [-544, -512, 256],
        [544, -512, 256],
        [-544, -480, 256],
        [544, -480, 256],
        [-544, -448, 256],
        [544, -448, 256],
        [-544, -416, 256],
        [544, -416, 256],
        [-544, -384, 256],
        [544, -384, 256],
        [-544, -352, 256],
        [544, -352, 256],
        [-544, -320, 256],
        [544, -320, 256],
        [-544, -288, 256],
        [544, -288, 256],
        [-544, -256, 256],
        [544, -256, 256],
        [-544, -224, 256],
        [544, -224, 256],
        [-544, -192, 256],
        [544, -192, 256],
        [-544, -160, 256],
        [544, -160, 256],
        [-544, -128, 256],
        [544, -128, 256],
        [-544, -96, 256],
        [544, -96, 256],
        [-544, -64, 256],
        [544, -64, 256],
        [-544, -32, 256],
        [544, -32, 256],
        [-544, 0, 256],
        [544, 0, 256],
        [-544, 32, 256],
        [544, 32, 256],
        [-544, 64, 256],
        [544, 64, 256],
        [-544, 96, 256],
        [544, 96, 256],
        [-544, 128, 256],
        [544, 128, 256],
        [-544, 160, 256],
        [544, 160, 256],
        [-544, 192, 256],
        [544, 192, 256],
        [-544, 224, 256],
        [544, 224, 256],
        [-544, 256, 256],
        [544, 256, 256],
        [-544, 288, 256],
        [544, 288, 256],
        [-544, 320, 256],
        [544, 320, 256],
        [-544, 352, 256],
        [544, 352, 256],
        [-544, 384, 256],
        [544, 384, 256],
        [-544, 416, 256],
        [544, 416, 256],
        [-544, 448, 256],
        [544, 448, 256],
        [-544, 480, 256],
        [544, 480, 256],
        [-544, 512, 256],
        [544, 512, 256],
        [-544, -512, 288],
        [544, -512, 288],
        [-544, -480, 288],
        [544, -480, 288],
        [-544, -448, 288],
        [544, -448, 288],
        [-544, -416, 288],
        [544, -416, 288],
        [-544, -384, 288],
        [544, -384, 288],
        [-544, -352, 288],
        [544, -352, 288],
        [-544, -320, 288],
        [544, -320, 288],
        [-544, -288, 288],
        [544, -288, 288],
        [-544, -256, 288],
        [544, -256, 288],
        [-544, -224, 288],
        [544, -224, 288],
        [-544, -192, 288],
        [544, -192, 288],
        [-544, -160, 288],
        [544, -160, 288],
        [-544, -128, 288],
        [544, -128, 288],
        [-544, -96, 288],
        [544, -96, 288],
        [-544, -64, 288],
        [544, -64, 288],
        [-544, -32, 288],
        [544, -32, 288],
        [-544, 0, 288],
        [544, 0, 288],
        [-544, 32, 288],
        [544, 32, 288],
        [-544, 64, 288],
        [544, 64, 288],
        [-544, 96, 288],
        [544, 96, 288],
        [-544, 128, 288],
        [544, 128, 288],
        [-544, 160, 288],
        [544, 160, 288],
        [-544, 192, 288],
        [544, 192, 288],
        [-544, 224, 288],
        [544, 224, 288],
        [-544, 256, 288],
        [544, 256, 288],
        [-544, 288, 288],
        [544, 288, 288],
        [-544, 320, 288],
        [544, 320, 288],
        [-544, 352, 288],
        [544, 352, 288],
        [-544, 384, 288],
        [544, 384, 288],
        [-544, 416, 288],
        [544, 416, 288],
        [-544, 448, 288],
        [544, 448, 288],
        [-544, 480, 288],
        [544, 480, 288],
        [-544, 512, 288],
        [544, 512, 288],
        [-544, -512, 320],
        [544, -512, 320],
        [-544, -480, 320],
        [544, -480, 320],
        [-544, -448, 320],
        [544, -448, 320],
        [-544, -416, 320],
        [544, -416, 320],
        [-544, -384, 320],
        [544, -384, 320],
        [-544, -352, 320],
        [544, -352, 320],
        [-544, -320, 320],
        [544, -320, 320],
        [-544, -288, 320],
        [544, -288, 320],
        [-544, -256, 320],
        [544, -256, 320],
        [-544, -224, 320],
        [544, -224, 320],
        [-544, -192, 320],
        [544, -192, 320],
        [-544, -160, 320],
        [544, -160, 320],
        [-544, -128, 320],
        [544, -128, 320],
        [-544, -96, 320],
        [544, -96, 320],
        [-544, -64, 320],
        [544, -64, 320],
        [-544, -32, 320],
        [544, -32, 320],
        [-544, 0, 320],
        [544, 0, 320],
        [-544, 32, 320],
        [544, 32, 320],
        [-544, 64, 320],
        [544, 64, 320],
        [-544, 96, 320],
        [544, 96, 320],
        [-544, 128, 320],
        [544, 128, 320],
        [-544, 160, 320],
        [544, 160, 320],
        [-544, 192, 320],
        [544, 192, 320],
        [-544, 224, 320],
        [544, 224, 320],
        [-544, 256, 320],
        [544, 256, 320],
        [-544, 288, 320],
        [544, 288, 320],
        [-544, 320, 320],
        [544, 320, 320],
        [-544, 352, 320],
        [544, 352, 320],
        [-544, 384, 320],
        [544, 384, 320],
        [-544, 416, 320],
        [544, 416, 320],
        [-544, 448, 320],
        [544, 448, 320],
        [-544, 480, 320],
        [544, 480, 320],
        [-544, 512, 320],
        [544, 512, 320],
        [-544, -512, 352],
        [544, -512, 352],
        [-544, -480, 352],
        [544, -480, 352],
        [-544, -448, 352],
        [544, -448, 352],
        [-544, -416, 352],
        [544, -416, 352],
        [-544, -384, 352],
        [544, -384, 352],
        [-544, -352, 352],
        [544, -352, 352],
        [-544, -320, 352],
        [544, -320, 352],
        [-544, -288, 352],
        [544, -288, 352],
        [-544, -256, 352],
        [544, -256, 352],
        [-544, -224, 352],
        [544, -224, 352],
        [-544, -192, 352],
        [544, -192, 352],
        [-544, -160, 352],
        [544, -160, 352],
        [-544, -128, 352],
        [544, -128, 352],
        [-544, -96, 352],
        [544, -96, 352],
        [-544, -64, 352],
        [544, -64, 352],
        [-544, -32, 352],
        [544, -32, 352],
        [-544, 0, 352],
        [544, 0, 352],
        [-544, 32, 352],
        [544, 32, 352],
        [-544, 64, 352],
        [544, 64, 352],
        [-544, 96, 352],
        [544, 96, 352],
        [-544, 128, 352],
        [544, 128, 352],
        [-544, 160, 352],
        [544, 160, 352],
        [-544, 192, 352],
        [544, 192, 352],
        [-544, 224, 352],
        [544, 224, 352],
        [-544, 256, 352],
        [544, 256, 352],
        [-544, 288, 352],
        [544, 288, 352],
        [-544, 320, 352],
        [544, 320, 352],
        [-544, 352, 352],
        [544, 352, 352],
        [-544, 384, 352],
        [544, 384, 352],
        [-544, 416, 352],
        [544, 416, 352],
        [-544, 448, 352],
        [544, 448, 352],
        [-544, 480, 352],
        [544, 480, 352],
        [-544, 512, 352],
        [544, 512, 352],
        [-544, -512, 384],
        [544, -512, 384],
        [-544, -480, 384],
        [544, -480, 384],
        [-544, -448, 384],
        [544, -448, 384],
        [-544, -416, 384],
        [544, -416, 384],
        [-544, -384, 384],
        [544, -384, 384],
        [-544, -352, 384],
        [544, -352, 384],
        [-544, -320, 384],
        [544, -320, 384],
        [-544, -288, 384],
        [544, -288, 384],
        [-544, -256, 384],
        [544, -256, 384],
        [-544, -224, 384],
        [544, -224, 384],
        [-544, -192, 384],
        [544, -192, 384],
        [-544, -160, 384],
        [544, -160, 384],
        [-544, -128, 384],
        [544, -128, 384],
        [-544, -96, 384],
        [544, -96, 384],
        [-544, -64, 384],
        [544, -64, 384],
        [-544, -32, 384],
        [544, -32, 384],
        [-544, 0, 384],
        [544, 0, 384],
        [-544, 32, 384],
        [544, 32, 384],
        [-544, 64, 384],
        [544, 64, 384],
        [-544, 96, 384],
        [544, 96, 384],
        [-544, 128, 384],
        [544, 128, 384],
        [-544, 160, 384],
        [544, 160, 384],
        [-544, 192, 384],
        [544, 192, 384],
        [-544, 224, 384],
        [544, 224, 384],
        [-544, 256, 384],
        [544, 256, 384],
        [-544, 288, 384],
        [544, 288, 384],
        [-544, 320, 384],
        [544, 320, 384],
        [-544, 352, 384],
        [544, 352, 384],
        [-544, 384, 384],
        [544, 384, 384],
        [-544, 416, 384],
        [544, 416, 384],
        [-544, 448, 384],
        [544, 448, 384],
        [-544, 480, 384],
        [544, 480, 384],
        [-544, 512, 384],
        [544, 512, 384],
        [-544, -512, 416],
        [544, -512, 416],
        [-544, -480, 416],
        [544, -480, 416],
        [-544, -448, 416],
        [544, -448, 416],
        [-544, -416, 416],
        [544, -416, 416],
        [-544, -384, 416],
        [544, -384, 416],
        [-544, -352, 416],
        [544, -352, 416],
        [-544, -320, 416],
        [544, -320, 416],
        [-544, -288, 416],
        [544, -288, 416],
        [-544, -256, 416],
        [544, -256, 416],
        [-544, -224, 416],
        [544, -224, 416],
        [-544, -192, 416],
        [544, -192, 416],
        [-544, -160, 416],
        [544, -160, 416],
        [-544, -128, 416],
        [544, -128, 416],
        [-544, -96, 416],
        [544, -96, 416],
        [-544, -64, 416],
        [544, -64, 416],
        [-544, -32, 416],
        [544, -32, 416],
        [-544, 0, 416],
        [544, 0, 416],
        [-544, 32, 416],
        [544, 32, 416],
        [-544, 64, 416],
        [544, 64, 416],
        [-544, 96, 416],
        [544, 96, 416],
        [-544, 128, 416],
        [544, 128, 416],
        [-544, 160, 416],
        [544, 160, 416],
        [-544, 192, 416],
        [544, 192, 416],
        [-544, 224, 416],
        [544, 224, 416],
        [-544, 256, 416],
        [544, 256, 416],
        [-544, 288, 416],
        [544, 288, 416],
        [-544, 320, 416],
        [544, 320, 416],
        [-544, 352, 416],
        [544, 352, 416],
        [-544, 384, 416],
        [544, 384, 416],
        [-544, 416, 416],
        [544, 416, 416],
        [-544, 448, 416],
        [544, 448, 416],
        [-544, 480, 416],
        [544, 480, 416],
        [-544, 512, 416],
        [544, 512, 416],
        [-544, -512, 448],
        [544, -512, 448],
        [-544, -480, 448],
        [544, -480, 448],
        [-544, -448, 448],
        [544, -448, 448],
        [-544, -416, 448],
        [544, -416, 448],
        [-544, -384, 448],
        [544, -384, 448],
        [-544, -352, 448],
        [544, -352, 448],
        [-544, -320, 448],
        [544, -320, 448],
        [-544, -288, 448],
        [544, -288, 448],
        [-544, -256, 448],
        [544, -256, 448],
        [-544, -224, 448],
        [544, -224, 448],
        [-544, -192, 448],
        [544, -192, 448],
        [-544, -160, 448],
        [544, -160, 448],
        [-544, -128, 448],
        [544, -128, 448],
        [-544, -96, 448],
        [544, -96, 448],
        [-544, -64, 448],
        [544, -64, 448],
        [-544, -32, 448],
        [544, -32, 448],
        [-544, 0, 448],
        [544, 0, 448],
        [-544, 32, 448],
        [544, 32, 448],
        [-544, 64, 448],
        [544, 64, 448],
        [-544, 96, 448],
        [544, 96, 448],
        [-544, 128, 448],
        [544, 128, 448],
        [-544, 160, 448],
        [544, 160, 448],
        [-544, 192, 448],
        [544, 192, 448],
        [-544, 224, 448],
        [544, 224, 448],
        [-544, 256, 448],
        [544, 256, 448],
        [-544, 288, 448],
        [544, 288, 448],
        [-544, 320, 448],
        [544, 320, 448],
        [-544, 352, 448],
        [544, 352, 448],
        [-544, 384, 448],
        [544, 384, 448],
        [-544, 416, 448],
        [544, 416, 448],
        [-544, 448, 448],
        [544, 448, 448],
        [-544, 480, 448],
        [544, 480, 448],
        [-544, 512, 448],
        [544, 512, 448],
        [-544, -512, 480],
        [544, -512, 480],
        [-544, -480, 480],
        [544, -480, 480],
        [-544, -448, 480],
        [544, -448, 480],
        [-544, -416, 480],
        [544, -416, 480],
        [-544, -384, 480],
        [544, -384, 480],
        [-544, -352, 480],
        [544, -352, 480],
        [-544, -320, 480],
        [544, -320, 480],
        [-544, -288, 480],
        [544, -288, 480],
        [-544, -256, 480],
        [544, -256, 480],
        [-544, -224, 480],
        [544, -224, 480],
        [-544, -192, 480],
        [544, -192, 480],
        [-544, -160, 480],
        [544, -160, 480],
        [-544, -128, 480],
        [544, -128, 480],
        [-544, -96, 480],
        [544, -96, 480],
        [-544, -64, 480],
        [544, -64, 480],
        [-544, -32, 480],
        [544, -32, 480],
        [-544, 0, 480],
        [544, 0, 480],
        [-544, 32, 480],
        [544, 32, 480],
        [-544, 64, 480],
        [544, 64, 480],
        [-544, 96, 480],
        [544, 96, 480],
        [-544, 128, 480],
        [544, 128, 480],
        [-544, 160, 480],
        [544, 160, 480],
        [-544, 192, 480],
        [544, 192, 480],
        [-544, 224, 480],
        [544, 224, 480],
        [-544, 256, 480],
        [544, 256, 480],
        [-544, 288, 480],
        [544, 288, 480],
        [-544, 320, 480],
        [544, 320, 480],
        [-544, 352, 480],
        [544, 352, 480],
        [-544, 384, 480],
        [544, 384, 480],
        [-544, 416, 480],
        [544, 416, 480],
        [-544, 448, 480],
        [544, 448, 480],
        [-544, 480, 480],
        [544, 480, 480],
        [-544, 512, 480],
        [544, 512, 480],
        [-544, -512, 512],
        [544, -512, 512],
        [-544, -480, 512],
        [544, -480, 512],
        [-544, -448, 512],
        [544, -448, 512],
        [-544, -416, 512],
        [544, -416, 512],
        [-544, -384, 512],
        [544, -384, 512],
        [-544, -352, 512],
        [544, -352, 512],
        [-544, -320, 512],
        [544, -320, 512],
        [-544, -288, 512],
        [544, -288, 512],
        [-544, -256, 512],
        [544, -256, 512],
        [-544, -224, 512],
        [544, -224, 512],
        [-544, -192, 512],
        [544, -192, 512],
        [-544, -160, 512],
        [544, -160, 512],
        [-544, -128, 512],
        [544, -128, 512],
        [-544, -96, 512],
        [544, -96, 512],
        [-544, -64, 512],
        [544, -64, 512],
        [-544, -32, 512],
        [544, -32, 512],
        [-544, 0, 512],
        [544, 0, 512],
        [-544, 32, 512],
        [544, 32, 512],
        [-544, 64, 512],
        [544, 64, 512],
        [-544, 96, 512],
        [544, 96, 512],
        [-544, 128, 512],
        [544, 128, 512],
        [-544, 160, 512],
        [544, 160, 512],
        [-544, 192, 512],
        [544, 192, 512],
        [-544, 224, 512],
        [544, 224, 512],
        [-544, 256, 512],
        [544, 256, 512],
        [-544, 288, 512],
        [544, 288, 512],
        [-544, 320, 512],
        [544, 320, 512],
        [-544, 352, 512],
        [544, 352, 512],
        [-544, 384, 512],
        [544, 384, 512],
        [-544, 416, 512],
        [544, 416, 512],
        [-544, 448, 512],
        [544, 448, 512],
        [-544, 480, 512],
        [544, 480, 512],
        [-544, 512, 512],
        [544, 512, 512]],
    '18': [[-576, -576, -576],
        [-576, -576, 576],
        [-576, -544, -576],
        [-576, -544, 576],
        [-576, -512, -576],
        [-576, -512, 576],
        [-576, -480, -576],
        [-576, -480, 576],
        [-576, -448, -576],
        [-576, -448, 576],
        [-576, -416, -576],
        [-576, -416, 576],
        [-576, -384, -576],
        [-576, -384, 576],
        [-576, -352, -576],
        [-576, -352, 576],
        [-576, -320, -576],
        [-576, -320, 576],
        [-576, -288, -576],
        [-576, -288, 576],
        [-576, -256, -576],
        [-576, -256, 576],
        [-576, -224, -576],
        [-576, -224, 576],
        [-576, -192, -576],
        [-576, -192, 576],
        [-576, -160, -576],
        [-576, -160, 576],
        [-576, -128, -576],
        [-576, -128, 576],
        [-576, -96, -576],
        [-576, -96, 576],
        [-576, -64, -576],
        [-576, -64, 576],
        [-576, -32, -576],
        [-576, -32, 576],
        [-576, 0, -576],
        [-576, 0, 576],
        [-576, 32, -576],
        [-576, 32, 576],
        [-576, 64, -576],
        [-576, 64, 576],
        [-576, 96, -576],
        [-576, 96, 576],
        [-576, 128, -576],
        [-576, 128, 576],
        [-576, 160, -576],
        [-576, 160, 576],
        [-576, 192, -576],
        [-576, 192, 576],
        [-576, 224, -576],
        [-576, 224, 576],
        [-576, 256, -576],
        [-576, 256, 576],
        [-576, 288, -576],
        [-576, 288, 576],
        [-576, 320, -576],
        [-576, 320, 576],
        [-576, 352, -576],
        [-576, 352, 576],
        [-576, 384, -576],
        [-576, 384, 576],
        [-576, 416, -576],
        [-576, 416, 576],
        [-576, 448, -576],
        [-576, 448, 576],
        [-576, 480, -576],
        [-576, 480, 576],
        [-576, 512, -576],
        [-576, 512, 576],
        [-576, 544, -576],
        [-576, 544, 576],
        [-576, 576, -576],
        [-576, 576, 576],
        [-576, -576, -544],
        [-576, 576, -544],
        [-576, -576, -512],
        [-576, 576, -512],
        [-576, -576, -480],
        [-576, 576, -480],
        [-576, -576, -448],
        [-576, 576, -448],
        [-576, -576, -416],
        [-576, 576, -416],
        [-576, -576, -384],
        [-576, 576, -384],
        [-576, -576, -352],
        [-576, 576, -352],
        [-576, -576, -320],
        [-576, 576, -320],
        [-576, -576, -288],
        [-576, 576, -288],
        [-576, -576, -256],
        [-576, 576, -256],
        [-576, -576, -224],
        [-576, 576, -224],
        [-576, -576, -192],
        [-576, 576, -192],
        [-576, -576, -160],
        [-576, 576, -160],
        [-576, -576, -128],
        [-576, 576, -128],
        [-576, -576, -96],
        [-576, 576, -96],
        [-576, -576, -64],
        [-576, 576, -64],
        [-576, -576, -32],
        [-576, 576, -32],
        [-576, -576, 0],
        [-576, 576, 0],
        [-576, -576, 32],
        [-576, 576, 32],
        [-576, -576, 64],
        [-576, 576, 64],
        [-576, -576, 96],
        [-576, 576, 96],
        [-576, -576, 128],
        [-576, 576, 128],
        [-576, -576, 160],
        [-576, 576, 160],
        [-576, -576, 192],
        [-576, 576, 192],
        [-576, -576, 224],
        [-576, 576, 224],
        [-576, -576, 256],
        [-576, 576, 256],
        [-576, -576, 288],
        [-576, 576, 288],
        [-576, -576, 320],
        [-576, 576, 320],
        [-576, -576, 352],
        [-576, 576, 352],
        [-576, -576, 384],
        [-576, 576, 384],
        [-576, -576, 416],
        [-576, 576, 416],
        [-576, -576, 448],
        [-576, 576, 448],
        [-576, -576, 480],
        [-576, 576, 480],
        [-576, -576, 512],
        [-576, 576, 512],
        [-576, -576, 544],
        [-576, 576, 544],
        [-544, -576, -576],
        [-544, -576, 576],
        [-544, -544, -576],
        [-544, -544, 576],
        [-544, -512, -576],
        [-544, -512, 576],
        [-544, -480, -576],
        [-544, -480, 576],
        [-544, -448, -576],
        [-544, -448, 576],
        [-544, -416, -576],
        [-544, -416, 576],
        [-544, -384, -576],
        [-544, -384, 576],
        [-544, -352, -576],
        [-544, -352, 576],
        [-544, -320, -576],
        [-544, -320, 576],
        [-544, -288, -576],
        [-544, -288, 576],
        [-544, -256, -576],
        [-544, -256, 576],
        [-544, -224, -576],
        [-544, -224, 576],
        [-544, -192, -576],
        [-544, -192, 576],
        [-544, -160, -576],
        [-544, -160, 576],
        [-544, -128, -576],
        [-544, -128, 576],
        [-544, -96, -576],
        [-544, -96, 576],
        [-544, -64, -576],
        [-544, -64, 576],
        [-544, -32, -576],
        [-544, -32, 576],
        [-544, 0, -576],
        [-544, 0, 576],
        [-544, 32, -576],
        [-544, 32, 576],
        [-544, 64, -576],
        [-544, 64, 576],
        [-544, 96, -576],
        [-544, 96, 576],
        [-544, 128, -576],
        [-544, 128, 576],
        [-544, 160, -576],
        [-544, 160, 576],
        [-544, 192, -576],
        [-544, 192, 576],
        [-544, 224, -576],
        [-544, 224, 576],
        [-544, 256, -576],
        [-544, 256, 576],
        [-544, 288, -576],
        [-544, 288, 576],
        [-544, 320, -576],
        [-544, 320, 576],
        [-544, 352, -576],
        [-544, 352, 576],
        [-544, 384, -576],
        [-544, 384, 576],
        [-544, 416, -576],
        [-544, 416, 576],
        [-544, 448, -576],
        [-544, 448, 576],
        [-544, 480, -576],
        [-544, 480, 576],
        [-544, 512, -576],
        [-544, 512, 576],
        [-544, 544, -576],
        [-544, 544, 576],
        [-544, 576, -576],
        [-544, 576, 576],
        [-544, -576, -544],
        [-544, 576, -544],
        [-544, -576, -512],
        [-544, 576, -512],
        [-544, -576, -480],
        [-544, 576, -480],
        [-544, -576, -448],
        [-544, 576, -448],
        [-544, -576, -416],
        [-544, 576, -416],
        [-544, -576, -384],
        [-544, 576, -384],
        [-544, -576, -352],
        [-544, 576, -352],
        [-544, -576, -320],
        [-544, 576, -320],
        [-544, -576, -288],
        [-544, 576, -288],
        [-544, -576, -256],
        [-544, 576, -256],
        [-544, -576, -224],
        [-544, 576, -224],
        [-544, -576, -192],
        [-544, 576, -192],
        [-544, -576, -160],
        [-544, 576, -160],
        [-544, -576, -128],
        [-544, 576, -128],
        [-544, -576, -96],
        [-544, 576, -96],
        [-544, -576, -64],
        [-544, 576, -64],
        [-544, -576, -32],
        [-544, 576, -32],
        [-544, -576, 0],
        [-544, 576, 0],
        [-544, -576, 32],
        [-544, 576, 32],
        [-544, -576, 64],
        [-544, 576, 64],
        [-544, -576, 96],
        [-544, 576, 96],
        [-544, -576, 128],
        [-544, 576, 128],
        [-544, -576, 160],
        [-544, 576, 160],
        [-544, -576, 192],
        [-544, 576, 192],
        [-544, -576, 224],
        [-544, 576, 224],
        [-544, -576, 256],
        [-544, 576, 256],
        [-544, -576, 288],
        [-544, 576, 288],
        [-544, -576, 320],
        [-544, 576, 320],
        [-544, -576, 352],
        [-544, 576, 352],
        [-544, -576, 384],
        [-544, 576, 384],
        [-544, -576, 416],
        [-544, 576, 416],
        [-544, -576, 448],
        [-544, 576, 448],
        [-544, -576, 480],
        [-544, 576, 480],
        [-544, -576, 512],
        [-544, 576, 512],
        [-544, -576, 544],
        [-544, 576, 544],
        [-512, -576, -576],
        [-512, -576, 576],
        [-512, -544, -576],
        [-512, -544, 576],
        [-512, -512, -576],
        [-512, -512, 576],
        [-512, -480, -576],
        [-512, -480, 576],
        [-512, -448, -576],
        [-512, -448, 576],
        [-512, -416, -576],
        [-512, -416, 576],
        [-512, -384, -576],
        [-512, -384, 576],
        [-512, -352, -576],
        [-512, -352, 576],
        [-512, -320, -576],
        [-512, -320, 576],
        [-512, -288, -576],
        [-512, -288, 576],
        [-512, -256, -576],
        [-512, -256, 576],
        [-512, -224, -576],
        [-512, -224, 576],
        [-512, -192, -576],
        [-512, -192, 576],
        [-512, -160, -576],
        [-512, -160, 576],
        [-512, -128, -576],
        [-512, -128, 576],
        [-512, -96, -576],
        [-512, -96, 576],
        [-512, -64, -576],
        [-512, -64, 576],
        [-512, -32, -576],
        [-512, -32, 576],
        [-512, 0, -576],
        [-512, 0, 576],
        [-512, 32, -576],
        [-512, 32, 576],
        [-512, 64, -576],
        [-512, 64, 576],
        [-512, 96, -576],
        [-512, 96, 576],
        [-512, 128, -576],
        [-512, 128, 576],
        [-512, 160, -576],
        [-512, 160, 576],
        [-512, 192, -576],
        [-512, 192, 576],
        [-512, 224, -576],
        [-512, 224, 576],
        [-512, 256, -576],
        [-512, 256, 576],
        [-512, 288, -576],
        [-512, 288, 576],
        [-512, 320, -576],
        [-512, 320, 576],
        [-512, 352, -576],
        [-512, 352, 576],
        [-512, 384, -576],
        [-512, 384, 576],
        [-512, 416, -576],
        [-512, 416, 576],
        [-512, 448, -576],
        [-512, 448, 576],
        [-512, 480, -576],
        [-512, 480, 576],
        [-512, 512, -576],
        [-512, 512, 576],
        [-512, 544, -576],
        [-512, 544, 576],
        [-512, 576, -576],
        [-512, 576, 576],
        [-512, -576, -544],
        [-512, 576, -544],
        [-512, -576, -512],
        [-512, 576, -512],
        [-512, -576, -480],
        [-512, 576, -480],
        [-512, -576, -448],
        [-512, 576, -448],
        [-512, -576, -416],
        [-512, 576, -416],
        [-512, -576, -384],
        [-512, 576, -384],
        [-512, -576, -352],
        [-512, 576, -352],
        [-512, -576, -320],
        [-512, 576, -320],
        [-512, -576, -288],
        [-512, 576, -288],
        [-512, -576, -256],
        [-512, 576, -256],
        [-512, -576, -224],
        [-512, 576, -224],
        [-512, -576, -192],
        [-512, 576, -192],
        [-512, -576, -160],
        [-512, 576, -160],
        [-512, -576, -128],
        [-512, 576, -128],
        [-512, -576, -96],
        [-512, 576, -96],
        [-512, -576, -64],
        [-512, 576, -64],
        [-512, -576, -32],
        [-512, 576, -32],
        [-512, -576, 0],
        [-512, 576, 0],
        [-512, -576, 32],
        [-512, 576, 32],
        [-512, -576, 64],
        [-512, 576, 64],
        [-512, -576, 96],
        [-512, 576, 96],
        [-512, -576, 128],
        [-512, 576, 128],
        [-512, -576, 160],
        [-512, 576, 160],
        [-512, -576, 192],
        [-512, 576, 192],
        [-512, -576, 224],
        [-512, 576, 224],
        [-512, -576, 256],
        [-512, 576, 256],
        [-512, -576, 288],
        [-512, 576, 288],
        [-512, -576, 320],
        [-512, 576, 320],
        [-512, -576, 352],
        [-512, 576, 352],
        [-512, -576, 384],
        [-512, 576, 384],
        [-512, -576, 416],
        [-512, 576, 416],
        [-512, -576, 448],
        [-512, 576, 448],
        [-512, -576, 480],
        [-512, 576, 480],
        [-512, -576, 512],
        [-512, 576, 512],
        [-512, -576, 544],
        [-512, 576, 544],
        [-480, -576, -576],
        [-480, -576, 576],
        [-480, -544, -576],
        [-480, -544, 576],
        [-480, -512, -576],
        [-480, -512, 576],
        [-480, -480, -576],
        [-480, -480, 576],
        [-480, -448, -576],
        [-480, -448, 576],
        [-480, -416, -576],
        [-480, -416, 576],
        [-480, -384, -576],
        [-480, -384, 576],
        [-480, -352, -576],
        [-480, -352, 576],
        [-480, -320, -576],
        [-480, -320, 576],
        [-480, -288, -576],
        [-480, -288, 576],
        [-480, -256, -576],
        [-480, -256, 576],
        [-480, -224, -576],
        [-480, -224, 576],
        [-480, -192, -576],
        [-480, -192, 576],
        [-480, -160, -576],
        [-480, -160, 576],
        [-480, -128, -576],
        [-480, -128, 576],
        [-480, -96, -576],
        [-480, -96, 576],
        [-480, -64, -576],
        [-480, -64, 576],
        [-480, -32, -576],
        [-480, -32, 576],
        [-480, 0, -576],
        [-480, 0, 576],
        [-480, 32, -576],
        [-480, 32, 576],
        [-480, 64, -576],
        [-480, 64, 576],
        [-480, 96, -576],
        [-480, 96, 576],
        [-480, 128, -576],
        [-480, 128, 576],
        [-480, 160, -576],
        [-480, 160, 576],
        [-480, 192, -576],
        [-480, 192, 576],
        [-480, 224, -576],
        [-480, 224, 576],
        [-480, 256, -576],
        [-480, 256, 576],
        [-480, 288, -576],
        [-480, 288, 576],
        [-480, 320, -576],
        [-480, 320, 576],
        [-480, 352, -576],
        [-480, 352, 576],
        [-480, 384, -576],
        [-480, 384, 576],
        [-480, 416, -576],
        [-480, 416, 576],
        [-480, 448, -576],
        [-480, 448, 576],
        [-480, 480, -576],
        [-480, 480, 576],
        [-480, 512, -576],
        [-480, 512, 576],
        [-480, 544, -576],
        [-480, 544, 576],
        [-480, 576, -576],
        [-480, 576, 576],
        [-480, -576, -544],
        [-480, 576, -544],
        [-480, -576, -512],
        [-480, 576, -512],
        [-480, -576, -480],
        [-480, 576, -480],
        [-480, -576, -448],
        [-480, 576, -448],
        [-480, -576, -416],
        [-480, 576, -416],
        [-480, -576, -384],
        [-480, 576, -384],
        [-480, -576, -352],
        [-480, 576, -352],
        [-480, -576, -320],
        [-480, 576, -320],
        [-480, -576, -288],
        [-480, 576, -288],
        [-480, -576, -256],
        [-480, 576, -256],
        [-480, -576, -224],
        [-480, 576, -224],
        [-480, -576, -192],
        [-480, 576, -192],
        [-480, -576, -160],
        [-480, 576, -160],
        [-480, -576, -128],
        [-480, 576, -128],
        [-480, -576, -96],
        [-480, 576, -96],
        [-480, -576, -64],
        [-480, 576, -64],
        [-480, -576, -32],
        [-480, 576, -32],
        [-480, -576, 0],
        [-480, 576, 0],
        [-480, -576, 32],
        [-480, 576, 32],
        [-480, -576, 64],
        [-480, 576, 64],
        [-480, -576, 96],
        [-480, 576, 96],
        [-480, -576, 128],
        [-480, 576, 128],
        [-480, -576, 160],
        [-480, 576, 160],
        [-480, -576, 192],
        [-480, 576, 192],
        [-480, -576, 224],
        [-480, 576, 224],
        [-480, -576, 256],
        [-480, 576, 256],
        [-480, -576, 288],
        [-480, 576, 288],
        [-480, -576, 320],
        [-480, 576, 320],
        [-480, -576, 352],
        [-480, 576, 352],
        [-480, -576, 384],
        [-480, 576, 384],
        [-480, -576, 416],
        [-480, 576, 416],
        [-480, -576, 448],
        [-480, 576, 448],
        [-480, -576, 480],
        [-480, 576, 480],
        [-480, -576, 512],
        [-480, 576, 512],
        [-480, -576, 544],
        [-480, 576, 544],
        [-448, -576, -576],
        [-448, -576, 576],
        [-448, -544, -576],
        [-448, -544, 576],
        [-448, -512, -576],
        [-448, -512, 576],
        [-448, -480, -576],
        [-448, -480, 576],
        [-448, -448, -576],
        [-448, -448, 576],
        [-448, -416, -576],
        [-448, -416, 576],
        [-448, -384, -576],
        [-448, -384, 576],
        [-448, -352, -576],
        [-448, -352, 576],
        [-448, -320, -576],
        [-448, -320, 576],
        [-448, -288, -576],
        [-448, -288, 576],
        [-448, -256, -576],
        [-448, -256, 576],
        [-448, -224, -576],
        [-448, -224, 576],
        [-448, -192, -576],
        [-448, -192, 576],
        [-448, -160, -576],
        [-448, -160, 576],
        [-448, -128, -576],
        [-448, -128, 576],
        [-448, -96, -576],
        [-448, -96, 576],
        [-448, -64, -576],
        [-448, -64, 576],
        [-448, -32, -576],
        [-448, -32, 576],
        [-448, 0, -576],
        [-448, 0, 576],
        [-448, 32, -576],
        [-448, 32, 576],
        [-448, 64, -576],
        [-448, 64, 576],
        [-448, 96, -576],
        [-448, 96, 576],
        [-448, 128, -576],
        [-448, 128, 576],
        [-448, 160, -576],
        [-448, 160, 576],
        [-448, 192, -576],
        [-448, 192, 576],
        [-448, 224, -576],
        [-448, 224, 576],
        [-448, 256, -576],
        [-448, 256, 576],
        [-448, 288, -576],
        [-448, 288, 576],
        [-448, 320, -576],
        [-448, 320, 576],
        [-448, 352, -576],
        [-448, 352, 576],
        [-448, 384, -576],
        [-448, 384, 576],
        [-448, 416, -576],
        [-448, 416, 576],
        [-448, 448, -576],
        [-448, 448, 576],
        [-448, 480, -576],
        [-448, 480, 576],
        [-448, 512, -576],
        [-448, 512, 576],
        [-448, 544, -576],
        [-448, 544, 576],
        [-448, 576, -576],
        [-448, 576, 576],
        [-448, -576, -544],
        [-448, 576, -544],
        [-448, -576, -512],
        [-448, 576, -512],
        [-448, -576, -480],
        [-448, 576, -480],
        [-448, -576, -448],
        [-448, 576, -448],
        [-448, -576, -416],
        [-448, 576, -416],
        [-448, -576, -384],
        [-448, 576, -384],
        [-448, -576, -352],
        [-448, 576, -352],
        [-448, -576, -320],
        [-448, 576, -320],
        [-448, -576, -288],
        [-448, 576, -288],
        [-448, -576, -256],
        [-448, 576, -256],
        [-448, -576, -224],
        [-448, 576, -224],
        [-448, -576, -192],
        [-448, 576, -192],
        [-448, -576, -160],
        [-448, 576, -160],
        [-448, -576, -128],
        [-448, 576, -128],
        [-448, -576, -96],
        [-448, 576, -96],
        [-448, -576, -64],
        [-448, 576, -64],
        [-448, -576, -32],
        [-448, 576, -32],
        [-448, -576, 0],
        [-448, 576, 0],
        [-448, -576, 32],
        [-448, 576, 32],
        [-448, -576, 64],
        [-448, 576, 64],
        [-448, -576, 96],
        [-448, 576, 96],
        [-448, -576, 128],
        [-448, 576, 128],
        [-448, -576, 160],
        [-448, 576, 160],
        [-448, -576, 192],
        [-448, 576, 192],
        [-448, -576, 224],
        [-448, 576, 224],
        [-448, -576, 256],
        [-448, 576, 256],
        [-448, -576, 288],
        [-448, 576, 288],
        [-448, -576, 320],
        [-448, 576, 320],
        [-448, -576, 352],
        [-448, 576, 352],
        [-448, -576, 384],
        [-448, 576, 384],
        [-448, -576, 416],
        [-448, 576, 416],
        [-448, -576, 448],
        [-448, 576, 448],
        [-448, -576, 480],
        [-448, 576, 480],
        [-448, -576, 512],
        [-448, 576, 512],
        [-448, -576, 544],
        [-448, 576, 544],
        [-416, -576, -576],
        [-416, -576, 576],
        [-416, -544, -576],
        [-416, -544, 576],
        [-416, -512, -576],
        [-416, -512, 576],
        [-416, -480, -576],
        [-416, -480, 576],
        [-416, -448, -576],
        [-416, -448, 576],
        [-416, -416, -576],
        [-416, -416, 576],
        [-416, -384, -576],
        [-416, -384, 576],
        [-416, -352, -576],
        [-416, -352, 576],
        [-416, -320, -576],
        [-416, -320, 576],
        [-416, -288, -576],
        [-416, -288, 576],
        [-416, -256, -576],
        [-416, -256, 576],
        [-416, -224, -576],
        [-416, -224, 576],
        [-416, -192, -576],
        [-416, -192, 576],
        [-416, -160, -576],
        [-416, -160, 576],
        [-416, -128, -576],
        [-416, -128, 576],
        [-416, -96, -576],
        [-416, -96, 576],
        [-416, -64, -576],
        [-416, -64, 576],
        [-416, -32, -576],
        [-416, -32, 576],
        [-416, 0, -576],
        [-416, 0, 576],
        [-416, 32, -576],
        [-416, 32, 576],
        [-416, 64, -576],
        [-416, 64, 576],
        [-416, 96, -576],
        [-416, 96, 576],
        [-416, 128, -576],
        [-416, 128, 576],
        [-416, 160, -576],
        [-416, 160, 576],
        [-416, 192, -576],
        [-416, 192, 576],
        [-416, 224, -576],
        [-416, 224, 576],
        [-416, 256, -576],
        [-416, 256, 576],
        [-416, 288, -576],
        [-416, 288, 576],
        [-416, 320, -576],
        [-416, 320, 576],
        [-416, 352, -576],
        [-416, 352, 576],
        [-416, 384, -576],
        [-416, 384, 576],
        [-416, 416, -576],
        [-416, 416, 576],
        [-416, 448, -576],
        [-416, 448, 576],
        [-416, 480, -576],
        [-416, 480, 576],
        [-416, 512, -576],
        [-416, 512, 576],
        [-416, 544, -576],
        [-416, 544, 576],
        [-416, 576, -576],
        [-416, 576, 576],
        [-416, -576, -544],
        [-416, 576, -544],
        [-416, -576, -512],
        [-416, 576, -512],
        [-416, -576, -480],
        [-416, 576, -480],
        [-416, -576, -448],
        [-416, 576, -448],
        [-416, -576, -416],
        [-416, 576, -416],
        [-416, -576, -384],
        [-416, 576, -384],
        [-416, -576, -352],
        [-416, 576, -352],
        [-416, -576, -320],
        [-416, 576, -320],
        [-416, -576, -288],
        [-416, 576, -288],
        [-416, -576, -256],
        [-416, 576, -256],
        [-416, -576, -224],
        [-416, 576, -224],
        [-416, -576, -192],
        [-416, 576, -192],
        [-416, -576, -160],
        [-416, 576, -160],
        [-416, -576, -128],
        [-416, 576, -128],
        [-416, -576, -96],
        [-416, 576, -96],
        [-416, -576, -64],
        [-416, 576, -64],
        [-416, -576, -32],
        [-416, 576, -32],
        [-416, -576, 0],
        [-416, 576, 0],
        [-416, -576, 32],
        [-416, 576, 32],
        [-416, -576, 64],
        [-416, 576, 64],
        [-416, -576, 96],
        [-416, 576, 96],
        [-416, -576, 128],
        [-416, 576, 128],
        [-416, -576, 160],
        [-416, 576, 160],
        [-416, -576, 192],
        [-416, 576, 192],
        [-416, -576, 224],
        [-416, 576, 224],
        [-416, -576, 256],
        [-416, 576, 256],
        [-416, -576, 288],
        [-416, 576, 288],
        [-416, -576, 320],
        [-416, 576, 320],
        [-416, -576, 352],
        [-416, 576, 352],
        [-416, -576, 384],
        [-416, 576, 384],
        [-416, -576, 416],
        [-416, 576, 416],
        [-416, -576, 448],
        [-416, 576, 448],
        [-416, -576, 480],
        [-416, 576, 480],
        [-416, -576, 512],
        [-416, 576, 512],
        [-416, -576, 544],
        [-416, 576, 544],
        [-384, -576, -576],
        [-384, -576, 576],
        [-384, -544, -576],
        [-384, -544, 576],
        [-384, -512, -576],
        [-384, -512, 576],
        [-384, -480, -576],
        [-384, -480, 576],
        [-384, -448, -576],
        [-384, -448, 576],
        [-384, -416, -576],
        [-384, -416, 576],
        [-384, -384, -576],
        [-384, -384, 576],
        [-384, -352, -576],
        [-384, -352, 576],
        [-384, -320, -576],
        [-384, -320, 576],
        [-384, -288, -576],
        [-384, -288, 576],
        [-384, -256, -576],
        [-384, -256, 576],
        [-384, -224, -576],
        [-384, -224, 576],
        [-384, -192, -576],
        [-384, -192, 576],
        [-384, -160, -576],
        [-384, -160, 576],
        [-384, -128, -576],
        [-384, -128, 576],
        [-384, -96, -576],
        [-384, -96, 576],
        [-384, -64, -576],
        [-384, -64, 576],
        [-384, -32, -576],
        [-384, -32, 576],
        [-384, 0, -576],
        [-384, 0, 576],
        [-384, 32, -576],
        [-384, 32, 576],
        [-384, 64, -576],
        [-384, 64, 576],
        [-384, 96, -576],
        [-384, 96, 576],
        [-384, 128, -576],
        [-384, 128, 576],
        [-384, 160, -576],
        [-384, 160, 576],
        [-384, 192, -576],
        [-384, 192, 576],
        [-384, 224, -576],
        [-384, 224, 576],
        [-384, 256, -576],
        [-384, 256, 576],
        [-384, 288, -576],
        [-384, 288, 576],
        [-384, 320, -576],
        [-384, 320, 576],
        [-384, 352, -576],
        [-384, 352, 576],
        [-384, 384, -576],
        [-384, 384, 576],
        [-384, 416, -576],
        [-384, 416, 576],
        [-384, 448, -576],
        [-384, 448, 576],
        [-384, 480, -576],
        [-384, 480, 576],
        [-384, 512, -576],
        [-384, 512, 576],
        [-384, 544, -576],
        [-384, 544, 576],
        [-384, 576, -576],
        [-384, 576, 576],
        [-384, -576, -544],
        [-384, 576, -544],
        [-384, -576, -512],
        [-384, 576, -512],
        [-384, -576, -480],
        [-384, 576, -480],
        [-384, -576, -448],
        [-384, 576, -448],
        [-384, -576, -416],
        [-384, 576, -416],
        [-384, -576, -384],
        [-384, 576, -384],
        [-384, -576, -352],
        [-384, 576, -352],
        [-384, -576, -320],
        [-384, 576, -320],
        [-384, -576, -288],
        [-384, 576, -288],
        [-384, -576, -256],
        [-384, 576, -256],
        [-384, -576, -224],
        [-384, 576, -224],
        [-384, -576, -192],
        [-384, 576, -192],
        [-384, -576, -160],
        [-384, 576, -160],
        [-384, -576, -128],
        [-384, 576, -128],
        [-384, -576, -96],
        [-384, 576, -96],
        [-384, -576, -64],
        [-384, 576, -64],
        [-384, -576, -32],
        [-384, 576, -32],
        [-384, -576, 0],
        [-384, 576, 0],
        [-384, -576, 32],
        [-384, 576, 32],
        [-384, -576, 64],
        [-384, 576, 64],
        [-384, -576, 96],
        [-384, 576, 96],
        [-384, -576, 128],
        [-384, 576, 128],
        [-384, -576, 160],
        [-384, 576, 160],
        [-384, -576, 192],
        [-384, 576, 192],
        [-384, -576, 224],
        [-384, 576, 224],
        [-384, -576, 256],
        [-384, 576, 256],
        [-384, -576, 288],
        [-384, 576, 288],
        [-384, -576, 320],
        [-384, 576, 320],
        [-384, -576, 352],
        [-384, 576, 352],
        [-384, -576, 384],
        [-384, 576, 384],
        [-384, -576, 416],
        [-384, 576, 416],
        [-384, -576, 448],
        [-384, 576, 448],
        [-384, -576, 480],
        [-384, 576, 480],
        [-384, -576, 512],
        [-384, 576, 512],
        [-384, -576, 544],
        [-384, 576, 544],
        [-352, -576, -576],
        [-352, -576, 576],
        [-352, -544, -576],
        [-352, -544, 576],
        [-352, -512, -576],
        [-352, -512, 576],
        [-352, -480, -576],
        [-352, -480, 576],
        [-352, -448, -576],
        [-352, -448, 576],
        [-352, -416, -576],
        [-352, -416, 576],
        [-352, -384, -576],
        [-352, -384, 576],
        [-352, -352, -576],
        [-352, -352, 576],
        [-352, -320, -576],
        [-352, -320, 576],
        [-352, -288, -576],
        [-352, -288, 576],
        [-352, -256, -576],
        [-352, -256, 576],
        [-352, -224, -576],
        [-352, -224, 576],
        [-352, -192, -576],
        [-352, -192, 576],
        [-352, -160, -576],
        [-352, -160, 576],
        [-352, -128, -576],
        [-352, -128, 576],
        [-352, -96, -576],
        [-352, -96, 576],
        [-352, -64, -576],
        [-352, -64, 576],
        [-352, -32, -576],
        [-352, -32, 576],
        [-352, 0, -576],
        [-352, 0, 576],
        [-352, 32, -576],
        [-352, 32, 576],
        [-352, 64, -576],
        [-352, 64, 576],
        [-352, 96, -576],
        [-352, 96, 576],
        [-352, 128, -576],
        [-352, 128, 576],
        [-352, 160, -576],
        [-352, 160, 576],
        [-352, 192, -576],
        [-352, 192, 576],
        [-352, 224, -576],
        [-352, 224, 576],
        [-352, 256, -576],
        [-352, 256, 576],
        [-352, 288, -576],
        [-352, 288, 576],
        [-352, 320, -576],
        [-352, 320, 576],
        [-352, 352, -576],
        [-352, 352, 576],
        [-352, 384, -576],
        [-352, 384, 576],
        [-352, 416, -576],
        [-352, 416, 576],
        [-352, 448, -576],
        [-352, 448, 576],
        [-352, 480, -576],
        [-352, 480, 576],
        [-352, 512, -576],
        [-352, 512, 576],
        [-352, 544, -576],
        [-352, 544, 576],
        [-352, 576, -576],
        [-352, 576, 576],
        [-352, -576, -544],
        [-352, 576, -544],
        [-352, -576, -512],
        [-352, 576, -512],
        [-352, -576, -480],
        [-352, 576, -480],
        [-352, -576, -448],
        [-352, 576, -448],
        [-352, -576, -416],
        [-352, 576, -416],
        [-352, -576, -384],
        [-352, 576, -384],
        [-352, -576, -352],
        [-352, 576, -352],
        [-352, -576, -320],
        [-352, 576, -320],
        [-352, -576, -288],
        [-352, 576, -288],
        [-352, -576, -256],
        [-352, 576, -256],
        [-352, -576, -224],
        [-352, 576, -224],
        [-352, -576, -192],
        [-352, 576, -192],
        [-352, -576, -160],
        [-352, 576, -160],
        [-352, -576, -128],
        [-352, 576, -128],
        [-352, -576, -96],
        [-352, 576, -96],
        [-352, -576, -64],
        [-352, 576, -64],
        [-352, -576, -32],
        [-352, 576, -32],
        [-352, -576, 0],
        [-352, 576, 0],
        [-352, -576, 32],
        [-352, 576, 32],
        [-352, -576, 64],
        [-352, 576, 64],
        [-352, -576, 96],
        [-352, 576, 96],
        [-352, -576, 128],
        [-352, 576, 128],
        [-352, -576, 160],
        [-352, 576, 160],
        [-352, -576, 192],
        [-352, 576, 192],
        [-352, -576, 224],
        [-352, 576, 224],
        [-352, -576, 256],
        [-352, 576, 256],
        [-352, -576, 288],
        [-352, 576, 288],
        [-352, -576, 320],
        [-352, 576, 320],
        [-352, -576, 352],
        [-352, 576, 352],
        [-352, -576, 384],
        [-352, 576, 384],
        [-352, -576, 416],
        [-352, 576, 416],
        [-352, -576, 448],
        [-352, 576, 448],
        [-352, -576, 480],
        [-352, 576, 480],
        [-352, -576, 512],
        [-352, 576, 512],
        [-352, -576, 544],
        [-352, 576, 544],
        [-320, -576, -576],
        [-320, -576, 576],
        [-320, -544, -576],
        [-320, -544, 576],
        [-320, -512, -576],
        [-320, -512, 576],
        [-320, -480, -576],
        [-320, -480, 576],
        [-320, -448, -576],
        [-320, -448, 576],
        [-320, -416, -576],
        [-320, -416, 576],
        [-320, -384, -576],
        [-320, -384, 576],
        [-320, -352, -576],
        [-320, -352, 576],
        [-320, -320, -576],
        [-320, -320, 576],
        [-320, -288, -576],
        [-320, -288, 576],
        [-320, -256, -576],
        [-320, -256, 576],
        [-320, -224, -576],
        [-320, -224, 576],
        [-320, -192, -576],
        [-320, -192, 576],
        [-320, -160, -576],
        [-320, -160, 576],
        [-320, -128, -576],
        [-320, -128, 576],
        [-320, -96, -576],
        [-320, -96, 576],
        [-320, -64, -576],
        [-320, -64, 576],
        [-320, -32, -576],
        [-320, -32, 576],
        [-320, 0, -576],
        [-320, 0, 576],
        [-320, 32, -576],
        [-320, 32, 576],
        [-320, 64, -576],
        [-320, 64, 576],
        [-320, 96, -576],
        [-320, 96, 576],
        [-320, 128, -576],
        [-320, 128, 576],
        [-320, 160, -576],
        [-320, 160, 576],
        [-320, 192, -576],
        [-320, 192, 576],
        [-320, 224, -576],
        [-320, 224, 576],
        [-320, 256, -576],
        [-320, 256, 576],
        [-320, 288, -576],
        [-320, 288, 576],
        [-320, 320, -576],
        [-320, 320, 576],
        [-320, 352, -576],
        [-320, 352, 576],
        [-320, 384, -576],
        [-320, 384, 576],
        [-320, 416, -576],
        [-320, 416, 576],
        [-320, 448, -576],
        [-320, 448, 576],
        [-320, 480, -576],
        [-320, 480, 576],
        [-320, 512, -576],
        [-320, 512, 576],
        [-320, 544, -576],
        [-320, 544, 576],
        [-320, 576, -576],
        [-320, 576, 576],
        [-320, -576, -544],
        [-320, 576, -544],
        [-320, -576, -512],
        [-320, 576, -512],
        [-320, -576, -480],
        [-320, 576, -480],
        [-320, -576, -448],
        [-320, 576, -448],
        [-320, -576, -416],
        [-320, 576, -416],
        [-320, -576, -384],
        [-320, 576, -384],
        [-320, -576, -352],
        [-320, 576, -352],
        [-320, -576, -320],
        [-320, 576, -320],
        [-320, -576, -288],
        [-320, 576, -288],
        [-320, -576, -256],
        [-320, 576, -256],
        [-320, -576, -224],
        [-320, 576, -224],
        [-320, -576, -192],
        [-320, 576, -192],
        [-320, -576, -160],
        [-320, 576, -160],
        [-320, -576, -128],
        [-320, 576, -128],
        [-320, -576, -96],
        [-320, 576, -96],
        [-320, -576, -64],
        [-320, 576, -64],
        [-320, -576, -32],
        [-320, 576, -32],
        [-320, -576, 0],
        [-320, 576, 0],
        [-320, -576, 32],
        [-320, 576, 32],
        [-320, -576, 64],
        [-320, 576, 64],
        [-320, -576, 96],
        [-320, 576, 96],
        [-320, -576, 128],
        [-320, 576, 128],
        [-320, -576, 160],
        [-320, 576, 160],
        [-320, -576, 192],
        [-320, 576, 192],
        [-320, -576, 224],
        [-320, 576, 224],
        [-320, -576, 256],
        [-320, 576, 256],
        [-320, -576, 288],
        [-320, 576, 288],
        [-320, -576, 320],
        [-320, 576, 320],
        [-320, -576, 352],
        [-320, 576, 352],
        [-320, -576, 384],
        [-320, 576, 384],
        [-320, -576, 416],
        [-320, 576, 416],
        [-320, -576, 448],
        [-320, 576, 448],
        [-320, -576, 480],
        [-320, 576, 480],
        [-320, -576, 512],
        [-320, 576, 512],
        [-320, -576, 544],
        [-320, 576, 544],
        [-288, -576, -576],
        [-288, -576, 576],
        [-288, -544, -576],
        [-288, -544, 576],
        [-288, -512, -576],
        [-288, -512, 576],
        [-288, -480, -576],
        [-288, -480, 576],
        [-288, -448, -576],
        [-288, -448, 576],
        [-288, -416, -576],
        [-288, -416, 576],
        [-288, -384, -576],
        [-288, -384, 576],
        [-288, -352, -576],
        [-288, -352, 576],
        [-288, -320, -576],
        [-288, -320, 576],
        [-288, -288, -576],
        [-288, -288, 576],
        [-288, -256, -576],
        [-288, -256, 576],
        [-288, -224, -576],
        [-288, -224, 576],
        [-288, -192, -576],
        [-288, -192, 576],
        [-288, -160, -576],
        [-288, -160, 576],
        [-288, -128, -576],
        [-288, -128, 576],
        [-288, -96, -576],
        [-288, -96, 576],
        [-288, -64, -576],
        [-288, -64, 576],
        [-288, -32, -576],
        [-288, -32, 576],
        [-288, 0, -576],
        [-288, 0, 576],
        [-288, 32, -576],
        [-288, 32, 576],
        [-288, 64, -576],
        [-288, 64, 576],
        [-288, 96, -576],
        [-288, 96, 576],
        [-288, 128, -576],
        [-288, 128, 576],
        [-288, 160, -576],
        [-288, 160, 576],
        [-288, 192, -576],
        [-288, 192, 576],
        [-288, 224, -576],
        [-288, 224, 576],
        [-288, 256, -576],
        [-288, 256, 576],
        [-288, 288, -576],
        [-288, 288, 576],
        [-288, 320, -576],
        [-288, 320, 576],
        [-288, 352, -576],
        [-288, 352, 576],
        [-288, 384, -576],
        [-288, 384, 576],
        [-288, 416, -576],
        [-288, 416, 576],
        [-288, 448, -576],
        [-288, 448, 576],
        [-288, 480, -576],
        [-288, 480, 576],
        [-288, 512, -576],
        [-288, 512, 576],
        [-288, 544, -576],
        [-288, 544, 576],
        [-288, 576, -576],
        [-288, 576, 576],
        [-288, -576, -544],
        [-288, 576, -544],
        [-288, -576, -512],
        [-288, 576, -512],
        [-288, -576, -480],
        [-288, 576, -480],
        [-288, -576, -448],
        [-288, 576, -448],
        [-288, -576, -416],
        [-288, 576, -416],
        [-288, -576, -384],
        [-288, 576, -384],
        [-288, -576, -352],
        [-288, 576, -352],
        [-288, -576, -320],
        [-288, 576, -320],
        [-288, -576, -288],
        [-288, 576, -288],
        [-288, -576, -256],
        [-288, 576, -256],
        [-288, -576, -224],
        [-288, 576, -224],
        [-288, -576, -192],
        [-288, 576, -192],
        [-288, -576, -160],
        [-288, 576, -160],
        [-288, -576, -128],
        [-288, 576, -128],
        [-288, -576, -96],
        [-288, 576, -96],
        [-288, -576, -64],
        [-288, 576, -64],
        [-288, -576, -32],
        [-288, 576, -32],
        [-288, -576, 0],
        [-288, 576, 0],
        [-288, -576, 32],
        [-288, 576, 32],
        [-288, -576, 64],
        [-288, 576, 64],
        [-288, -576, 96],
        [-288, 576, 96],
        [-288, -576, 128],
        [-288, 576, 128],
        [-288, -576, 160],
        [-288, 576, 160],
        [-288, -576, 192],
        [-288, 576, 192],
        [-288, -576, 224],
        [-288, 576, 224],
        [-288, -576, 256],
        [-288, 576, 256],
        [-288, -576, 288],
        [-288, 576, 288],
        [-288, -576, 320],
        [-288, 576, 320],
        [-288, -576, 352],
        [-288, 576, 352],
        [-288, -576, 384],
        [-288, 576, 384],
        [-288, -576, 416],
        [-288, 576, 416],
        [-288, -576, 448],
        [-288, 576, 448],
        [-288, -576, 480],
        [-288, 576, 480],
        [-288, -576, 512],
        [-288, 576, 512],
        [-288, -576, 544],
        [-288, 576, 544],
        [-256, -576, -576],
        [-256, -576, 576],
        [-256, -544, -576],
        [-256, -544, 576],
        [-256, -512, -576],
        [-256, -512, 576],
        [-256, -480, -576],
        [-256, -480, 576],
        [-256, -448, -576],
        [-256, -448, 576],
        [-256, -416, -576],
        [-256, -416, 576],
        [-256, -384, -576],
        [-256, -384, 576],
        [-256, -352, -576],
        [-256, -352, 576],
        [-256, -320, -576],
        [-256, -320, 576],
        [-256, -288, -576],
        [-256, -288, 576],
        [-256, -256, -576],
        [-256, -256, 576],
        [-256, -224, -576],
        [-256, -224, 576],
        [-256, -192, -576],
        [-256, -192, 576],
        [-256, -160, -576],
        [-256, -160, 576],
        [-256, -128, -576],
        [-256, -128, 576],
        [-256, -96, -576],
        [-256, -96, 576],
        [-256, -64, -576],
        [-256, -64, 576],
        [-256, -32, -576],
        [-256, -32, 576],
        [-256, 0, -576],
        [-256, 0, 576],
        [-256, 32, -576],
        [-256, 32, 576],
        [-256, 64, -576],
        [-256, 64, 576],
        [-256, 96, -576],
        [-256, 96, 576],
        [-256, 128, -576],
        [-256, 128, 576],
        [-256, 160, -576],
        [-256, 160, 576],
        [-256, 192, -576],
        [-256, 192, 576],
        [-256, 224, -576],
        [-256, 224, 576],
        [-256, 256, -576],
        [-256, 256, 576],
        [-256, 288, -576],
        [-256, 288, 576],
        [-256, 320, -576],
        [-256, 320, 576],
        [-256, 352, -576],
        [-256, 352, 576],
        [-256, 384, -576],
        [-256, 384, 576],
        [-256, 416, -576],
        [-256, 416, 576],
        [-256, 448, -576],
        [-256, 448, 576],
        [-256, 480, -576],
        [-256, 480, 576],
        [-256, 512, -576],
        [-256, 512, 576],
        [-256, 544, -576],
        [-256, 544, 576],
        [-256, 576, -576],
        [-256, 576, 576],
        [-256, -576, -544],
        [-256, 576, -544],
        [-256, -576, -512],
        [-256, 576, -512],
        [-256, -576, -480],
        [-256, 576, -480],
        [-256, -576, -448],
        [-256, 576, -448],
        [-256, -576, -416],
        [-256, 576, -416],
        [-256, -576, -384],
        [-256, 576, -384],
        [-256, -576, -352],
        [-256, 576, -352],
        [-256, -576, -320],
        [-256, 576, -320],
        [-256, -576, -288],
        [-256, 576, -288],
        [-256, -576, -256],
        [-256, 576, -256],
        [-256, -576, -224],
        [-256, 576, -224],
        [-256, -576, -192],
        [-256, 576, -192],
        [-256, -576, -160],
        [-256, 576, -160],
        [-256, -576, -128],
        [-256, 576, -128],
        [-256, -576, -96],
        [-256, 576, -96],
        [-256, -576, -64],
        [-256, 576, -64],
        [-256, -576, -32],
        [-256, 576, -32],
        [-256, -576, 0],
        [-256, 576, 0],
        [-256, -576, 32],
        [-256, 576, 32],
        [-256, -576, 64],
        [-256, 576, 64],
        [-256, -576, 96],
        [-256, 576, 96],
        [-256, -576, 128],
        [-256, 576, 128],
        [-256, -576, 160],
        [-256, 576, 160],
        [-256, -576, 192],
        [-256, 576, 192],
        [-256, -576, 224],
        [-256, 576, 224],
        [-256, -576, 256],
        [-256, 576, 256],
        [-256, -576, 288],
        [-256, 576, 288],
        [-256, -576, 320],
        [-256, 576, 320],
        [-256, -576, 352],
        [-256, 576, 352],
        [-256, -576, 384],
        [-256, 576, 384],
        [-256, -576, 416],
        [-256, 576, 416],
        [-256, -576, 448],
        [-256, 576, 448],
        [-256, -576, 480],
        [-256, 576, 480],
        [-256, -576, 512],
        [-256, 576, 512],
        [-256, -576, 544],
        [-256, 576, 544],
        [-224, -576, -576],
        [-224, -576, 576],
        [-224, -544, -576],
        [-224, -544, 576],
        [-224, -512, -576],
        [-224, -512, 576],
        [-224, -480, -576],
        [-224, -480, 576],
        [-224, -448, -576],
        [-224, -448, 576],
        [-224, -416, -576],
        [-224, -416, 576],
        [-224, -384, -576],
        [-224, -384, 576],
        [-224, -352, -576],
        [-224, -352, 576],
        [-224, -320, -576],
        [-224, -320, 576],
        [-224, -288, -576],
        [-224, -288, 576],
        [-224, -256, -576],
        [-224, -256, 576],
        [-224, -224, -576],
        [-224, -224, 576],
        [-224, -192, -576],
        [-224, -192, 576],
        [-224, -160, -576],
        [-224, -160, 576],
        [-224, -128, -576],
        [-224, -128, 576],
        [-224, -96, -576],
        [-224, -96, 576],
        [-224, -64, -576],
        [-224, -64, 576],
        [-224, -32, -576],
        [-224, -32, 576],
        [-224, 0, -576],
        [-224, 0, 576],
        [-224, 32, -576],
        [-224, 32, 576],
        [-224, 64, -576],
        [-224, 64, 576],
        [-224, 96, -576],
        [-224, 96, 576],
        [-224, 128, -576],
        [-224, 128, 576],
        [-224, 160, -576],
        [-224, 160, 576],
        [-224, 192, -576],
        [-224, 192, 576],
        [-224, 224, -576],
        [-224, 224, 576],
        [-224, 256, -576],
        [-224, 256, 576],
        [-224, 288, -576],
        [-224, 288, 576],
        [-224, 320, -576],
        [-224, 320, 576],
        [-224, 352, -576],
        [-224, 352, 576],
        [-224, 384, -576],
        [-224, 384, 576],
        [-224, 416, -576],
        [-224, 416, 576],
        [-224, 448, -576],
        [-224, 448, 576],
        [-224, 480, -576],
        [-224, 480, 576],
        [-224, 512, -576],
        [-224, 512, 576],
        [-224, 544, -576],
        [-224, 544, 576],
        [-224, 576, -576],
        [-224, 576, 576],
        [-224, -576, -544],
        [-224, 576, -544],
        [-224, -576, -512],
        [-224, 576, -512],
        [-224, -576, -480],
        [-224, 576, -480],
        [-224, -576, -448],
        [-224, 576, -448],
        [-224, -576, -416],
        [-224, 576, -416],
        [-224, -576, -384],
        [-224, 576, -384],
        [-224, -576, -352],
        [-224, 576, -352],
        [-224, -576, -320],
        [-224, 576, -320],
        [-224, -576, -288],
        [-224, 576, -288],
        [-224, -576, -256],
        [-224, 576, -256],
        [-224, -576, -224],
        [-224, 576, -224],
        [-224, -576, -192],
        [-224, 576, -192],
        [-224, -576, -160],
        [-224, 576, -160],
        [-224, -576, -128],
        [-224, 576, -128],
        [-224, -576, -96],
        [-224, 576, -96],
        [-224, -576, -64],
        [-224, 576, -64],
        [-224, -576, -32],
        [-224, 576, -32],
        [-224, -576, 0],
        [-224, 576, 0],
        [-224, -576, 32],
        [-224, 576, 32],
        [-224, -576, 64],
        [-224, 576, 64],
        [-224, -576, 96],
        [-224, 576, 96],
        [-224, -576, 128],
        [-224, 576, 128],
        [-224, -576, 160],
        [-224, 576, 160],
        [-224, -576, 192],
        [-224, 576, 192],
        [-224, -576, 224],
        [-224, 576, 224],
        [-224, -576, 256],
        [-224, 576, 256],
        [-224, -576, 288],
        [-224, 576, 288],
        [-224, -576, 320],
        [-224, 576, 320],
        [-224, -576, 352],
        [-224, 576, 352],
        [-224, -576, 384],
        [-224, 576, 384],
        [-224, -576, 416],
        [-224, 576, 416],
        [-224, -576, 448],
        [-224, 576, 448],
        [-224, -576, 480],
        [-224, 576, 480],
        [-224, -576, 512],
        [-224, 576, 512],
        [-224, -576, 544],
        [-224, 576, 544],
        [-192, -576, -576],
        [-192, -576, 576],
        [-192, -544, -576],
        [-192, -544, 576],
        [-192, -512, -576],
        [-192, -512, 576],
        [-192, -480, -576],
        [-192, -480, 576],
        [-192, -448, -576],
        [-192, -448, 576],
        [-192, -416, -576],
        [-192, -416, 576],
        [-192, -384, -576],
        [-192, -384, 576],
        [-192, -352, -576],
        [-192, -352, 576],
        [-192, -320, -576],
        [-192, -320, 576],
        [-192, -288, -576],
        [-192, -288, 576],
        [-192, -256, -576],
        [-192, -256, 576],
        [-192, -224, -576],
        [-192, -224, 576],
        [-192, -192, -576],
        [-192, -192, 576],
        [-192, -160, -576],
        [-192, -160, 576],
        [-192, -128, -576],
        [-192, -128, 576],
        [-192, -96, -576],
        [-192, -96, 576],
        [-192, -64, -576],
        [-192, -64, 576],
        [-192, -32, -576],
        [-192, -32, 576],
        [-192, 0, -576],
        [-192, 0, 576],
        [-192, 32, -576],
        [-192, 32, 576],
        [-192, 64, -576],
        [-192, 64, 576],
        [-192, 96, -576],
        [-192, 96, 576],
        [-192, 128, -576],
        [-192, 128, 576],
        [-192, 160, -576],
        [-192, 160, 576],
        [-192, 192, -576],
        [-192, 192, 576],
        [-192, 224, -576],
        [-192, 224, 576],
        [-192, 256, -576],
        [-192, 256, 576],
        [-192, 288, -576],
        [-192, 288, 576],
        [-192, 320, -576],
        [-192, 320, 576],
        [-192, 352, -576],
        [-192, 352, 576],
        [-192, 384, -576],
        [-192, 384, 576],
        [-192, 416, -576],
        [-192, 416, 576],
        [-192, 448, -576],
        [-192, 448, 576],
        [-192, 480, -576],
        [-192, 480, 576],
        [-192, 512, -576],
        [-192, 512, 576],
        [-192, 544, -576],
        [-192, 544, 576],
        [-192, 576, -576],
        [-192, 576, 576],
        [-192, -576, -544],
        [-192, 576, -544],
        [-192, -576, -512],
        [-192, 576, -512],
        [-192, -576, -480],
        [-192, 576, -480],
        [-192, -576, -448],
        [-192, 576, -448],
        [-192, -576, -416],
        [-192, 576, -416],
        [-192, -576, -384],
        [-192, 576, -384],
        [-192, -576, -352],
        [-192, 576, -352],
        [-192, -576, -320],
        [-192, 576, -320],
        [-192, -576, -288],
        [-192, 576, -288],
        [-192, -576, -256],
        [-192, 576, -256],
        [-192, -576, -224],
        [-192, 576, -224],
        [-192, -576, -192],
        [-192, 576, -192],
        [-192, -576, -160],
        [-192, 576, -160],
        [-192, -576, -128],
        [-192, 576, -128],
        [-192, -576, -96],
        [-192, 576, -96],
        [-192, -576, -64],
        [-192, 576, -64],
        [-192, -576, -32],
        [-192, 576, -32],
        [-192, -576, 0],
        [-192, 576, 0],
        [-192, -576, 32],
        [-192, 576, 32],
        [-192, -576, 64],
        [-192, 576, 64],
        [-192, -576, 96],
        [-192, 576, 96],
        [-192, -576, 128],
        [-192, 576, 128],
        [-192, -576, 160],
        [-192, 576, 160],
        [-192, -576, 192],
        [-192, 576, 192],
        [-192, -576, 224],
        [-192, 576, 224],
        [-192, -576, 256],
        [-192, 576, 256],
        [-192, -576, 288],
        [-192, 576, 288],
        [-192, -576, 320],
        [-192, 576, 320],
        [-192, -576, 352],
        [-192, 576, 352],
        [-192, -576, 384],
        [-192, 576, 384],
        [-192, -576, 416],
        [-192, 576, 416],
        [-192, -576, 448],
        [-192, 576, 448],
        [-192, -576, 480],
        [-192, 576, 480],
        [-192, -576, 512],
        [-192, 576, 512],
        [-192, -576, 544],
        [-192, 576, 544],
        [-160, -576, -576],
        [-160, -576, 576],
        [-160, -544, -576],
        [-160, -544, 576],
        [-160, -512, -576],
        [-160, -512, 576],
        [-160, -480, -576],
        [-160, -480, 576],
        [-160, -448, -576],
        [-160, -448, 576],
        [-160, -416, -576],
        [-160, -416, 576],
        [-160, -384, -576],
        [-160, -384, 576],
        [-160, -352, -576],
        [-160, -352, 576],
        [-160, -320, -576],
        [-160, -320, 576],
        [-160, -288, -576],
        [-160, -288, 576],
        [-160, -256, -576],
        [-160, -256, 576],
        [-160, -224, -576],
        [-160, -224, 576],
        [-160, -192, -576],
        [-160, -192, 576],
        [-160, -160, -576],
        [-160, -160, 576],
        [-160, -128, -576],
        [-160, -128, 576],
        [-160, -96, -576],
        [-160, -96, 576],
        [-160, -64, -576],
        [-160, -64, 576],
        [-160, -32, -576],
        [-160, -32, 576],
        [-160, 0, -576],
        [-160, 0, 576],
        [-160, 32, -576],
        [-160, 32, 576],
        [-160, 64, -576],
        [-160, 64, 576],
        [-160, 96, -576],
        [-160, 96, 576],
        [-160, 128, -576],
        [-160, 128, 576],
        [-160, 160, -576],
        [-160, 160, 576],
        [-160, 192, -576],
        [-160, 192, 576],
        [-160, 224, -576],
        [-160, 224, 576],
        [-160, 256, -576],
        [-160, 256, 576],
        [-160, 288, -576],
        [-160, 288, 576],
        [-160, 320, -576],
        [-160, 320, 576],
        [-160, 352, -576],
        [-160, 352, 576],
        [-160, 384, -576],
        [-160, 384, 576],
        [-160, 416, -576],
        [-160, 416, 576],
        [-160, 448, -576],
        [-160, 448, 576],
        [-160, 480, -576],
        [-160, 480, 576],
        [-160, 512, -576],
        [-160, 512, 576],
        [-160, 544, -576],
        [-160, 544, 576],
        [-160, 576, -576],
        [-160, 576, 576],
        [-160, -576, -544],
        [-160, 576, -544],
        [-160, -576, -512],
        [-160, 576, -512],
        [-160, -576, -480],
        [-160, 576, -480],
        [-160, -576, -448],
        [-160, 576, -448],
        [-160, -576, -416],
        [-160, 576, -416],
        [-160, -576, -384],
        [-160, 576, -384],
        [-160, -576, -352],
        [-160, 576, -352],
        [-160, -576, -320],
        [-160, 576, -320],
        [-160, -576, -288],
        [-160, 576, -288],
        [-160, -576, -256],
        [-160, 576, -256],
        [-160, -576, -224],
        [-160, 576, -224],
        [-160, -576, -192],
        [-160, 576, -192],
        [-160, -576, -160],
        [-160, 576, -160],
        [-160, -576, -128],
        [-160, 576, -128],
        [-160, -576, -96],
        [-160, 576, -96],
        [-160, -576, -64],
        [-160, 576, -64],
        [-160, -576, -32],
        [-160, 576, -32],
        [-160, -576, 0],
        [-160, 576, 0],
        [-160, -576, 32],
        [-160, 576, 32],
        [-160, -576, 64],
        [-160, 576, 64],
        [-160, -576, 96],
        [-160, 576, 96],
        [-160, -576, 128],
        [-160, 576, 128],
        [-160, -576, 160],
        [-160, 576, 160],
        [-160, -576, 192],
        [-160, 576, 192],
        [-160, -576, 224],
        [-160, 576, 224],
        [-160, -576, 256],
        [-160, 576, 256],
        [-160, -576, 288],
        [-160, 576, 288],
        [-160, -576, 320],
        [-160, 576, 320],
        [-160, -576, 352],
        [-160, 576, 352],
        [-160, -576, 384],
        [-160, 576, 384],
        [-160, -576, 416],
        [-160, 576, 416],
        [-160, -576, 448],
        [-160, 576, 448],
        [-160, -576, 480],
        [-160, 576, 480],
        [-160, -576, 512],
        [-160, 576, 512],
        [-160, -576, 544],
        [-160, 576, 544],
        [-128, -576, -576],
        [-128, -576, 576],
        [-128, -544, -576],
        [-128, -544, 576],
        [-128, -512, -576],
        [-128, -512, 576],
        [-128, -480, -576],
        [-128, -480, 576],
        [-128, -448, -576],
        [-128, -448, 576],
        [-128, -416, -576],
        [-128, -416, 576],
        [-128, -384, -576],
        [-128, -384, 576],
        [-128, -352, -576],
        [-128, -352, 576],
        [-128, -320, -576],
        [-128, -320, 576],
        [-128, -288, -576],
        [-128, -288, 576],
        [-128, -256, -576],
        [-128, -256, 576],
        [-128, -224, -576],
        [-128, -224, 576],
        [-128, -192, -576],
        [-128, -192, 576],
        [-128, -160, -576],
        [-128, -160, 576],
        [-128, -128, -576],
        [-128, -128, 576],
        [-128, -96, -576],
        [-128, -96, 576],
        [-128, -64, -576],
        [-128, -64, 576],
        [-128, -32, -576],
        [-128, -32, 576],
        [-128, 0, -576],
        [-128, 0, 576],
        [-128, 32, -576],
        [-128, 32, 576],
        [-128, 64, -576],
        [-128, 64, 576],
        [-128, 96, -576],
        [-128, 96, 576],
        [-128, 128, -576],
        [-128, 128, 576],
        [-128, 160, -576],
        [-128, 160, 576],
        [-128, 192, -576],
        [-128, 192, 576],
        [-128, 224, -576],
        [-128, 224, 576],
        [-128, 256, -576],
        [-128, 256, 576],
        [-128, 288, -576],
        [-128, 288, 576],
        [-128, 320, -576],
        [-128, 320, 576],
        [-128, 352, -576],
        [-128, 352, 576],
        [-128, 384, -576],
        [-128, 384, 576],
        [-128, 416, -576],
        [-128, 416, 576],
        [-128, 448, -576],
        [-128, 448, 576],
        [-128, 480, -576],
        [-128, 480, 576],
        [-128, 512, -576],
        [-128, 512, 576],
        [-128, 544, -576],
        [-128, 544, 576],
        [-128, 576, -576],
        [-128, 576, 576],
        [-128, -576, -544],
        [-128, 576, -544],
        [-128, -576, -512],
        [-128, 576, -512],
        [-128, -576, -480],
        [-128, 576, -480],
        [-128, -576, -448],
        [-128, 576, -448],
        [-128, -576, -416],
        [-128, 576, -416],
        [-128, -576, -384],
        [-128, 576, -384],
        [-128, -576, -352],
        [-128, 576, -352],
        [-128, -576, -320],
        [-128, 576, -320],
        [-128, -576, -288],
        [-128, 576, -288],
        [-128, -576, -256],
        [-128, 576, -256],
        [-128, -576, -224],
        [-128, 576, -224],
        [-128, -576, -192],
        [-128, 576, -192],
        [-128, -576, -160],
        [-128, 576, -160],
        [-128, -576, -128],
        [-128, 576, -128],
        [-128, -576, -96],
        [-128, 576, -96],
        [-128, -576, -64],
        [-128, 576, -64],
        [-128, -576, -32],
        [-128, 576, -32],
        [-128, -576, 0],
        [-128, 576, 0],
        [-128, -576, 32],
        [-128, 576, 32],
        [-128, -576, 64],
        [-128, 576, 64],
        [-128, -576, 96],
        [-128, 576, 96],
        [-128, -576, 128],
        [-128, 576, 128],
        [-128, -576, 160],
        [-128, 576, 160],
        [-128, -576, 192],
        [-128, 576, 192],
        [-128, -576, 224],
        [-128, 576, 224],
        [-128, -576, 256],
        [-128, 576, 256],
        [-128, -576, 288],
        [-128, 576, 288],
        [-128, -576, 320],
        [-128, 576, 320],
        [-128, -576, 352],
        [-128, 576, 352],
        [-128, -576, 384],
        [-128, 576, 384],
        [-128, -576, 416],
        [-128, 576, 416],
        [-128, -576, 448],
        [-128, 576, 448],
        [-128, -576, 480],
        [-128, 576, 480],
        [-128, -576, 512],
        [-128, 576, 512],
        [-128, -576, 544],
        [-128, 576, 544],
        [-96, -576, -576],
        [-96, -576, 576],
        [-96, -544, -576],
        [-96, -544, 576],
        [-96, -512, -576],
        [-96, -512, 576],
        [-96, -480, -576],
        [-96, -480, 576],
        [-96, -448, -576],
        [-96, -448, 576],
        [-96, -416, -576],
        [-96, -416, 576],
        [-96, -384, -576],
        [-96, -384, 576],
        [-96, -352, -576],
        [-96, -352, 576],
        [-96, -320, -576],
        [-96, -320, 576],
        [-96, -288, -576],
        [-96, -288, 576],
        [-96, -256, -576],
        [-96, -256, 576],
        [-96, -224, -576],
        [-96, -224, 576],
        [-96, -192, -576],
        [-96, -192, 576],
        [-96, -160, -576],
        [-96, -160, 576],
        [-96, -128, -576],
        [-96, -128, 576],
        [-96, -96, -576],
        [-96, -96, 576],
        [-96, -64, -576],
        [-96, -64, 576],
        [-96, -32, -576],
        [-96, -32, 576],
        [-96, 0, -576],
        [-96, 0, 576],
        [-96, 32, -576],
        [-96, 32, 576],
        [-96, 64, -576],
        [-96, 64, 576],
        [-96, 96, -576],
        [-96, 96, 576],
        [-96, 128, -576],
        [-96, 128, 576],
        [-96, 160, -576],
        [-96, 160, 576],
        [-96, 192, -576],
        [-96, 192, 576],
        [-96, 224, -576],
        [-96, 224, 576],
        [-96, 256, -576],
        [-96, 256, 576],
        [-96, 288, -576],
        [-96, 288, 576],
        [-96, 320, -576],
        [-96, 320, 576],
        [-96, 352, -576],
        [-96, 352, 576],
        [-96, 384, -576],
        [-96, 384, 576],
        [-96, 416, -576],
        [-96, 416, 576],
        [-96, 448, -576],
        [-96, 448, 576],
        [-96, 480, -576],
        [-96, 480, 576],
        [-96, 512, -576],
        [-96, 512, 576],
        [-96, 544, -576],
        [-96, 544, 576],
        [-96, 576, -576],
        [-96, 576, 576],
        [-96, -576, -544],
        [-96, 576, -544],
        [-96, -576, -512],
        [-96, 576, -512],
        [-96, -576, -480],
        [-96, 576, -480],
        [-96, -576, -448],
        [-96, 576, -448],
        [-96, -576, -416],
        [-96, 576, -416],
        [-96, -576, -384],
        [-96, 576, -384],
        [-96, -576, -352],
        [-96, 576, -352],
        [-96, -576, -320],
        [-96, 576, -320],
        [-96, -576, -288],
        [-96, 576, -288],
        [-96, -576, -256],
        [-96, 576, -256],
        [-96, -576, -224],
        [-96, 576, -224],
        [-96, -576, -192],
        [-96, 576, -192],
        [-96, -576, -160],
        [-96, 576, -160],
        [-96, -576, -128],
        [-96, 576, -128],
        [-96, -576, -96],
        [-96, 576, -96],
        [-96, -576, -64],
        [-96, 576, -64],
        [-96, -576, -32],
        [-96, 576, -32],
        [-96, -576, 0],
        [-96, 576, 0],
        [-96, -576, 32],
        [-96, 576, 32],
        [-96, -576, 64],
        [-96, 576, 64],
        [-96, -576, 96],
        [-96, 576, 96],
        [-96, -576, 128],
        [-96, 576, 128],
        [-96, -576, 160],
        [-96, 576, 160],
        [-96, -576, 192],
        [-96, 576, 192],
        [-96, -576, 224],
        [-96, 576, 224],
        [-96, -576, 256],
        [-96, 576, 256],
        [-96, -576, 288],
        [-96, 576, 288],
        [-96, -576, 320],
        [-96, 576, 320],
        [-96, -576, 352],
        [-96, 576, 352],
        [-96, -576, 384],
        [-96, 576, 384],
        [-96, -576, 416],
        [-96, 576, 416],
        [-96, -576, 448],
        [-96, 576, 448],
        [-96, -576, 480],
        [-96, 576, 480],
        [-96, -576, 512],
        [-96, 576, 512],
        [-96, -576, 544],
        [-96, 576, 544],
        [-64, -576, -576],
        [-64, -576, 576],
        [-64, -544, -576],
        [-64, -544, 576],
        [-64, -512, -576],
        [-64, -512, 576],
        [-64, -480, -576],
        [-64, -480, 576],
        [-64, -448, -576],
        [-64, -448, 576],
        [-64, -416, -576],
        [-64, -416, 576],
        [-64, -384, -576],
        [-64, -384, 576],
        [-64, -352, -576],
        [-64, -352, 576],
        [-64, -320, -576],
        [-64, -320, 576],
        [-64, -288, -576],
        [-64, -288, 576],
        [-64, -256, -576],
        [-64, -256, 576],
        [-64, -224, -576],
        [-64, -224, 576],
        [-64, -192, -576],
        [-64, -192, 576],
        [-64, -160, -576],
        [-64, -160, 576],
        [-64, -128, -576],
        [-64, -128, 576],
        [-64, -96, -576],
        [-64, -96, 576],
        [-64, -64, -576],
        [-64, -64, 576],
        [-64, -32, -576],
        [-64, -32, 576],
        [-64, 0, -576],
        [-64, 0, 576],
        [-64, 32, -576],
        [-64, 32, 576],
        [-64, 64, -576],
        [-64, 64, 576],
        [-64, 96, -576],
        [-64, 96, 576],
        [-64, 128, -576],
        [-64, 128, 576],
        [-64, 160, -576],
        [-64, 160, 576],
        [-64, 192, -576],
        [-64, 192, 576],
        [-64, 224, -576],
        [-64, 224, 576],
        [-64, 256, -576],
        [-64, 256, 576],
        [-64, 288, -576],
        [-64, 288, 576],
        [-64, 320, -576],
        [-64, 320, 576],
        [-64, 352, -576],
        [-64, 352, 576],
        [-64, 384, -576],
        [-64, 384, 576],
        [-64, 416, -576],
        [-64, 416, 576],
        [-64, 448, -576],
        [-64, 448, 576],
        [-64, 480, -576],
        [-64, 480, 576],
        [-64, 512, -576],
        [-64, 512, 576],
        [-64, 544, -576],
        [-64, 544, 576],
        [-64, 576, -576],
        [-64, 576, 576],
        [-64, -576, -544],
        [-64, 576, -544],
        [-64, -576, -512],
        [-64, 576, -512],
        [-64, -576, -480],
        [-64, 576, -480],
        [-64, -576, -448],
        [-64, 576, -448],
        [-64, -576, -416],
        [-64, 576, -416],
        [-64, -576, -384],
        [-64, 576, -384],
        [-64, -576, -352],
        [-64, 576, -352],
        [-64, -576, -320],
        [-64, 576, -320],
        [-64, -576, -288],
        [-64, 576, -288],
        [-64, -576, -256],
        [-64, 576, -256],
        [-64, -576, -224],
        [-64, 576, -224],
        [-64, -576, -192],
        [-64, 576, -192],
        [-64, -576, -160],
        [-64, 576, -160],
        [-64, -576, -128],
        [-64, 576, -128],
        [-64, -576, -96],
        [-64, 576, -96],
        [-64, -576, -64],
        [-64, 576, -64],
        [-64, -576, -32],
        [-64, 576, -32],
        [-64, -576, 0],
        [-64, 576, 0],
        [-64, -576, 32],
        [-64, 576, 32],
        [-64, -576, 64],
        [-64, 576, 64],
        [-64, -576, 96],
        [-64, 576, 96],
        [-64, -576, 128],
        [-64, 576, 128],
        [-64, -576, 160],
        [-64, 576, 160],
        [-64, -576, 192],
        [-64, 576, 192],
        [-64, -576, 224],
        [-64, 576, 224],
        [-64, -576, 256],
        [-64, 576, 256],
        [-64, -576, 288],
        [-64, 576, 288],
        [-64, -576, 320],
        [-64, 576, 320],
        [-64, -576, 352],
        [-64, 576, 352],
        [-64, -576, 384],
        [-64, 576, 384],
        [-64, -576, 416],
        [-64, 576, 416],
        [-64, -576, 448],
        [-64, 576, 448],
        [-64, -576, 480],
        [-64, 576, 480],
        [-64, -576, 512],
        [-64, 576, 512],
        [-64, -576, 544],
        [-64, 576, 544],
        [-32, -576, -576],
        [-32, -576, 576],
        [-32, -544, -576],
        [-32, -544, 576],
        [-32, -512, -576],
        [-32, -512, 576],
        [-32, -480, -576],
        [-32, -480, 576],
        [-32, -448, -576],
        [-32, -448, 576],
        [-32, -416, -576],
        [-32, -416, 576],
        [-32, -384, -576],
        [-32, -384, 576],
        [-32, -352, -576],
        [-32, -352, 576],
        [-32, -320, -576],
        [-32, -320, 576],
        [-32, -288, -576],
        [-32, -288, 576],
        [-32, -256, -576],
        [-32, -256, 576],
        [-32, -224, -576],
        [-32, -224, 576],
        [-32, -192, -576],
        [-32, -192, 576],
        [-32, -160, -576],
        [-32, -160, 576],
        [-32, -128, -576],
        [-32, -128, 576],
        [-32, -96, -576],
        [-32, -96, 576],
        [-32, -64, -576],
        [-32, -64, 576],
        [-32, -32, -576],
        [-32, -32, 576],
        [-32, 0, -576],
        [-32, 0, 576],
        [-32, 32, -576],
        [-32, 32, 576],
        [-32, 64, -576],
        [-32, 64, 576],
        [-32, 96, -576],
        [-32, 96, 576],
        [-32, 128, -576],
        [-32, 128, 576],
        [-32, 160, -576],
        [-32, 160, 576],
        [-32, 192, -576],
        [-32, 192, 576],
        [-32, 224, -576],
        [-32, 224, 576],
        [-32, 256, -576],
        [-32, 256, 576],
        [-32, 288, -576],
        [-32, 288, 576],
        [-32, 320, -576],
        [-32, 320, 576],
        [-32, 352, -576],
        [-32, 352, 576],
        [-32, 384, -576],
        [-32, 384, 576],
        [-32, 416, -576],
        [-32, 416, 576],
        [-32, 448, -576],
        [-32, 448, 576],
        [-32, 480, -576],
        [-32, 480, 576],
        [-32, 512, -576],
        [-32, 512, 576],
        [-32, 544, -576],
        [-32, 544, 576],
        [-32, 576, -576],
        [-32, 576, 576],
        [-32, -576, -544],
        [-32, 576, -544],
        [-32, -576, -512],
        [-32, 576, -512],
        [-32, -576, -480],
        [-32, 576, -480],
        [-32, -576, -448],
        [-32, 576, -448],
        [-32, -576, -416],
        [-32, 576, -416],
        [-32, -576, -384],
        [-32, 576, -384],
        [-32, -576, -352],
        [-32, 576, -352],
        [-32, -576, -320],
        [-32, 576, -320],
        [-32, -576, -288],
        [-32, 576, -288],
        [-32, -576, -256],
        [-32, 576, -256],
        [-32, -576, -224],
        [-32, 576, -224],
        [-32, -576, -192],
        [-32, 576, -192],
        [-32, -576, -160],
        [-32, 576, -160],
        [-32, -576, -128],
        [-32, 576, -128],
        [-32, -576, -96],
        [-32, 576, -96],
        [-32, -576, -64],
        [-32, 576, -64],
        [-32, -576, -32],
        [-32, 576, -32],
        [-32, -576, 0],
        [-32, 576, 0],
        [-32, -576, 32],
        [-32, 576, 32],
        [-32, -576, 64],
        [-32, 576, 64],
        [-32, -576, 96],
        [-32, 576, 96],
        [-32, -576, 128],
        [-32, 576, 128],
        [-32, -576, 160],
        [-32, 576, 160],
        [-32, -576, 192],
        [-32, 576, 192],
        [-32, -576, 224],
        [-32, 576, 224],
        [-32, -576, 256],
        [-32, 576, 256],
        [-32, -576, 288],
        [-32, 576, 288],
        [-32, -576, 320],
        [-32, 576, 320],
        [-32, -576, 352],
        [-32, 576, 352],
        [-32, -576, 384],
        [-32, 576, 384],
        [-32, -576, 416],
        [-32, 576, 416],
        [-32, -576, 448],
        [-32, 576, 448],
        [-32, -576, 480],
        [-32, 576, 480],
        [-32, -576, 512],
        [-32, 576, 512],
        [-32, -576, 544],
        [-32, 576, 544],
        [0, -576, -576],
        [0, -576, 576],
        [0, -544, -576],
        [0, -544, 576],
        [0, -512, -576],
        [0, -512, 576],
        [0, -480, -576],
        [0, -480, 576],
        [0, -448, -576],
        [0, -448, 576],
        [0, -416, -576],
        [0, -416, 576],
        [0, -384, -576],
        [0, -384, 576],
        [0, -352, -576],
        [0, -352, 576],
        [0, -320, -576],
        [0, -320, 576],
        [0, -288, -576],
        [0, -288, 576],
        [0, -256, -576],
        [0, -256, 576],
        [0, -224, -576],
        [0, -224, 576],
        [0, -192, -576],
        [0, -192, 576],
        [0, -160, -576],
        [0, -160, 576],
        [0, -128, -576],
        [0, -128, 576],
        [0, -96, -576],
        [0, -96, 576],
        [0, -64, -576],
        [0, -64, 576],
        [0, -32, -576],
        [0, -32, 576],
        [0, 0, -576],
        [0, 0, 576],
        [0, 32, -576],
        [0, 32, 576],
        [0, 64, -576],
        [0, 64, 576],
        [0, 96, -576],
        [0, 96, 576],
        [0, 128, -576],
        [0, 128, 576],
        [0, 160, -576],
        [0, 160, 576],
        [0, 192, -576],
        [0, 192, 576],
        [0, 224, -576],
        [0, 224, 576],
        [0, 256, -576],
        [0, 256, 576],
        [0, 288, -576],
        [0, 288, 576],
        [0, 320, -576],
        [0, 320, 576],
        [0, 352, -576],
        [0, 352, 576],
        [0, 384, -576],
        [0, 384, 576],
        [0, 416, -576],
        [0, 416, 576],
        [0, 448, -576],
        [0, 448, 576],
        [0, 480, -576],
        [0, 480, 576],
        [0, 512, -576],
        [0, 512, 576],
        [0, 544, -576],
        [0, 544, 576],
        [0, 576, -576],
        [0, 576, 576],
        [0, -576, -544],
        [0, 576, -544],
        [0, -576, -512],
        [0, 576, -512],
        [0, -576, -480],
        [0, 576, -480],
        [0, -576, -448],
        [0, 576, -448],
        [0, -576, -416],
        [0, 576, -416],
        [0, -576, -384],
        [0, 576, -384],
        [0, -576, -352],
        [0, 576, -352],
        [0, -576, -320],
        [0, 576, -320],
        [0, -576, -288],
        [0, 576, -288],
        [0, -576, -256],
        [0, 576, -256],
        [0, -576, -224],
        [0, 576, -224],
        [0, -576, -192],
        [0, 576, -192],
        [0, -576, -160],
        [0, 576, -160],
        [0, -576, -128],
        [0, 576, -128],
        [0, -576, -96],
        [0, 576, -96],
        [0, -576, -64],
        [0, 576, -64],
        [0, -576, -32],
        [0, 576, -32],
        [0, -576, 0],
        [0, 576, 0],
        [0, -576, 32],
        [0, 576, 32],
        [0, -576, 64],
        [0, 576, 64],
        [0, -576, 96],
        [0, 576, 96],
        [0, -576, 128],
        [0, 576, 128],
        [0, -576, 160],
        [0, 576, 160],
        [0, -576, 192],
        [0, 576, 192],
        [0, -576, 224],
        [0, 576, 224],
        [0, -576, 256],
        [0, 576, 256],
        [0, -576, 288],
        [0, 576, 288],
        [0, -576, 320],
        [0, 576, 320],
        [0, -576, 352],
        [0, 576, 352],
        [0, -576, 384],
        [0, 576, 384],
        [0, -576, 416],
        [0, 576, 416],
        [0, -576, 448],
        [0, 576, 448],
        [0, -576, 480],
        [0, 576, 480],
        [0, -576, 512],
        [0, 576, 512],
        [0, -576, 544],
        [0, 576, 544],
        [32, -576, -576],
        [32, -576, 576],
        [32, -544, -576],
        [32, -544, 576],
        [32, -512, -576],
        [32, -512, 576],
        [32, -480, -576],
        [32, -480, 576],
        [32, -448, -576],
        [32, -448, 576],
        [32, -416, -576],
        [32, -416, 576],
        [32, -384, -576],
        [32, -384, 576],
        [32, -352, -576],
        [32, -352, 576],
        [32, -320, -576],
        [32, -320, 576],
        [32, -288, -576],
        [32, -288, 576],
        [32, -256, -576],
        [32, -256, 576],
        [32, -224, -576],
        [32, -224, 576],
        [32, -192, -576],
        [32, -192, 576],
        [32, -160, -576],
        [32, -160, 576],
        [32, -128, -576],
        [32, -128, 576],
        [32, -96, -576],
        [32, -96, 576],
        [32, -64, -576],
        [32, -64, 576],
        [32, -32, -576],
        [32, -32, 576],
        [32, 0, -576],
        [32, 0, 576],
        [32, 32, -576],
        [32, 32, 576],
        [32, 64, -576],
        [32, 64, 576],
        [32, 96, -576],
        [32, 96, 576],
        [32, 128, -576],
        [32, 128, 576],
        [32, 160, -576],
        [32, 160, 576],
        [32, 192, -576],
        [32, 192, 576],
        [32, 224, -576],
        [32, 224, 576],
        [32, 256, -576],
        [32, 256, 576],
        [32, 288, -576],
        [32, 288, 576],
        [32, 320, -576],
        [32, 320, 576],
        [32, 352, -576],
        [32, 352, 576],
        [32, 384, -576],
        [32, 384, 576],
        [32, 416, -576],
        [32, 416, 576],
        [32, 448, -576],
        [32, 448, 576],
        [32, 480, -576],
        [32, 480, 576],
        [32, 512, -576],
        [32, 512, 576],
        [32, 544, -576],
        [32, 544, 576],
        [32, 576, -576],
        [32, 576, 576],
        [32, -576, -544],
        [32, 576, -544],
        [32, -576, -512],
        [32, 576, -512],
        [32, -576, -480],
        [32, 576, -480],
        [32, -576, -448],
        [32, 576, -448],
        [32, -576, -416],
        [32, 576, -416],
        [32, -576, -384],
        [32, 576, -384],
        [32, -576, -352],
        [32, 576, -352],
        [32, -576, -320],
        [32, 576, -320],
        [32, -576, -288],
        [32, 576, -288],
        [32, -576, -256],
        [32, 576, -256],
        [32, -576, -224],
        [32, 576, -224],
        [32, -576, -192],
        [32, 576, -192],
        [32, -576, -160],
        [32, 576, -160],
        [32, -576, -128],
        [32, 576, -128],
        [32, -576, -96],
        [32, 576, -96],
        [32, -576, -64],
        [32, 576, -64],
        [32, -576, -32],
        [32, 576, -32],
        [32, -576, 0],
        [32, 576, 0],
        [32, -576, 32],
        [32, 576, 32],
        [32, -576, 64],
        [32, 576, 64],
        [32, -576, 96],
        [32, 576, 96],
        [32, -576, 128],
        [32, 576, 128],
        [32, -576, 160],
        [32, 576, 160],
        [32, -576, 192],
        [32, 576, 192],
        [32, -576, 224],
        [32, 576, 224],
        [32, -576, 256],
        [32, 576, 256],
        [32, -576, 288],
        [32, 576, 288],
        [32, -576, 320],
        [32, 576, 320],
        [32, -576, 352],
        [32, 576, 352],
        [32, -576, 384],
        [32, 576, 384],
        [32, -576, 416],
        [32, 576, 416],
        [32, -576, 448],
        [32, 576, 448],
        [32, -576, 480],
        [32, 576, 480],
        [32, -576, 512],
        [32, 576, 512],
        [32, -576, 544],
        [32, 576, 544],
        [64, -576, -576],
        [64, -576, 576],
        [64, -544, -576],
        [64, -544, 576],
        [64, -512, -576],
        [64, -512, 576],
        [64, -480, -576],
        [64, -480, 576],
        [64, -448, -576],
        [64, -448, 576],
        [64, -416, -576],
        [64, -416, 576],
        [64, -384, -576],
        [64, -384, 576],
        [64, -352, -576],
        [64, -352, 576],
        [64, -320, -576],
        [64, -320, 576],
        [64, -288, -576],
        [64, -288, 576],
        [64, -256, -576],
        [64, -256, 576],
        [64, -224, -576],
        [64, -224, 576],
        [64, -192, -576],
        [64, -192, 576],
        [64, -160, -576],
        [64, -160, 576],
        [64, -128, -576],
        [64, -128, 576],
        [64, -96, -576],
        [64, -96, 576],
        [64, -64, -576],
        [64, -64, 576],
        [64, -32, -576],
        [64, -32, 576],
        [64, 0, -576],
        [64, 0, 576],
        [64, 32, -576],
        [64, 32, 576],
        [64, 64, -576],
        [64, 64, 576],
        [64, 96, -576],
        [64, 96, 576],
        [64, 128, -576],
        [64, 128, 576],
        [64, 160, -576],
        [64, 160, 576],
        [64, 192, -576],
        [64, 192, 576],
        [64, 224, -576],
        [64, 224, 576],
        [64, 256, -576],
        [64, 256, 576],
        [64, 288, -576],
        [64, 288, 576],
        [64, 320, -576],
        [64, 320, 576],
        [64, 352, -576],
        [64, 352, 576],
        [64, 384, -576],
        [64, 384, 576],
        [64, 416, -576],
        [64, 416, 576],
        [64, 448, -576],
        [64, 448, 576],
        [64, 480, -576],
        [64, 480, 576],
        [64, 512, -576],
        [64, 512, 576],
        [64, 544, -576],
        [64, 544, 576],
        [64, 576, -576],
        [64, 576, 576],
        [64, -576, -544],
        [64, 576, -544],
        [64, -576, -512],
        [64, 576, -512],
        [64, -576, -480],
        [64, 576, -480],
        [64, -576, -448],
        [64, 576, -448],
        [64, -576, -416],
        [64, 576, -416],
        [64, -576, -384],
        [64, 576, -384],
        [64, -576, -352],
        [64, 576, -352],
        [64, -576, -320],
        [64, 576, -320],
        [64, -576, -288],
        [64, 576, -288],
        [64, -576, -256],
        [64, 576, -256],
        [64, -576, -224],
        [64, 576, -224],
        [64, -576, -192],
        [64, 576, -192],
        [64, -576, -160],
        [64, 576, -160],
        [64, -576, -128],
        [64, 576, -128],
        [64, -576, -96],
        [64, 576, -96],
        [64, -576, -64],
        [64, 576, -64],
        [64, -576, -32],
        [64, 576, -32],
        [64, -576, 0],
        [64, 576, 0],
        [64, -576, 32],
        [64, 576, 32],
        [64, -576, 64],
        [64, 576, 64],
        [64, -576, 96],
        [64, 576, 96],
        [64, -576, 128],
        [64, 576, 128],
        [64, -576, 160],
        [64, 576, 160],
        [64, -576, 192],
        [64, 576, 192],
        [64, -576, 224],
        [64, 576, 224],
        [64, -576, 256],
        [64, 576, 256],
        [64, -576, 288],
        [64, 576, 288],
        [64, -576, 320],
        [64, 576, 320],
        [64, -576, 352],
        [64, 576, 352],
        [64, -576, 384],
        [64, 576, 384],
        [64, -576, 416],
        [64, 576, 416],
        [64, -576, 448],
        [64, 576, 448],
        [64, -576, 480],
        [64, 576, 480],
        [64, -576, 512],
        [64, 576, 512],
        [64, -576, 544],
        [64, 576, 544],
        [96, -576, -576],
        [96, -576, 576],
        [96, -544, -576],
        [96, -544, 576],
        [96, -512, -576],
        [96, -512, 576],
        [96, -480, -576],
        [96, -480, 576],
        [96, -448, -576],
        [96, -448, 576],
        [96, -416, -576],
        [96, -416, 576],
        [96, -384, -576],
        [96, -384, 576],
        [96, -352, -576],
        [96, -352, 576],
        [96, -320, -576],
        [96, -320, 576],
        [96, -288, -576],
        [96, -288, 576],
        [96, -256, -576],
        [96, -256, 576],
        [96, -224, -576],
        [96, -224, 576],
        [96, -192, -576],
        [96, -192, 576],
        [96, -160, -576],
        [96, -160, 576],
        [96, -128, -576],
        [96, -128, 576],
        [96, -96, -576],
        [96, -96, 576],
        [96, -64, -576],
        [96, -64, 576],
        [96, -32, -576],
        [96, -32, 576],
        [96, 0, -576],
        [96, 0, 576],
        [96, 32, -576],
        [96, 32, 576],
        [96, 64, -576],
        [96, 64, 576],
        [96, 96, -576],
        [96, 96, 576],
        [96, 128, -576],
        [96, 128, 576],
        [96, 160, -576],
        [96, 160, 576],
        [96, 192, -576],
        [96, 192, 576],
        [96, 224, -576],
        [96, 224, 576],
        [96, 256, -576],
        [96, 256, 576],
        [96, 288, -576],
        [96, 288, 576],
        [96, 320, -576],
        [96, 320, 576],
        [96, 352, -576],
        [96, 352, 576],
        [96, 384, -576],
        [96, 384, 576],
        [96, 416, -576],
        [96, 416, 576],
        [96, 448, -576],
        [96, 448, 576],
        [96, 480, -576],
        [96, 480, 576],
        [96, 512, -576],
        [96, 512, 576],
        [96, 544, -576],
        [96, 544, 576],
        [96, 576, -576],
        [96, 576, 576],
        [96, -576, -544],
        [96, 576, -544],
        [96, -576, -512],
        [96, 576, -512],
        [96, -576, -480],
        [96, 576, -480],
        [96, -576, -448],
        [96, 576, -448],
        [96, -576, -416],
        [96, 576, -416],
        [96, -576, -384],
        [96, 576, -384],
        [96, -576, -352],
        [96, 576, -352],
        [96, -576, -320],
        [96, 576, -320],
        [96, -576, -288],
        [96, 576, -288],
        [96, -576, -256],
        [96, 576, -256],
        [96, -576, -224],
        [96, 576, -224],
        [96, -576, -192],
        [96, 576, -192],
        [96, -576, -160],
        [96, 576, -160],
        [96, -576, -128],
        [96, 576, -128],
        [96, -576, -96],
        [96, 576, -96],
        [96, -576, -64],
        [96, 576, -64],
        [96, -576, -32],
        [96, 576, -32],
        [96, -576, 0],
        [96, 576, 0],
        [96, -576, 32],
        [96, 576, 32],
        [96, -576, 64],
        [96, 576, 64],
        [96, -576, 96],
        [96, 576, 96],
        [96, -576, 128],
        [96, 576, 128],
        [96, -576, 160],
        [96, 576, 160],
        [96, -576, 192],
        [96, 576, 192],
        [96, -576, 224],
        [96, 576, 224],
        [96, -576, 256],
        [96, 576, 256],
        [96, -576, 288],
        [96, 576, 288],
        [96, -576, 320],
        [96, 576, 320],
        [96, -576, 352],
        [96, 576, 352],
        [96, -576, 384],
        [96, 576, 384],
        [96, -576, 416],
        [96, 576, 416],
        [96, -576, 448],
        [96, 576, 448],
        [96, -576, 480],
        [96, 576, 480],
        [96, -576, 512],
        [96, 576, 512],
        [96, -576, 544],
        [96, 576, 544],
        [128, -576, -576],
        [128, -576, 576],
        [128, -544, -576],
        [128, -544, 576],
        [128, -512, -576],
        [128, -512, 576],
        [128, -480, -576],
        [128, -480, 576],
        [128, -448, -576],
        [128, -448, 576],
        [128, -416, -576],
        [128, -416, 576],
        [128, -384, -576],
        [128, -384, 576],
        [128, -352, -576],
        [128, -352, 576],
        [128, -320, -576],
        [128, -320, 576],
        [128, -288, -576],
        [128, -288, 576],
        [128, -256, -576],
        [128, -256, 576],
        [128, -224, -576],
        [128, -224, 576],
        [128, -192, -576],
        [128, -192, 576],
        [128, -160, -576],
        [128, -160, 576],
        [128, -128, -576],
        [128, -128, 576],
        [128, -96, -576],
        [128, -96, 576],
        [128, -64, -576],
        [128, -64, 576],
        [128, -32, -576],
        [128, -32, 576],
        [128, 0, -576],
        [128, 0, 576],
        [128, 32, -576],
        [128, 32, 576],
        [128, 64, -576],
        [128, 64, 576],
        [128, 96, -576],
        [128, 96, 576],
        [128, 128, -576],
        [128, 128, 576],
        [128, 160, -576],
        [128, 160, 576],
        [128, 192, -576],
        [128, 192, 576],
        [128, 224, -576],
        [128, 224, 576],
        [128, 256, -576],
        [128, 256, 576],
        [128, 288, -576],
        [128, 288, 576],
        [128, 320, -576],
        [128, 320, 576],
        [128, 352, -576],
        [128, 352, 576],
        [128, 384, -576],
        [128, 384, 576],
        [128, 416, -576],
        [128, 416, 576],
        [128, 448, -576],
        [128, 448, 576],
        [128, 480, -576],
        [128, 480, 576],
        [128, 512, -576],
        [128, 512, 576],
        [128, 544, -576],
        [128, 544, 576],
        [128, 576, -576],
        [128, 576, 576],
        [128, -576, -544],
        [128, 576, -544],
        [128, -576, -512],
        [128, 576, -512],
        [128, -576, -480],
        [128, 576, -480],
        [128, -576, -448],
        [128, 576, -448],
        [128, -576, -416],
        [128, 576, -416],
        [128, -576, -384],
        [128, 576, -384],
        [128, -576, -352],
        [128, 576, -352],
        [128, -576, -320],
        [128, 576, -320],
        [128, -576, -288],
        [128, 576, -288],
        [128, -576, -256],
        [128, 576, -256],
        [128, -576, -224],
        [128, 576, -224],
        [128, -576, -192],
        [128, 576, -192],
        [128, -576, -160],
        [128, 576, -160],
        [128, -576, -128],
        [128, 576, -128],
        [128, -576, -96],
        [128, 576, -96],
        [128, -576, -64],
        [128, 576, -64],
        [128, -576, -32],
        [128, 576, -32],
        [128, -576, 0],
        [128, 576, 0],
        [128, -576, 32],
        [128, 576, 32],
        [128, -576, 64],
        [128, 576, 64],
        [128, -576, 96],
        [128, 576, 96],
        [128, -576, 128],
        [128, 576, 128],
        [128, -576, 160],
        [128, 576, 160],
        [128, -576, 192],
        [128, 576, 192],
        [128, -576, 224],
        [128, 576, 224],
        [128, -576, 256],
        [128, 576, 256],
        [128, -576, 288],
        [128, 576, 288],
        [128, -576, 320],
        [128, 576, 320],
        [128, -576, 352],
        [128, 576, 352],
        [128, -576, 384],
        [128, 576, 384],
        [128, -576, 416],
        [128, 576, 416],
        [128, -576, 448],
        [128, 576, 448],
        [128, -576, 480],
        [128, 576, 480],
        [128, -576, 512],
        [128, 576, 512],
        [128, -576, 544],
        [128, 576, 544],
        [160, -576, -576],
        [160, -576, 576],
        [160, -544, -576],
        [160, -544, 576],
        [160, -512, -576],
        [160, -512, 576],
        [160, -480, -576],
        [160, -480, 576],
        [160, -448, -576],
        [160, -448, 576],
        [160, -416, -576],
        [160, -416, 576],
        [160, -384, -576],
        [160, -384, 576],
        [160, -352, -576],
        [160, -352, 576],
        [160, -320, -576],
        [160, -320, 576],
        [160, -288, -576],
        [160, -288, 576],
        [160, -256, -576],
        [160, -256, 576],
        [160, -224, -576],
        [160, -224, 576],
        [160, -192, -576],
        [160, -192, 576],
        [160, -160, -576],
        [160, -160, 576],
        [160, -128, -576],
        [160, -128, 576],
        [160, -96, -576],
        [160, -96, 576],
        [160, -64, -576],
        [160, -64, 576],
        [160, -32, -576],
        [160, -32, 576],
        [160, 0, -576],
        [160, 0, 576],
        [160, 32, -576],
        [160, 32, 576],
        [160, 64, -576],
        [160, 64, 576],
        [160, 96, -576],
        [160, 96, 576],
        [160, 128, -576],
        [160, 128, 576],
        [160, 160, -576],
        [160, 160, 576],
        [160, 192, -576],
        [160, 192, 576],
        [160, 224, -576],
        [160, 224, 576],
        [160, 256, -576],
        [160, 256, 576],
        [160, 288, -576],
        [160, 288, 576],
        [160, 320, -576],
        [160, 320, 576],
        [160, 352, -576],
        [160, 352, 576],
        [160, 384, -576],
        [160, 384, 576],
        [160, 416, -576],
        [160, 416, 576],
        [160, 448, -576],
        [160, 448, 576],
        [160, 480, -576],
        [160, 480, 576],
        [160, 512, -576],
        [160, 512, 576],
        [160, 544, -576],
        [160, 544, 576],
        [160, 576, -576],
        [160, 576, 576],
        [160, -576, -544],
        [160, 576, -544],
        [160, -576, -512],
        [160, 576, -512],
        [160, -576, -480],
        [160, 576, -480],
        [160, -576, -448],
        [160, 576, -448],
        [160, -576, -416],
        [160, 576, -416],
        [160, -576, -384],
        [160, 576, -384],
        [160, -576, -352],
        [160, 576, -352],
        [160, -576, -320],
        [160, 576, -320],
        [160, -576, -288],
        [160, 576, -288],
        [160, -576, -256],
        [160, 576, -256],
        [160, -576, -224],
        [160, 576, -224],
        [160, -576, -192],
        [160, 576, -192],
        [160, -576, -160],
        [160, 576, -160],
        [160, -576, -128],
        [160, 576, -128],
        [160, -576, -96],
        [160, 576, -96],
        [160, -576, -64],
        [160, 576, -64],
        [160, -576, -32],
        [160, 576, -32],
        [160, -576, 0],
        [160, 576, 0],
        [160, -576, 32],
        [160, 576, 32],
        [160, -576, 64],
        [160, 576, 64],
        [160, -576, 96],
        [160, 576, 96],
        [160, -576, 128],
        [160, 576, 128],
        [160, -576, 160],
        [160, 576, 160],
        [160, -576, 192],
        [160, 576, 192],
        [160, -576, 224],
        [160, 576, 224],
        [160, -576, 256],
        [160, 576, 256],
        [160, -576, 288],
        [160, 576, 288],
        [160, -576, 320],
        [160, 576, 320],
        [160, -576, 352],
        [160, 576, 352],
        [160, -576, 384],
        [160, 576, 384],
        [160, -576, 416],
        [160, 576, 416],
        [160, -576, 448],
        [160, 576, 448],
        [160, -576, 480],
        [160, 576, 480],
        [160, -576, 512],
        [160, 576, 512],
        [160, -576, 544],
        [160, 576, 544],
        [192, -576, -576],
        [192, -576, 576],
        [192, -544, -576],
        [192, -544, 576],
        [192, -512, -576],
        [192, -512, 576],
        [192, -480, -576],
        [192, -480, 576],
        [192, -448, -576],
        [192, -448, 576],
        [192, -416, -576],
        [192, -416, 576],
        [192, -384, -576],
        [192, -384, 576],
        [192, -352, -576],
        [192, -352, 576],
        [192, -320, -576],
        [192, -320, 576],
        [192, -288, -576],
        [192, -288, 576],
        [192, -256, -576],
        [192, -256, 576],
        [192, -224, -576],
        [192, -224, 576],
        [192, -192, -576],
        [192, -192, 576],
        [192, -160, -576],
        [192, -160, 576],
        [192, -128, -576],
        [192, -128, 576],
        [192, -96, -576],
        [192, -96, 576],
        [192, -64, -576],
        [192, -64, 576],
        [192, -32, -576],
        [192, -32, 576],
        [192, 0, -576],
        [192, 0, 576],
        [192, 32, -576],
        [192, 32, 576],
        [192, 64, -576],
        [192, 64, 576],
        [192, 96, -576],
        [192, 96, 576],
        [192, 128, -576],
        [192, 128, 576],
        [192, 160, -576],
        [192, 160, 576],
        [192, 192, -576],
        [192, 192, 576],
        [192, 224, -576],
        [192, 224, 576],
        [192, 256, -576],
        [192, 256, 576],
        [192, 288, -576],
        [192, 288, 576],
        [192, 320, -576],
        [192, 320, 576],
        [192, 352, -576],
        [192, 352, 576],
        [192, 384, -576],
        [192, 384, 576],
        [192, 416, -576],
        [192, 416, 576],
        [192, 448, -576],
        [192, 448, 576],
        [192, 480, -576],
        [192, 480, 576],
        [192, 512, -576],
        [192, 512, 576],
        [192, 544, -576],
        [192, 544, 576],
        [192, 576, -576],
        [192, 576, 576],
        [192, -576, -544],
        [192, 576, -544],
        [192, -576, -512],
        [192, 576, -512],
        [192, -576, -480],
        [192, 576, -480],
        [192, -576, -448],
        [192, 576, -448],
        [192, -576, -416],
        [192, 576, -416],
        [192, -576, -384],
        [192, 576, -384],
        [192, -576, -352],
        [192, 576, -352],
        [192, -576, -320],
        [192, 576, -320],
        [192, -576, -288],
        [192, 576, -288],
        [192, -576, -256],
        [192, 576, -256],
        [192, -576, -224],
        [192, 576, -224],
        [192, -576, -192],
        [192, 576, -192],
        [192, -576, -160],
        [192, 576, -160],
        [192, -576, -128],
        [192, 576, -128],
        [192, -576, -96],
        [192, 576, -96],
        [192, -576, -64],
        [192, 576, -64],
        [192, -576, -32],
        [192, 576, -32],
        [192, -576, 0],
        [192, 576, 0],
        [192, -576, 32],
        [192, 576, 32],
        [192, -576, 64],
        [192, 576, 64],
        [192, -576, 96],
        [192, 576, 96],
        [192, -576, 128],
        [192, 576, 128],
        [192, -576, 160],
        [192, 576, 160],
        [192, -576, 192],
        [192, 576, 192],
        [192, -576, 224],
        [192, 576, 224],
        [192, -576, 256],
        [192, 576, 256],
        [192, -576, 288],
        [192, 576, 288],
        [192, -576, 320],
        [192, 576, 320],
        [192, -576, 352],
        [192, 576, 352],
        [192, -576, 384],
        [192, 576, 384],
        [192, -576, 416],
        [192, 576, 416],
        [192, -576, 448],
        [192, 576, 448],
        [192, -576, 480],
        [192, 576, 480],
        [192, -576, 512],
        [192, 576, 512],
        [192, -576, 544],
        [192, 576, 544],
        [224, -576, -576],
        [224, -576, 576],
        [224, -544, -576],
        [224, -544, 576],
        [224, -512, -576],
        [224, -512, 576],
        [224, -480, -576],
        [224, -480, 576],
        [224, -448, -576],
        [224, -448, 576],
        [224, -416, -576],
        [224, -416, 576],
        [224, -384, -576],
        [224, -384, 576],
        [224, -352, -576],
        [224, -352, 576],
        [224, -320, -576],
        [224, -320, 576],
        [224, -288, -576],
        [224, -288, 576],
        [224, -256, -576],
        [224, -256, 576],
        [224, -224, -576],
        [224, -224, 576],
        [224, -192, -576],
        [224, -192, 576],
        [224, -160, -576],
        [224, -160, 576],
        [224, -128, -576],
        [224, -128, 576],
        [224, -96, -576],
        [224, -96, 576],
        [224, -64, -576],
        [224, -64, 576],
        [224, -32, -576],
        [224, -32, 576],
        [224, 0, -576],
        [224, 0, 576],
        [224, 32, -576],
        [224, 32, 576],
        [224, 64, -576],
        [224, 64, 576],
        [224, 96, -576],
        [224, 96, 576],
        [224, 128, -576],
        [224, 128, 576],
        [224, 160, -576],
        [224, 160, 576],
        [224, 192, -576],
        [224, 192, 576],
        [224, 224, -576],
        [224, 224, 576],
        [224, 256, -576],
        [224, 256, 576],
        [224, 288, -576],
        [224, 288, 576],
        [224, 320, -576],
        [224, 320, 576],
        [224, 352, -576],
        [224, 352, 576],
        [224, 384, -576],
        [224, 384, 576],
        [224, 416, -576],
        [224, 416, 576],
        [224, 448, -576],
        [224, 448, 576],
        [224, 480, -576],
        [224, 480, 576],
        [224, 512, -576],
        [224, 512, 576],
        [224, 544, -576],
        [224, 544, 576],
        [224, 576, -576],
        [224, 576, 576],
        [224, -576, -544],
        [224, 576, -544],
        [224, -576, -512],
        [224, 576, -512],
        [224, -576, -480],
        [224, 576, -480],
        [224, -576, -448],
        [224, 576, -448],
        [224, -576, -416],
        [224, 576, -416],
        [224, -576, -384],
        [224, 576, -384],
        [224, -576, -352],
        [224, 576, -352],
        [224, -576, -320],
        [224, 576, -320],
        [224, -576, -288],
        [224, 576, -288],
        [224, -576, -256],
        [224, 576, -256],
        [224, -576, -224],
        [224, 576, -224],
        [224, -576, -192],
        [224, 576, -192],
        [224, -576, -160],
        [224, 576, -160],
        [224, -576, -128],
        [224, 576, -128],
        [224, -576, -96],
        [224, 576, -96],
        [224, -576, -64],
        [224, 576, -64],
        [224, -576, -32],
        [224, 576, -32],
        [224, -576, 0],
        [224, 576, 0],
        [224, -576, 32],
        [224, 576, 32],
        [224, -576, 64],
        [224, 576, 64],
        [224, -576, 96],
        [224, 576, 96],
        [224, -576, 128],
        [224, 576, 128],
        [224, -576, 160],
        [224, 576, 160],
        [224, -576, 192],
        [224, 576, 192],
        [224, -576, 224],
        [224, 576, 224],
        [224, -576, 256],
        [224, 576, 256],
        [224, -576, 288],
        [224, 576, 288],
        [224, -576, 320],
        [224, 576, 320],
        [224, -576, 352],
        [224, 576, 352],
        [224, -576, 384],
        [224, 576, 384],
        [224, -576, 416],
        [224, 576, 416],
        [224, -576, 448],
        [224, 576, 448],
        [224, -576, 480],
        [224, 576, 480],
        [224, -576, 512],
        [224, 576, 512],
        [224, -576, 544],
        [224, 576, 544],
        [256, -576, -576],
        [256, -576, 576],
        [256, -544, -576],
        [256, -544, 576],
        [256, -512, -576],
        [256, -512, 576],
        [256, -480, -576],
        [256, -480, 576],
        [256, -448, -576],
        [256, -448, 576],
        [256, -416, -576],
        [256, -416, 576],
        [256, -384, -576],
        [256, -384, 576],
        [256, -352, -576],
        [256, -352, 576],
        [256, -320, -576],
        [256, -320, 576],
        [256, -288, -576],
        [256, -288, 576],
        [256, -256, -576],
        [256, -256, 576],
        [256, -224, -576],
        [256, -224, 576],
        [256, -192, -576],
        [256, -192, 576],
        [256, -160, -576],
        [256, -160, 576],
        [256, -128, -576],
        [256, -128, 576],
        [256, -96, -576],
        [256, -96, 576],
        [256, -64, -576],
        [256, -64, 576],
        [256, -32, -576],
        [256, -32, 576],
        [256, 0, -576],
        [256, 0, 576],
        [256, 32, -576],
        [256, 32, 576],
        [256, 64, -576],
        [256, 64, 576],
        [256, 96, -576],
        [256, 96, 576],
        [256, 128, -576],
        [256, 128, 576],
        [256, 160, -576],
        [256, 160, 576],
        [256, 192, -576],
        [256, 192, 576],
        [256, 224, -576],
        [256, 224, 576],
        [256, 256, -576],
        [256, 256, 576],
        [256, 288, -576],
        [256, 288, 576],
        [256, 320, -576],
        [256, 320, 576],
        [256, 352, -576],
        [256, 352, 576],
        [256, 384, -576],
        [256, 384, 576],
        [256, 416, -576],
        [256, 416, 576],
        [256, 448, -576],
        [256, 448, 576],
        [256, 480, -576],
        [256, 480, 576],
        [256, 512, -576],
        [256, 512, 576],
        [256, 544, -576],
        [256, 544, 576],
        [256, 576, -576],
        [256, 576, 576],
        [256, -576, -544],
        [256, 576, -544],
        [256, -576, -512],
        [256, 576, -512],
        [256, -576, -480],
        [256, 576, -480],
        [256, -576, -448],
        [256, 576, -448],
        [256, -576, -416],
        [256, 576, -416],
        [256, -576, -384],
        [256, 576, -384],
        [256, -576, -352],
        [256, 576, -352],
        [256, -576, -320],
        [256, 576, -320],
        [256, -576, -288],
        [256, 576, -288],
        [256, -576, -256],
        [256, 576, -256],
        [256, -576, -224],
        [256, 576, -224],
        [256, -576, -192],
        [256, 576, -192],
        [256, -576, -160],
        [256, 576, -160],
        [256, -576, -128],
        [256, 576, -128],
        [256, -576, -96],
        [256, 576, -96],
        [256, -576, -64],
        [256, 576, -64],
        [256, -576, -32],
        [256, 576, -32],
        [256, -576, 0],
        [256, 576, 0],
        [256, -576, 32],
        [256, 576, 32],
        [256, -576, 64],
        [256, 576, 64],
        [256, -576, 96],
        [256, 576, 96],
        [256, -576, 128],
        [256, 576, 128],
        [256, -576, 160],
        [256, 576, 160],
        [256, -576, 192],
        [256, 576, 192],
        [256, -576, 224],
        [256, 576, 224],
        [256, -576, 256],
        [256, 576, 256],
        [256, -576, 288],
        [256, 576, 288],
        [256, -576, 320],
        [256, 576, 320],
        [256, -576, 352],
        [256, 576, 352],
        [256, -576, 384],
        [256, 576, 384],
        [256, -576, 416],
        [256, 576, 416],
        [256, -576, 448],
        [256, 576, 448],
        [256, -576, 480],
        [256, 576, 480],
        [256, -576, 512],
        [256, 576, 512],
        [256, -576, 544],
        [256, 576, 544],
        [288, -576, -576],
        [288, -576, 576],
        [288, -544, -576],
        [288, -544, 576],
        [288, -512, -576],
        [288, -512, 576],
        [288, -480, -576],
        [288, -480, 576],
        [288, -448, -576],
        [288, -448, 576],
        [288, -416, -576],
        [288, -416, 576],
        [288, -384, -576],
        [288, -384, 576],
        [288, -352, -576],
        [288, -352, 576],
        [288, -320, -576],
        [288, -320, 576],
        [288, -288, -576],
        [288, -288, 576],
        [288, -256, -576],
        [288, -256, 576],
        [288, -224, -576],
        [288, -224, 576],
        [288, -192, -576],
        [288, -192, 576],
        [288, -160, -576],
        [288, -160, 576],
        [288, -128, -576],
        [288, -128, 576],
        [288, -96, -576],
        [288, -96, 576],
        [288, -64, -576],
        [288, -64, 576],
        [288, -32, -576],
        [288, -32, 576],
        [288, 0, -576],
        [288, 0, 576],
        [288, 32, -576],
        [288, 32, 576],
        [288, 64, -576],
        [288, 64, 576],
        [288, 96, -576],
        [288, 96, 576],
        [288, 128, -576],
        [288, 128, 576],
        [288, 160, -576],
        [288, 160, 576],
        [288, 192, -576],
        [288, 192, 576],
        [288, 224, -576],
        [288, 224, 576],
        [288, 256, -576],
        [288, 256, 576],
        [288, 288, -576],
        [288, 288, 576],
        [288, 320, -576],
        [288, 320, 576],
        [288, 352, -576],
        [288, 352, 576],
        [288, 384, -576],
        [288, 384, 576],
        [288, 416, -576],
        [288, 416, 576],
        [288, 448, -576],
        [288, 448, 576],
        [288, 480, -576],
        [288, 480, 576],
        [288, 512, -576],
        [288, 512, 576],
        [288, 544, -576],
        [288, 544, 576],
        [288, 576, -576],
        [288, 576, 576],
        [288, -576, -544],
        [288, 576, -544],
        [288, -576, -512],
        [288, 576, -512],
        [288, -576, -480],
        [288, 576, -480],
        [288, -576, -448],
        [288, 576, -448],
        [288, -576, -416],
        [288, 576, -416],
        [288, -576, -384],
        [288, 576, -384],
        [288, -576, -352],
        [288, 576, -352],
        [288, -576, -320],
        [288, 576, -320],
        [288, -576, -288],
        [288, 576, -288],
        [288, -576, -256],
        [288, 576, -256],
        [288, -576, -224],
        [288, 576, -224],
        [288, -576, -192],
        [288, 576, -192],
        [288, -576, -160],
        [288, 576, -160],
        [288, -576, -128],
        [288, 576, -128],
        [288, -576, -96],
        [288, 576, -96],
        [288, -576, -64],
        [288, 576, -64],
        [288, -576, -32],
        [288, 576, -32],
        [288, -576, 0],
        [288, 576, 0],
        [288, -576, 32],
        [288, 576, 32],
        [288, -576, 64],
        [288, 576, 64],
        [288, -576, 96],
        [288, 576, 96],
        [288, -576, 128],
        [288, 576, 128],
        [288, -576, 160],
        [288, 576, 160],
        [288, -576, 192],
        [288, 576, 192],
        [288, -576, 224],
        [288, 576, 224],
        [288, -576, 256],
        [288, 576, 256],
        [288, -576, 288],
        [288, 576, 288],
        [288, -576, 320],
        [288, 576, 320],
        [288, -576, 352],
        [288, 576, 352],
        [288, -576, 384],
        [288, 576, 384],
        [288, -576, 416],
        [288, 576, 416],
        [288, -576, 448],
        [288, 576, 448],
        [288, -576, 480],
        [288, 576, 480],
        [288, -576, 512],
        [288, 576, 512],
        [288, -576, 544],
        [288, 576, 544],
        [320, -576, -576],
        [320, -576, 576],
        [320, -544, -576],
        [320, -544, 576],
        [320, -512, -576],
        [320, -512, 576],
        [320, -480, -576],
        [320, -480, 576],
        [320, -448, -576],
        [320, -448, 576],
        [320, -416, -576],
        [320, -416, 576],
        [320, -384, -576],
        [320, -384, 576],
        [320, -352, -576],
        [320, -352, 576],
        [320, -320, -576],
        [320, -320, 576],
        [320, -288, -576],
        [320, -288, 576],
        [320, -256, -576],
        [320, -256, 576],
        [320, -224, -576],
        [320, -224, 576],
        [320, -192, -576],
        [320, -192, 576],
        [320, -160, -576],
        [320, -160, 576],
        [320, -128, -576],
        [320, -128, 576],
        [320, -96, -576],
        [320, -96, 576],
        [320, -64, -576],
        [320, -64, 576],
        [320, -32, -576],
        [320, -32, 576],
        [320, 0, -576],
        [320, 0, 576],
        [320, 32, -576],
        [320, 32, 576],
        [320, 64, -576],
        [320, 64, 576],
        [320, 96, -576],
        [320, 96, 576],
        [320, 128, -576],
        [320, 128, 576],
        [320, 160, -576],
        [320, 160, 576],
        [320, 192, -576],
        [320, 192, 576],
        [320, 224, -576],
        [320, 224, 576],
        [320, 256, -576],
        [320, 256, 576],
        [320, 288, -576],
        [320, 288, 576],
        [320, 320, -576],
        [320, 320, 576],
        [320, 352, -576],
        [320, 352, 576],
        [320, 384, -576],
        [320, 384, 576],
        [320, 416, -576],
        [320, 416, 576],
        [320, 448, -576],
        [320, 448, 576],
        [320, 480, -576],
        [320, 480, 576],
        [320, 512, -576],
        [320, 512, 576],
        [320, 544, -576],
        [320, 544, 576],
        [320, 576, -576],
        [320, 576, 576],
        [320, -576, -544],
        [320, 576, -544],
        [320, -576, -512],
        [320, 576, -512],
        [320, -576, -480],
        [320, 576, -480],
        [320, -576, -448],
        [320, 576, -448],
        [320, -576, -416],
        [320, 576, -416],
        [320, -576, -384],
        [320, 576, -384],
        [320, -576, -352],
        [320, 576, -352],
        [320, -576, -320],
        [320, 576, -320],
        [320, -576, -288],
        [320, 576, -288],
        [320, -576, -256],
        [320, 576, -256],
        [320, -576, -224],
        [320, 576, -224],
        [320, -576, -192],
        [320, 576, -192],
        [320, -576, -160],
        [320, 576, -160],
        [320, -576, -128],
        [320, 576, -128],
        [320, -576, -96],
        [320, 576, -96],
        [320, -576, -64],
        [320, 576, -64],
        [320, -576, -32],
        [320, 576, -32],
        [320, -576, 0],
        [320, 576, 0],
        [320, -576, 32],
        [320, 576, 32],
        [320, -576, 64],
        [320, 576, 64],
        [320, -576, 96],
        [320, 576, 96],
        [320, -576, 128],
        [320, 576, 128],
        [320, -576, 160],
        [320, 576, 160],
        [320, -576, 192],
        [320, 576, 192],
        [320, -576, 224],
        [320, 576, 224],
        [320, -576, 256],
        [320, 576, 256],
        [320, -576, 288],
        [320, 576, 288],
        [320, -576, 320],
        [320, 576, 320],
        [320, -576, 352],
        [320, 576, 352],
        [320, -576, 384],
        [320, 576, 384],
        [320, -576, 416],
        [320, 576, 416],
        [320, -576, 448],
        [320, 576, 448],
        [320, -576, 480],
        [320, 576, 480],
        [320, -576, 512],
        [320, 576, 512],
        [320, -576, 544],
        [320, 576, 544],
        [352, -576, -576],
        [352, -576, 576],
        [352, -544, -576],
        [352, -544, 576],
        [352, -512, -576],
        [352, -512, 576],
        [352, -480, -576],
        [352, -480, 576],
        [352, -448, -576],
        [352, -448, 576],
        [352, -416, -576],
        [352, -416, 576],
        [352, -384, -576],
        [352, -384, 576],
        [352, -352, -576],
        [352, -352, 576],
        [352, -320, -576],
        [352, -320, 576],
        [352, -288, -576],
        [352, -288, 576],
        [352, -256, -576],
        [352, -256, 576],
        [352, -224, -576],
        [352, -224, 576],
        [352, -192, -576],
        [352, -192, 576],
        [352, -160, -576],
        [352, -160, 576],
        [352, -128, -576],
        [352, -128, 576],
        [352, -96, -576],
        [352, -96, 576],
        [352, -64, -576],
        [352, -64, 576],
        [352, -32, -576],
        [352, -32, 576],
        [352, 0, -576],
        [352, 0, 576],
        [352, 32, -576],
        [352, 32, 576],
        [352, 64, -576],
        [352, 64, 576],
        [352, 96, -576],
        [352, 96, 576],
        [352, 128, -576],
        [352, 128, 576],
        [352, 160, -576],
        [352, 160, 576],
        [352, 192, -576],
        [352, 192, 576],
        [352, 224, -576],
        [352, 224, 576],
        [352, 256, -576],
        [352, 256, 576],
        [352, 288, -576],
        [352, 288, 576],
        [352, 320, -576],
        [352, 320, 576],
        [352, 352, -576],
        [352, 352, 576],
        [352, 384, -576],
        [352, 384, 576],
        [352, 416, -576],
        [352, 416, 576],
        [352, 448, -576],
        [352, 448, 576],
        [352, 480, -576],
        [352, 480, 576],
        [352, 512, -576],
        [352, 512, 576],
        [352, 544, -576],
        [352, 544, 576],
        [352, 576, -576],
        [352, 576, 576],
        [352, -576, -544],
        [352, 576, -544],
        [352, -576, -512],
        [352, 576, -512],
        [352, -576, -480],
        [352, 576, -480],
        [352, -576, -448],
        [352, 576, -448],
        [352, -576, -416],
        [352, 576, -416],
        [352, -576, -384],
        [352, 576, -384],
        [352, -576, -352],
        [352, 576, -352],
        [352, -576, -320],
        [352, 576, -320],
        [352, -576, -288],
        [352, 576, -288],
        [352, -576, -256],
        [352, 576, -256],
        [352, -576, -224],
        [352, 576, -224],
        [352, -576, -192],
        [352, 576, -192],
        [352, -576, -160],
        [352, 576, -160],
        [352, -576, -128],
        [352, 576, -128],
        [352, -576, -96],
        [352, 576, -96],
        [352, -576, -64],
        [352, 576, -64],
        [352, -576, -32],
        [352, 576, -32],
        [352, -576, 0],
        [352, 576, 0],
        [352, -576, 32],
        [352, 576, 32],
        [352, -576, 64],
        [352, 576, 64],
        [352, -576, 96],
        [352, 576, 96],
        [352, -576, 128],
        [352, 576, 128],
        [352, -576, 160],
        [352, 576, 160],
        [352, -576, 192],
        [352, 576, 192],
        [352, -576, 224],
        [352, 576, 224],
        [352, -576, 256],
        [352, 576, 256],
        [352, -576, 288],
        [352, 576, 288],
        [352, -576, 320],
        [352, 576, 320],
        [352, -576, 352],
        [352, 576, 352],
        [352, -576, 384],
        [352, 576, 384],
        [352, -576, 416],
        [352, 576, 416],
        [352, -576, 448],
        [352, 576, 448],
        [352, -576, 480],
        [352, 576, 480],
        [352, -576, 512],
        [352, 576, 512],
        [352, -576, 544],
        [352, 576, 544],
        [384, -576, -576],
        [384, -576, 576],
        [384, -544, -576],
        [384, -544, 576],
        [384, -512, -576],
        [384, -512, 576],
        [384, -480, -576],
        [384, -480, 576],
        [384, -448, -576],
        [384, -448, 576],
        [384, -416, -576],
        [384, -416, 576],
        [384, -384, -576],
        [384, -384, 576],
        [384, -352, -576],
        [384, -352, 576],
        [384, -320, -576],
        [384, -320, 576],
        [384, -288, -576],
        [384, -288, 576],
        [384, -256, -576],
        [384, -256, 576],
        [384, -224, -576],
        [384, -224, 576],
        [384, -192, -576],
        [384, -192, 576],
        [384, -160, -576],
        [384, -160, 576],
        [384, -128, -576],
        [384, -128, 576],
        [384, -96, -576],
        [384, -96, 576],
        [384, -64, -576],
        [384, -64, 576],
        [384, -32, -576],
        [384, -32, 576],
        [384, 0, -576],
        [384, 0, 576],
        [384, 32, -576],
        [384, 32, 576],
        [384, 64, -576],
        [384, 64, 576],
        [384, 96, -576],
        [384, 96, 576],
        [384, 128, -576],
        [384, 128, 576],
        [384, 160, -576],
        [384, 160, 576],
        [384, 192, -576],
        [384, 192, 576],
        [384, 224, -576],
        [384, 224, 576],
        [384, 256, -576],
        [384, 256, 576],
        [384, 288, -576],
        [384, 288, 576],
        [384, 320, -576],
        [384, 320, 576],
        [384, 352, -576],
        [384, 352, 576],
        [384, 384, -576],
        [384, 384, 576],
        [384, 416, -576],
        [384, 416, 576],
        [384, 448, -576],
        [384, 448, 576],
        [384, 480, -576],
        [384, 480, 576],
        [384, 512, -576],
        [384, 512, 576],
        [384, 544, -576],
        [384, 544, 576],
        [384, 576, -576],
        [384, 576, 576],
        [384, -576, -544],
        [384, 576, -544],
        [384, -576, -512],
        [384, 576, -512],
        [384, -576, -480],
        [384, 576, -480],
        [384, -576, -448],
        [384, 576, -448],
        [384, -576, -416],
        [384, 576, -416],
        [384, -576, -384],
        [384, 576, -384],
        [384, -576, -352],
        [384, 576, -352],
        [384, -576, -320],
        [384, 576, -320],
        [384, -576, -288],
        [384, 576, -288],
        [384, -576, -256],
        [384, 576, -256],
        [384, -576, -224],
        [384, 576, -224],
        [384, -576, -192],
        [384, 576, -192],
        [384, -576, -160],
        [384, 576, -160],
        [384, -576, -128],
        [384, 576, -128],
        [384, -576, -96],
        [384, 576, -96],
        [384, -576, -64],
        [384, 576, -64],
        [384, -576, -32],
        [384, 576, -32],
        [384, -576, 0],
        [384, 576, 0],
        [384, -576, 32],
        [384, 576, 32],
        [384, -576, 64],
        [384, 576, 64],
        [384, -576, 96],
        [384, 576, 96],
        [384, -576, 128],
        [384, 576, 128],
        [384, -576, 160],
        [384, 576, 160],
        [384, -576, 192],
        [384, 576, 192],
        [384, -576, 224],
        [384, 576, 224],
        [384, -576, 256],
        [384, 576, 256],
        [384, -576, 288],
        [384, 576, 288],
        [384, -576, 320],
        [384, 576, 320],
        [384, -576, 352],
        [384, 576, 352],
        [384, -576, 384],
        [384, 576, 384],
        [384, -576, 416],
        [384, 576, 416],
        [384, -576, 448],
        [384, 576, 448],
        [384, -576, 480],
        [384, 576, 480],
        [384, -576, 512],
        [384, 576, 512],
        [384, -576, 544],
        [384, 576, 544],
        [416, -576, -576],
        [416, -576, 576],
        [416, -544, -576],
        [416, -544, 576],
        [416, -512, -576],
        [416, -512, 576],
        [416, -480, -576],
        [416, -480, 576],
        [416, -448, -576],
        [416, -448, 576],
        [416, -416, -576],
        [416, -416, 576],
        [416, -384, -576],
        [416, -384, 576],
        [416, -352, -576],
        [416, -352, 576],
        [416, -320, -576],
        [416, -320, 576],
        [416, -288, -576],
        [416, -288, 576],
        [416, -256, -576],
        [416, -256, 576],
        [416, -224, -576],
        [416, -224, 576],
        [416, -192, -576],
        [416, -192, 576],
        [416, -160, -576],
        [416, -160, 576],
        [416, -128, -576],
        [416, -128, 576],
        [416, -96, -576],
        [416, -96, 576],
        [416, -64, -576],
        [416, -64, 576],
        [416, -32, -576],
        [416, -32, 576],
        [416, 0, -576],
        [416, 0, 576],
        [416, 32, -576],
        [416, 32, 576],
        [416, 64, -576],
        [416, 64, 576],
        [416, 96, -576],
        [416, 96, 576],
        [416, 128, -576],
        [416, 128, 576],
        [416, 160, -576],
        [416, 160, 576],
        [416, 192, -576],
        [416, 192, 576],
        [416, 224, -576],
        [416, 224, 576],
        [416, 256, -576],
        [416, 256, 576],
        [416, 288, -576],
        [416, 288, 576],
        [416, 320, -576],
        [416, 320, 576],
        [416, 352, -576],
        [416, 352, 576],
        [416, 384, -576],
        [416, 384, 576],
        [416, 416, -576],
        [416, 416, 576],
        [416, 448, -576],
        [416, 448, 576],
        [416, 480, -576],
        [416, 480, 576],
        [416, 512, -576],
        [416, 512, 576],
        [416, 544, -576],
        [416, 544, 576],
        [416, 576, -576],
        [416, 576, 576],
        [416, -576, -544],
        [416, 576, -544],
        [416, -576, -512],
        [416, 576, -512],
        [416, -576, -480],
        [416, 576, -480],
        [416, -576, -448],
        [416, 576, -448],
        [416, -576, -416],
        [416, 576, -416],
        [416, -576, -384],
        [416, 576, -384],
        [416, -576, -352],
        [416, 576, -352],
        [416, -576, -320],
        [416, 576, -320],
        [416, -576, -288],
        [416, 576, -288],
        [416, -576, -256],
        [416, 576, -256],
        [416, -576, -224],
        [416, 576, -224],
        [416, -576, -192],
        [416, 576, -192],
        [416, -576, -160],
        [416, 576, -160],
        [416, -576, -128],
        [416, 576, -128],
        [416, -576, -96],
        [416, 576, -96],
        [416, -576, -64],
        [416, 576, -64],
        [416, -576, -32],
        [416, 576, -32],
        [416, -576, 0],
        [416, 576, 0],
        [416, -576, 32],
        [416, 576, 32],
        [416, -576, 64],
        [416, 576, 64],
        [416, -576, 96],
        [416, 576, 96],
        [416, -576, 128],
        [416, 576, 128],
        [416, -576, 160],
        [416, 576, 160],
        [416, -576, 192],
        [416, 576, 192],
        [416, -576, 224],
        [416, 576, 224],
        [416, -576, 256],
        [416, 576, 256],
        [416, -576, 288],
        [416, 576, 288],
        [416, -576, 320],
        [416, 576, 320],
        [416, -576, 352],
        [416, 576, 352],
        [416, -576, 384],
        [416, 576, 384],
        [416, -576, 416],
        [416, 576, 416],
        [416, -576, 448],
        [416, 576, 448],
        [416, -576, 480],
        [416, 576, 480],
        [416, -576, 512],
        [416, 576, 512],
        [416, -576, 544],
        [416, 576, 544],
        [448, -576, -576],
        [448, -576, 576],
        [448, -544, -576],
        [448, -544, 576],
        [448, -512, -576],
        [448, -512, 576],
        [448, -480, -576],
        [448, -480, 576],
        [448, -448, -576],
        [448, -448, 576],
        [448, -416, -576],
        [448, -416, 576],
        [448, -384, -576],
        [448, -384, 576],
        [448, -352, -576],
        [448, -352, 576],
        [448, -320, -576],
        [448, -320, 576],
        [448, -288, -576],
        [448, -288, 576],
        [448, -256, -576],
        [448, -256, 576],
        [448, -224, -576],
        [448, -224, 576],
        [448, -192, -576],
        [448, -192, 576],
        [448, -160, -576],
        [448, -160, 576],
        [448, -128, -576],
        [448, -128, 576],
        [448, -96, -576],
        [448, -96, 576],
        [448, -64, -576],
        [448, -64, 576],
        [448, -32, -576],
        [448, -32, 576],
        [448, 0, -576],
        [448, 0, 576],
        [448, 32, -576],
        [448, 32, 576],
        [448, 64, -576],
        [448, 64, 576],
        [448, 96, -576],
        [448, 96, 576],
        [448, 128, -576],
        [448, 128, 576],
        [448, 160, -576],
        [448, 160, 576],
        [448, 192, -576],
        [448, 192, 576],
        [448, 224, -576],
        [448, 224, 576],
        [448, 256, -576],
        [448, 256, 576],
        [448, 288, -576],
        [448, 288, 576],
        [448, 320, -576],
        [448, 320, 576],
        [448, 352, -576],
        [448, 352, 576],
        [448, 384, -576],
        [448, 384, 576],
        [448, 416, -576],
        [448, 416, 576],
        [448, 448, -576],
        [448, 448, 576],
        [448, 480, -576],
        [448, 480, 576],
        [448, 512, -576],
        [448, 512, 576],
        [448, 544, -576],
        [448, 544, 576],
        [448, 576, -576],
        [448, 576, 576],
        [448, -576, -544],
        [448, 576, -544],
        [448, -576, -512],
        [448, 576, -512],
        [448, -576, -480],
        [448, 576, -480],
        [448, -576, -448],
        [448, 576, -448],
        [448, -576, -416],
        [448, 576, -416],
        [448, -576, -384],
        [448, 576, -384],
        [448, -576, -352],
        [448, 576, -352],
        [448, -576, -320],
        [448, 576, -320],
        [448, -576, -288],
        [448, 576, -288],
        [448, -576, -256],
        [448, 576, -256],
        [448, -576, -224],
        [448, 576, -224],
        [448, -576, -192],
        [448, 576, -192],
        [448, -576, -160],
        [448, 576, -160],
        [448, -576, -128],
        [448, 576, -128],
        [448, -576, -96],
        [448, 576, -96],
        [448, -576, -64],
        [448, 576, -64],
        [448, -576, -32],
        [448, 576, -32],
        [448, -576, 0],
        [448, 576, 0],
        [448, -576, 32],
        [448, 576, 32],
        [448, -576, 64],
        [448, 576, 64],
        [448, -576, 96],
        [448, 576, 96],
        [448, -576, 128],
        [448, 576, 128],
        [448, -576, 160],
        [448, 576, 160],
        [448, -576, 192],
        [448, 576, 192],
        [448, -576, 224],
        [448, 576, 224],
        [448, -576, 256],
        [448, 576, 256],
        [448, -576, 288],
        [448, 576, 288],
        [448, -576, 320],
        [448, 576, 320],
        [448, -576, 352],
        [448, 576, 352],
        [448, -576, 384],
        [448, 576, 384],
        [448, -576, 416],
        [448, 576, 416],
        [448, -576, 448],
        [448, 576, 448],
        [448, -576, 480],
        [448, 576, 480],
        [448, -576, 512],
        [448, 576, 512],
        [448, -576, 544],
        [448, 576, 544],
        [480, -576, -576],
        [480, -576, 576],
        [480, -544, -576],
        [480, -544, 576],
        [480, -512, -576],
        [480, -512, 576],
        [480, -480, -576],
        [480, -480, 576],
        [480, -448, -576],
        [480, -448, 576],
        [480, -416, -576],
        [480, -416, 576],
        [480, -384, -576],
        [480, -384, 576],
        [480, -352, -576],
        [480, -352, 576],
        [480, -320, -576],
        [480, -320, 576],
        [480, -288, -576],
        [480, -288, 576],
        [480, -256, -576],
        [480, -256, 576],
        [480, -224, -576],
        [480, -224, 576],
        [480, -192, -576],
        [480, -192, 576],
        [480, -160, -576],
        [480, -160, 576],
        [480, -128, -576],
        [480, -128, 576],
        [480, -96, -576],
        [480, -96, 576],
        [480, -64, -576],
        [480, -64, 576],
        [480, -32, -576],
        [480, -32, 576],
        [480, 0, -576],
        [480, 0, 576],
        [480, 32, -576],
        [480, 32, 576],
        [480, 64, -576],
        [480, 64, 576],
        [480, 96, -576],
        [480, 96, 576],
        [480, 128, -576],
        [480, 128, 576],
        [480, 160, -576],
        [480, 160, 576],
        [480, 192, -576],
        [480, 192, 576],
        [480, 224, -576],
        [480, 224, 576],
        [480, 256, -576],
        [480, 256, 576],
        [480, 288, -576],
        [480, 288, 576],
        [480, 320, -576],
        [480, 320, 576],
        [480, 352, -576],
        [480, 352, 576],
        [480, 384, -576],
        [480, 384, 576],
        [480, 416, -576],
        [480, 416, 576],
        [480, 448, -576],
        [480, 448, 576],
        [480, 480, -576],
        [480, 480, 576],
        [480, 512, -576],
        [480, 512, 576],
        [480, 544, -576],
        [480, 544, 576],
        [480, 576, -576],
        [480, 576, 576],
        [480, -576, -544],
        [480, 576, -544],
        [480, -576, -512],
        [480, 576, -512],
        [480, -576, -480],
        [480, 576, -480],
        [480, -576, -448],
        [480, 576, -448],
        [480, -576, -416],
        [480, 576, -416],
        [480, -576, -384],
        [480, 576, -384],
        [480, -576, -352],
        [480, 576, -352],
        [480, -576, -320],
        [480, 576, -320],
        [480, -576, -288],
        [480, 576, -288],
        [480, -576, -256],
        [480, 576, -256],
        [480, -576, -224],
        [480, 576, -224],
        [480, -576, -192],
        [480, 576, -192],
        [480, -576, -160],
        [480, 576, -160],
        [480, -576, -128],
        [480, 576, -128],
        [480, -576, -96],
        [480, 576, -96],
        [480, -576, -64],
        [480, 576, -64],
        [480, -576, -32],
        [480, 576, -32],
        [480, -576, 0],
        [480, 576, 0],
        [480, -576, 32],
        [480, 576, 32],
        [480, -576, 64],
        [480, 576, 64],
        [480, -576, 96],
        [480, 576, 96],
        [480, -576, 128],
        [480, 576, 128],
        [480, -576, 160],
        [480, 576, 160],
        [480, -576, 192],
        [480, 576, 192],
        [480, -576, 224],
        [480, 576, 224],
        [480, -576, 256],
        [480, 576, 256],
        [480, -576, 288],
        [480, 576, 288],
        [480, -576, 320],
        [480, 576, 320],
        [480, -576, 352],
        [480, 576, 352],
        [480, -576, 384],
        [480, 576, 384],
        [480, -576, 416],
        [480, 576, 416],
        [480, -576, 448],
        [480, 576, 448],
        [480, -576, 480],
        [480, 576, 480],
        [480, -576, 512],
        [480, 576, 512],
        [480, -576, 544],
        [480, 576, 544],
        [512, -576, -576],
        [512, -576, 576],
        [512, -544, -576],
        [512, -544, 576],
        [512, -512, -576],
        [512, -512, 576],
        [512, -480, -576],
        [512, -480, 576],
        [512, -448, -576],
        [512, -448, 576],
        [512, -416, -576],
        [512, -416, 576],
        [512, -384, -576],
        [512, -384, 576],
        [512, -352, -576],
        [512, -352, 576],
        [512, -320, -576],
        [512, -320, 576],
        [512, -288, -576],
        [512, -288, 576],
        [512, -256, -576],
        [512, -256, 576],
        [512, -224, -576],
        [512, -224, 576],
        [512, -192, -576],
        [512, -192, 576],
        [512, -160, -576],
        [512, -160, 576],
        [512, -128, -576],
        [512, -128, 576],
        [512, -96, -576],
        [512, -96, 576],
        [512, -64, -576],
        [512, -64, 576],
        [512, -32, -576],
        [512, -32, 576],
        [512, 0, -576],
        [512, 0, 576],
        [512, 32, -576],
        [512, 32, 576],
        [512, 64, -576],
        [512, 64, 576],
        [512, 96, -576],
        [512, 96, 576],
        [512, 128, -576],
        [512, 128, 576],
        [512, 160, -576],
        [512, 160, 576],
        [512, 192, -576],
        [512, 192, 576],
        [512, 224, -576],
        [512, 224, 576],
        [512, 256, -576],
        [512, 256, 576],
        [512, 288, -576],
        [512, 288, 576],
        [512, 320, -576],
        [512, 320, 576],
        [512, 352, -576],
        [512, 352, 576],
        [512, 384, -576],
        [512, 384, 576],
        [512, 416, -576],
        [512, 416, 576],
        [512, 448, -576],
        [512, 448, 576],
        [512, 480, -576],
        [512, 480, 576],
        [512, 512, -576],
        [512, 512, 576],
        [512, 544, -576],
        [512, 544, 576],
        [512, 576, -576],
        [512, 576, 576],
        [512, -576, -544],
        [512, 576, -544],
        [512, -576, -512],
        [512, 576, -512],
        [512, -576, -480],
        [512, 576, -480],
        [512, -576, -448],
        [512, 576, -448],
        [512, -576, -416],
        [512, 576, -416],
        [512, -576, -384],
        [512, 576, -384],
        [512, -576, -352],
        [512, 576, -352],
        [512, -576, -320],
        [512, 576, -320],
        [512, -576, -288],
        [512, 576, -288],
        [512, -576, -256],
        [512, 576, -256],
        [512, -576, -224],
        [512, 576, -224],
        [512, -576, -192],
        [512, 576, -192],
        [512, -576, -160],
        [512, 576, -160],
        [512, -576, -128],
        [512, 576, -128],
        [512, -576, -96],
        [512, 576, -96],
        [512, -576, -64],
        [512, 576, -64],
        [512, -576, -32],
        [512, 576, -32],
        [512, -576, 0],
        [512, 576, 0],
        [512, -576, 32],
        [512, 576, 32],
        [512, -576, 64],
        [512, 576, 64],
        [512, -576, 96],
        [512, 576, 96],
        [512, -576, 128],
        [512, 576, 128],
        [512, -576, 160],
        [512, 576, 160],
        [512, -576, 192],
        [512, 576, 192],
        [512, -576, 224],
        [512, 576, 224],
        [512, -576, 256],
        [512, 576, 256],
        [512, -576, 288],
        [512, 576, 288],
        [512, -576, 320],
        [512, 576, 320],
        [512, -576, 352],
        [512, 576, 352],
        [512, -576, 384],
        [512, 576, 384],
        [512, -576, 416],
        [512, 576, 416],
        [512, -576, 448],
        [512, 576, 448],
        [512, -576, 480],
        [512, 576, 480],
        [512, -576, 512],
        [512, 576, 512],
        [512, -576, 544],
        [512, 576, 544],
        [544, -576, -576],
        [544, -576, 576],
        [544, -544, -576],
        [544, -544, 576],
        [544, -512, -576],
        [544, -512, 576],
        [544, -480, -576],
        [544, -480, 576],
        [544, -448, -576],
        [544, -448, 576],
        [544, -416, -576],
        [544, -416, 576],
        [544, -384, -576],
        [544, -384, 576],
        [544, -352, -576],
        [544, -352, 576],
        [544, -320, -576],
        [544, -320, 576],
        [544, -288, -576],
        [544, -288, 576],
        [544, -256, -576],
        [544, -256, 576],
        [544, -224, -576],
        [544, -224, 576],
        [544, -192, -576],
        [544, -192, 576],
        [544, -160, -576],
        [544, -160, 576],
        [544, -128, -576],
        [544, -128, 576],
        [544, -96, -576],
        [544, -96, 576],
        [544, -64, -576],
        [544, -64, 576],
        [544, -32, -576],
        [544, -32, 576],
        [544, 0, -576],
        [544, 0, 576],
        [544, 32, -576],
        [544, 32, 576],
        [544, 64, -576],
        [544, 64, 576],
        [544, 96, -576],
        [544, 96, 576],
        [544, 128, -576],
        [544, 128, 576],
        [544, 160, -576],
        [544, 160, 576],
        [544, 192, -576],
        [544, 192, 576],
        [544, 224, -576],
        [544, 224, 576],
        [544, 256, -576],
        [544, 256, 576],
        [544, 288, -576],
        [544, 288, 576],
        [544, 320, -576],
        [544, 320, 576],
        [544, 352, -576],
        [544, 352, 576],
        [544, 384, -576],
        [544, 384, 576],
        [544, 416, -576],
        [544, 416, 576],
        [544, 448, -576],
        [544, 448, 576],
        [544, 480, -576],
        [544, 480, 576],
        [544, 512, -576],
        [544, 512, 576],
        [544, 544, -576],
        [544, 544, 576],
        [544, 576, -576],
        [544, 576, 576],
        [544, -576, -544],
        [544, 576, -544],
        [544, -576, -512],
        [544, 576, -512],
        [544, -576, -480],
        [544, 576, -480],
        [544, -576, -448],
        [544, 576, -448],
        [544, -576, -416],
        [544, 576, -416],
        [544, -576, -384],
        [544, 576, -384],
        [544, -576, -352],
        [544, 576, -352],
        [544, -576, -320],
        [544, 576, -320],
        [544, -576, -288],
        [544, 576, -288],
        [544, -576, -256],
        [544, 576, -256],
        [544, -576, -224],
        [544, 576, -224],
        [544, -576, -192],
        [544, 576, -192],
        [544, -576, -160],
        [544, 576, -160],
        [544, -576, -128],
        [544, 576, -128],
        [544, -576, -96],
        [544, 576, -96],
        [544, -576, -64],
        [544, 576, -64],
        [544, -576, -32],
        [544, 576, -32],
        [544, -576, 0],
        [544, 576, 0],
        [544, -576, 32],
        [544, 576, 32],
        [544, -576, 64],
        [544, 576, 64],
        [544, -576, 96],
        [544, 576, 96],
        [544, -576, 128],
        [544, 576, 128],
        [544, -576, 160],
        [544, 576, 160],
        [544, -576, 192],
        [544, 576, 192],
        [544, -576, 224],
        [544, 576, 224],
        [544, -576, 256],
        [544, 576, 256],
        [544, -576, 288],
        [544, 576, 288],
        [544, -576, 320],
        [544, 576, 320],
        [544, -576, 352],
        [544, 576, 352],
        [544, -576, 384],
        [544, 576, 384],
        [544, -576, 416],
        [544, 576, 416],
        [544, -576, 448],
        [544, 576, 448],
        [544, -576, 480],
        [544, 576, 480],
        [544, -576, 512],
        [544, 576, 512],
        [544, -576, 544],
        [544, 576, 544],
        [576, -576, -576],
        [576, -576, 576],
        [576, -544, -576],
        [576, -544, 576],
        [576, -512, -576],
        [576, -512, 576],
        [576, -480, -576],
        [576, -480, 576],
        [576, -448, -576],
        [576, -448, 576],
        [576, -416, -576],
        [576, -416, 576],
        [576, -384, -576],
        [576, -384, 576],
        [576, -352, -576],
        [576, -352, 576],
        [576, -320, -576],
        [576, -320, 576],
        [576, -288, -576],
        [576, -288, 576],
        [576, -256, -576],
        [576, -256, 576],
        [576, -224, -576],
        [576, -224, 576],
        [576, -192, -576],
        [576, -192, 576],
        [576, -160, -576],
        [576, -160, 576],
        [576, -128, -576],
        [576, -128, 576],
        [576, -96, -576],
        [576, -96, 576],
        [576, -64, -576],
        [576, -64, 576],
        [576, -32, -576],
        [576, -32, 576],
        [576, 0, -576],
        [576, 0, 576],
        [576, 32, -576],
        [576, 32, 576],
        [576, 64, -576],
        [576, 64, 576],
        [576, 96, -576],
        [576, 96, 576],
        [576, 128, -576],
        [576, 128, 576],
        [576, 160, -576],
        [576, 160, 576],
        [576, 192, -576],
        [576, 192, 576],
        [576, 224, -576],
        [576, 224, 576],
        [576, 256, -576],
        [576, 256, 576],
        [576, 288, -576],
        [576, 288, 576],
        [576, 320, -576],
        [576, 320, 576],
        [576, 352, -576],
        [576, 352, 576],
        [576, 384, -576],
        [576, 384, 576],
        [576, 416, -576],
        [576, 416, 576],
        [576, 448, -576],
        [576, 448, 576],
        [576, 480, -576],
        [576, 480, 576],
        [576, 512, -576],
        [576, 512, 576],
        [576, 544, -576],
        [576, 544, 576],
        [576, 576, -576],
        [576, 576, 576],
        [576, -576, -544],
        [576, 576, -544],
        [576, -576, -512],
        [576, 576, -512],
        [576, -576, -480],
        [576, 576, -480],
        [576, -576, -448],
        [576, 576, -448],
        [576, -576, -416],
        [576, 576, -416],
        [576, -576, -384],
        [576, 576, -384],
        [576, -576, -352],
        [576, 576, -352],
        [576, -576, -320],
        [576, 576, -320],
        [576, -576, -288],
        [576, 576, -288],
        [576, -576, -256],
        [576, 576, -256],
        [576, -576, -224],
        [576, 576, -224],
        [576, -576, -192],
        [576, 576, -192],
        [576, -576, -160],
        [576, 576, -160],
        [576, -576, -128],
        [576, 576, -128],
        [576, -576, -96],
        [576, 576, -96],
        [576, -576, -64],
        [576, 576, -64],
        [576, -576, -32],
        [576, 576, -32],
        [576, -576, 0],
        [576, 576, 0],
        [576, -576, 32],
        [576, 576, 32],
        [576, -576, 64],
        [576, 576, 64],
        [576, -576, 96],
        [576, 576, 96],
        [576, -576, 128],
        [576, 576, 128],
        [576, -576, 160],
        [576, 576, 160],
        [576, -576, 192],
        [576, 576, 192],
        [576, -576, 224],
        [576, 576, 224],
        [576, -576, 256],
        [576, 576, 256],
        [576, -576, 288],
        [576, 576, 288],
        [576, -576, 320],
        [576, 576, 320],
        [576, -576, 352],
        [576, 576, 352],
        [576, -576, 384],
        [576, 576, 384],
        [576, -576, 416],
        [576, 576, 416],
        [576, -576, 448],
        [576, 576, 448],
        [576, -576, 480],
        [576, 576, 480],
        [576, -576, 512],
        [576, 576, 512],
        [576, -576, 544],
        [576, 576, 544],
        [-576, -544, -544],
        [576, -544, -544],
        [-576, -512, -544],
        [576, -512, -544],
        [-576, -480, -544],
        [576, -480, -544],
        [-576, -448, -544],
        [576, -448, -544],
        [-576, -416, -544],
        [576, -416, -544],
        [-576, -384, -544],
        [576, -384, -544],
        [-576, -352, -544],
        [576, -352, -544],
        [-576, -320, -544],
        [576, -320, -544],
        [-576, -288, -544],
        [576, -288, -544],
        [-576, -256, -544],
        [576, -256, -544],
        [-576, -224, -544],
        [576, -224, -544],
        [-576, -192, -544],
        [576, -192, -544],
        [-576, -160, -544],
        [576, -160, -544],
        [-576, -128, -544],
        [576, -128, -544],
        [-576, -96, -544],
        [576, -96, -544],
        [-576, -64, -544],
        [576, -64, -544],
        [-576, -32, -544],
        [576, -32, -544],
        [-576, 0, -544],
        [576, 0, -544],
        [-576, 32, -544],
        [576, 32, -544],
        [-576, 64, -544],
        [576, 64, -544],
        [-576, 96, -544],
        [576, 96, -544],
        [-576, 128, -544],
        [576, 128, -544],
        [-576, 160, -544],
        [576, 160, -544],
        [-576, 192, -544],
        [576, 192, -544],
        [-576, 224, -544],
        [576, 224, -544],
        [-576, 256, -544],
        [576, 256, -544],
        [-576, 288, -544],
        [576, 288, -544],
        [-576, 320, -544],
        [576, 320, -544],
        [-576, 352, -544],
        [576, 352, -544],
        [-576, 384, -544],
        [576, 384, -544],
        [-576, 416, -544],
        [576, 416, -544],
        [-576, 448, -544],
        [576, 448, -544],
        [-576, 480, -544],
        [576, 480, -544],
        [-576, 512, -544],
        [576, 512, -544],
        [-576, 544, -544],
        [576, 544, -544],
        [-576, -544, -512],
        [576, -544, -512],
        [-576, -512, -512],
        [576, -512, -512],
        [-576, -480, -512],
        [576, -480, -512],
        [-576, -448, -512],
        [576, -448, -512],
        [-576, -416, -512],
        [576, -416, -512],
        [-576, -384, -512],
        [576, -384, -512],
        [-576, -352, -512],
        [576, -352, -512],
        [-576, -320, -512],
        [576, -320, -512],
        [-576, -288, -512],
        [576, -288, -512],
        [-576, -256, -512],
        [576, -256, -512],
        [-576, -224, -512],
        [576, -224, -512],
        [-576, -192, -512],
        [576, -192, -512],
        [-576, -160, -512],
        [576, -160, -512],
        [-576, -128, -512],
        [576, -128, -512],
        [-576, -96, -512],
        [576, -96, -512],
        [-576, -64, -512],
        [576, -64, -512],
        [-576, -32, -512],
        [576, -32, -512],
        [-576, 0, -512],
        [576, 0, -512],
        [-576, 32, -512],
        [576, 32, -512],
        [-576, 64, -512],
        [576, 64, -512],
        [-576, 96, -512],
        [576, 96, -512],
        [-576, 128, -512],
        [576, 128, -512],
        [-576, 160, -512],
        [576, 160, -512],
        [-576, 192, -512],
        [576, 192, -512],
        [-576, 224, -512],
        [576, 224, -512],
        [-576, 256, -512],
        [576, 256, -512],
        [-576, 288, -512],
        [576, 288, -512],
        [-576, 320, -512],
        [576, 320, -512],
        [-576, 352, -512],
        [576, 352, -512],
        [-576, 384, -512],
        [576, 384, -512],
        [-576, 416, -512],
        [576, 416, -512],
        [-576, 448, -512],
        [576, 448, -512],
        [-576, 480, -512],
        [576, 480, -512],
        [-576, 512, -512],
        [576, 512, -512],
        [-576, 544, -512],
        [576, 544, -512],
        [-576, -544, -480],
        [576, -544, -480],
        [-576, -512, -480],
        [576, -512, -480],
        [-576, -480, -480],
        [576, -480, -480],
        [-576, -448, -480],
        [576, -448, -480],
        [-576, -416, -480],
        [576, -416, -480],
        [-576, -384, -480],
        [576, -384, -480],
        [-576, -352, -480],
        [576, -352, -480],
        [-576, -320, -480],
        [576, -320, -480],
        [-576, -288, -480],
        [576, -288, -480],
        [-576, -256, -480],
        [576, -256, -480],
        [-576, -224, -480],
        [576, -224, -480],
        [-576, -192, -480],
        [576, -192, -480],
        [-576, -160, -480],
        [576, -160, -480],
        [-576, -128, -480],
        [576, -128, -480],
        [-576, -96, -480],
        [576, -96, -480],
        [-576, -64, -480],
        [576, -64, -480],
        [-576, -32, -480],
        [576, -32, -480],
        [-576, 0, -480],
        [576, 0, -480],
        [-576, 32, -480],
        [576, 32, -480],
        [-576, 64, -480],
        [576, 64, -480],
        [-576, 96, -480],
        [576, 96, -480],
        [-576, 128, -480],
        [576, 128, -480],
        [-576, 160, -480],
        [576, 160, -480],
        [-576, 192, -480],
        [576, 192, -480],
        [-576, 224, -480],
        [576, 224, -480],
        [-576, 256, -480],
        [576, 256, -480],
        [-576, 288, -480],
        [576, 288, -480],
        [-576, 320, -480],
        [576, 320, -480],
        [-576, 352, -480],
        [576, 352, -480],
        [-576, 384, -480],
        [576, 384, -480],
        [-576, 416, -480],
        [576, 416, -480],
        [-576, 448, -480],
        [576, 448, -480],
        [-576, 480, -480],
        [576, 480, -480],
        [-576, 512, -480],
        [576, 512, -480],
        [-576, 544, -480],
        [576, 544, -480],
        [-576, -544, -448],
        [576, -544, -448],
        [-576, -512, -448],
        [576, -512, -448],
        [-576, -480, -448],
        [576, -480, -448],
        [-576, -448, -448],
        [576, -448, -448],
        [-576, -416, -448],
        [576, -416, -448],
        [-576, -384, -448],
        [576, -384, -448],
        [-576, -352, -448],
        [576, -352, -448],
        [-576, -320, -448],
        [576, -320, -448],
        [-576, -288, -448],
        [576, -288, -448],
        [-576, -256, -448],
        [576, -256, -448],
        [-576, -224, -448],
        [576, -224, -448],
        [-576, -192, -448],
        [576, -192, -448],
        [-576, -160, -448],
        [576, -160, -448],
        [-576, -128, -448],
        [576, -128, -448],
        [-576, -96, -448],
        [576, -96, -448],
        [-576, -64, -448],
        [576, -64, -448],
        [-576, -32, -448],
        [576, -32, -448],
        [-576, 0, -448],
        [576, 0, -448],
        [-576, 32, -448],
        [576, 32, -448],
        [-576, 64, -448],
        [576, 64, -448],
        [-576, 96, -448],
        [576, 96, -448],
        [-576, 128, -448],
        [576, 128, -448],
        [-576, 160, -448],
        [576, 160, -448],
        [-576, 192, -448],
        [576, 192, -448],
        [-576, 224, -448],
        [576, 224, -448],
        [-576, 256, -448],
        [576, 256, -448],
        [-576, 288, -448],
        [576, 288, -448],
        [-576, 320, -448],
        [576, 320, -448],
        [-576, 352, -448],
        [576, 352, -448],
        [-576, 384, -448],
        [576, 384, -448],
        [-576, 416, -448],
        [576, 416, -448],
        [-576, 448, -448],
        [576, 448, -448],
        [-576, 480, -448],
        [576, 480, -448],
        [-576, 512, -448],
        [576, 512, -448],
        [-576, 544, -448],
        [576, 544, -448],
        [-576, -544, -416],
        [576, -544, -416],
        [-576, -512, -416],
        [576, -512, -416],
        [-576, -480, -416],
        [576, -480, -416],
        [-576, -448, -416],
        [576, -448, -416],
        [-576, -416, -416],
        [576, -416, -416],
        [-576, -384, -416],
        [576, -384, -416],
        [-576, -352, -416],
        [576, -352, -416],
        [-576, -320, -416],
        [576, -320, -416],
        [-576, -288, -416],
        [576, -288, -416],
        [-576, -256, -416],
        [576, -256, -416],
        [-576, -224, -416],
        [576, -224, -416],
        [-576, -192, -416],
        [576, -192, -416],
        [-576, -160, -416],
        [576, -160, -416],
        [-576, -128, -416],
        [576, -128, -416],
        [-576, -96, -416],
        [576, -96, -416],
        [-576, -64, -416],
        [576, -64, -416],
        [-576, -32, -416],
        [576, -32, -416],
        [-576, 0, -416],
        [576, 0, -416],
        [-576, 32, -416],
        [576, 32, -416],
        [-576, 64, -416],
        [576, 64, -416],
        [-576, 96, -416],
        [576, 96, -416],
        [-576, 128, -416],
        [576, 128, -416],
        [-576, 160, -416],
        [576, 160, -416],
        [-576, 192, -416],
        [576, 192, -416],
        [-576, 224, -416],
        [576, 224, -416],
        [-576, 256, -416],
        [576, 256, -416],
        [-576, 288, -416],
        [576, 288, -416],
        [-576, 320, -416],
        [576, 320, -416],
        [-576, 352, -416],
        [576, 352, -416],
        [-576, 384, -416],
        [576, 384, -416],
        [-576, 416, -416],
        [576, 416, -416],
        [-576, 448, -416],
        [576, 448, -416],
        [-576, 480, -416],
        [576, 480, -416],
        [-576, 512, -416],
        [576, 512, -416],
        [-576, 544, -416],
        [576, 544, -416],
        [-576, -544, -384],
        [576, -544, -384],
        [-576, -512, -384],
        [576, -512, -384],
        [-576, -480, -384],
        [576, -480, -384],
        [-576, -448, -384],
        [576, -448, -384],
        [-576, -416, -384],
        [576, -416, -384],
        [-576, -384, -384],
        [576, -384, -384],
        [-576, -352, -384],
        [576, -352, -384],
        [-576, -320, -384],
        [576, -320, -384],
        [-576, -288, -384],
        [576, -288, -384],
        [-576, -256, -384],
        [576, -256, -384],
        [-576, -224, -384],
        [576, -224, -384],
        [-576, -192, -384],
        [576, -192, -384],
        [-576, -160, -384],
        [576, -160, -384],
        [-576, -128, -384],
        [576, -128, -384],
        [-576, -96, -384],
        [576, -96, -384],
        [-576, -64, -384],
        [576, -64, -384],
        [-576, -32, -384],
        [576, -32, -384],
        [-576, 0, -384],
        [576, 0, -384],
        [-576, 32, -384],
        [576, 32, -384],
        [-576, 64, -384],
        [576, 64, -384],
        [-576, 96, -384],
        [576, 96, -384],
        [-576, 128, -384],
        [576, 128, -384],
        [-576, 160, -384],
        [576, 160, -384],
        [-576, 192, -384],
        [576, 192, -384],
        [-576, 224, -384],
        [576, 224, -384],
        [-576, 256, -384],
        [576, 256, -384],
        [-576, 288, -384],
        [576, 288, -384],
        [-576, 320, -384],
        [576, 320, -384],
        [-576, 352, -384],
        [576, 352, -384],
        [-576, 384, -384],
        [576, 384, -384],
        [-576, 416, -384],
        [576, 416, -384],
        [-576, 448, -384],
        [576, 448, -384],
        [-576, 480, -384],
        [576, 480, -384],
        [-576, 512, -384],
        [576, 512, -384],
        [-576, 544, -384],
        [576, 544, -384],
        [-576, -544, -352],
        [576, -544, -352],
        [-576, -512, -352],
        [576, -512, -352],
        [-576, -480, -352],
        [576, -480, -352],
        [-576, -448, -352],
        [576, -448, -352],
        [-576, -416, -352],
        [576, -416, -352],
        [-576, -384, -352],
        [576, -384, -352],
        [-576, -352, -352],
        [576, -352, -352],
        [-576, -320, -352],
        [576, -320, -352],
        [-576, -288, -352],
        [576, -288, -352],
        [-576, -256, -352],
        [576, -256, -352],
        [-576, -224, -352],
        [576, -224, -352],
        [-576, -192, -352],
        [576, -192, -352],
        [-576, -160, -352],
        [576, -160, -352],
        [-576, -128, -352],
        [576, -128, -352],
        [-576, -96, -352],
        [576, -96, -352],
        [-576, -64, -352],
        [576, -64, -352],
        [-576, -32, -352],
        [576, -32, -352],
        [-576, 0, -352],
        [576, 0, -352],
        [-576, 32, -352],
        [576, 32, -352],
        [-576, 64, -352],
        [576, 64, -352],
        [-576, 96, -352],
        [576, 96, -352],
        [-576, 128, -352],
        [576, 128, -352],
        [-576, 160, -352],
        [576, 160, -352],
        [-576, 192, -352],
        [576, 192, -352],
        [-576, 224, -352],
        [576, 224, -352],
        [-576, 256, -352],
        [576, 256, -352],
        [-576, 288, -352],
        [576, 288, -352],
        [-576, 320, -352],
        [576, 320, -352],
        [-576, 352, -352],
        [576, 352, -352],
        [-576, 384, -352],
        [576, 384, -352],
        [-576, 416, -352],
        [576, 416, -352],
        [-576, 448, -352],
        [576, 448, -352],
        [-576, 480, -352],
        [576, 480, -352],
        [-576, 512, -352],
        [576, 512, -352],
        [-576, 544, -352],
        [576, 544, -352],
        [-576, -544, -320],
        [576, -544, -320],
        [-576, -512, -320],
        [576, -512, -320],
        [-576, -480, -320],
        [576, -480, -320],
        [-576, -448, -320],
        [576, -448, -320],
        [-576, -416, -320],
        [576, -416, -320],
        [-576, -384, -320],
        [576, -384, -320],
        [-576, -352, -320],
        [576, -352, -320],
        [-576, -320, -320],
        [576, -320, -320],
        [-576, -288, -320],
        [576, -288, -320],
        [-576, -256, -320],
        [576, -256, -320],
        [-576, -224, -320],
        [576, -224, -320],
        [-576, -192, -320],
        [576, -192, -320],
        [-576, -160, -320],
        [576, -160, -320],
        [-576, -128, -320],
        [576, -128, -320],
        [-576, -96, -320],
        [576, -96, -320],
        [-576, -64, -320],
        [576, -64, -320],
        [-576, -32, -320],
        [576, -32, -320],
        [-576, 0, -320],
        [576, 0, -320],
        [-576, 32, -320],
        [576, 32, -320],
        [-576, 64, -320],
        [576, 64, -320],
        [-576, 96, -320],
        [576, 96, -320],
        [-576, 128, -320],
        [576, 128, -320],
        [-576, 160, -320],
        [576, 160, -320],
        [-576, 192, -320],
        [576, 192, -320],
        [-576, 224, -320],
        [576, 224, -320],
        [-576, 256, -320],
        [576, 256, -320],
        [-576, 288, -320],
        [576, 288, -320],
        [-576, 320, -320],
        [576, 320, -320],
        [-576, 352, -320],
        [576, 352, -320],
        [-576, 384, -320],
        [576, 384, -320],
        [-576, 416, -320],
        [576, 416, -320],
        [-576, 448, -320],
        [576, 448, -320],
        [-576, 480, -320],
        [576, 480, -320],
        [-576, 512, -320],
        [576, 512, -320],
        [-576, 544, -320],
        [576, 544, -320],
        [-576, -544, -288],
        [576, -544, -288],
        [-576, -512, -288],
        [576, -512, -288],
        [-576, -480, -288],
        [576, -480, -288],
        [-576, -448, -288],
        [576, -448, -288],
        [-576, -416, -288],
        [576, -416, -288],
        [-576, -384, -288],
        [576, -384, -288],
        [-576, -352, -288],
        [576, -352, -288],
        [-576, -320, -288],
        [576, -320, -288],
        [-576, -288, -288],
        [576, -288, -288],
        [-576, -256, -288],
        [576, -256, -288],
        [-576, -224, -288],
        [576, -224, -288],
        [-576, -192, -288],
        [576, -192, -288],
        [-576, -160, -288],
        [576, -160, -288],
        [-576, -128, -288],
        [576, -128, -288],
        [-576, -96, -288],
        [576, -96, -288],
        [-576, -64, -288],
        [576, -64, -288],
        [-576, -32, -288],
        [576, -32, -288],
        [-576, 0, -288],
        [576, 0, -288],
        [-576, 32, -288],
        [576, 32, -288],
        [-576, 64, -288],
        [576, 64, -288],
        [-576, 96, -288],
        [576, 96, -288],
        [-576, 128, -288],
        [576, 128, -288],
        [-576, 160, -288],
        [576, 160, -288],
        [-576, 192, -288],
        [576, 192, -288],
        [-576, 224, -288],
        [576, 224, -288],
        [-576, 256, -288],
        [576, 256, -288],
        [-576, 288, -288],
        [576, 288, -288],
        [-576, 320, -288],
        [576, 320, -288],
        [-576, 352, -288],
        [576, 352, -288],
        [-576, 384, -288],
        [576, 384, -288],
        [-576, 416, -288],
        [576, 416, -288],
        [-576, 448, -288],
        [576, 448, -288],
        [-576, 480, -288],
        [576, 480, -288],
        [-576, 512, -288],
        [576, 512, -288],
        [-576, 544, -288],
        [576, 544, -288],
        [-576, -544, -256],
        [576, -544, -256],
        [-576, -512, -256],
        [576, -512, -256],
        [-576, -480, -256],
        [576, -480, -256],
        [-576, -448, -256],
        [576, -448, -256],
        [-576, -416, -256],
        [576, -416, -256],
        [-576, -384, -256],
        [576, -384, -256],
        [-576, -352, -256],
        [576, -352, -256],
        [-576, -320, -256],
        [576, -320, -256],
        [-576, -288, -256],
        [576, -288, -256],
        [-576, -256, -256],
        [576, -256, -256],
        [-576, -224, -256],
        [576, -224, -256],
        [-576, -192, -256],
        [576, -192, -256],
        [-576, -160, -256],
        [576, -160, -256],
        [-576, -128, -256],
        [576, -128, -256],
        [-576, -96, -256],
        [576, -96, -256],
        [-576, -64, -256],
        [576, -64, -256],
        [-576, -32, -256],
        [576, -32, -256],
        [-576, 0, -256],
        [576, 0, -256],
        [-576, 32, -256],
        [576, 32, -256],
        [-576, 64, -256],
        [576, 64, -256],
        [-576, 96, -256],
        [576, 96, -256],
        [-576, 128, -256],
        [576, 128, -256],
        [-576, 160, -256],
        [576, 160, -256],
        [-576, 192, -256],
        [576, 192, -256],
        [-576, 224, -256],
        [576, 224, -256],
        [-576, 256, -256],
        [576, 256, -256],
        [-576, 288, -256],
        [576, 288, -256],
        [-576, 320, -256],
        [576, 320, -256],
        [-576, 352, -256],
        [576, 352, -256],
        [-576, 384, -256],
        [576, 384, -256],
        [-576, 416, -256],
        [576, 416, -256],
        [-576, 448, -256],
        [576, 448, -256],
        [-576, 480, -256],
        [576, 480, -256],
        [-576, 512, -256],
        [576, 512, -256],
        [-576, 544, -256],
        [576, 544, -256],
        [-576, -544, -224],
        [576, -544, -224],
        [-576, -512, -224],
        [576, -512, -224],
        [-576, -480, -224],
        [576, -480, -224],
        [-576, -448, -224],
        [576, -448, -224],
        [-576, -416, -224],
        [576, -416, -224],
        [-576, -384, -224],
        [576, -384, -224],
        [-576, -352, -224],
        [576, -352, -224],
        [-576, -320, -224],
        [576, -320, -224],
        [-576, -288, -224],
        [576, -288, -224],
        [-576, -256, -224],
        [576, -256, -224],
        [-576, -224, -224],
        [576, -224, -224],
        [-576, -192, -224],
        [576, -192, -224],
        [-576, -160, -224],
        [576, -160, -224],
        [-576, -128, -224],
        [576, -128, -224],
        [-576, -96, -224],
        [576, -96, -224],
        [-576, -64, -224],
        [576, -64, -224],
        [-576, -32, -224],
        [576, -32, -224],
        [-576, 0, -224],
        [576, 0, -224],
        [-576, 32, -224],
        [576, 32, -224],
        [-576, 64, -224],
        [576, 64, -224],
        [-576, 96, -224],
        [576, 96, -224],
        [-576, 128, -224],
        [576, 128, -224],
        [-576, 160, -224],
        [576, 160, -224],
        [-576, 192, -224],
        [576, 192, -224],
        [-576, 224, -224],
        [576, 224, -224],
        [-576, 256, -224],
        [576, 256, -224],
        [-576, 288, -224],
        [576, 288, -224],
        [-576, 320, -224],
        [576, 320, -224],
        [-576, 352, -224],
        [576, 352, -224],
        [-576, 384, -224],
        [576, 384, -224],
        [-576, 416, -224],
        [576, 416, -224],
        [-576, 448, -224],
        [576, 448, -224],
        [-576, 480, -224],
        [576, 480, -224],
        [-576, 512, -224],
        [576, 512, -224],
        [-576, 544, -224],
        [576, 544, -224],
        [-576, -544, -192],
        [576, -544, -192],
        [-576, -512, -192],
        [576, -512, -192],
        [-576, -480, -192],
        [576, -480, -192],
        [-576, -448, -192],
        [576, -448, -192],
        [-576, -416, -192],
        [576, -416, -192],
        [-576, -384, -192],
        [576, -384, -192],
        [-576, -352, -192],
        [576, -352, -192],
        [-576, -320, -192],
        [576, -320, -192],
        [-576, -288, -192],
        [576, -288, -192],
        [-576, -256, -192],
        [576, -256, -192],
        [-576, -224, -192],
        [576, -224, -192],
        [-576, -192, -192],
        [576, -192, -192],
        [-576, -160, -192],
        [576, -160, -192],
        [-576, -128, -192],
        [576, -128, -192],
        [-576, -96, -192],
        [576, -96, -192],
        [-576, -64, -192],
        [576, -64, -192],
        [-576, -32, -192],
        [576, -32, -192],
        [-576, 0, -192],
        [576, 0, -192],
        [-576, 32, -192],
        [576, 32, -192],
        [-576, 64, -192],
        [576, 64, -192],
        [-576, 96, -192],
        [576, 96, -192],
        [-576, 128, -192],
        [576, 128, -192],
        [-576, 160, -192],
        [576, 160, -192],
        [-576, 192, -192],
        [576, 192, -192],
        [-576, 224, -192],
        [576, 224, -192],
        [-576, 256, -192],
        [576, 256, -192],
        [-576, 288, -192],
        [576, 288, -192],
        [-576, 320, -192],
        [576, 320, -192],
        [-576, 352, -192],
        [576, 352, -192],
        [-576, 384, -192],
        [576, 384, -192],
        [-576, 416, -192],
        [576, 416, -192],
        [-576, 448, -192],
        [576, 448, -192],
        [-576, 480, -192],
        [576, 480, -192],
        [-576, 512, -192],
        [576, 512, -192],
        [-576, 544, -192],
        [576, 544, -192],
        [-576, -544, -160],
        [576, -544, -160],
        [-576, -512, -160],
        [576, -512, -160],
        [-576, -480, -160],
        [576, -480, -160],
        [-576, -448, -160],
        [576, -448, -160],
        [-576, -416, -160],
        [576, -416, -160],
        [-576, -384, -160],
        [576, -384, -160],
        [-576, -352, -160],
        [576, -352, -160],
        [-576, -320, -160],
        [576, -320, -160],
        [-576, -288, -160],
        [576, -288, -160],
        [-576, -256, -160],
        [576, -256, -160],
        [-576, -224, -160],
        [576, -224, -160],
        [-576, -192, -160],
        [576, -192, -160],
        [-576, -160, -160],
        [576, -160, -160],
        [-576, -128, -160],
        [576, -128, -160],
        [-576, -96, -160],
        [576, -96, -160],
        [-576, -64, -160],
        [576, -64, -160],
        [-576, -32, -160],
        [576, -32, -160],
        [-576, 0, -160],
        [576, 0, -160],
        [-576, 32, -160],
        [576, 32, -160],
        [-576, 64, -160],
        [576, 64, -160],
        [-576, 96, -160],
        [576, 96, -160],
        [-576, 128, -160],
        [576, 128, -160],
        [-576, 160, -160],
        [576, 160, -160],
        [-576, 192, -160],
        [576, 192, -160],
        [-576, 224, -160],
        [576, 224, -160],
        [-576, 256, -160],
        [576, 256, -160],
        [-576, 288, -160],
        [576, 288, -160],
        [-576, 320, -160],
        [576, 320, -160],
        [-576, 352, -160],
        [576, 352, -160],
        [-576, 384, -160],
        [576, 384, -160],
        [-576, 416, -160],
        [576, 416, -160],
        [-576, 448, -160],
        [576, 448, -160],
        [-576, 480, -160],
        [576, 480, -160],
        [-576, 512, -160],
        [576, 512, -160],
        [-576, 544, -160],
        [576, 544, -160],
        [-576, -544, -128],
        [576, -544, -128],
        [-576, -512, -128],
        [576, -512, -128],
        [-576, -480, -128],
        [576, -480, -128],
        [-576, -448, -128],
        [576, -448, -128],
        [-576, -416, -128],
        [576, -416, -128],
        [-576, -384, -128],
        [576, -384, -128],
        [-576, -352, -128],
        [576, -352, -128],
        [-576, -320, -128],
        [576, -320, -128],
        [-576, -288, -128],
        [576, -288, -128],
        [-576, -256, -128],
        [576, -256, -128],
        [-576, -224, -128],
        [576, -224, -128],
        [-576, -192, -128],
        [576, -192, -128],
        [-576, -160, -128],
        [576, -160, -128],
        [-576, -128, -128],
        [576, -128, -128],
        [-576, -96, -128],
        [576, -96, -128],
        [-576, -64, -128],
        [576, -64, -128],
        [-576, -32, -128],
        [576, -32, -128],
        [-576, 0, -128],
        [576, 0, -128],
        [-576, 32, -128],
        [576, 32, -128],
        [-576, 64, -128],
        [576, 64, -128],
        [-576, 96, -128],
        [576, 96, -128],
        [-576, 128, -128],
        [576, 128, -128],
        [-576, 160, -128],
        [576, 160, -128],
        [-576, 192, -128],
        [576, 192, -128],
        [-576, 224, -128],
        [576, 224, -128],
        [-576, 256, -128],
        [576, 256, -128],
        [-576, 288, -128],
        [576, 288, -128],
        [-576, 320, -128],
        [576, 320, -128],
        [-576, 352, -128],
        [576, 352, -128],
        [-576, 384, -128],
        [576, 384, -128],
        [-576, 416, -128],
        [576, 416, -128],
        [-576, 448, -128],
        [576, 448, -128],
        [-576, 480, -128],
        [576, 480, -128],
        [-576, 512, -128],
        [576, 512, -128],
        [-576, 544, -128],
        [576, 544, -128],
        [-576, -544, -96],
        [576, -544, -96],
        [-576, -512, -96],
        [576, -512, -96],
        [-576, -480, -96],
        [576, -480, -96],
        [-576, -448, -96],
        [576, -448, -96],
        [-576, -416, -96],
        [576, -416, -96],
        [-576, -384, -96],
        [576, -384, -96],
        [-576, -352, -96],
        [576, -352, -96],
        [-576, -320, -96],
        [576, -320, -96],
        [-576, -288, -96],
        [576, -288, -96],
        [-576, -256, -96],
        [576, -256, -96],
        [-576, -224, -96],
        [576, -224, -96],
        [-576, -192, -96],
        [576, -192, -96],
        [-576, -160, -96],
        [576, -160, -96],
        [-576, -128, -96],
        [576, -128, -96],
        [-576, -96, -96],
        [576, -96, -96],
        [-576, -64, -96],
        [576, -64, -96],
        [-576, -32, -96],
        [576, -32, -96],
        [-576, 0, -96],
        [576, 0, -96],
        [-576, 32, -96],
        [576, 32, -96],
        [-576, 64, -96],
        [576, 64, -96],
        [-576, 96, -96],
        [576, 96, -96],
        [-576, 128, -96],
        [576, 128, -96],
        [-576, 160, -96],
        [576, 160, -96],
        [-576, 192, -96],
        [576, 192, -96],
        [-576, 224, -96],
        [576, 224, -96],
        [-576, 256, -96],
        [576, 256, -96],
        [-576, 288, -96],
        [576, 288, -96],
        [-576, 320, -96],
        [576, 320, -96],
        [-576, 352, -96],
        [576, 352, -96],
        [-576, 384, -96],
        [576, 384, -96],
        [-576, 416, -96],
        [576, 416, -96],
        [-576, 448, -96],
        [576, 448, -96],
        [-576, 480, -96],
        [576, 480, -96],
        [-576, 512, -96],
        [576, 512, -96],
        [-576, 544, -96],
        [576, 544, -96],
        [-576, -544, -64],
        [576, -544, -64],
        [-576, -512, -64],
        [576, -512, -64],
        [-576, -480, -64],
        [576, -480, -64],
        [-576, -448, -64],
        [576, -448, -64],
        [-576, -416, -64],
        [576, -416, -64],
        [-576, -384, -64],
        [576, -384, -64],
        [-576, -352, -64],
        [576, -352, -64],
        [-576, -320, -64],
        [576, -320, -64],
        [-576, -288, -64],
        [576, -288, -64],
        [-576, -256, -64],
        [576, -256, -64],
        [-576, -224, -64],
        [576, -224, -64],
        [-576, -192, -64],
        [576, -192, -64],
        [-576, -160, -64],
        [576, -160, -64],
        [-576, -128, -64],
        [576, -128, -64],
        [-576, -96, -64],
        [576, -96, -64],
        [-576, -64, -64],
        [576, -64, -64],
        [-576, -32, -64],
        [576, -32, -64],
        [-576, 0, -64],
        [576, 0, -64],
        [-576, 32, -64],
        [576, 32, -64],
        [-576, 64, -64],
        [576, 64, -64],
        [-576, 96, -64],
        [576, 96, -64],
        [-576, 128, -64],
        [576, 128, -64],
        [-576, 160, -64],
        [576, 160, -64],
        [-576, 192, -64],
        [576, 192, -64],
        [-576, 224, -64],
        [576, 224, -64],
        [-576, 256, -64],
        [576, 256, -64],
        [-576, 288, -64],
        [576, 288, -64],
        [-576, 320, -64],
        [576, 320, -64],
        [-576, 352, -64],
        [576, 352, -64],
        [-576, 384, -64],
        [576, 384, -64],
        [-576, 416, -64],
        [576, 416, -64],
        [-576, 448, -64],
        [576, 448, -64],
        [-576, 480, -64],
        [576, 480, -64],
        [-576, 512, -64],
        [576, 512, -64],
        [-576, 544, -64],
        [576, 544, -64],
        [-576, -544, -32],
        [576, -544, -32],
        [-576, -512, -32],
        [576, -512, -32],
        [-576, -480, -32],
        [576, -480, -32],
        [-576, -448, -32],
        [576, -448, -32],
        [-576, -416, -32],
        [576, -416, -32],
        [-576, -384, -32],
        [576, -384, -32],
        [-576, -352, -32],
        [576, -352, -32],
        [-576, -320, -32],
        [576, -320, -32],
        [-576, -288, -32],
        [576, -288, -32],
        [-576, -256, -32],
        [576, -256, -32],
        [-576, -224, -32],
        [576, -224, -32],
        [-576, -192, -32],
        [576, -192, -32],
        [-576, -160, -32],
        [576, -160, -32],
        [-576, -128, -32],
        [576, -128, -32],
        [-576, -96, -32],
        [576, -96, -32],
        [-576, -64, -32],
        [576, -64, -32],
        [-576, -32, -32],
        [576, -32, -32],
        [-576, 0, -32],
        [576, 0, -32],
        [-576, 32, -32],
        [576, 32, -32],
        [-576, 64, -32],
        [576, 64, -32],
        [-576, 96, -32],
        [576, 96, -32],
        [-576, 128, -32],
        [576, 128, -32],
        [-576, 160, -32],
        [576, 160, -32],
        [-576, 192, -32],
        [576, 192, -32],
        [-576, 224, -32],
        [576, 224, -32],
        [-576, 256, -32],
        [576, 256, -32],
        [-576, 288, -32],
        [576, 288, -32],
        [-576, 320, -32],
        [576, 320, -32],
        [-576, 352, -32],
        [576, 352, -32],
        [-576, 384, -32],
        [576, 384, -32],
        [-576, 416, -32],
        [576, 416, -32],
        [-576, 448, -32],
        [576, 448, -32],
        [-576, 480, -32],
        [576, 480, -32],
        [-576, 512, -32],
        [576, 512, -32],
        [-576, 544, -32],
        [576, 544, -32],
        [-576, -544, 0],
        [576, -544, 0],
        [-576, -512, 0],
        [576, -512, 0],
        [-576, -480, 0],
        [576, -480, 0],
        [-576, -448, 0],
        [576, -448, 0],
        [-576, -416, 0],
        [576, -416, 0],
        [-576, -384, 0],
        [576, -384, 0],
        [-576, -352, 0],
        [576, -352, 0],
        [-576, -320, 0],
        [576, -320, 0],
        [-576, -288, 0],
        [576, -288, 0],
        [-576, -256, 0],
        [576, -256, 0],
        [-576, -224, 0],
        [576, -224, 0],
        [-576, -192, 0],
        [576, -192, 0],
        [-576, -160, 0],
        [576, -160, 0],
        [-576, -128, 0],
        [576, -128, 0],
        [-576, -96, 0],
        [576, -96, 0],
        [-576, -64, 0],
        [576, -64, 0],
        [-576, -32, 0],
        [576, -32, 0],
        [-576, 0, 0],
        [576, 0, 0],
        [-576, 32, 0],
        [576, 32, 0],
        [-576, 64, 0],
        [576, 64, 0],
        [-576, 96, 0],
        [576, 96, 0],
        [-576, 128, 0],
        [576, 128, 0],
        [-576, 160, 0],
        [576, 160, 0],
        [-576, 192, 0],
        [576, 192, 0],
        [-576, 224, 0],
        [576, 224, 0],
        [-576, 256, 0],
        [576, 256, 0],
        [-576, 288, 0],
        [576, 288, 0],
        [-576, 320, 0],
        [576, 320, 0],
        [-576, 352, 0],
        [576, 352, 0],
        [-576, 384, 0],
        [576, 384, 0],
        [-576, 416, 0],
        [576, 416, 0],
        [-576, 448, 0],
        [576, 448, 0],
        [-576, 480, 0],
        [576, 480, 0],
        [-576, 512, 0],
        [576, 512, 0],
        [-576, 544, 0],
        [576, 544, 0],
        [-576, -544, 32],
        [576, -544, 32],
        [-576, -512, 32],
        [576, -512, 32],
        [-576, -480, 32],
        [576, -480, 32],
        [-576, -448, 32],
        [576, -448, 32],
        [-576, -416, 32],
        [576, -416, 32],
        [-576, -384, 32],
        [576, -384, 32],
        [-576, -352, 32],
        [576, -352, 32],
        [-576, -320, 32],
        [576, -320, 32],
        [-576, -288, 32],
        [576, -288, 32],
        [-576, -256, 32],
        [576, -256, 32],
        [-576, -224, 32],
        [576, -224, 32],
        [-576, -192, 32],
        [576, -192, 32],
        [-576, -160, 32],
        [576, -160, 32],
        [-576, -128, 32],
        [576, -128, 32],
        [-576, -96, 32],
        [576, -96, 32],
        [-576, -64, 32],
        [576, -64, 32],
        [-576, -32, 32],
        [576, -32, 32],
        [-576, 0, 32],
        [576, 0, 32],
        [-576, 32, 32],
        [576, 32, 32],
        [-576, 64, 32],
        [576, 64, 32],
        [-576, 96, 32],
        [576, 96, 32],
        [-576, 128, 32],
        [576, 128, 32],
        [-576, 160, 32],
        [576, 160, 32],
        [-576, 192, 32],
        [576, 192, 32],
        [-576, 224, 32],
        [576, 224, 32],
        [-576, 256, 32],
        [576, 256, 32],
        [-576, 288, 32],
        [576, 288, 32],
        [-576, 320, 32],
        [576, 320, 32],
        [-576, 352, 32],
        [576, 352, 32],
        [-576, 384, 32],
        [576, 384, 32],
        [-576, 416, 32],
        [576, 416, 32],
        [-576, 448, 32],
        [576, 448, 32],
        [-576, 480, 32],
        [576, 480, 32],
        [-576, 512, 32],
        [576, 512, 32],
        [-576, 544, 32],
        [576, 544, 32],
        [-576, -544, 64],
        [576, -544, 64],
        [-576, -512, 64],
        [576, -512, 64],
        [-576, -480, 64],
        [576, -480, 64],
        [-576, -448, 64],
        [576, -448, 64],
        [-576, -416, 64],
        [576, -416, 64],
        [-576, -384, 64],
        [576, -384, 64],
        [-576, -352, 64],
        [576, -352, 64],
        [-576, -320, 64],
        [576, -320, 64],
        [-576, -288, 64],
        [576, -288, 64],
        [-576, -256, 64],
        [576, -256, 64],
        [-576, -224, 64],
        [576, -224, 64],
        [-576, -192, 64],
        [576, -192, 64],
        [-576, -160, 64],
        [576, -160, 64],
        [-576, -128, 64],
        [576, -128, 64],
        [-576, -96, 64],
        [576, -96, 64],
        [-576, -64, 64],
        [576, -64, 64],
        [-576, -32, 64],
        [576, -32, 64],
        [-576, 0, 64],
        [576, 0, 64],
        [-576, 32, 64],
        [576, 32, 64],
        [-576, 64, 64],
        [576, 64, 64],
        [-576, 96, 64],
        [576, 96, 64],
        [-576, 128, 64],
        [576, 128, 64],
        [-576, 160, 64],
        [576, 160, 64],
        [-576, 192, 64],
        [576, 192, 64],
        [-576, 224, 64],
        [576, 224, 64],
        [-576, 256, 64],
        [576, 256, 64],
        [-576, 288, 64],
        [576, 288, 64],
        [-576, 320, 64],
        [576, 320, 64],
        [-576, 352, 64],
        [576, 352, 64],
        [-576, 384, 64],
        [576, 384, 64],
        [-576, 416, 64],
        [576, 416, 64],
        [-576, 448, 64],
        [576, 448, 64],
        [-576, 480, 64],
        [576, 480, 64],
        [-576, 512, 64],
        [576, 512, 64],
        [-576, 544, 64],
        [576, 544, 64],
        [-576, -544, 96],
        [576, -544, 96],
        [-576, -512, 96],
        [576, -512, 96],
        [-576, -480, 96],
        [576, -480, 96],
        [-576, -448, 96],
        [576, -448, 96],
        [-576, -416, 96],
        [576, -416, 96],
        [-576, -384, 96],
        [576, -384, 96],
        [-576, -352, 96],
        [576, -352, 96],
        [-576, -320, 96],
        [576, -320, 96],
        [-576, -288, 96],
        [576, -288, 96],
        [-576, -256, 96],
        [576, -256, 96],
        [-576, -224, 96],
        [576, -224, 96],
        [-576, -192, 96],
        [576, -192, 96],
        [-576, -160, 96],
        [576, -160, 96],
        [-576, -128, 96],
        [576, -128, 96],
        [-576, -96, 96],
        [576, -96, 96],
        [-576, -64, 96],
        [576, -64, 96],
        [-576, -32, 96],
        [576, -32, 96],
        [-576, 0, 96],
        [576, 0, 96],
        [-576, 32, 96],
        [576, 32, 96],
        [-576, 64, 96],
        [576, 64, 96],
        [-576, 96, 96],
        [576, 96, 96],
        [-576, 128, 96],
        [576, 128, 96],
        [-576, 160, 96],
        [576, 160, 96],
        [-576, 192, 96],
        [576, 192, 96],
        [-576, 224, 96],
        [576, 224, 96],
        [-576, 256, 96],
        [576, 256, 96],
        [-576, 288, 96],
        [576, 288, 96],
        [-576, 320, 96],
        [576, 320, 96],
        [-576, 352, 96],
        [576, 352, 96],
        [-576, 384, 96],
        [576, 384, 96],
        [-576, 416, 96],
        [576, 416, 96],
        [-576, 448, 96],
        [576, 448, 96],
        [-576, 480, 96],
        [576, 480, 96],
        [-576, 512, 96],
        [576, 512, 96],
        [-576, 544, 96],
        [576, 544, 96],
        [-576, -544, 128],
        [576, -544, 128],
        [-576, -512, 128],
        [576, -512, 128],
        [-576, -480, 128],
        [576, -480, 128],
        [-576, -448, 128],
        [576, -448, 128],
        [-576, -416, 128],
        [576, -416, 128],
        [-576, -384, 128],
        [576, -384, 128],
        [-576, -352, 128],
        [576, -352, 128],
        [-576, -320, 128],
        [576, -320, 128],
        [-576, -288, 128],
        [576, -288, 128],
        [-576, -256, 128],
        [576, -256, 128],
        [-576, -224, 128],
        [576, -224, 128],
        [-576, -192, 128],
        [576, -192, 128],
        [-576, -160, 128],
        [576, -160, 128],
        [-576, -128, 128],
        [576, -128, 128],
        [-576, -96, 128],
        [576, -96, 128],
        [-576, -64, 128],
        [576, -64, 128],
        [-576, -32, 128],
        [576, -32, 128],
        [-576, 0, 128],
        [576, 0, 128],
        [-576, 32, 128],
        [576, 32, 128],
        [-576, 64, 128],
        [576, 64, 128],
        [-576, 96, 128],
        [576, 96, 128],
        [-576, 128, 128],
        [576, 128, 128],
        [-576, 160, 128],
        [576, 160, 128],
        [-576, 192, 128],
        [576, 192, 128],
        [-576, 224, 128],
        [576, 224, 128],
        [-576, 256, 128],
        [576, 256, 128],
        [-576, 288, 128],
        [576, 288, 128],
        [-576, 320, 128],
        [576, 320, 128],
        [-576, 352, 128],
        [576, 352, 128],
        [-576, 384, 128],
        [576, 384, 128],
        [-576, 416, 128],
        [576, 416, 128],
        [-576, 448, 128],
        [576, 448, 128],
        [-576, 480, 128],
        [576, 480, 128],
        [-576, 512, 128],
        [576, 512, 128],
        [-576, 544, 128],
        [576, 544, 128],
        [-576, -544, 160],
        [576, -544, 160],
        [-576, -512, 160],
        [576, -512, 160],
        [-576, -480, 160],
        [576, -480, 160],
        [-576, -448, 160],
        [576, -448, 160],
        [-576, -416, 160],
        [576, -416, 160],
        [-576, -384, 160],
        [576, -384, 160],
        [-576, -352, 160],
        [576, -352, 160],
        [-576, -320, 160],
        [576, -320, 160],
        [-576, -288, 160],
        [576, -288, 160],
        [-576, -256, 160],
        [576, -256, 160],
        [-576, -224, 160],
        [576, -224, 160],
        [-576, -192, 160],
        [576, -192, 160],
        [-576, -160, 160],
        [576, -160, 160],
        [-576, -128, 160],
        [576, -128, 160],
        [-576, -96, 160],
        [576, -96, 160],
        [-576, -64, 160],
        [576, -64, 160],
        [-576, -32, 160],
        [576, -32, 160],
        [-576, 0, 160],
        [576, 0, 160],
        [-576, 32, 160],
        [576, 32, 160],
        [-576, 64, 160],
        [576, 64, 160],
        [-576, 96, 160],
        [576, 96, 160],
        [-576, 128, 160],
        [576, 128, 160],
        [-576, 160, 160],
        [576, 160, 160],
        [-576, 192, 160],
        [576, 192, 160],
        [-576, 224, 160],
        [576, 224, 160],
        [-576, 256, 160],
        [576, 256, 160],
        [-576, 288, 160],
        [576, 288, 160],
        [-576, 320, 160],
        [576, 320, 160],
        [-576, 352, 160],
        [576, 352, 160],
        [-576, 384, 160],
        [576, 384, 160],
        [-576, 416, 160],
        [576, 416, 160],
        [-576, 448, 160],
        [576, 448, 160],
        [-576, 480, 160],
        [576, 480, 160],
        [-576, 512, 160],
        [576, 512, 160],
        [-576, 544, 160],
        [576, 544, 160],
        [-576, -544, 192],
        [576, -544, 192],
        [-576, -512, 192],
        [576, -512, 192],
        [-576, -480, 192],
        [576, -480, 192],
        [-576, -448, 192],
        [576, -448, 192],
        [-576, -416, 192],
        [576, -416, 192],
        [-576, -384, 192],
        [576, -384, 192],
        [-576, -352, 192],
        [576, -352, 192],
        [-576, -320, 192],
        [576, -320, 192],
        [-576, -288, 192],
        [576, -288, 192],
        [-576, -256, 192],
        [576, -256, 192],
        [-576, -224, 192],
        [576, -224, 192],
        [-576, -192, 192],
        [576, -192, 192],
        [-576, -160, 192],
        [576, -160, 192],
        [-576, -128, 192],
        [576, -128, 192],
        [-576, -96, 192],
        [576, -96, 192],
        [-576, -64, 192],
        [576, -64, 192],
        [-576, -32, 192],
        [576, -32, 192],
        [-576, 0, 192],
        [576, 0, 192],
        [-576, 32, 192],
        [576, 32, 192],
        [-576, 64, 192],
        [576, 64, 192],
        [-576, 96, 192],
        [576, 96, 192],
        [-576, 128, 192],
        [576, 128, 192],
        [-576, 160, 192],
        [576, 160, 192],
        [-576, 192, 192],
        [576, 192, 192],
        [-576, 224, 192],
        [576, 224, 192],
        [-576, 256, 192],
        [576, 256, 192],
        [-576, 288, 192],
        [576, 288, 192],
        [-576, 320, 192],
        [576, 320, 192],
        [-576, 352, 192],
        [576, 352, 192],
        [-576, 384, 192],
        [576, 384, 192],
        [-576, 416, 192],
        [576, 416, 192],
        [-576, 448, 192],
        [576, 448, 192],
        [-576, 480, 192],
        [576, 480, 192],
        [-576, 512, 192],
        [576, 512, 192],
        [-576, 544, 192],
        [576, 544, 192],
        [-576, -544, 224],
        [576, -544, 224],
        [-576, -512, 224],
        [576, -512, 224],
        [-576, -480, 224],
        [576, -480, 224],
        [-576, -448, 224],
        [576, -448, 224],
        [-576, -416, 224],
        [576, -416, 224],
        [-576, -384, 224],
        [576, -384, 224],
        [-576, -352, 224],
        [576, -352, 224],
        [-576, -320, 224],
        [576, -320, 224],
        [-576, -288, 224],
        [576, -288, 224],
        [-576, -256, 224],
        [576, -256, 224],
        [-576, -224, 224],
        [576, -224, 224],
        [-576, -192, 224],
        [576, -192, 224],
        [-576, -160, 224],
        [576, -160, 224],
        [-576, -128, 224],
        [576, -128, 224],
        [-576, -96, 224],
        [576, -96, 224],
        [-576, -64, 224],
        [576, -64, 224],
        [-576, -32, 224],
        [576, -32, 224],
        [-576, 0, 224],
        [576, 0, 224],
        [-576, 32, 224],
        [576, 32, 224],
        [-576, 64, 224],
        [576, 64, 224],
        [-576, 96, 224],
        [576, 96, 224],
        [-576, 128, 224],
        [576, 128, 224],
        [-576, 160, 224],
        [576, 160, 224],
        [-576, 192, 224],
        [576, 192, 224],
        [-576, 224, 224],
        [576, 224, 224],
        [-576, 256, 224],
        [576, 256, 224],
        [-576, 288, 224],
        [576, 288, 224],
        [-576, 320, 224],
        [576, 320, 224],
        [-576, 352, 224],
        [576, 352, 224],
        [-576, 384, 224],
        [576, 384, 224],
        [-576, 416, 224],
        [576, 416, 224],
        [-576, 448, 224],
        [576, 448, 224],
        [-576, 480, 224],
        [576, 480, 224],
        [-576, 512, 224],
        [576, 512, 224],
        [-576, 544, 224],
        [576, 544, 224],
        [-576, -544, 256],
        [576, -544, 256],
        [-576, -512, 256],
        [576, -512, 256],
        [-576, -480, 256],
        [576, -480, 256],
        [-576, -448, 256],
        [576, -448, 256],
        [-576, -416, 256],
        [576, -416, 256],
        [-576, -384, 256],
        [576, -384, 256],
        [-576, -352, 256],
        [576, -352, 256],
        [-576, -320, 256],
        [576, -320, 256],
        [-576, -288, 256],
        [576, -288, 256],
        [-576, -256, 256],
        [576, -256, 256],
        [-576, -224, 256],
        [576, -224, 256],
        [-576, -192, 256],
        [576, -192, 256],
        [-576, -160, 256],
        [576, -160, 256],
        [-576, -128, 256],
        [576, -128, 256],
        [-576, -96, 256],
        [576, -96, 256],
        [-576, -64, 256],
        [576, -64, 256],
        [-576, -32, 256],
        [576, -32, 256],
        [-576, 0, 256],
        [576, 0, 256],
        [-576, 32, 256],
        [576, 32, 256],
        [-576, 64, 256],
        [576, 64, 256],
        [-576, 96, 256],
        [576, 96, 256],
        [-576, 128, 256],
        [576, 128, 256],
        [-576, 160, 256],
        [576, 160, 256],
        [-576, 192, 256],
        [576, 192, 256],
        [-576, 224, 256],
        [576, 224, 256],
        [-576, 256, 256],
        [576, 256, 256],
        [-576, 288, 256],
        [576, 288, 256],
        [-576, 320, 256],
        [576, 320, 256],
        [-576, 352, 256],
        [576, 352, 256],
        [-576, 384, 256],
        [576, 384, 256],
        [-576, 416, 256],
        [576, 416, 256],
        [-576, 448, 256],
        [576, 448, 256],
        [-576, 480, 256],
        [576, 480, 256],
        [-576, 512, 256],
        [576, 512, 256],
        [-576, 544, 256],
        [576, 544, 256],
        [-576, -544, 288],
        [576, -544, 288],
        [-576, -512, 288],
        [576, -512, 288],
        [-576, -480, 288],
        [576, -480, 288],
        [-576, -448, 288],
        [576, -448, 288],
        [-576, -416, 288],
        [576, -416, 288],
        [-576, -384, 288],
        [576, -384, 288],
        [-576, -352, 288],
        [576, -352, 288],
        [-576, -320, 288],
        [576, -320, 288],
        [-576, -288, 288],
        [576, -288, 288],
        [-576, -256, 288],
        [576, -256, 288],
        [-576, -224, 288],
        [576, -224, 288],
        [-576, -192, 288],
        [576, -192, 288],
        [-576, -160, 288],
        [576, -160, 288],
        [-576, -128, 288],
        [576, -128, 288],
        [-576, -96, 288],
        [576, -96, 288],
        [-576, -64, 288],
        [576, -64, 288],
        [-576, -32, 288],
        [576, -32, 288],
        [-576, 0, 288],
        [576, 0, 288],
        [-576, 32, 288],
        [576, 32, 288],
        [-576, 64, 288],
        [576, 64, 288],
        [-576, 96, 288],
        [576, 96, 288],
        [-576, 128, 288],
        [576, 128, 288],
        [-576, 160, 288],
        [576, 160, 288],
        [-576, 192, 288],
        [576, 192, 288],
        [-576, 224, 288],
        [576, 224, 288],
        [-576, 256, 288],
        [576, 256, 288],
        [-576, 288, 288],
        [576, 288, 288],
        [-576, 320, 288],
        [576, 320, 288],
        [-576, 352, 288],
        [576, 352, 288],
        [-576, 384, 288],
        [576, 384, 288],
        [-576, 416, 288],
        [576, 416, 288],
        [-576, 448, 288],
        [576, 448, 288],
        [-576, 480, 288],
        [576, 480, 288],
        [-576, 512, 288],
        [576, 512, 288],
        [-576, 544, 288],
        [576, 544, 288],
        [-576, -544, 320],
        [576, -544, 320],
        [-576, -512, 320],
        [576, -512, 320],
        [-576, -480, 320],
        [576, -480, 320],
        [-576, -448, 320],
        [576, -448, 320],
        [-576, -416, 320],
        [576, -416, 320],
        [-576, -384, 320],
        [576, -384, 320],
        [-576, -352, 320],
        [576, -352, 320],
        [-576, -320, 320],
        [576, -320, 320],
        [-576, -288, 320],
        [576, -288, 320],
        [-576, -256, 320],
        [576, -256, 320],
        [-576, -224, 320],
        [576, -224, 320],
        [-576, -192, 320],
        [576, -192, 320],
        [-576, -160, 320],
        [576, -160, 320],
        [-576, -128, 320],
        [576, -128, 320],
        [-576, -96, 320],
        [576, -96, 320],
        [-576, -64, 320],
        [576, -64, 320],
        [-576, -32, 320],
        [576, -32, 320],
        [-576, 0, 320],
        [576, 0, 320],
        [-576, 32, 320],
        [576, 32, 320],
        [-576, 64, 320],
        [576, 64, 320],
        [-576, 96, 320],
        [576, 96, 320],
        [-576, 128, 320],
        [576, 128, 320],
        [-576, 160, 320],
        [576, 160, 320],
        [-576, 192, 320],
        [576, 192, 320],
        [-576, 224, 320],
        [576, 224, 320],
        [-576, 256, 320],
        [576, 256, 320],
        [-576, 288, 320],
        [576, 288, 320],
        [-576, 320, 320],
        [576, 320, 320],
        [-576, 352, 320],
        [576, 352, 320],
        [-576, 384, 320],
        [576, 384, 320],
        [-576, 416, 320],
        [576, 416, 320],
        [-576, 448, 320],
        [576, 448, 320],
        [-576, 480, 320],
        [576, 480, 320],
        [-576, 512, 320],
        [576, 512, 320],
        [-576, 544, 320],
        [576, 544, 320],
        [-576, -544, 352],
        [576, -544, 352],
        [-576, -512, 352],
        [576, -512, 352],
        [-576, -480, 352],
        [576, -480, 352],
        [-576, -448, 352],
        [576, -448, 352],
        [-576, -416, 352],
        [576, -416, 352],
        [-576, -384, 352],
        [576, -384, 352],
        [-576, -352, 352],
        [576, -352, 352],
        [-576, -320, 352],
        [576, -320, 352],
        [-576, -288, 352],
        [576, -288, 352],
        [-576, -256, 352],
        [576, -256, 352],
        [-576, -224, 352],
        [576, -224, 352],
        [-576, -192, 352],
        [576, -192, 352],
        [-576, -160, 352],
        [576, -160, 352],
        [-576, -128, 352],
        [576, -128, 352],
        [-576, -96, 352],
        [576, -96, 352],
        [-576, -64, 352],
        [576, -64, 352],
        [-576, -32, 352],
        [576, -32, 352],
        [-576, 0, 352],
        [576, 0, 352],
        [-576, 32, 352],
        [576, 32, 352],
        [-576, 64, 352],
        [576, 64, 352],
        [-576, 96, 352],
        [576, 96, 352],
        [-576, 128, 352],
        [576, 128, 352],
        [-576, 160, 352],
        [576, 160, 352],
        [-576, 192, 352],
        [576, 192, 352],
        [-576, 224, 352],
        [576, 224, 352],
        [-576, 256, 352],
        [576, 256, 352],
        [-576, 288, 352],
        [576, 288, 352],
        [-576, 320, 352],
        [576, 320, 352],
        [-576, 352, 352],
        [576, 352, 352],
        [-576, 384, 352],
        [576, 384, 352],
        [-576, 416, 352],
        [576, 416, 352],
        [-576, 448, 352],
        [576, 448, 352],
        [-576, 480, 352],
        [576, 480, 352],
        [-576, 512, 352],
        [576, 512, 352],
        [-576, 544, 352],
        [576, 544, 352],
        [-576, -544, 384],
        [576, -544, 384],
        [-576, -512, 384],
        [576, -512, 384],
        [-576, -480, 384],
        [576, -480, 384],
        [-576, -448, 384],
        [576, -448, 384],
        [-576, -416, 384],
        [576, -416, 384],
        [-576, -384, 384],
        [576, -384, 384],
        [-576, -352, 384],
        [576, -352, 384],
        [-576, -320, 384],
        [576, -320, 384],
        [-576, -288, 384],
        [576, -288, 384],
        [-576, -256, 384],
        [576, -256, 384],
        [-576, -224, 384],
        [576, -224, 384],
        [-576, -192, 384],
        [576, -192, 384],
        [-576, -160, 384],
        [576, -160, 384],
        [-576, -128, 384],
        [576, -128, 384],
        [-576, -96, 384],
        [576, -96, 384],
        [-576, -64, 384],
        [576, -64, 384],
        [-576, -32, 384],
        [576, -32, 384],
        [-576, 0, 384],
        [576, 0, 384],
        [-576, 32, 384],
        [576, 32, 384],
        [-576, 64, 384],
        [576, 64, 384],
        [-576, 96, 384],
        [576, 96, 384],
        [-576, 128, 384],
        [576, 128, 384],
        [-576, 160, 384],
        [576, 160, 384],
        [-576, 192, 384],
        [576, 192, 384],
        [-576, 224, 384],
        [576, 224, 384],
        [-576, 256, 384],
        [576, 256, 384],
        [-576, 288, 384],
        [576, 288, 384],
        [-576, 320, 384],
        [576, 320, 384],
        [-576, 352, 384],
        [576, 352, 384],
        [-576, 384, 384],
        [576, 384, 384],
        [-576, 416, 384],
        [576, 416, 384],
        [-576, 448, 384],
        [576, 448, 384],
        [-576, 480, 384],
        [576, 480, 384],
        [-576, 512, 384],
        [576, 512, 384],
        [-576, 544, 384],
        [576, 544, 384],
        [-576, -544, 416],
        [576, -544, 416],
        [-576, -512, 416],
        [576, -512, 416],
        [-576, -480, 416],
        [576, -480, 416],
        [-576, -448, 416],
        [576, -448, 416],
        [-576, -416, 416],
        [576, -416, 416],
        [-576, -384, 416],
        [576, -384, 416],
        [-576, -352, 416],
        [576, -352, 416],
        [-576, -320, 416],
        [576, -320, 416],
        [-576, -288, 416],
        [576, -288, 416],
        [-576, -256, 416],
        [576, -256, 416],
        [-576, -224, 416],
        [576, -224, 416],
        [-576, -192, 416],
        [576, -192, 416],
        [-576, -160, 416],
        [576, -160, 416],
        [-576, -128, 416],
        [576, -128, 416],
        [-576, -96, 416],
        [576, -96, 416],
        [-576, -64, 416],
        [576, -64, 416],
        [-576, -32, 416],
        [576, -32, 416],
        [-576, 0, 416],
        [576, 0, 416],
        [-576, 32, 416],
        [576, 32, 416],
        [-576, 64, 416],
        [576, 64, 416],
        [-576, 96, 416],
        [576, 96, 416],
        [-576, 128, 416],
        [576, 128, 416],
        [-576, 160, 416],
        [576, 160, 416],
        [-576, 192, 416],
        [576, 192, 416],
        [-576, 224, 416],
        [576, 224, 416],
        [-576, 256, 416],
        [576, 256, 416],
        [-576, 288, 416],
        [576, 288, 416],
        [-576, 320, 416],
        [576, 320, 416],
        [-576, 352, 416],
        [576, 352, 416],
        [-576, 384, 416],
        [576, 384, 416],
        [-576, 416, 416],
        [576, 416, 416],
        [-576, 448, 416],
        [576, 448, 416],
        [-576, 480, 416],
        [576, 480, 416],
        [-576, 512, 416],
        [576, 512, 416],
        [-576, 544, 416],
        [576, 544, 416],
        [-576, -544, 448],
        [576, -544, 448],
        [-576, -512, 448],
        [576, -512, 448],
        [-576, -480, 448],
        [576, -480, 448],
        [-576, -448, 448],
        [576, -448, 448],
        [-576, -416, 448],
        [576, -416, 448],
        [-576, -384, 448],
        [576, -384, 448],
        [-576, -352, 448],
        [576, -352, 448],
        [-576, -320, 448],
        [576, -320, 448],
        [-576, -288, 448],
        [576, -288, 448],
        [-576, -256, 448],
        [576, -256, 448],
        [-576, -224, 448],
        [576, -224, 448],
        [-576, -192, 448],
        [576, -192, 448],
        [-576, -160, 448],
        [576, -160, 448],
        [-576, -128, 448],
        [576, -128, 448],
        [-576, -96, 448],
        [576, -96, 448],
        [-576, -64, 448],
        [576, -64, 448],
        [-576, -32, 448],
        [576, -32, 448],
        [-576, 0, 448],
        [576, 0, 448],
        [-576, 32, 448],
        [576, 32, 448],
        [-576, 64, 448],
        [576, 64, 448],
        [-576, 96, 448],
        [576, 96, 448],
        [-576, 128, 448],
        [576, 128, 448],
        [-576, 160, 448],
        [576, 160, 448],
        [-576, 192, 448],
        [576, 192, 448],
        [-576, 224, 448],
        [576, 224, 448],
        [-576, 256, 448],
        [576, 256, 448],
        [-576, 288, 448],
        [576, 288, 448],
        [-576, 320, 448],
        [576, 320, 448],
        [-576, 352, 448],
        [576, 352, 448],
        [-576, 384, 448],
        [576, 384, 448],
        [-576, 416, 448],
        [576, 416, 448],
        [-576, 448, 448],
        [576, 448, 448],
        [-576, 480, 448],
        [576, 480, 448],
        [-576, 512, 448],
        [576, 512, 448],
        [-576, 544, 448],
        [576, 544, 448],
        [-576, -544, 480],
        [576, -544, 480],
        [-576, -512, 480],
        [576, -512, 480],
        [-576, -480, 480],
        [576, -480, 480],
        [-576, -448, 480],
        [576, -448, 480],
        [-576, -416, 480],
        [576, -416, 480],
        [-576, -384, 480],
        [576, -384, 480],
        [-576, -352, 480],
        [576, -352, 480],
        [-576, -320, 480],
        [576, -320, 480],
        [-576, -288, 480],
        [576, -288, 480],
        [-576, -256, 480],
        [576, -256, 480],
        [-576, -224, 480],
        [576, -224, 480],
        [-576, -192, 480],
        [576, -192, 480],
        [-576, -160, 480],
        [576, -160, 480],
        [-576, -128, 480],
        [576, -128, 480],
        [-576, -96, 480],
        [576, -96, 480],
        [-576, -64, 480],
        [576, -64, 480],
        [-576, -32, 480],
        [576, -32, 480],
        [-576, 0, 480],
        [576, 0, 480],
        [-576, 32, 480],
        [576, 32, 480],
        [-576, 64, 480],
        [576, 64, 480],
        [-576, 96, 480],
        [576, 96, 480],
        [-576, 128, 480],
        [576, 128, 480],
        [-576, 160, 480],
        [576, 160, 480],
        [-576, 192, 480],
        [576, 192, 480],
        [-576, 224, 480],
        [576, 224, 480],
        [-576, 256, 480],
        [576, 256, 480],
        [-576, 288, 480],
        [576, 288, 480],
        [-576, 320, 480],
        [576, 320, 480],
        [-576, 352, 480],
        [576, 352, 480],
        [-576, 384, 480],
        [576, 384, 480],
        [-576, 416, 480],
        [576, 416, 480],
        [-576, 448, 480],
        [576, 448, 480],
        [-576, 480, 480],
        [576, 480, 480],
        [-576, 512, 480],
        [576, 512, 480],
        [-576, 544, 480],
        [576, 544, 480],
        [-576, -544, 512],
        [576, -544, 512],
        [-576, -512, 512],
        [576, -512, 512],
        [-576, -480, 512],
        [576, -480, 512],
        [-576, -448, 512],
        [576, -448, 512],
        [-576, -416, 512],
        [576, -416, 512],
        [-576, -384, 512],
        [576, -384, 512],
        [-576, -352, 512],
        [576, -352, 512],
        [-576, -320, 512],
        [576, -320, 512],
        [-576, -288, 512],
        [576, -288, 512],
        [-576, -256, 512],
        [576, -256, 512],
        [-576, -224, 512],
        [576, -224, 512],
        [-576, -192, 512],
        [576, -192, 512],
        [-576, -160, 512],
        [576, -160, 512],
        [-576, -128, 512],
        [576, -128, 512],
        [-576, -96, 512],
        [576, -96, 512],
        [-576, -64, 512],
        [576, -64, 512],
        [-576, -32, 512],
        [576, -32, 512],
        [-576, 0, 512],
        [576, 0, 512],
        [-576, 32, 512],
        [576, 32, 512],
        [-576, 64, 512],
        [576, 64, 512],
        [-576, 96, 512],
        [576, 96, 512],
        [-576, 128, 512],
        [576, 128, 512],
        [-576, 160, 512],
        [576, 160, 512],
        [-576, 192, 512],
        [576, 192, 512],
        [-576, 224, 512],
        [576, 224, 512],
        [-576, 256, 512],
        [576, 256, 512],
        [-576, 288, 512],
        [576, 288, 512],
        [-576, 320, 512],
        [576, 320, 512],
        [-576, 352, 512],
        [576, 352, 512],
        [-576, 384, 512],
        [576, 384, 512],
        [-576, 416, 512],
        [576, 416, 512],
        [-576, 448, 512],
        [576, 448, 512],
        [-576, 480, 512],
        [576, 480, 512],
        [-576, 512, 512],
        [576, 512, 512],
        [-576, 544, 512],
        [576, 544, 512],
        [-576, -544, 544],
        [576, -544, 544],
        [-576, -512, 544],
        [576, -512, 544],
        [-576, -480, 544],
        [576, -480, 544],
        [-576, -448, 544],
        [576, -448, 544],
        [-576, -416, 544],
        [576, -416, 544],
        [-576, -384, 544],
        [576, -384, 544],
        [-576, -352, 544],
        [576, -352, 544],
        [-576, -320, 544],
        [576, -320, 544],
        [-576, -288, 544],
        [576, -288, 544],
        [-576, -256, 544],
        [576, -256, 544],
        [-576, -224, 544],
        [576, -224, 544],
        [-576, -192, 544],
        [576, -192, 544],
        [-576, -160, 544],
        [576, -160, 544],
        [-576, -128, 544],
        [576, -128, 544],
        [-576, -96, 544],
        [576, -96, 544],
        [-576, -64, 544],
        [576, -64, 544],
        [-576, -32, 544],
        [576, -32, 544],
        [-576, 0, 544],
        [576, 0, 544],
        [-576, 32, 544],
        [576, 32, 544],
        [-576, 64, 544],
        [576, 64, 544],
        [-576, 96, 544],
        [576, 96, 544],
        [-576, 128, 544],
        [576, 128, 544],
        [-576, 160, 544],
        [576, 160, 544],
        [-576, 192, 544],
        [576, 192, 544],
        [-576, 224, 544],
        [576, 224, 544],
        [-576, 256, 544],
        [576, 256, 544],
        [-576, 288, 544],
        [576, 288, 544],
        [-576, 320, 544],
        [576, 320, 544],
        [-576, 352, 544],
        [576, 352, 544],
        [-576, 384, 544],
        [576, 384, 544],
        [-576, 416, 544],
        [576, 416, 544],
        [-576, 448, 544],
        [576, 448, 544],
        [-576, 480, 544],
        [576, 480, 544],
        [-576, 512, 544],
        [576, 512, 544],
        [-576, 544, 544],
        [576, 544, 544]],
    '19': [[-608, -608, -608],
        [-608, -608, 608],
        [-608, -576, -608],
        [-608, -576, 608],
        [-608, -544, -608],
        [-608, -544, 608],
        [-608, -512, -608],
        [-608, -512, 608],
        [-608, -480, -608],
        [-608, -480, 608],
        [-608, -448, -608],
        [-608, -448, 608],
        [-608, -416, -608],
        [-608, -416, 608],
        [-608, -384, -608],
        [-608, -384, 608],
        [-608, -352, -608],
        [-608, -352, 608],
        [-608, -320, -608],
        [-608, -320, 608],
        [-608, -288, -608],
        [-608, -288, 608],
        [-608, -256, -608],
        [-608, -256, 608],
        [-608, -224, -608],
        [-608, -224, 608],
        [-608, -192, -608],
        [-608, -192, 608],
        [-608, -160, -608],
        [-608, -160, 608],
        [-608, -128, -608],
        [-608, -128, 608],
        [-608, -96, -608],
        [-608, -96, 608],
        [-608, -64, -608],
        [-608, -64, 608],
        [-608, -32, -608],
        [-608, -32, 608],
        [-608, 0, -608],
        [-608, 0, 608],
        [-608, 32, -608],
        [-608, 32, 608],
        [-608, 64, -608],
        [-608, 64, 608],
        [-608, 96, -608],
        [-608, 96, 608],
        [-608, 128, -608],
        [-608, 128, 608],
        [-608, 160, -608],
        [-608, 160, 608],
        [-608, 192, -608],
        [-608, 192, 608],
        [-608, 224, -608],
        [-608, 224, 608],
        [-608, 256, -608],
        [-608, 256, 608],
        [-608, 288, -608],
        [-608, 288, 608],
        [-608, 320, -608],
        [-608, 320, 608],
        [-608, 352, -608],
        [-608, 352, 608],
        [-608, 384, -608],
        [-608, 384, 608],
        [-608, 416, -608],
        [-608, 416, 608],
        [-608, 448, -608],
        [-608, 448, 608],
        [-608, 480, -608],
        [-608, 480, 608],
        [-608, 512, -608],
        [-608, 512, 608],
        [-608, 544, -608],
        [-608, 544, 608],
        [-608, 576, -608],
        [-608, 576, 608],
        [-608, 608, -608],
        [-608, 608, 608],
        [-608, -608, -576],
        [-608, 608, -576],
        [-608, -608, -544],
        [-608, 608, -544],
        [-608, -608, -512],
        [-608, 608, -512],
        [-608, -608, -480],
        [-608, 608, -480],
        [-608, -608, -448],
        [-608, 608, -448],
        [-608, -608, -416],
        [-608, 608, -416],
        [-608, -608, -384],
        [-608, 608, -384],
        [-608, -608, -352],
        [-608, 608, -352],
        [-608, -608, -320],
        [-608, 608, -320],
        [-608, -608, -288],
        [-608, 608, -288],
        [-608, -608, -256],
        [-608, 608, -256],
        [-608, -608, -224],
        [-608, 608, -224],
        [-608, -608, -192],
        [-608, 608, -192],
        [-608, -608, -160],
        [-608, 608, -160],
        [-608, -608, -128],
        [-608, 608, -128],
        [-608, -608, -96],
        [-608, 608, -96],
        [-608, -608, -64],
        [-608, 608, -64],
        [-608, -608, -32],
        [-608, 608, -32],
        [-608, -608, 0],
        [-608, 608, 0],
        [-608, -608, 32],
        [-608, 608, 32],
        [-608, -608, 64],
        [-608, 608, 64],
        [-608, -608, 96],
        [-608, 608, 96],
        [-608, -608, 128],
        [-608, 608, 128],
        [-608, -608, 160],
        [-608, 608, 160],
        [-608, -608, 192],
        [-608, 608, 192],
        [-608, -608, 224],
        [-608, 608, 224],
        [-608, -608, 256],
        [-608, 608, 256],
        [-608, -608, 288],
        [-608, 608, 288],
        [-608, -608, 320],
        [-608, 608, 320],
        [-608, -608, 352],
        [-608, 608, 352],
        [-608, -608, 384],
        [-608, 608, 384],
        [-608, -608, 416],
        [-608, 608, 416],
        [-608, -608, 448],
        [-608, 608, 448],
        [-608, -608, 480],
        [-608, 608, 480],
        [-608, -608, 512],
        [-608, 608, 512],
        [-608, -608, 544],
        [-608, 608, 544],
        [-608, -608, 576],
        [-608, 608, 576],
        [-576, -608, -608],
        [-576, -608, 608],
        [-576, -576, -608],
        [-576, -576, 608],
        [-576, -544, -608],
        [-576, -544, 608],
        [-576, -512, -608],
        [-576, -512, 608],
        [-576, -480, -608],
        [-576, -480, 608],
        [-576, -448, -608],
        [-576, -448, 608],
        [-576, -416, -608],
        [-576, -416, 608],
        [-576, -384, -608],
        [-576, -384, 608],
        [-576, -352, -608],
        [-576, -352, 608],
        [-576, -320, -608],
        [-576, -320, 608],
        [-576, -288, -608],
        [-576, -288, 608],
        [-576, -256, -608],
        [-576, -256, 608],
        [-576, -224, -608],
        [-576, -224, 608],
        [-576, -192, -608],
        [-576, -192, 608],
        [-576, -160, -608],
        [-576, -160, 608],
        [-576, -128, -608],
        [-576, -128, 608],
        [-576, -96, -608],
        [-576, -96, 608],
        [-576, -64, -608],
        [-576, -64, 608],
        [-576, -32, -608],
        [-576, -32, 608],
        [-576, 0, -608],
        [-576, 0, 608],
        [-576, 32, -608],
        [-576, 32, 608],
        [-576, 64, -608],
        [-576, 64, 608],
        [-576, 96, -608],
        [-576, 96, 608],
        [-576, 128, -608],
        [-576, 128, 608],
        [-576, 160, -608],
        [-576, 160, 608],
        [-576, 192, -608],
        [-576, 192, 608],
        [-576, 224, -608],
        [-576, 224, 608],
        [-576, 256, -608],
        [-576, 256, 608],
        [-576, 288, -608],
        [-576, 288, 608],
        [-576, 320, -608],
        [-576, 320, 608],
        [-576, 352, -608],
        [-576, 352, 608],
        [-576, 384, -608],
        [-576, 384, 608],
        [-576, 416, -608],
        [-576, 416, 608],
        [-576, 448, -608],
        [-576, 448, 608],
        [-576, 480, -608],
        [-576, 480, 608],
        [-576, 512, -608],
        [-576, 512, 608],
        [-576, 544, -608],
        [-576, 544, 608],
        [-576, 576, -608],
        [-576, 576, 608],
        [-576, 608, -608],
        [-576, 608, 608],
        [-576, -608, -576],
        [-576, 608, -576],
        [-576, -608, -544],
        [-576, 608, -544],
        [-576, -608, -512],
        [-576, 608, -512],
        [-576, -608, -480],
        [-576, 608, -480],
        [-576, -608, -448],
        [-576, 608, -448],
        [-576, -608, -416],
        [-576, 608, -416],
        [-576, -608, -384],
        [-576, 608, -384],
        [-576, -608, -352],
        [-576, 608, -352],
        [-576, -608, -320],
        [-576, 608, -320],
        [-576, -608, -288],
        [-576, 608, -288],
        [-576, -608, -256],
        [-576, 608, -256],
        [-576, -608, -224],
        [-576, 608, -224],
        [-576, -608, -192],
        [-576, 608, -192],
        [-576, -608, -160],
        [-576, 608, -160],
        [-576, -608, -128],
        [-576, 608, -128],
        [-576, -608, -96],
        [-576, 608, -96],
        [-576, -608, -64],
        [-576, 608, -64],
        [-576, -608, -32],
        [-576, 608, -32],
        [-576, -608, 0],
        [-576, 608, 0],
        [-576, -608, 32],
        [-576, 608, 32],
        [-576, -608, 64],
        [-576, 608, 64],
        [-576, -608, 96],
        [-576, 608, 96],
        [-576, -608, 128],
        [-576, 608, 128],
        [-576, -608, 160],
        [-576, 608, 160],
        [-576, -608, 192],
        [-576, 608, 192],
        [-576, -608, 224],
        [-576, 608, 224],
        [-576, -608, 256],
        [-576, 608, 256],
        [-576, -608, 288],
        [-576, 608, 288],
        [-576, -608, 320],
        [-576, 608, 320],
        [-576, -608, 352],
        [-576, 608, 352],
        [-576, -608, 384],
        [-576, 608, 384],
        [-576, -608, 416],
        [-576, 608, 416],
        [-576, -608, 448],
        [-576, 608, 448],
        [-576, -608, 480],
        [-576, 608, 480],
        [-576, -608, 512],
        [-576, 608, 512],
        [-576, -608, 544],
        [-576, 608, 544],
        [-576, -608, 576],
        [-576, 608, 576],
        [-544, -608, -608],
        [-544, -608, 608],
        [-544, -576, -608],
        [-544, -576, 608],
        [-544, -544, -608],
        [-544, -544, 608],
        [-544, -512, -608],
        [-544, -512, 608],
        [-544, -480, -608],
        [-544, -480, 608],
        [-544, -448, -608],
        [-544, -448, 608],
        [-544, -416, -608],
        [-544, -416, 608],
        [-544, -384, -608],
        [-544, -384, 608],
        [-544, -352, -608],
        [-544, -352, 608],
        [-544, -320, -608],
        [-544, -320, 608],
        [-544, -288, -608],
        [-544, -288, 608],
        [-544, -256, -608],
        [-544, -256, 608],
        [-544, -224, -608],
        [-544, -224, 608],
        [-544, -192, -608],
        [-544, -192, 608],
        [-544, -160, -608],
        [-544, -160, 608],
        [-544, -128, -608],
        [-544, -128, 608],
        [-544, -96, -608],
        [-544, -96, 608],
        [-544, -64, -608],
        [-544, -64, 608],
        [-544, -32, -608],
        [-544, -32, 608],
        [-544, 0, -608],
        [-544, 0, 608],
        [-544, 32, -608],
        [-544, 32, 608],
        [-544, 64, -608],
        [-544, 64, 608],
        [-544, 96, -608],
        [-544, 96, 608],
        [-544, 128, -608],
        [-544, 128, 608],
        [-544, 160, -608],
        [-544, 160, 608],
        [-544, 192, -608],
        [-544, 192, 608],
        [-544, 224, -608],
        [-544, 224, 608],
        [-544, 256, -608],
        [-544, 256, 608],
        [-544, 288, -608],
        [-544, 288, 608],
        [-544, 320, -608],
        [-544, 320, 608],
        [-544, 352, -608],
        [-544, 352, 608],
        [-544, 384, -608],
        [-544, 384, 608],
        [-544, 416, -608],
        [-544, 416, 608],
        [-544, 448, -608],
        [-544, 448, 608],
        [-544, 480, -608],
        [-544, 480, 608],
        [-544, 512, -608],
        [-544, 512, 608],
        [-544, 544, -608],
        [-544, 544, 608],
        [-544, 576, -608],
        [-544, 576, 608],
        [-544, 608, -608],
        [-544, 608, 608],
        [-544, -608, -576],
        [-544, 608, -576],
        [-544, -608, -544],
        [-544, 608, -544],
        [-544, -608, -512],
        [-544, 608, -512],
        [-544, -608, -480],
        [-544, 608, -480],
        [-544, -608, -448],
        [-544, 608, -448],
        [-544, -608, -416],
        [-544, 608, -416],
        [-544, -608, -384],
        [-544, 608, -384],
        [-544, -608, -352],
        [-544, 608, -352],
        [-544, -608, -320],
        [-544, 608, -320],
        [-544, -608, -288],
        [-544, 608, -288],
        [-544, -608, -256],
        [-544, 608, -256],
        [-544, -608, -224],
        [-544, 608, -224],
        [-544, -608, -192],
        [-544, 608, -192],
        [-544, -608, -160],
        [-544, 608, -160],
        [-544, -608, -128],
        [-544, 608, -128],
        [-544, -608, -96],
        [-544, 608, -96],
        [-544, -608, -64],
        [-544, 608, -64],
        [-544, -608, -32],
        [-544, 608, -32],
        [-544, -608, 0],
        [-544, 608, 0],
        [-544, -608, 32],
        [-544, 608, 32],
        [-544, -608, 64],
        [-544, 608, 64],
        [-544, -608, 96],
        [-544, 608, 96],
        [-544, -608, 128],
        [-544, 608, 128],
        [-544, -608, 160],
        [-544, 608, 160],
        [-544, -608, 192],
        [-544, 608, 192],
        [-544, -608, 224],
        [-544, 608, 224],
        [-544, -608, 256],
        [-544, 608, 256],
        [-544, -608, 288],
        [-544, 608, 288],
        [-544, -608, 320],
        [-544, 608, 320],
        [-544, -608, 352],
        [-544, 608, 352],
        [-544, -608, 384],
        [-544, 608, 384],
        [-544, -608, 416],
        [-544, 608, 416],
        [-544, -608, 448],
        [-544, 608, 448],
        [-544, -608, 480],
        [-544, 608, 480],
        [-544, -608, 512],
        [-544, 608, 512],
        [-544, -608, 544],
        [-544, 608, 544],
        [-544, -608, 576],
        [-544, 608, 576],
        [-512, -608, -608],
        [-512, -608, 608],
        [-512, -576, -608],
        [-512, -576, 608],
        [-512, -544, -608],
        [-512, -544, 608],
        [-512, -512, -608],
        [-512, -512, 608],
        [-512, -480, -608],
        [-512, -480, 608],
        [-512, -448, -608],
        [-512, -448, 608],
        [-512, -416, -608],
        [-512, -416, 608],
        [-512, -384, -608],
        [-512, -384, 608],
        [-512, -352, -608],
        [-512, -352, 608],
        [-512, -320, -608],
        [-512, -320, 608],
        [-512, -288, -608],
        [-512, -288, 608],
        [-512, -256, -608],
        [-512, -256, 608],
        [-512, -224, -608],
        [-512, -224, 608],
        [-512, -192, -608],
        [-512, -192, 608],
        [-512, -160, -608],
        [-512, -160, 608],
        [-512, -128, -608],
        [-512, -128, 608],
        [-512, -96, -608],
        [-512, -96, 608],
        [-512, -64, -608],
        [-512, -64, 608],
        [-512, -32, -608],
        [-512, -32, 608],
        [-512, 0, -608],
        [-512, 0, 608],
        [-512, 32, -608],
        [-512, 32, 608],
        [-512, 64, -608],
        [-512, 64, 608],
        [-512, 96, -608],
        [-512, 96, 608],
        [-512, 128, -608],
        [-512, 128, 608],
        [-512, 160, -608],
        [-512, 160, 608],
        [-512, 192, -608],
        [-512, 192, 608],
        [-512, 224, -608],
        [-512, 224, 608],
        [-512, 256, -608],
        [-512, 256, 608],
        [-512, 288, -608],
        [-512, 288, 608],
        [-512, 320, -608],
        [-512, 320, 608],
        [-512, 352, -608],
        [-512, 352, 608],
        [-512, 384, -608],
        [-512, 384, 608],
        [-512, 416, -608],
        [-512, 416, 608],
        [-512, 448, -608],
        [-512, 448, 608],
        [-512, 480, -608],
        [-512, 480, 608],
        [-512, 512, -608],
        [-512, 512, 608],
        [-512, 544, -608],
        [-512, 544, 608],
        [-512, 576, -608],
        [-512, 576, 608],
        [-512, 608, -608],
        [-512, 608, 608],
        [-512, -608, -576],
        [-512, 608, -576],
        [-512, -608, -544],
        [-512, 608, -544],
        [-512, -608, -512],
        [-512, 608, -512],
        [-512, -608, -480],
        [-512, 608, -480],
        [-512, -608, -448],
        [-512, 608, -448],
        [-512, -608, -416],
        [-512, 608, -416],
        [-512, -608, -384],
        [-512, 608, -384],
        [-512, -608, -352],
        [-512, 608, -352],
        [-512, -608, -320],
        [-512, 608, -320],
        [-512, -608, -288],
        [-512, 608, -288],
        [-512, -608, -256],
        [-512, 608, -256],
        [-512, -608, -224],
        [-512, 608, -224],
        [-512, -608, -192],
        [-512, 608, -192],
        [-512, -608, -160],
        [-512, 608, -160],
        [-512, -608, -128],
        [-512, 608, -128],
        [-512, -608, -96],
        [-512, 608, -96],
        [-512, -608, -64],
        [-512, 608, -64],
        [-512, -608, -32],
        [-512, 608, -32],
        [-512, -608, 0],
        [-512, 608, 0],
        [-512, -608, 32],
        [-512, 608, 32],
        [-512, -608, 64],
        [-512, 608, 64],
        [-512, -608, 96],
        [-512, 608, 96],
        [-512, -608, 128],
        [-512, 608, 128],
        [-512, -608, 160],
        [-512, 608, 160],
        [-512, -608, 192],
        [-512, 608, 192],
        [-512, -608, 224],
        [-512, 608, 224],
        [-512, -608, 256],
        [-512, 608, 256],
        [-512, -608, 288],
        [-512, 608, 288],
        [-512, -608, 320],
        [-512, 608, 320],
        [-512, -608, 352],
        [-512, 608, 352],
        [-512, -608, 384],
        [-512, 608, 384],
        [-512, -608, 416],
        [-512, 608, 416],
        [-512, -608, 448],
        [-512, 608, 448],
        [-512, -608, 480],
        [-512, 608, 480],
        [-512, -608, 512],
        [-512, 608, 512],
        [-512, -608, 544],
        [-512, 608, 544],
        [-512, -608, 576],
        [-512, 608, 576],
        [-480, -608, -608],
        [-480, -608, 608],
        [-480, -576, -608],
        [-480, -576, 608],
        [-480, -544, -608],
        [-480, -544, 608],
        [-480, -512, -608],
        [-480, -512, 608],
        [-480, -480, -608],
        [-480, -480, 608],
        [-480, -448, -608],
        [-480, -448, 608],
        [-480, -416, -608],
        [-480, -416, 608],
        [-480, -384, -608],
        [-480, -384, 608],
        [-480, -352, -608],
        [-480, -352, 608],
        [-480, -320, -608],
        [-480, -320, 608],
        [-480, -288, -608],
        [-480, -288, 608],
        [-480, -256, -608],
        [-480, -256, 608],
        [-480, -224, -608],
        [-480, -224, 608],
        [-480, -192, -608],
        [-480, -192, 608],
        [-480, -160, -608],
        [-480, -160, 608],
        [-480, -128, -608],
        [-480, -128, 608],
        [-480, -96, -608],
        [-480, -96, 608],
        [-480, -64, -608],
        [-480, -64, 608],
        [-480, -32, -608],
        [-480, -32, 608],
        [-480, 0, -608],
        [-480, 0, 608],
        [-480, 32, -608],
        [-480, 32, 608],
        [-480, 64, -608],
        [-480, 64, 608],
        [-480, 96, -608],
        [-480, 96, 608],
        [-480, 128, -608],
        [-480, 128, 608],
        [-480, 160, -608],
        [-480, 160, 608],
        [-480, 192, -608],
        [-480, 192, 608],
        [-480, 224, -608],
        [-480, 224, 608],
        [-480, 256, -608],
        [-480, 256, 608],
        [-480, 288, -608],
        [-480, 288, 608],
        [-480, 320, -608],
        [-480, 320, 608],
        [-480, 352, -608],
        [-480, 352, 608],
        [-480, 384, -608],
        [-480, 384, 608],
        [-480, 416, -608],
        [-480, 416, 608],
        [-480, 448, -608],
        [-480, 448, 608],
        [-480, 480, -608],
        [-480, 480, 608],
        [-480, 512, -608],
        [-480, 512, 608],
        [-480, 544, -608],
        [-480, 544, 608],
        [-480, 576, -608],
        [-480, 576, 608],
        [-480, 608, -608],
        [-480, 608, 608],
        [-480, -608, -576],
        [-480, 608, -576],
        [-480, -608, -544],
        [-480, 608, -544],
        [-480, -608, -512],
        [-480, 608, -512],
        [-480, -608, -480],
        [-480, 608, -480],
        [-480, -608, -448],
        [-480, 608, -448],
        [-480, -608, -416],
        [-480, 608, -416],
        [-480, -608, -384],
        [-480, 608, -384],
        [-480, -608, -352],
        [-480, 608, -352],
        [-480, -608, -320],
        [-480, 608, -320],
        [-480, -608, -288],
        [-480, 608, -288],
        [-480, -608, -256],
        [-480, 608, -256],
        [-480, -608, -224],
        [-480, 608, -224],
        [-480, -608, -192],
        [-480, 608, -192],
        [-480, -608, -160],
        [-480, 608, -160],
        [-480, -608, -128],
        [-480, 608, -128],
        [-480, -608, -96],
        [-480, 608, -96],
        [-480, -608, -64],
        [-480, 608, -64],
        [-480, -608, -32],
        [-480, 608, -32],
        [-480, -608, 0],
        [-480, 608, 0],
        [-480, -608, 32],
        [-480, 608, 32],
        [-480, -608, 64],
        [-480, 608, 64],
        [-480, -608, 96],
        [-480, 608, 96],
        [-480, -608, 128],
        [-480, 608, 128],
        [-480, -608, 160],
        [-480, 608, 160],
        [-480, -608, 192],
        [-480, 608, 192],
        [-480, -608, 224],
        [-480, 608, 224],
        [-480, -608, 256],
        [-480, 608, 256],
        [-480, -608, 288],
        [-480, 608, 288],
        [-480, -608, 320],
        [-480, 608, 320],
        [-480, -608, 352],
        [-480, 608, 352],
        [-480, -608, 384],
        [-480, 608, 384],
        [-480, -608, 416],
        [-480, 608, 416],
        [-480, -608, 448],
        [-480, 608, 448],
        [-480, -608, 480],
        [-480, 608, 480],
        [-480, -608, 512],
        [-480, 608, 512],
        [-480, -608, 544],
        [-480, 608, 544],
        [-480, -608, 576],
        [-480, 608, 576],
        [-448, -608, -608],
        [-448, -608, 608],
        [-448, -576, -608],
        [-448, -576, 608],
        [-448, -544, -608],
        [-448, -544, 608],
        [-448, -512, -608],
        [-448, -512, 608],
        [-448, -480, -608],
        [-448, -480, 608],
        [-448, -448, -608],
        [-448, -448, 608],
        [-448, -416, -608],
        [-448, -416, 608],
        [-448, -384, -608],
        [-448, -384, 608],
        [-448, -352, -608],
        [-448, -352, 608],
        [-448, -320, -608],
        [-448, -320, 608],
        [-448, -288, -608],
        [-448, -288, 608],
        [-448, -256, -608],
        [-448, -256, 608],
        [-448, -224, -608],
        [-448, -224, 608],
        [-448, -192, -608],
        [-448, -192, 608],
        [-448, -160, -608],
        [-448, -160, 608],
        [-448, -128, -608],
        [-448, -128, 608],
        [-448, -96, -608],
        [-448, -96, 608],
        [-448, -64, -608],
        [-448, -64, 608],
        [-448, -32, -608],
        [-448, -32, 608],
        [-448, 0, -608],
        [-448, 0, 608],
        [-448, 32, -608],
        [-448, 32, 608],
        [-448, 64, -608],
        [-448, 64, 608],
        [-448, 96, -608],
        [-448, 96, 608],
        [-448, 128, -608],
        [-448, 128, 608],
        [-448, 160, -608],
        [-448, 160, 608],
        [-448, 192, -608],
        [-448, 192, 608],
        [-448, 224, -608],
        [-448, 224, 608],
        [-448, 256, -608],
        [-448, 256, 608],
        [-448, 288, -608],
        [-448, 288, 608],
        [-448, 320, -608],
        [-448, 320, 608],
        [-448, 352, -608],
        [-448, 352, 608],
        [-448, 384, -608],
        [-448, 384, 608],
        [-448, 416, -608],
        [-448, 416, 608],
        [-448, 448, -608],
        [-448, 448, 608],
        [-448, 480, -608],
        [-448, 480, 608],
        [-448, 512, -608],
        [-448, 512, 608],
        [-448, 544, -608],
        [-448, 544, 608],
        [-448, 576, -608],
        [-448, 576, 608],
        [-448, 608, -608],
        [-448, 608, 608],
        [-448, -608, -576],
        [-448, 608, -576],
        [-448, -608, -544],
        [-448, 608, -544],
        [-448, -608, -512],
        [-448, 608, -512],
        [-448, -608, -480],
        [-448, 608, -480],
        [-448, -608, -448],
        [-448, 608, -448],
        [-448, -608, -416],
        [-448, 608, -416],
        [-448, -608, -384],
        [-448, 608, -384],
        [-448, -608, -352],
        [-448, 608, -352],
        [-448, -608, -320],
        [-448, 608, -320],
        [-448, -608, -288],
        [-448, 608, -288],
        [-448, -608, -256],
        [-448, 608, -256],
        [-448, -608, -224],
        [-448, 608, -224],
        [-448, -608, -192],
        [-448, 608, -192],
        [-448, -608, -160],
        [-448, 608, -160],
        [-448, -608, -128],
        [-448, 608, -128],
        [-448, -608, -96],
        [-448, 608, -96],
        [-448, -608, -64],
        [-448, 608, -64],
        [-448, -608, -32],
        [-448, 608, -32],
        [-448, -608, 0],
        [-448, 608, 0],
        [-448, -608, 32],
        [-448, 608, 32],
        [-448, -608, 64],
        [-448, 608, 64],
        [-448, -608, 96],
        [-448, 608, 96],
        [-448, -608, 128],
        [-448, 608, 128],
        [-448, -608, 160],
        [-448, 608, 160],
        [-448, -608, 192],
        [-448, 608, 192],
        [-448, -608, 224],
        [-448, 608, 224],
        [-448, -608, 256],
        [-448, 608, 256],
        [-448, -608, 288],
        [-448, 608, 288],
        [-448, -608, 320],
        [-448, 608, 320],
        [-448, -608, 352],
        [-448, 608, 352],
        [-448, -608, 384],
        [-448, 608, 384],
        [-448, -608, 416],
        [-448, 608, 416],
        [-448, -608, 448],
        [-448, 608, 448],
        [-448, -608, 480],
        [-448, 608, 480],
        [-448, -608, 512],
        [-448, 608, 512],
        [-448, -608, 544],
        [-448, 608, 544],
        [-448, -608, 576],
        [-448, 608, 576],
        [-416, -608, -608],
        [-416, -608, 608],
        [-416, -576, -608],
        [-416, -576, 608],
        [-416, -544, -608],
        [-416, -544, 608],
        [-416, -512, -608],
        [-416, -512, 608],
        [-416, -480, -608],
        [-416, -480, 608],
        [-416, -448, -608],
        [-416, -448, 608],
        [-416, -416, -608],
        [-416, -416, 608],
        [-416, -384, -608],
        [-416, -384, 608],
        [-416, -352, -608],
        [-416, -352, 608],
        [-416, -320, -608],
        [-416, -320, 608],
        [-416, -288, -608],
        [-416, -288, 608],
        [-416, -256, -608],
        [-416, -256, 608],
        [-416, -224, -608],
        [-416, -224, 608],
        [-416, -192, -608],
        [-416, -192, 608],
        [-416, -160, -608],
        [-416, -160, 608],
        [-416, -128, -608],
        [-416, -128, 608],
        [-416, -96, -608],
        [-416, -96, 608],
        [-416, -64, -608],
        [-416, -64, 608],
        [-416, -32, -608],
        [-416, -32, 608],
        [-416, 0, -608],
        [-416, 0, 608],
        [-416, 32, -608],
        [-416, 32, 608],
        [-416, 64, -608],
        [-416, 64, 608],
        [-416, 96, -608],
        [-416, 96, 608],
        [-416, 128, -608],
        [-416, 128, 608],
        [-416, 160, -608],
        [-416, 160, 608],
        [-416, 192, -608],
        [-416, 192, 608],
        [-416, 224, -608],
        [-416, 224, 608],
        [-416, 256, -608],
        [-416, 256, 608],
        [-416, 288, -608],
        [-416, 288, 608],
        [-416, 320, -608],
        [-416, 320, 608],
        [-416, 352, -608],
        [-416, 352, 608],
        [-416, 384, -608],
        [-416, 384, 608],
        [-416, 416, -608],
        [-416, 416, 608],
        [-416, 448, -608],
        [-416, 448, 608],
        [-416, 480, -608],
        [-416, 480, 608],
        [-416, 512, -608],
        [-416, 512, 608],
        [-416, 544, -608],
        [-416, 544, 608],
        [-416, 576, -608],
        [-416, 576, 608],
        [-416, 608, -608],
        [-416, 608, 608],
        [-416, -608, -576],
        [-416, 608, -576],
        [-416, -608, -544],
        [-416, 608, -544],
        [-416, -608, -512],
        [-416, 608, -512],
        [-416, -608, -480],
        [-416, 608, -480],
        [-416, -608, -448],
        [-416, 608, -448],
        [-416, -608, -416],
        [-416, 608, -416],
        [-416, -608, -384],
        [-416, 608, -384],
        [-416, -608, -352],
        [-416, 608, -352],
        [-416, -608, -320],
        [-416, 608, -320],
        [-416, -608, -288],
        [-416, 608, -288],
        [-416, -608, -256],
        [-416, 608, -256],
        [-416, -608, -224],
        [-416, 608, -224],
        [-416, -608, -192],
        [-416, 608, -192],
        [-416, -608, -160],
        [-416, 608, -160],
        [-416, -608, -128],
        [-416, 608, -128],
        [-416, -608, -96],
        [-416, 608, -96],
        [-416, -608, -64],
        [-416, 608, -64],
        [-416, -608, -32],
        [-416, 608, -32],
        [-416, -608, 0],
        [-416, 608, 0],
        [-416, -608, 32],
        [-416, 608, 32],
        [-416, -608, 64],
        [-416, 608, 64],
        [-416, -608, 96],
        [-416, 608, 96],
        [-416, -608, 128],
        [-416, 608, 128],
        [-416, -608, 160],
        [-416, 608, 160],
        [-416, -608, 192],
        [-416, 608, 192],
        [-416, -608, 224],
        [-416, 608, 224],
        [-416, -608, 256],
        [-416, 608, 256],
        [-416, -608, 288],
        [-416, 608, 288],
        [-416, -608, 320],
        [-416, 608, 320],
        [-416, -608, 352],
        [-416, 608, 352],
        [-416, -608, 384],
        [-416, 608, 384],
        [-416, -608, 416],
        [-416, 608, 416],
        [-416, -608, 448],
        [-416, 608, 448],
        [-416, -608, 480],
        [-416, 608, 480],
        [-416, -608, 512],
        [-416, 608, 512],
        [-416, -608, 544],
        [-416, 608, 544],
        [-416, -608, 576],
        [-416, 608, 576],
        [-384, -608, -608],
        [-384, -608, 608],
        [-384, -576, -608],
        [-384, -576, 608],
        [-384, -544, -608],
        [-384, -544, 608],
        [-384, -512, -608],
        [-384, -512, 608],
        [-384, -480, -608],
        [-384, -480, 608],
        [-384, -448, -608],
        [-384, -448, 608],
        [-384, -416, -608],
        [-384, -416, 608],
        [-384, -384, -608],
        [-384, -384, 608],
        [-384, -352, -608],
        [-384, -352, 608],
        [-384, -320, -608],
        [-384, -320, 608],
        [-384, -288, -608],
        [-384, -288, 608],
        [-384, -256, -608],
        [-384, -256, 608],
        [-384, -224, -608],
        [-384, -224, 608],
        [-384, -192, -608],
        [-384, -192, 608],
        [-384, -160, -608],
        [-384, -160, 608],
        [-384, -128, -608],
        [-384, -128, 608],
        [-384, -96, -608],
        [-384, -96, 608],
        [-384, -64, -608],
        [-384, -64, 608],
        [-384, -32, -608],
        [-384, -32, 608],
        [-384, 0, -608],
        [-384, 0, 608],
        [-384, 32, -608],
        [-384, 32, 608],
        [-384, 64, -608],
        [-384, 64, 608],
        [-384, 96, -608],
        [-384, 96, 608],
        [-384, 128, -608],
        [-384, 128, 608],
        [-384, 160, -608],
        [-384, 160, 608],
        [-384, 192, -608],
        [-384, 192, 608],
        [-384, 224, -608],
        [-384, 224, 608],
        [-384, 256, -608],
        [-384, 256, 608],
        [-384, 288, -608],
        [-384, 288, 608],
        [-384, 320, -608],
        [-384, 320, 608],
        [-384, 352, -608],
        [-384, 352, 608],
        [-384, 384, -608],
        [-384, 384, 608],
        [-384, 416, -608],
        [-384, 416, 608],
        [-384, 448, -608],
        [-384, 448, 608],
        [-384, 480, -608],
        [-384, 480, 608],
        [-384, 512, -608],
        [-384, 512, 608],
        [-384, 544, -608],
        [-384, 544, 608],
        [-384, 576, -608],
        [-384, 576, 608],
        [-384, 608, -608],
        [-384, 608, 608],
        [-384, -608, -576],
        [-384, 608, -576],
        [-384, -608, -544],
        [-384, 608, -544],
        [-384, -608, -512],
        [-384, 608, -512],
        [-384, -608, -480],
        [-384, 608, -480],
        [-384, -608, -448],
        [-384, 608, -448],
        [-384, -608, -416],
        [-384, 608, -416],
        [-384, -608, -384],
        [-384, 608, -384],
        [-384, -608, -352],
        [-384, 608, -352],
        [-384, -608, -320],
        [-384, 608, -320],
        [-384, -608, -288],
        [-384, 608, -288],
        [-384, -608, -256],
        [-384, 608, -256],
        [-384, -608, -224],
        [-384, 608, -224],
        [-384, -608, -192],
        [-384, 608, -192],
        [-384, -608, -160],
        [-384, 608, -160],
        [-384, -608, -128],
        [-384, 608, -128],
        [-384, -608, -96],
        [-384, 608, -96],
        [-384, -608, -64],
        [-384, 608, -64],
        [-384, -608, -32],
        [-384, 608, -32],
        [-384, -608, 0],
        [-384, 608, 0],
        [-384, -608, 32],
        [-384, 608, 32],
        [-384, -608, 64],
        [-384, 608, 64],
        [-384, -608, 96],
        [-384, 608, 96],
        [-384, -608, 128],
        [-384, 608, 128],
        [-384, -608, 160],
        [-384, 608, 160],
        [-384, -608, 192],
        [-384, 608, 192],
        [-384, -608, 224],
        [-384, 608, 224],
        [-384, -608, 256],
        [-384, 608, 256],
        [-384, -608, 288],
        [-384, 608, 288],
        [-384, -608, 320],
        [-384, 608, 320],
        [-384, -608, 352],
        [-384, 608, 352],
        [-384, -608, 384],
        [-384, 608, 384],
        [-384, -608, 416],
        [-384, 608, 416],
        [-384, -608, 448],
        [-384, 608, 448],
        [-384, -608, 480],
        [-384, 608, 480],
        [-384, -608, 512],
        [-384, 608, 512],
        [-384, -608, 544],
        [-384, 608, 544],
        [-384, -608, 576],
        [-384, 608, 576],
        [-352, -608, -608],
        [-352, -608, 608],
        [-352, -576, -608],
        [-352, -576, 608],
        [-352, -544, -608],
        [-352, -544, 608],
        [-352, -512, -608],
        [-352, -512, 608],
        [-352, -480, -608],
        [-352, -480, 608],
        [-352, -448, -608],
        [-352, -448, 608],
        [-352, -416, -608],
        [-352, -416, 608],
        [-352, -384, -608],
        [-352, -384, 608],
        [-352, -352, -608],
        [-352, -352, 608],
        [-352, -320, -608],
        [-352, -320, 608],
        [-352, -288, -608],
        [-352, -288, 608],
        [-352, -256, -608],
        [-352, -256, 608],
        [-352, -224, -608],
        [-352, -224, 608],
        [-352, -192, -608],
        [-352, -192, 608],
        [-352, -160, -608],
        [-352, -160, 608],
        [-352, -128, -608],
        [-352, -128, 608],
        [-352, -96, -608],
        [-352, -96, 608],
        [-352, -64, -608],
        [-352, -64, 608],
        [-352, -32, -608],
        [-352, -32, 608],
        [-352, 0, -608],
        [-352, 0, 608],
        [-352, 32, -608],
        [-352, 32, 608],
        [-352, 64, -608],
        [-352, 64, 608],
        [-352, 96, -608],
        [-352, 96, 608],
        [-352, 128, -608],
        [-352, 128, 608],
        [-352, 160, -608],
        [-352, 160, 608],
        [-352, 192, -608],
        [-352, 192, 608],
        [-352, 224, -608],
        [-352, 224, 608],
        [-352, 256, -608],
        [-352, 256, 608],
        [-352, 288, -608],
        [-352, 288, 608],
        [-352, 320, -608],
        [-352, 320, 608],
        [-352, 352, -608],
        [-352, 352, 608],
        [-352, 384, -608],
        [-352, 384, 608],
        [-352, 416, -608],
        [-352, 416, 608],
        [-352, 448, -608],
        [-352, 448, 608],
        [-352, 480, -608],
        [-352, 480, 608],
        [-352, 512, -608],
        [-352, 512, 608],
        [-352, 544, -608],
        [-352, 544, 608],
        [-352, 576, -608],
        [-352, 576, 608],
        [-352, 608, -608],
        [-352, 608, 608],
        [-352, -608, -576],
        [-352, 608, -576],
        [-352, -608, -544],
        [-352, 608, -544],
        [-352, -608, -512],
        [-352, 608, -512],
        [-352, -608, -480],
        [-352, 608, -480],
        [-352, -608, -448],
        [-352, 608, -448],
        [-352, -608, -416],
        [-352, 608, -416],
        [-352, -608, -384],
        [-352, 608, -384],
        [-352, -608, -352],
        [-352, 608, -352],
        [-352, -608, -320],
        [-352, 608, -320],
        [-352, -608, -288],
        [-352, 608, -288],
        [-352, -608, -256],
        [-352, 608, -256],
        [-352, -608, -224],
        [-352, 608, -224],
        [-352, -608, -192],
        [-352, 608, -192],
        [-352, -608, -160],
        [-352, 608, -160],
        [-352, -608, -128],
        [-352, 608, -128],
        [-352, -608, -96],
        [-352, 608, -96],
        [-352, -608, -64],
        [-352, 608, -64],
        [-352, -608, -32],
        [-352, 608, -32],
        [-352, -608, 0],
        [-352, 608, 0],
        [-352, -608, 32],
        [-352, 608, 32],
        [-352, -608, 64],
        [-352, 608, 64],
        [-352, -608, 96],
        [-352, 608, 96],
        [-352, -608, 128],
        [-352, 608, 128],
        [-352, -608, 160],
        [-352, 608, 160],
        [-352, -608, 192],
        [-352, 608, 192],
        [-352, -608, 224],
        [-352, 608, 224],
        [-352, -608, 256],
        [-352, 608, 256],
        [-352, -608, 288],
        [-352, 608, 288],
        [-352, -608, 320],
        [-352, 608, 320],
        [-352, -608, 352],
        [-352, 608, 352],
        [-352, -608, 384],
        [-352, 608, 384],
        [-352, -608, 416],
        [-352, 608, 416],
        [-352, -608, 448],
        [-352, 608, 448],
        [-352, -608, 480],
        [-352, 608, 480],
        [-352, -608, 512],
        [-352, 608, 512],
        [-352, -608, 544],
        [-352, 608, 544],
        [-352, -608, 576],
        [-352, 608, 576],
        [-320, -608, -608],
        [-320, -608, 608],
        [-320, -576, -608],
        [-320, -576, 608],
        [-320, -544, -608],
        [-320, -544, 608],
        [-320, -512, -608],
        [-320, -512, 608],
        [-320, -480, -608],
        [-320, -480, 608],
        [-320, -448, -608],
        [-320, -448, 608],
        [-320, -416, -608],
        [-320, -416, 608],
        [-320, -384, -608],
        [-320, -384, 608],
        [-320, -352, -608],
        [-320, -352, 608],
        [-320, -320, -608],
        [-320, -320, 608],
        [-320, -288, -608],
        [-320, -288, 608],
        [-320, -256, -608],
        [-320, -256, 608],
        [-320, -224, -608],
        [-320, -224, 608],
        [-320, -192, -608],
        [-320, -192, 608],
        [-320, -160, -608],
        [-320, -160, 608],
        [-320, -128, -608],
        [-320, -128, 608],
        [-320, -96, -608],
        [-320, -96, 608],
        [-320, -64, -608],
        [-320, -64, 608],
        [-320, -32, -608],
        [-320, -32, 608],
        [-320, 0, -608],
        [-320, 0, 608],
        [-320, 32, -608],
        [-320, 32, 608],
        [-320, 64, -608],
        [-320, 64, 608],
        [-320, 96, -608],
        [-320, 96, 608],
        [-320, 128, -608],
        [-320, 128, 608],
        [-320, 160, -608],
        [-320, 160, 608],
        [-320, 192, -608],
        [-320, 192, 608],
        [-320, 224, -608],
        [-320, 224, 608],
        [-320, 256, -608],
        [-320, 256, 608],
        [-320, 288, -608],
        [-320, 288, 608],
        [-320, 320, -608],
        [-320, 320, 608],
        [-320, 352, -608],
        [-320, 352, 608],
        [-320, 384, -608],
        [-320, 384, 608],
        [-320, 416, -608],
        [-320, 416, 608],
        [-320, 448, -608],
        [-320, 448, 608],
        [-320, 480, -608],
        [-320, 480, 608],
        [-320, 512, -608],
        [-320, 512, 608],
        [-320, 544, -608],
        [-320, 544, 608],
        [-320, 576, -608],
        [-320, 576, 608],
        [-320, 608, -608],
        [-320, 608, 608],
        [-320, -608, -576],
        [-320, 608, -576],
        [-320, -608, -544],
        [-320, 608, -544],
        [-320, -608, -512],
        [-320, 608, -512],
        [-320, -608, -480],
        [-320, 608, -480],
        [-320, -608, -448],
        [-320, 608, -448],
        [-320, -608, -416],
        [-320, 608, -416],
        [-320, -608, -384],
        [-320, 608, -384],
        [-320, -608, -352],
        [-320, 608, -352],
        [-320, -608, -320],
        [-320, 608, -320],
        [-320, -608, -288],
        [-320, 608, -288],
        [-320, -608, -256],
        [-320, 608, -256],
        [-320, -608, -224],
        [-320, 608, -224],
        [-320, -608, -192],
        [-320, 608, -192],
        [-320, -608, -160],
        [-320, 608, -160],
        [-320, -608, -128],
        [-320, 608, -128],
        [-320, -608, -96],
        [-320, 608, -96],
        [-320, -608, -64],
        [-320, 608, -64],
        [-320, -608, -32],
        [-320, 608, -32],
        [-320, -608, 0],
        [-320, 608, 0],
        [-320, -608, 32],
        [-320, 608, 32],
        [-320, -608, 64],
        [-320, 608, 64],
        [-320, -608, 96],
        [-320, 608, 96],
        [-320, -608, 128],
        [-320, 608, 128],
        [-320, -608, 160],
        [-320, 608, 160],
        [-320, -608, 192],
        [-320, 608, 192],
        [-320, -608, 224],
        [-320, 608, 224],
        [-320, -608, 256],
        [-320, 608, 256],
        [-320, -608, 288],
        [-320, 608, 288],
        [-320, -608, 320],
        [-320, 608, 320],
        [-320, -608, 352],
        [-320, 608, 352],
        [-320, -608, 384],
        [-320, 608, 384],
        [-320, -608, 416],
        [-320, 608, 416],
        [-320, -608, 448],
        [-320, 608, 448],
        [-320, -608, 480],
        [-320, 608, 480],
        [-320, -608, 512],
        [-320, 608, 512],
        [-320, -608, 544],
        [-320, 608, 544],
        [-320, -608, 576],
        [-320, 608, 576],
        [-288, -608, -608],
        [-288, -608, 608],
        [-288, -576, -608],
        [-288, -576, 608],
        [-288, -544, -608],
        [-288, -544, 608],
        [-288, -512, -608],
        [-288, -512, 608],
        [-288, -480, -608],
        [-288, -480, 608],
        [-288, -448, -608],
        [-288, -448, 608],
        [-288, -416, -608],
        [-288, -416, 608],
        [-288, -384, -608],
        [-288, -384, 608],
        [-288, -352, -608],
        [-288, -352, 608],
        [-288, -320, -608],
        [-288, -320, 608],
        [-288, -288, -608],
        [-288, -288, 608],
        [-288, -256, -608],
        [-288, -256, 608],
        [-288, -224, -608],
        [-288, -224, 608],
        [-288, -192, -608],
        [-288, -192, 608],
        [-288, -160, -608],
        [-288, -160, 608],
        [-288, -128, -608],
        [-288, -128, 608],
        [-288, -96, -608],
        [-288, -96, 608],
        [-288, -64, -608],
        [-288, -64, 608],
        [-288, -32, -608],
        [-288, -32, 608],
        [-288, 0, -608],
        [-288, 0, 608],
        [-288, 32, -608],
        [-288, 32, 608],
        [-288, 64, -608],
        [-288, 64, 608],
        [-288, 96, -608],
        [-288, 96, 608],
        [-288, 128, -608],
        [-288, 128, 608],
        [-288, 160, -608],
        [-288, 160, 608],
        [-288, 192, -608],
        [-288, 192, 608],
        [-288, 224, -608],
        [-288, 224, 608],
        [-288, 256, -608],
        [-288, 256, 608],
        [-288, 288, -608],
        [-288, 288, 608],
        [-288, 320, -608],
        [-288, 320, 608],
        [-288, 352, -608],
        [-288, 352, 608],
        [-288, 384, -608],
        [-288, 384, 608],
        [-288, 416, -608],
        [-288, 416, 608],
        [-288, 448, -608],
        [-288, 448, 608],
        [-288, 480, -608],
        [-288, 480, 608],
        [-288, 512, -608],
        [-288, 512, 608],
        [-288, 544, -608],
        [-288, 544, 608],
        [-288, 576, -608],
        [-288, 576, 608],
        [-288, 608, -608],
        [-288, 608, 608],
        [-288, -608, -576],
        [-288, 608, -576],
        [-288, -608, -544],
        [-288, 608, -544],
        [-288, -608, -512],
        [-288, 608, -512],
        [-288, -608, -480],
        [-288, 608, -480],
        [-288, -608, -448],
        [-288, 608, -448],
        [-288, -608, -416],
        [-288, 608, -416],
        [-288, -608, -384],
        [-288, 608, -384],
        [-288, -608, -352],
        [-288, 608, -352],
        [-288, -608, -320],
        [-288, 608, -320],
        [-288, -608, -288],
        [-288, 608, -288],
        [-288, -608, -256],
        [-288, 608, -256],
        [-288, -608, -224],
        [-288, 608, -224],
        [-288, -608, -192],
        [-288, 608, -192],
        [-288, -608, -160],
        [-288, 608, -160],
        [-288, -608, -128],
        [-288, 608, -128],
        [-288, -608, -96],
        [-288, 608, -96],
        [-288, -608, -64],
        [-288, 608, -64],
        [-288, -608, -32],
        [-288, 608, -32],
        [-288, -608, 0],
        [-288, 608, 0],
        [-288, -608, 32],
        [-288, 608, 32],
        [-288, -608, 64],
        [-288, 608, 64],
        [-288, -608, 96],
        [-288, 608, 96],
        [-288, -608, 128],
        [-288, 608, 128],
        [-288, -608, 160],
        [-288, 608, 160],
        [-288, -608, 192],
        [-288, 608, 192],
        [-288, -608, 224],
        [-288, 608, 224],
        [-288, -608, 256],
        [-288, 608, 256],
        [-288, -608, 288],
        [-288, 608, 288],
        [-288, -608, 320],
        [-288, 608, 320],
        [-288, -608, 352],
        [-288, 608, 352],
        [-288, -608, 384],
        [-288, 608, 384],
        [-288, -608, 416],
        [-288, 608, 416],
        [-288, -608, 448],
        [-288, 608, 448],
        [-288, -608, 480],
        [-288, 608, 480],
        [-288, -608, 512],
        [-288, 608, 512],
        [-288, -608, 544],
        [-288, 608, 544],
        [-288, -608, 576],
        [-288, 608, 576],
        [-256, -608, -608],
        [-256, -608, 608],
        [-256, -576, -608],
        [-256, -576, 608],
        [-256, -544, -608],
        [-256, -544, 608],
        [-256, -512, -608],
        [-256, -512, 608],
        [-256, -480, -608],
        [-256, -480, 608],
        [-256, -448, -608],
        [-256, -448, 608],
        [-256, -416, -608],
        [-256, -416, 608],
        [-256, -384, -608],
        [-256, -384, 608],
        [-256, -352, -608],
        [-256, -352, 608],
        [-256, -320, -608],
        [-256, -320, 608],
        [-256, -288, -608],
        [-256, -288, 608],
        [-256, -256, -608],
        [-256, -256, 608],
        [-256, -224, -608],
        [-256, -224, 608],
        [-256, -192, -608],
        [-256, -192, 608],
        [-256, -160, -608],
        [-256, -160, 608],
        [-256, -128, -608],
        [-256, -128, 608],
        [-256, -96, -608],
        [-256, -96, 608],
        [-256, -64, -608],
        [-256, -64, 608],
        [-256, -32, -608],
        [-256, -32, 608],
        [-256, 0, -608],
        [-256, 0, 608],
        [-256, 32, -608],
        [-256, 32, 608],
        [-256, 64, -608],
        [-256, 64, 608],
        [-256, 96, -608],
        [-256, 96, 608],
        [-256, 128, -608],
        [-256, 128, 608],
        [-256, 160, -608],
        [-256, 160, 608],
        [-256, 192, -608],
        [-256, 192, 608],
        [-256, 224, -608],
        [-256, 224, 608],
        [-256, 256, -608],
        [-256, 256, 608],
        [-256, 288, -608],
        [-256, 288, 608],
        [-256, 320, -608],
        [-256, 320, 608],
        [-256, 352, -608],
        [-256, 352, 608],
        [-256, 384, -608],
        [-256, 384, 608],
        [-256, 416, -608],
        [-256, 416, 608],
        [-256, 448, -608],
        [-256, 448, 608],
        [-256, 480, -608],
        [-256, 480, 608],
        [-256, 512, -608],
        [-256, 512, 608],
        [-256, 544, -608],
        [-256, 544, 608],
        [-256, 576, -608],
        [-256, 576, 608],
        [-256, 608, -608],
        [-256, 608, 608],
        [-256, -608, -576],
        [-256, 608, -576],
        [-256, -608, -544],
        [-256, 608, -544],
        [-256, -608, -512],
        [-256, 608, -512],
        [-256, -608, -480],
        [-256, 608, -480],
        [-256, -608, -448],
        [-256, 608, -448],
        [-256, -608, -416],
        [-256, 608, -416],
        [-256, -608, -384],
        [-256, 608, -384],
        [-256, -608, -352],
        [-256, 608, -352],
        [-256, -608, -320],
        [-256, 608, -320],
        [-256, -608, -288],
        [-256, 608, -288],
        [-256, -608, -256],
        [-256, 608, -256],
        [-256, -608, -224],
        [-256, 608, -224],
        [-256, -608, -192],
        [-256, 608, -192],
        [-256, -608, -160],
        [-256, 608, -160],
        [-256, -608, -128],
        [-256, 608, -128],
        [-256, -608, -96],
        [-256, 608, -96],
        [-256, -608, -64],
        [-256, 608, -64],
        [-256, -608, -32],
        [-256, 608, -32],
        [-256, -608, 0],
        [-256, 608, 0],
        [-256, -608, 32],
        [-256, 608, 32],
        [-256, -608, 64],
        [-256, 608, 64],
        [-256, -608, 96],
        [-256, 608, 96],
        [-256, -608, 128],
        [-256, 608, 128],
        [-256, -608, 160],
        [-256, 608, 160],
        [-256, -608, 192],
        [-256, 608, 192],
        [-256, -608, 224],
        [-256, 608, 224],
        [-256, -608, 256],
        [-256, 608, 256],
        [-256, -608, 288],
        [-256, 608, 288],
        [-256, -608, 320],
        [-256, 608, 320],
        [-256, -608, 352],
        [-256, 608, 352],
        [-256, -608, 384],
        [-256, 608, 384],
        [-256, -608, 416],
        [-256, 608, 416],
        [-256, -608, 448],
        [-256, 608, 448],
        [-256, -608, 480],
        [-256, 608, 480],
        [-256, -608, 512],
        [-256, 608, 512],
        [-256, -608, 544],
        [-256, 608, 544],
        [-256, -608, 576],
        [-256, 608, 576],
        [-224, -608, -608],
        [-224, -608, 608],
        [-224, -576, -608],
        [-224, -576, 608],
        [-224, -544, -608],
        [-224, -544, 608],
        [-224, -512, -608],
        [-224, -512, 608],
        [-224, -480, -608],
        [-224, -480, 608],
        [-224, -448, -608],
        [-224, -448, 608],
        [-224, -416, -608],
        [-224, -416, 608],
        [-224, -384, -608],
        [-224, -384, 608],
        [-224, -352, -608],
        [-224, -352, 608],
        [-224, -320, -608],
        [-224, -320, 608],
        [-224, -288, -608],
        [-224, -288, 608],
        [-224, -256, -608],
        [-224, -256, 608],
        [-224, -224, -608],
        [-224, -224, 608],
        [-224, -192, -608],
        [-224, -192, 608],
        [-224, -160, -608],
        [-224, -160, 608],
        [-224, -128, -608],
        [-224, -128, 608],
        [-224, -96, -608],
        [-224, -96, 608],
        [-224, -64, -608],
        [-224, -64, 608],
        [-224, -32, -608],
        [-224, -32, 608],
        [-224, 0, -608],
        [-224, 0, 608],
        [-224, 32, -608],
        [-224, 32, 608],
        [-224, 64, -608],
        [-224, 64, 608],
        [-224, 96, -608],
        [-224, 96, 608],
        [-224, 128, -608],
        [-224, 128, 608],
        [-224, 160, -608],
        [-224, 160, 608],
        [-224, 192, -608],
        [-224, 192, 608],
        [-224, 224, -608],
        [-224, 224, 608],
        [-224, 256, -608],
        [-224, 256, 608],
        [-224, 288, -608],
        [-224, 288, 608],
        [-224, 320, -608],
        [-224, 320, 608],
        [-224, 352, -608],
        [-224, 352, 608],
        [-224, 384, -608],
        [-224, 384, 608],
        [-224, 416, -608],
        [-224, 416, 608],
        [-224, 448, -608],
        [-224, 448, 608],
        [-224, 480, -608],
        [-224, 480, 608],
        [-224, 512, -608],
        [-224, 512, 608],
        [-224, 544, -608],
        [-224, 544, 608],
        [-224, 576, -608],
        [-224, 576, 608],
        [-224, 608, -608],
        [-224, 608, 608],
        [-224, -608, -576],
        [-224, 608, -576],
        [-224, -608, -544],
        [-224, 608, -544],
        [-224, -608, -512],
        [-224, 608, -512],
        [-224, -608, -480],
        [-224, 608, -480],
        [-224, -608, -448],
        [-224, 608, -448],
        [-224, -608, -416],
        [-224, 608, -416],
        [-224, -608, -384],
        [-224, 608, -384],
        [-224, -608, -352],
        [-224, 608, -352],
        [-224, -608, -320],
        [-224, 608, -320],
        [-224, -608, -288],
        [-224, 608, -288],
        [-224, -608, -256],
        [-224, 608, -256],
        [-224, -608, -224],
        [-224, 608, -224],
        [-224, -608, -192],
        [-224, 608, -192],
        [-224, -608, -160],
        [-224, 608, -160],
        [-224, -608, -128],
        [-224, 608, -128],
        [-224, -608, -96],
        [-224, 608, -96],
        [-224, -608, -64],
        [-224, 608, -64],
        [-224, -608, -32],
        [-224, 608, -32],
        [-224, -608, 0],
        [-224, 608, 0],
        [-224, -608, 32],
        [-224, 608, 32],
        [-224, -608, 64],
        [-224, 608, 64],
        [-224, -608, 96],
        [-224, 608, 96],
        [-224, -608, 128],
        [-224, 608, 128],
        [-224, -608, 160],
        [-224, 608, 160],
        [-224, -608, 192],
        [-224, 608, 192],
        [-224, -608, 224],
        [-224, 608, 224],
        [-224, -608, 256],
        [-224, 608, 256],
        [-224, -608, 288],
        [-224, 608, 288],
        [-224, -608, 320],
        [-224, 608, 320],
        [-224, -608, 352],
        [-224, 608, 352],
        [-224, -608, 384],
        [-224, 608, 384],
        [-224, -608, 416],
        [-224, 608, 416],
        [-224, -608, 448],
        [-224, 608, 448],
        [-224, -608, 480],
        [-224, 608, 480],
        [-224, -608, 512],
        [-224, 608, 512],
        [-224, -608, 544],
        [-224, 608, 544],
        [-224, -608, 576],
        [-224, 608, 576],
        [-192, -608, -608],
        [-192, -608, 608],
        [-192, -576, -608],
        [-192, -576, 608],
        [-192, -544, -608],
        [-192, -544, 608],
        [-192, -512, -608],
        [-192, -512, 608],
        [-192, -480, -608],
        [-192, -480, 608],
        [-192, -448, -608],
        [-192, -448, 608],
        [-192, -416, -608],
        [-192, -416, 608],
        [-192, -384, -608],
        [-192, -384, 608],
        [-192, -352, -608],
        [-192, -352, 608],
        [-192, -320, -608],
        [-192, -320, 608],
        [-192, -288, -608],
        [-192, -288, 608],
        [-192, -256, -608],
        [-192, -256, 608],
        [-192, -224, -608],
        [-192, -224, 608],
        [-192, -192, -608],
        [-192, -192, 608],
        [-192, -160, -608],
        [-192, -160, 608],
        [-192, -128, -608],
        [-192, -128, 608],
        [-192, -96, -608],
        [-192, -96, 608],
        [-192, -64, -608],
        [-192, -64, 608],
        [-192, -32, -608],
        [-192, -32, 608],
        [-192, 0, -608],
        [-192, 0, 608],
        [-192, 32, -608],
        [-192, 32, 608],
        [-192, 64, -608],
        [-192, 64, 608],
        [-192, 96, -608],
        [-192, 96, 608],
        [-192, 128, -608],
        [-192, 128, 608],
        [-192, 160, -608],
        [-192, 160, 608],
        [-192, 192, -608],
        [-192, 192, 608],
        [-192, 224, -608],
        [-192, 224, 608],
        [-192, 256, -608],
        [-192, 256, 608],
        [-192, 288, -608],
        [-192, 288, 608],
        [-192, 320, -608],
        [-192, 320, 608],
        [-192, 352, -608],
        [-192, 352, 608],
        [-192, 384, -608],
        [-192, 384, 608],
        [-192, 416, -608],
        [-192, 416, 608],
        [-192, 448, -608],
        [-192, 448, 608],
        [-192, 480, -608],
        [-192, 480, 608],
        [-192, 512, -608],
        [-192, 512, 608],
        [-192, 544, -608],
        [-192, 544, 608],
        [-192, 576, -608],
        [-192, 576, 608],
        [-192, 608, -608],
        [-192, 608, 608],
        [-192, -608, -576],
        [-192, 608, -576],
        [-192, -608, -544],
        [-192, 608, -544],
        [-192, -608, -512],
        [-192, 608, -512],
        [-192, -608, -480],
        [-192, 608, -480],
        [-192, -608, -448],
        [-192, 608, -448],
        [-192, -608, -416],
        [-192, 608, -416],
        [-192, -608, -384],
        [-192, 608, -384],
        [-192, -608, -352],
        [-192, 608, -352],
        [-192, -608, -320],
        [-192, 608, -320],
        [-192, -608, -288],
        [-192, 608, -288],
        [-192, -608, -256],
        [-192, 608, -256],
        [-192, -608, -224],
        [-192, 608, -224],
        [-192, -608, -192],
        [-192, 608, -192],
        [-192, -608, -160],
        [-192, 608, -160],
        [-192, -608, -128],
        [-192, 608, -128],
        [-192, -608, -96],
        [-192, 608, -96],
        [-192, -608, -64],
        [-192, 608, -64],
        [-192, -608, -32],
        [-192, 608, -32],
        [-192, -608, 0],
        [-192, 608, 0],
        [-192, -608, 32],
        [-192, 608, 32],
        [-192, -608, 64],
        [-192, 608, 64],
        [-192, -608, 96],
        [-192, 608, 96],
        [-192, -608, 128],
        [-192, 608, 128],
        [-192, -608, 160],
        [-192, 608, 160],
        [-192, -608, 192],
        [-192, 608, 192],
        [-192, -608, 224],
        [-192, 608, 224],
        [-192, -608, 256],
        [-192, 608, 256],
        [-192, -608, 288],
        [-192, 608, 288],
        [-192, -608, 320],
        [-192, 608, 320],
        [-192, -608, 352],
        [-192, 608, 352],
        [-192, -608, 384],
        [-192, 608, 384],
        [-192, -608, 416],
        [-192, 608, 416],
        [-192, -608, 448],
        [-192, 608, 448],
        [-192, -608, 480],
        [-192, 608, 480],
        [-192, -608, 512],
        [-192, 608, 512],
        [-192, -608, 544],
        [-192, 608, 544],
        [-192, -608, 576],
        [-192, 608, 576],
        [-160, -608, -608],
        [-160, -608, 608],
        [-160, -576, -608],
        [-160, -576, 608],
        [-160, -544, -608],
        [-160, -544, 608],
        [-160, -512, -608],
        [-160, -512, 608],
        [-160, -480, -608],
        [-160, -480, 608],
        [-160, -448, -608],
        [-160, -448, 608],
        [-160, -416, -608],
        [-160, -416, 608],
        [-160, -384, -608],
        [-160, -384, 608],
        [-160, -352, -608],
        [-160, -352, 608],
        [-160, -320, -608],
        [-160, -320, 608],
        [-160, -288, -608],
        [-160, -288, 608],
        [-160, -256, -608],
        [-160, -256, 608],
        [-160, -224, -608],
        [-160, -224, 608],
        [-160, -192, -608],
        [-160, -192, 608],
        [-160, -160, -608],
        [-160, -160, 608],
        [-160, -128, -608],
        [-160, -128, 608],
        [-160, -96, -608],
        [-160, -96, 608],
        [-160, -64, -608],
        [-160, -64, 608],
        [-160, -32, -608],
        [-160, -32, 608],
        [-160, 0, -608],
        [-160, 0, 608],
        [-160, 32, -608],
        [-160, 32, 608],
        [-160, 64, -608],
        [-160, 64, 608],
        [-160, 96, -608],
        [-160, 96, 608],
        [-160, 128, -608],
        [-160, 128, 608],
        [-160, 160, -608],
        [-160, 160, 608],
        [-160, 192, -608],
        [-160, 192, 608],
        [-160, 224, -608],
        [-160, 224, 608],
        [-160, 256, -608],
        [-160, 256, 608],
        [-160, 288, -608],
        [-160, 288, 608],
        [-160, 320, -608],
        [-160, 320, 608],
        [-160, 352, -608],
        [-160, 352, 608],
        [-160, 384, -608],
        [-160, 384, 608],
        [-160, 416, -608],
        [-160, 416, 608],
        [-160, 448, -608],
        [-160, 448, 608],
        [-160, 480, -608],
        [-160, 480, 608],
        [-160, 512, -608],
        [-160, 512, 608],
        [-160, 544, -608],
        [-160, 544, 608],
        [-160, 576, -608],
        [-160, 576, 608],
        [-160, 608, -608],
        [-160, 608, 608],
        [-160, -608, -576],
        [-160, 608, -576],
        [-160, -608, -544],
        [-160, 608, -544],
        [-160, -608, -512],
        [-160, 608, -512],
        [-160, -608, -480],
        [-160, 608, -480],
        [-160, -608, -448],
        [-160, 608, -448],
        [-160, -608, -416],
        [-160, 608, -416],
        [-160, -608, -384],
        [-160, 608, -384],
        [-160, -608, -352],
        [-160, 608, -352],
        [-160, -608, -320],
        [-160, 608, -320],
        [-160, -608, -288],
        [-160, 608, -288],
        [-160, -608, -256],
        [-160, 608, -256],
        [-160, -608, -224],
        [-160, 608, -224],
        [-160, -608, -192],
        [-160, 608, -192],
        [-160, -608, -160],
        [-160, 608, -160],
        [-160, -608, -128],
        [-160, 608, -128],
        [-160, -608, -96],
        [-160, 608, -96],
        [-160, -608, -64],
        [-160, 608, -64],
        [-160, -608, -32],
        [-160, 608, -32],
        [-160, -608, 0],
        [-160, 608, 0],
        [-160, -608, 32],
        [-160, 608, 32],
        [-160, -608, 64],
        [-160, 608, 64],
        [-160, -608, 96],
        [-160, 608, 96],
        [-160, -608, 128],
        [-160, 608, 128],
        [-160, -608, 160],
        [-160, 608, 160],
        [-160, -608, 192],
        [-160, 608, 192],
        [-160, -608, 224],
        [-160, 608, 224],
        [-160, -608, 256],
        [-160, 608, 256],
        [-160, -608, 288],
        [-160, 608, 288],
        [-160, -608, 320],
        [-160, 608, 320],
        [-160, -608, 352],
        [-160, 608, 352],
        [-160, -608, 384],
        [-160, 608, 384],
        [-160, -608, 416],
        [-160, 608, 416],
        [-160, -608, 448],
        [-160, 608, 448],
        [-160, -608, 480],
        [-160, 608, 480],
        [-160, -608, 512],
        [-160, 608, 512],
        [-160, -608, 544],
        [-160, 608, 544],
        [-160, -608, 576],
        [-160, 608, 576],
        [-128, -608, -608],
        [-128, -608, 608],
        [-128, -576, -608],
        [-128, -576, 608],
        [-128, -544, -608],
        [-128, -544, 608],
        [-128, -512, -608],
        [-128, -512, 608],
        [-128, -480, -608],
        [-128, -480, 608],
        [-128, -448, -608],
        [-128, -448, 608],
        [-128, -416, -608],
        [-128, -416, 608],
        [-128, -384, -608],
        [-128, -384, 608],
        [-128, -352, -608],
        [-128, -352, 608],
        [-128, -320, -608],
        [-128, -320, 608],
        [-128, -288, -608],
        [-128, -288, 608],
        [-128, -256, -608],
        [-128, -256, 608],
        [-128, -224, -608],
        [-128, -224, 608],
        [-128, -192, -608],
        [-128, -192, 608],
        [-128, -160, -608],
        [-128, -160, 608],
        [-128, -128, -608],
        [-128, -128, 608],
        [-128, -96, -608],
        [-128, -96, 608],
        [-128, -64, -608],
        [-128, -64, 608],
        [-128, -32, -608],
        [-128, -32, 608],
        [-128, 0, -608],
        [-128, 0, 608],
        [-128, 32, -608],
        [-128, 32, 608],
        [-128, 64, -608],
        [-128, 64, 608],
        [-128, 96, -608],
        [-128, 96, 608],
        [-128, 128, -608],
        [-128, 128, 608],
        [-128, 160, -608],
        [-128, 160, 608],
        [-128, 192, -608],
        [-128, 192, 608],
        [-128, 224, -608],
        [-128, 224, 608],
        [-128, 256, -608],
        [-128, 256, 608],
        [-128, 288, -608],
        [-128, 288, 608],
        [-128, 320, -608],
        [-128, 320, 608],
        [-128, 352, -608],
        [-128, 352, 608],
        [-128, 384, -608],
        [-128, 384, 608],
        [-128, 416, -608],
        [-128, 416, 608],
        [-128, 448, -608],
        [-128, 448, 608],
        [-128, 480, -608],
        [-128, 480, 608],
        [-128, 512, -608],
        [-128, 512, 608],
        [-128, 544, -608],
        [-128, 544, 608],
        [-128, 576, -608],
        [-128, 576, 608],
        [-128, 608, -608],
        [-128, 608, 608],
        [-128, -608, -576],
        [-128, 608, -576],
        [-128, -608, -544],
        [-128, 608, -544],
        [-128, -608, -512],
        [-128, 608, -512],
        [-128, -608, -480],
        [-128, 608, -480],
        [-128, -608, -448],
        [-128, 608, -448],
        [-128, -608, -416],
        [-128, 608, -416],
        [-128, -608, -384],
        [-128, 608, -384],
        [-128, -608, -352],
        [-128, 608, -352],
        [-128, -608, -320],
        [-128, 608, -320],
        [-128, -608, -288],
        [-128, 608, -288],
        [-128, -608, -256],
        [-128, 608, -256],
        [-128, -608, -224],
        [-128, 608, -224],
        [-128, -608, -192],
        [-128, 608, -192],
        [-128, -608, -160],
        [-128, 608, -160],
        [-128, -608, -128],
        [-128, 608, -128],
        [-128, -608, -96],
        [-128, 608, -96],
        [-128, -608, -64],
        [-128, 608, -64],
        [-128, -608, -32],
        [-128, 608, -32],
        [-128, -608, 0],
        [-128, 608, 0],
        [-128, -608, 32],
        [-128, 608, 32],
        [-128, -608, 64],
        [-128, 608, 64],
        [-128, -608, 96],
        [-128, 608, 96],
        [-128, -608, 128],
        [-128, 608, 128],
        [-128, -608, 160],
        [-128, 608, 160],
        [-128, -608, 192],
        [-128, 608, 192],
        [-128, -608, 224],
        [-128, 608, 224],
        [-128, -608, 256],
        [-128, 608, 256],
        [-128, -608, 288],
        [-128, 608, 288],
        [-128, -608, 320],
        [-128, 608, 320],
        [-128, -608, 352],
        [-128, 608, 352],
        [-128, -608, 384],
        [-128, 608, 384],
        [-128, -608, 416],
        [-128, 608, 416],
        [-128, -608, 448],
        [-128, 608, 448],
        [-128, -608, 480],
        [-128, 608, 480],
        [-128, -608, 512],
        [-128, 608, 512],
        [-128, -608, 544],
        [-128, 608, 544],
        [-128, -608, 576],
        [-128, 608, 576],
        [-96, -608, -608],
        [-96, -608, 608],
        [-96, -576, -608],
        [-96, -576, 608],
        [-96, -544, -608],
        [-96, -544, 608],
        [-96, -512, -608],
        [-96, -512, 608],
        [-96, -480, -608],
        [-96, -480, 608],
        [-96, -448, -608],
        [-96, -448, 608],
        [-96, -416, -608],
        [-96, -416, 608],
        [-96, -384, -608],
        [-96, -384, 608],
        [-96, -352, -608],
        [-96, -352, 608],
        [-96, -320, -608],
        [-96, -320, 608],
        [-96, -288, -608],
        [-96, -288, 608],
        [-96, -256, -608],
        [-96, -256, 608],
        [-96, -224, -608],
        [-96, -224, 608],
        [-96, -192, -608],
        [-96, -192, 608],
        [-96, -160, -608],
        [-96, -160, 608],
        [-96, -128, -608],
        [-96, -128, 608],
        [-96, -96, -608],
        [-96, -96, 608],
        [-96, -64, -608],
        [-96, -64, 608],
        [-96, -32, -608],
        [-96, -32, 608],
        [-96, 0, -608],
        [-96, 0, 608],
        [-96, 32, -608],
        [-96, 32, 608],
        [-96, 64, -608],
        [-96, 64, 608],
        [-96, 96, -608],
        [-96, 96, 608],
        [-96, 128, -608],
        [-96, 128, 608],
        [-96, 160, -608],
        [-96, 160, 608],
        [-96, 192, -608],
        [-96, 192, 608],
        [-96, 224, -608],
        [-96, 224, 608],
        [-96, 256, -608],
        [-96, 256, 608],
        [-96, 288, -608],
        [-96, 288, 608],
        [-96, 320, -608],
        [-96, 320, 608],
        [-96, 352, -608],
        [-96, 352, 608],
        [-96, 384, -608],
        [-96, 384, 608],
        [-96, 416, -608],
        [-96, 416, 608],
        [-96, 448, -608],
        [-96, 448, 608],
        [-96, 480, -608],
        [-96, 480, 608],
        [-96, 512, -608],
        [-96, 512, 608],
        [-96, 544, -608],
        [-96, 544, 608],
        [-96, 576, -608],
        [-96, 576, 608],
        [-96, 608, -608],
        [-96, 608, 608],
        [-96, -608, -576],
        [-96, 608, -576],
        [-96, -608, -544],
        [-96, 608, -544],
        [-96, -608, -512],
        [-96, 608, -512],
        [-96, -608, -480],
        [-96, 608, -480],
        [-96, -608, -448],
        [-96, 608, -448],
        [-96, -608, -416],
        [-96, 608, -416],
        [-96, -608, -384],
        [-96, 608, -384],
        [-96, -608, -352],
        [-96, 608, -352],
        [-96, -608, -320],
        [-96, 608, -320],
        [-96, -608, -288],
        [-96, 608, -288],
        [-96, -608, -256],
        [-96, 608, -256],
        [-96, -608, -224],
        [-96, 608, -224],
        [-96, -608, -192],
        [-96, 608, -192],
        [-96, -608, -160],
        [-96, 608, -160],
        [-96, -608, -128],
        [-96, 608, -128],
        [-96, -608, -96],
        [-96, 608, -96],
        [-96, -608, -64],
        [-96, 608, -64],
        [-96, -608, -32],
        [-96, 608, -32],
        [-96, -608, 0],
        [-96, 608, 0],
        [-96, -608, 32],
        [-96, 608, 32],
        [-96, -608, 64],
        [-96, 608, 64],
        [-96, -608, 96],
        [-96, 608, 96],
        [-96, -608, 128],
        [-96, 608, 128],
        [-96, -608, 160],
        [-96, 608, 160],
        [-96, -608, 192],
        [-96, 608, 192],
        [-96, -608, 224],
        [-96, 608, 224],
        [-96, -608, 256],
        [-96, 608, 256],
        [-96, -608, 288],
        [-96, 608, 288],
        [-96, -608, 320],
        [-96, 608, 320],
        [-96, -608, 352],
        [-96, 608, 352],
        [-96, -608, 384],
        [-96, 608, 384],
        [-96, -608, 416],
        [-96, 608, 416],
        [-96, -608, 448],
        [-96, 608, 448],
        [-96, -608, 480],
        [-96, 608, 480],
        [-96, -608, 512],
        [-96, 608, 512],
        [-96, -608, 544],
        [-96, 608, 544],
        [-96, -608, 576],
        [-96, 608, 576],
        [-64, -608, -608],
        [-64, -608, 608],
        [-64, -576, -608],
        [-64, -576, 608],
        [-64, -544, -608],
        [-64, -544, 608],
        [-64, -512, -608],
        [-64, -512, 608],
        [-64, -480, -608],
        [-64, -480, 608],
        [-64, -448, -608],
        [-64, -448, 608],
        [-64, -416, -608],
        [-64, -416, 608],
        [-64, -384, -608],
        [-64, -384, 608],
        [-64, -352, -608],
        [-64, -352, 608],
        [-64, -320, -608],
        [-64, -320, 608],
        [-64, -288, -608],
        [-64, -288, 608],
        [-64, -256, -608],
        [-64, -256, 608],
        [-64, -224, -608],
        [-64, -224, 608],
        [-64, -192, -608],
        [-64, -192, 608],
        [-64, -160, -608],
        [-64, -160, 608],
        [-64, -128, -608],
        [-64, -128, 608],
        [-64, -96, -608],
        [-64, -96, 608],
        [-64, -64, -608],
        [-64, -64, 608],
        [-64, -32, -608],
        [-64, -32, 608],
        [-64, 0, -608],
        [-64, 0, 608],
        [-64, 32, -608],
        [-64, 32, 608],
        [-64, 64, -608],
        [-64, 64, 608],
        [-64, 96, -608],
        [-64, 96, 608],
        [-64, 128, -608],
        [-64, 128, 608],
        [-64, 160, -608],
        [-64, 160, 608],
        [-64, 192, -608],
        [-64, 192, 608],
        [-64, 224, -608],
        [-64, 224, 608],
        [-64, 256, -608],
        [-64, 256, 608],
        [-64, 288, -608],
        [-64, 288, 608],
        [-64, 320, -608],
        [-64, 320, 608],
        [-64, 352, -608],
        [-64, 352, 608],
        [-64, 384, -608],
        [-64, 384, 608],
        [-64, 416, -608],
        [-64, 416, 608],
        [-64, 448, -608],
        [-64, 448, 608],
        [-64, 480, -608],
        [-64, 480, 608],
        [-64, 512, -608],
        [-64, 512, 608],
        [-64, 544, -608],
        [-64, 544, 608],
        [-64, 576, -608],
        [-64, 576, 608],
        [-64, 608, -608],
        [-64, 608, 608],
        [-64, -608, -576],
        [-64, 608, -576],
        [-64, -608, -544],
        [-64, 608, -544],
        [-64, -608, -512],
        [-64, 608, -512],
        [-64, -608, -480],
        [-64, 608, -480],
        [-64, -608, -448],
        [-64, 608, -448],
        [-64, -608, -416],
        [-64, 608, -416],
        [-64, -608, -384],
        [-64, 608, -384],
        [-64, -608, -352],
        [-64, 608, -352],
        [-64, -608, -320],
        [-64, 608, -320],
        [-64, -608, -288],
        [-64, 608, -288],
        [-64, -608, -256],
        [-64, 608, -256],
        [-64, -608, -224],
        [-64, 608, -224],
        [-64, -608, -192],
        [-64, 608, -192],
        [-64, -608, -160],
        [-64, 608, -160],
        [-64, -608, -128],
        [-64, 608, -128],
        [-64, -608, -96],
        [-64, 608, -96],
        [-64, -608, -64],
        [-64, 608, -64],
        [-64, -608, -32],
        [-64, 608, -32],
        [-64, -608, 0],
        [-64, 608, 0],
        [-64, -608, 32],
        [-64, 608, 32],
        [-64, -608, 64],
        [-64, 608, 64],
        [-64, -608, 96],
        [-64, 608, 96],
        [-64, -608, 128],
        [-64, 608, 128],
        [-64, -608, 160],
        [-64, 608, 160],
        [-64, -608, 192],
        [-64, 608, 192],
        [-64, -608, 224],
        [-64, 608, 224],
        [-64, -608, 256],
        [-64, 608, 256],
        [-64, -608, 288],
        [-64, 608, 288],
        [-64, -608, 320],
        [-64, 608, 320],
        [-64, -608, 352],
        [-64, 608, 352],
        [-64, -608, 384],
        [-64, 608, 384],
        [-64, -608, 416],
        [-64, 608, 416],
        [-64, -608, 448],
        [-64, 608, 448],
        [-64, -608, 480],
        [-64, 608, 480],
        [-64, -608, 512],
        [-64, 608, 512],
        [-64, -608, 544],
        [-64, 608, 544],
        [-64, -608, 576],
        [-64, 608, 576],
        [-32, -608, -608],
        [-32, -608, 608],
        [-32, -576, -608],
        [-32, -576, 608],
        [-32, -544, -608],
        [-32, -544, 608],
        [-32, -512, -608],
        [-32, -512, 608],
        [-32, -480, -608],
        [-32, -480, 608],
        [-32, -448, -608],
        [-32, -448, 608],
        [-32, -416, -608],
        [-32, -416, 608],
        [-32, -384, -608],
        [-32, -384, 608],
        [-32, -352, -608],
        [-32, -352, 608],
        [-32, -320, -608],
        [-32, -320, 608],
        [-32, -288, -608],
        [-32, -288, 608],
        [-32, -256, -608],
        [-32, -256, 608],
        [-32, -224, -608],
        [-32, -224, 608],
        [-32, -192, -608],
        [-32, -192, 608],
        [-32, -160, -608],
        [-32, -160, 608],
        [-32, -128, -608],
        [-32, -128, 608],
        [-32, -96, -608],
        [-32, -96, 608],
        [-32, -64, -608],
        [-32, -64, 608],
        [-32, -32, -608],
        [-32, -32, 608],
        [-32, 0, -608],
        [-32, 0, 608],
        [-32, 32, -608],
        [-32, 32, 608],
        [-32, 64, -608],
        [-32, 64, 608],
        [-32, 96, -608],
        [-32, 96, 608],
        [-32, 128, -608],
        [-32, 128, 608],
        [-32, 160, -608],
        [-32, 160, 608],
        [-32, 192, -608],
        [-32, 192, 608],
        [-32, 224, -608],
        [-32, 224, 608],
        [-32, 256, -608],
        [-32, 256, 608],
        [-32, 288, -608],
        [-32, 288, 608],
        [-32, 320, -608],
        [-32, 320, 608],
        [-32, 352, -608],
        [-32, 352, 608],
        [-32, 384, -608],
        [-32, 384, 608],
        [-32, 416, -608],
        [-32, 416, 608],
        [-32, 448, -608],
        [-32, 448, 608],
        [-32, 480, -608],
        [-32, 480, 608],
        [-32, 512, -608],
        [-32, 512, 608],
        [-32, 544, -608],
        [-32, 544, 608],
        [-32, 576, -608],
        [-32, 576, 608],
        [-32, 608, -608],
        [-32, 608, 608],
        [-32, -608, -576],
        [-32, 608, -576],
        [-32, -608, -544],
        [-32, 608, -544],
        [-32, -608, -512],
        [-32, 608, -512],
        [-32, -608, -480],
        [-32, 608, -480],
        [-32, -608, -448],
        [-32, 608, -448],
        [-32, -608, -416],
        [-32, 608, -416],
        [-32, -608, -384],
        [-32, 608, -384],
        [-32, -608, -352],
        [-32, 608, -352],
        [-32, -608, -320],
        [-32, 608, -320],
        [-32, -608, -288],
        [-32, 608, -288],
        [-32, -608, -256],
        [-32, 608, -256],
        [-32, -608, -224],
        [-32, 608, -224],
        [-32, -608, -192],
        [-32, 608, -192],
        [-32, -608, -160],
        [-32, 608, -160],
        [-32, -608, -128],
        [-32, 608, -128],
        [-32, -608, -96],
        [-32, 608, -96],
        [-32, -608, -64],
        [-32, 608, -64],
        [-32, -608, -32],
        [-32, 608, -32],
        [-32, -608, 0],
        [-32, 608, 0],
        [-32, -608, 32],
        [-32, 608, 32],
        [-32, -608, 64],
        [-32, 608, 64],
        [-32, -608, 96],
        [-32, 608, 96],
        [-32, -608, 128],
        [-32, 608, 128],
        [-32, -608, 160],
        [-32, 608, 160],
        [-32, -608, 192],
        [-32, 608, 192],
        [-32, -608, 224],
        [-32, 608, 224],
        [-32, -608, 256],
        [-32, 608, 256],
        [-32, -608, 288],
        [-32, 608, 288],
        [-32, -608, 320],
        [-32, 608, 320],
        [-32, -608, 352],
        [-32, 608, 352],
        [-32, -608, 384],
        [-32, 608, 384],
        [-32, -608, 416],
        [-32, 608, 416],
        [-32, -608, 448],
        [-32, 608, 448],
        [-32, -608, 480],
        [-32, 608, 480],
        [-32, -608, 512],
        [-32, 608, 512],
        [-32, -608, 544],
        [-32, 608, 544],
        [-32, -608, 576],
        [-32, 608, 576],
        [0, -608, -608],
        [0, -608, 608],
        [0, -576, -608],
        [0, -576, 608],
        [0, -544, -608],
        [0, -544, 608],
        [0, -512, -608],
        [0, -512, 608],
        [0, -480, -608],
        [0, -480, 608],
        [0, -448, -608],
        [0, -448, 608],
        [0, -416, -608],
        [0, -416, 608],
        [0, -384, -608],
        [0, -384, 608],
        [0, -352, -608],
        [0, -352, 608],
        [0, -320, -608],
        [0, -320, 608],
        [0, -288, -608],
        [0, -288, 608],
        [0, -256, -608],
        [0, -256, 608],
        [0, -224, -608],
        [0, -224, 608],
        [0, -192, -608],
        [0, -192, 608],
        [0, -160, -608],
        [0, -160, 608],
        [0, -128, -608],
        [0, -128, 608],
        [0, -96, -608],
        [0, -96, 608],
        [0, -64, -608],
        [0, -64, 608],
        [0, -32, -608],
        [0, -32, 608],
        [0, 0, -608],
        [0, 0, 608],
        [0, 32, -608],
        [0, 32, 608],
        [0, 64, -608],
        [0, 64, 608],
        [0, 96, -608],
        [0, 96, 608],
        [0, 128, -608],
        [0, 128, 608],
        [0, 160, -608],
        [0, 160, 608],
        [0, 192, -608],
        [0, 192, 608],
        [0, 224, -608],
        [0, 224, 608],
        [0, 256, -608],
        [0, 256, 608],
        [0, 288, -608],
        [0, 288, 608],
        [0, 320, -608],
        [0, 320, 608],
        [0, 352, -608],
        [0, 352, 608],
        [0, 384, -608],
        [0, 384, 608],
        [0, 416, -608],
        [0, 416, 608],
        [0, 448, -608],
        [0, 448, 608],
        [0, 480, -608],
        [0, 480, 608],
        [0, 512, -608],
        [0, 512, 608],
        [0, 544, -608],
        [0, 544, 608],
        [0, 576, -608],
        [0, 576, 608],
        [0, 608, -608],
        [0, 608, 608],
        [0, -608, -576],
        [0, 608, -576],
        [0, -608, -544],
        [0, 608, -544],
        [0, -608, -512],
        [0, 608, -512],
        [0, -608, -480],
        [0, 608, -480],
        [0, -608, -448],
        [0, 608, -448],
        [0, -608, -416],
        [0, 608, -416],
        [0, -608, -384],
        [0, 608, -384],
        [0, -608, -352],
        [0, 608, -352],
        [0, -608, -320],
        [0, 608, -320],
        [0, -608, -288],
        [0, 608, -288],
        [0, -608, -256],
        [0, 608, -256],
        [0, -608, -224],
        [0, 608, -224],
        [0, -608, -192],
        [0, 608, -192],
        [0, -608, -160],
        [0, 608, -160],
        [0, -608, -128],
        [0, 608, -128],
        [0, -608, -96],
        [0, 608, -96],
        [0, -608, -64],
        [0, 608, -64],
        [0, -608, -32],
        [0, 608, -32],
        [0, -608, 0],
        [0, 608, 0],
        [0, -608, 32],
        [0, 608, 32],
        [0, -608, 64],
        [0, 608, 64],
        [0, -608, 96],
        [0, 608, 96],
        [0, -608, 128],
        [0, 608, 128],
        [0, -608, 160],
        [0, 608, 160],
        [0, -608, 192],
        [0, 608, 192],
        [0, -608, 224],
        [0, 608, 224],
        [0, -608, 256],
        [0, 608, 256],
        [0, -608, 288],
        [0, 608, 288],
        [0, -608, 320],
        [0, 608, 320],
        [0, -608, 352],
        [0, 608, 352],
        [0, -608, 384],
        [0, 608, 384],
        [0, -608, 416],
        [0, 608, 416],
        [0, -608, 448],
        [0, 608, 448],
        [0, -608, 480],
        [0, 608, 480],
        [0, -608, 512],
        [0, 608, 512],
        [0, -608, 544],
        [0, 608, 544],
        [0, -608, 576],
        [0, 608, 576],
        [32, -608, -608],
        [32, -608, 608],
        [32, -576, -608],
        [32, -576, 608],
        [32, -544, -608],
        [32, -544, 608],
        [32, -512, -608],
        [32, -512, 608],
        [32, -480, -608],
        [32, -480, 608],
        [32, -448, -608],
        [32, -448, 608],
        [32, -416, -608],
        [32, -416, 608],
        [32, -384, -608],
        [32, -384, 608],
        [32, -352, -608],
        [32, -352, 608],
        [32, -320, -608],
        [32, -320, 608],
        [32, -288, -608],
        [32, -288, 608],
        [32, -256, -608],
        [32, -256, 608],
        [32, -224, -608],
        [32, -224, 608],
        [32, -192, -608],
        [32, -192, 608],
        [32, -160, -608],
        [32, -160, 608],
        [32, -128, -608],
        [32, -128, 608],
        [32, -96, -608],
        [32, -96, 608],
        [32, -64, -608],
        [32, -64, 608],
        [32, -32, -608],
        [32, -32, 608],
        [32, 0, -608],
        [32, 0, 608],
        [32, 32, -608],
        [32, 32, 608],
        [32, 64, -608],
        [32, 64, 608],
        [32, 96, -608],
        [32, 96, 608],
        [32, 128, -608],
        [32, 128, 608],
        [32, 160, -608],
        [32, 160, 608],
        [32, 192, -608],
        [32, 192, 608],
        [32, 224, -608],
        [32, 224, 608],
        [32, 256, -608],
        [32, 256, 608],
        [32, 288, -608],
        [32, 288, 608],
        [32, 320, -608],
        [32, 320, 608],
        [32, 352, -608],
        [32, 352, 608],
        [32, 384, -608],
        [32, 384, 608],
        [32, 416, -608],
        [32, 416, 608],
        [32, 448, -608],
        [32, 448, 608],
        [32, 480, -608],
        [32, 480, 608],
        [32, 512, -608],
        [32, 512, 608],
        [32, 544, -608],
        [32, 544, 608],
        [32, 576, -608],
        [32, 576, 608],
        [32, 608, -608],
        [32, 608, 608],
        [32, -608, -576],
        [32, 608, -576],
        [32, -608, -544],
        [32, 608, -544],
        [32, -608, -512],
        [32, 608, -512],
        [32, -608, -480],
        [32, 608, -480],
        [32, -608, -448],
        [32, 608, -448],
        [32, -608, -416],
        [32, 608, -416],
        [32, -608, -384],
        [32, 608, -384],
        [32, -608, -352],
        [32, 608, -352],
        [32, -608, -320],
        [32, 608, -320],
        [32, -608, -288],
        [32, 608, -288],
        [32, -608, -256],
        [32, 608, -256],
        [32, -608, -224],
        [32, 608, -224],
        [32, -608, -192],
        [32, 608, -192],
        [32, -608, -160],
        [32, 608, -160],
        [32, -608, -128],
        [32, 608, -128],
        [32, -608, -96],
        [32, 608, -96],
        [32, -608, -64],
        [32, 608, -64],
        [32, -608, -32],
        [32, 608, -32],
        [32, -608, 0],
        [32, 608, 0],
        [32, -608, 32],
        [32, 608, 32],
        [32, -608, 64],
        [32, 608, 64],
        [32, -608, 96],
        [32, 608, 96],
        [32, -608, 128],
        [32, 608, 128],
        [32, -608, 160],
        [32, 608, 160],
        [32, -608, 192],
        [32, 608, 192],
        [32, -608, 224],
        [32, 608, 224],
        [32, -608, 256],
        [32, 608, 256],
        [32, -608, 288],
        [32, 608, 288],
        [32, -608, 320],
        [32, 608, 320],
        [32, -608, 352],
        [32, 608, 352],
        [32, -608, 384],
        [32, 608, 384],
        [32, -608, 416],
        [32, 608, 416],
        [32, -608, 448],
        [32, 608, 448],
        [32, -608, 480],
        [32, 608, 480],
        [32, -608, 512],
        [32, 608, 512],
        [32, -608, 544],
        [32, 608, 544],
        [32, -608, 576],
        [32, 608, 576],
        [64, -608, -608],
        [64, -608, 608],
        [64, -576, -608],
        [64, -576, 608],
        [64, -544, -608],
        [64, -544, 608],
        [64, -512, -608],
        [64, -512, 608],
        [64, -480, -608],
        [64, -480, 608],
        [64, -448, -608],
        [64, -448, 608],
        [64, -416, -608],
        [64, -416, 608],
        [64, -384, -608],
        [64, -384, 608],
        [64, -352, -608],
        [64, -352, 608],
        [64, -320, -608],
        [64, -320, 608],
        [64, -288, -608],
        [64, -288, 608],
        [64, -256, -608],
        [64, -256, 608],
        [64, -224, -608],
        [64, -224, 608],
        [64, -192, -608],
        [64, -192, 608],
        [64, -160, -608],
        [64, -160, 608],
        [64, -128, -608],
        [64, -128, 608],
        [64, -96, -608],
        [64, -96, 608],
        [64, -64, -608],
        [64, -64, 608],
        [64, -32, -608],
        [64, -32, 608],
        [64, 0, -608],
        [64, 0, 608],
        [64, 32, -608],
        [64, 32, 608],
        [64, 64, -608],
        [64, 64, 608],
        [64, 96, -608],
        [64, 96, 608],
        [64, 128, -608],
        [64, 128, 608],
        [64, 160, -608],
        [64, 160, 608],
        [64, 192, -608],
        [64, 192, 608],
        [64, 224, -608],
        [64, 224, 608],
        [64, 256, -608],
        [64, 256, 608],
        [64, 288, -608],
        [64, 288, 608],
        [64, 320, -608],
        [64, 320, 608],
        [64, 352, -608],
        [64, 352, 608],
        [64, 384, -608],
        [64, 384, 608],
        [64, 416, -608],
        [64, 416, 608],
        [64, 448, -608],
        [64, 448, 608],
        [64, 480, -608],
        [64, 480, 608],
        [64, 512, -608],
        [64, 512, 608],
        [64, 544, -608],
        [64, 544, 608],
        [64, 576, -608],
        [64, 576, 608],
        [64, 608, -608],
        [64, 608, 608],
        [64, -608, -576],
        [64, 608, -576],
        [64, -608, -544],
        [64, 608, -544],
        [64, -608, -512],
        [64, 608, -512],
        [64, -608, -480],
        [64, 608, -480],
        [64, -608, -448],
        [64, 608, -448],
        [64, -608, -416],
        [64, 608, -416],
        [64, -608, -384],
        [64, 608, -384],
        [64, -608, -352],
        [64, 608, -352],
        [64, -608, -320],
        [64, 608, -320],
        [64, -608, -288],
        [64, 608, -288],
        [64, -608, -256],
        [64, 608, -256],
        [64, -608, -224],
        [64, 608, -224],
        [64, -608, -192],
        [64, 608, -192],
        [64, -608, -160],
        [64, 608, -160],
        [64, -608, -128],
        [64, 608, -128],
        [64, -608, -96],
        [64, 608, -96],
        [64, -608, -64],
        [64, 608, -64],
        [64, -608, -32],
        [64, 608, -32],
        [64, -608, 0],
        [64, 608, 0],
        [64, -608, 32],
        [64, 608, 32],
        [64, -608, 64],
        [64, 608, 64],
        [64, -608, 96],
        [64, 608, 96],
        [64, -608, 128],
        [64, 608, 128],
        [64, -608, 160],
        [64, 608, 160],
        [64, -608, 192],
        [64, 608, 192],
        [64, -608, 224],
        [64, 608, 224],
        [64, -608, 256],
        [64, 608, 256],
        [64, -608, 288],
        [64, 608, 288],
        [64, -608, 320],
        [64, 608, 320],
        [64, -608, 352],
        [64, 608, 352],
        [64, -608, 384],
        [64, 608, 384],
        [64, -608, 416],
        [64, 608, 416],
        [64, -608, 448],
        [64, 608, 448],
        [64, -608, 480],
        [64, 608, 480],
        [64, -608, 512],
        [64, 608, 512],
        [64, -608, 544],
        [64, 608, 544],
        [64, -608, 576],
        [64, 608, 576],
        [96, -608, -608],
        [96, -608, 608],
        [96, -576, -608],
        [96, -576, 608],
        [96, -544, -608],
        [96, -544, 608],
        [96, -512, -608],
        [96, -512, 608],
        [96, -480, -608],
        [96, -480, 608],
        [96, -448, -608],
        [96, -448, 608],
        [96, -416, -608],
        [96, -416, 608],
        [96, -384, -608],
        [96, -384, 608],
        [96, -352, -608],
        [96, -352, 608],
        [96, -320, -608],
        [96, -320, 608],
        [96, -288, -608],
        [96, -288, 608],
        [96, -256, -608],
        [96, -256, 608],
        [96, -224, -608],
        [96, -224, 608],
        [96, -192, -608],
        [96, -192, 608],
        [96, -160, -608],
        [96, -160, 608],
        [96, -128, -608],
        [96, -128, 608],
        [96, -96, -608],
        [96, -96, 608],
        [96, -64, -608],
        [96, -64, 608],
        [96, -32, -608],
        [96, -32, 608],
        [96, 0, -608],
        [96, 0, 608],
        [96, 32, -608],
        [96, 32, 608],
        [96, 64, -608],
        [96, 64, 608],
        [96, 96, -608],
        [96, 96, 608],
        [96, 128, -608],
        [96, 128, 608],
        [96, 160, -608],
        [96, 160, 608],
        [96, 192, -608],
        [96, 192, 608],
        [96, 224, -608],
        [96, 224, 608],
        [96, 256, -608],
        [96, 256, 608],
        [96, 288, -608],
        [96, 288, 608],
        [96, 320, -608],
        [96, 320, 608],
        [96, 352, -608],
        [96, 352, 608],
        [96, 384, -608],
        [96, 384, 608],
        [96, 416, -608],
        [96, 416, 608],
        [96, 448, -608],
        [96, 448, 608],
        [96, 480, -608],
        [96, 480, 608],
        [96, 512, -608],
        [96, 512, 608],
        [96, 544, -608],
        [96, 544, 608],
        [96, 576, -608],
        [96, 576, 608],
        [96, 608, -608],
        [96, 608, 608],
        [96, -608, -576],
        [96, 608, -576],
        [96, -608, -544],
        [96, 608, -544],
        [96, -608, -512],
        [96, 608, -512],
        [96, -608, -480],
        [96, 608, -480],
        [96, -608, -448],
        [96, 608, -448],
        [96, -608, -416],
        [96, 608, -416],
        [96, -608, -384],
        [96, 608, -384],
        [96, -608, -352],
        [96, 608, -352],
        [96, -608, -320],
        [96, 608, -320],
        [96, -608, -288],
        [96, 608, -288],
        [96, -608, -256],
        [96, 608, -256],
        [96, -608, -224],
        [96, 608, -224],
        [96, -608, -192],
        [96, 608, -192],
        [96, -608, -160],
        [96, 608, -160],
        [96, -608, -128],
        [96, 608, -128],
        [96, -608, -96],
        [96, 608, -96],
        [96, -608, -64],
        [96, 608, -64],
        [96, -608, -32],
        [96, 608, -32],
        [96, -608, 0],
        [96, 608, 0],
        [96, -608, 32],
        [96, 608, 32],
        [96, -608, 64],
        [96, 608, 64],
        [96, -608, 96],
        [96, 608, 96],
        [96, -608, 128],
        [96, 608, 128],
        [96, -608, 160],
        [96, 608, 160],
        [96, -608, 192],
        [96, 608, 192],
        [96, -608, 224],
        [96, 608, 224],
        [96, -608, 256],
        [96, 608, 256],
        [96, -608, 288],
        [96, 608, 288],
        [96, -608, 320],
        [96, 608, 320],
        [96, -608, 352],
        [96, 608, 352],
        [96, -608, 384],
        [96, 608, 384],
        [96, -608, 416],
        [96, 608, 416],
        [96, -608, 448],
        [96, 608, 448],
        [96, -608, 480],
        [96, 608, 480],
        [96, -608, 512],
        [96, 608, 512],
        [96, -608, 544],
        [96, 608, 544],
        [96, -608, 576],
        [96, 608, 576],
        [128, -608, -608],
        [128, -608, 608],
        [128, -576, -608],
        [128, -576, 608],
        [128, -544, -608],
        [128, -544, 608],
        [128, -512, -608],
        [128, -512, 608],
        [128, -480, -608],
        [128, -480, 608],
        [128, -448, -608],
        [128, -448, 608],
        [128, -416, -608],
        [128, -416, 608],
        [128, -384, -608],
        [128, -384, 608],
        [128, -352, -608],
        [128, -352, 608],
        [128, -320, -608],
        [128, -320, 608],
        [128, -288, -608],
        [128, -288, 608],
        [128, -256, -608],
        [128, -256, 608],
        [128, -224, -608],
        [128, -224, 608],
        [128, -192, -608],
        [128, -192, 608],
        [128, -160, -608],
        [128, -160, 608],
        [128, -128, -608],
        [128, -128, 608],
        [128, -96, -608],
        [128, -96, 608],
        [128, -64, -608],
        [128, -64, 608],
        [128, -32, -608],
        [128, -32, 608],
        [128, 0, -608],
        [128, 0, 608],
        [128, 32, -608],
        [128, 32, 608],
        [128, 64, -608],
        [128, 64, 608],
        [128, 96, -608],
        [128, 96, 608],
        [128, 128, -608],
        [128, 128, 608],
        [128, 160, -608],
        [128, 160, 608],
        [128, 192, -608],
        [128, 192, 608],
        [128, 224, -608],
        [128, 224, 608],
        [128, 256, -608],
        [128, 256, 608],
        [128, 288, -608],
        [128, 288, 608],
        [128, 320, -608],
        [128, 320, 608],
        [128, 352, -608],
        [128, 352, 608],
        [128, 384, -608],
        [128, 384, 608],
        [128, 416, -608],
        [128, 416, 608],
        [128, 448, -608],
        [128, 448, 608],
        [128, 480, -608],
        [128, 480, 608],
        [128, 512, -608],
        [128, 512, 608],
        [128, 544, -608],
        [128, 544, 608],
        [128, 576, -608],
        [128, 576, 608],
        [128, 608, -608],
        [128, 608, 608],
        [128, -608, -576],
        [128, 608, -576],
        [128, -608, -544],
        [128, 608, -544],
        [128, -608, -512],
        [128, 608, -512],
        [128, -608, -480],
        [128, 608, -480],
        [128, -608, -448],
        [128, 608, -448],
        [128, -608, -416],
        [128, 608, -416],
        [128, -608, -384],
        [128, 608, -384],
        [128, -608, -352],
        [128, 608, -352],
        [128, -608, -320],
        [128, 608, -320],
        [128, -608, -288],
        [128, 608, -288],
        [128, -608, -256],
        [128, 608, -256],
        [128, -608, -224],
        [128, 608, -224],
        [128, -608, -192],
        [128, 608, -192],
        [128, -608, -160],
        [128, 608, -160],
        [128, -608, -128],
        [128, 608, -128],
        [128, -608, -96],
        [128, 608, -96],
        [128, -608, -64],
        [128, 608, -64],
        [128, -608, -32],
        [128, 608, -32],
        [128, -608, 0],
        [128, 608, 0],
        [128, -608, 32],
        [128, 608, 32],
        [128, -608, 64],
        [128, 608, 64],
        [128, -608, 96],
        [128, 608, 96],
        [128, -608, 128],
        [128, 608, 128],
        [128, -608, 160],
        [128, 608, 160],
        [128, -608, 192],
        [128, 608, 192],
        [128, -608, 224],
        [128, 608, 224],
        [128, -608, 256],
        [128, 608, 256],
        [128, -608, 288],
        [128, 608, 288],
        [128, -608, 320],
        [128, 608, 320],
        [128, -608, 352],
        [128, 608, 352],
        [128, -608, 384],
        [128, 608, 384],
        [128, -608, 416],
        [128, 608, 416],
        [128, -608, 448],
        [128, 608, 448],
        [128, -608, 480],
        [128, 608, 480],
        [128, -608, 512],
        [128, 608, 512],
        [128, -608, 544],
        [128, 608, 544],
        [128, -608, 576],
        [128, 608, 576],
        [160, -608, -608],
        [160, -608, 608],
        [160, -576, -608],
        [160, -576, 608],
        [160, -544, -608],
        [160, -544, 608],
        [160, -512, -608],
        [160, -512, 608],
        [160, -480, -608],
        [160, -480, 608],
        [160, -448, -608],
        [160, -448, 608],
        [160, -416, -608],
        [160, -416, 608],
        [160, -384, -608],
        [160, -384, 608],
        [160, -352, -608],
        [160, -352, 608],
        [160, -320, -608],
        [160, -320, 608],
        [160, -288, -608],
        [160, -288, 608],
        [160, -256, -608],
        [160, -256, 608],
        [160, -224, -608],
        [160, -224, 608],
        [160, -192, -608],
        [160, -192, 608],
        [160, -160, -608],
        [160, -160, 608],
        [160, -128, -608],
        [160, -128, 608],
        [160, -96, -608],
        [160, -96, 608],
        [160, -64, -608],
        [160, -64, 608],
        [160, -32, -608],
        [160, -32, 608],
        [160, 0, -608],
        [160, 0, 608],
        [160, 32, -608],
        [160, 32, 608],
        [160, 64, -608],
        [160, 64, 608],
        [160, 96, -608],
        [160, 96, 608],
        [160, 128, -608],
        [160, 128, 608],
        [160, 160, -608],
        [160, 160, 608],
        [160, 192, -608],
        [160, 192, 608],
        [160, 224, -608],
        [160, 224, 608],
        [160, 256, -608],
        [160, 256, 608],
        [160, 288, -608],
        [160, 288, 608],
        [160, 320, -608],
        [160, 320, 608],
        [160, 352, -608],
        [160, 352, 608],
        [160, 384, -608],
        [160, 384, 608],
        [160, 416, -608],
        [160, 416, 608],
        [160, 448, -608],
        [160, 448, 608],
        [160, 480, -608],
        [160, 480, 608],
        [160, 512, -608],
        [160, 512, 608],
        [160, 544, -608],
        [160, 544, 608],
        [160, 576, -608],
        [160, 576, 608],
        [160, 608, -608],
        [160, 608, 608],
        [160, -608, -576],
        [160, 608, -576],
        [160, -608, -544],
        [160, 608, -544],
        [160, -608, -512],
        [160, 608, -512],
        [160, -608, -480],
        [160, 608, -480],
        [160, -608, -448],
        [160, 608, -448],
        [160, -608, -416],
        [160, 608, -416],
        [160, -608, -384],
        [160, 608, -384],
        [160, -608, -352],
        [160, 608, -352],
        [160, -608, -320],
        [160, 608, -320],
        [160, -608, -288],
        [160, 608, -288],
        [160, -608, -256],
        [160, 608, -256],
        [160, -608, -224],
        [160, 608, -224],
        [160, -608, -192],
        [160, 608, -192],
        [160, -608, -160],
        [160, 608, -160],
        [160, -608, -128],
        [160, 608, -128],
        [160, -608, -96],
        [160, 608, -96],
        [160, -608, -64],
        [160, 608, -64],
        [160, -608, -32],
        [160, 608, -32],
        [160, -608, 0],
        [160, 608, 0],
        [160, -608, 32],
        [160, 608, 32],
        [160, -608, 64],
        [160, 608, 64],
        [160, -608, 96],
        [160, 608, 96],
        [160, -608, 128],
        [160, 608, 128],
        [160, -608, 160],
        [160, 608, 160],
        [160, -608, 192],
        [160, 608, 192],
        [160, -608, 224],
        [160, 608, 224],
        [160, -608, 256],
        [160, 608, 256],
        [160, -608, 288],
        [160, 608, 288],
        [160, -608, 320],
        [160, 608, 320],
        [160, -608, 352],
        [160, 608, 352],
        [160, -608, 384],
        [160, 608, 384],
        [160, -608, 416],
        [160, 608, 416],
        [160, -608, 448],
        [160, 608, 448],
        [160, -608, 480],
        [160, 608, 480],
        [160, -608, 512],
        [160, 608, 512],
        [160, -608, 544],
        [160, 608, 544],
        [160, -608, 576],
        [160, 608, 576],
        [192, -608, -608],
        [192, -608, 608],
        [192, -576, -608],
        [192, -576, 608],
        [192, -544, -608],
        [192, -544, 608],
        [192, -512, -608],
        [192, -512, 608],
        [192, -480, -608],
        [192, -480, 608],
        [192, -448, -608],
        [192, -448, 608],
        [192, -416, -608],
        [192, -416, 608],
        [192, -384, -608],
        [192, -384, 608],
        [192, -352, -608],
        [192, -352, 608],
        [192, -320, -608],
        [192, -320, 608],
        [192, -288, -608],
        [192, -288, 608],
        [192, -256, -608],
        [192, -256, 608],
        [192, -224, -608],
        [192, -224, 608],
        [192, -192, -608],
        [192, -192, 608],
        [192, -160, -608],
        [192, -160, 608],
        [192, -128, -608],
        [192, -128, 608],
        [192, -96, -608],
        [192, -96, 608],
        [192, -64, -608],
        [192, -64, 608],
        [192, -32, -608],
        [192, -32, 608],
        [192, 0, -608],
        [192, 0, 608],
        [192, 32, -608],
        [192, 32, 608],
        [192, 64, -608],
        [192, 64, 608],
        [192, 96, -608],
        [192, 96, 608],
        [192, 128, -608],
        [192, 128, 608],
        [192, 160, -608],
        [192, 160, 608],
        [192, 192, -608],
        [192, 192, 608],
        [192, 224, -608],
        [192, 224, 608],
        [192, 256, -608],
        [192, 256, 608],
        [192, 288, -608],
        [192, 288, 608],
        [192, 320, -608],
        [192, 320, 608],
        [192, 352, -608],
        [192, 352, 608],
        [192, 384, -608],
        [192, 384, 608],
        [192, 416, -608],
        [192, 416, 608],
        [192, 448, -608],
        [192, 448, 608],
        [192, 480, -608],
        [192, 480, 608],
        [192, 512, -608],
        [192, 512, 608],
        [192, 544, -608],
        [192, 544, 608],
        [192, 576, -608],
        [192, 576, 608],
        [192, 608, -608],
        [192, 608, 608],
        [192, -608, -576],
        [192, 608, -576],
        [192, -608, -544],
        [192, 608, -544],
        [192, -608, -512],
        [192, 608, -512],
        [192, -608, -480],
        [192, 608, -480],
        [192, -608, -448],
        [192, 608, -448],
        [192, -608, -416],
        [192, 608, -416],
        [192, -608, -384],
        [192, 608, -384],
        [192, -608, -352],
        [192, 608, -352],
        [192, -608, -320],
        [192, 608, -320],
        [192, -608, -288],
        [192, 608, -288],
        [192, -608, -256],
        [192, 608, -256],
        [192, -608, -224],
        [192, 608, -224],
        [192, -608, -192],
        [192, 608, -192],
        [192, -608, -160],
        [192, 608, -160],
        [192, -608, -128],
        [192, 608, -128],
        [192, -608, -96],
        [192, 608, -96],
        [192, -608, -64],
        [192, 608, -64],
        [192, -608, -32],
        [192, 608, -32],
        [192, -608, 0],
        [192, 608, 0],
        [192, -608, 32],
        [192, 608, 32],
        [192, -608, 64],
        [192, 608, 64],
        [192, -608, 96],
        [192, 608, 96],
        [192, -608, 128],
        [192, 608, 128],
        [192, -608, 160],
        [192, 608, 160],
        [192, -608, 192],
        [192, 608, 192],
        [192, -608, 224],
        [192, 608, 224],
        [192, -608, 256],
        [192, 608, 256],
        [192, -608, 288],
        [192, 608, 288],
        [192, -608, 320],
        [192, 608, 320],
        [192, -608, 352],
        [192, 608, 352],
        [192, -608, 384],
        [192, 608, 384],
        [192, -608, 416],
        [192, 608, 416],
        [192, -608, 448],
        [192, 608, 448],
        [192, -608, 480],
        [192, 608, 480],
        [192, -608, 512],
        [192, 608, 512],
        [192, -608, 544],
        [192, 608, 544],
        [192, -608, 576],
        [192, 608, 576],
        [224, -608, -608],
        [224, -608, 608],
        [224, -576, -608],
        [224, -576, 608],
        [224, -544, -608],
        [224, -544, 608],
        [224, -512, -608],
        [224, -512, 608],
        [224, -480, -608],
        [224, -480, 608],
        [224, -448, -608],
        [224, -448, 608],
        [224, -416, -608],
        [224, -416, 608],
        [224, -384, -608],
        [224, -384, 608],
        [224, -352, -608],
        [224, -352, 608],
        [224, -320, -608],
        [224, -320, 608],
        [224, -288, -608],
        [224, -288, 608],
        [224, -256, -608],
        [224, -256, 608],
        [224, -224, -608],
        [224, -224, 608],
        [224, -192, -608],
        [224, -192, 608],
        [224, -160, -608],
        [224, -160, 608],
        [224, -128, -608],
        [224, -128, 608],
        [224, -96, -608],
        [224, -96, 608],
        [224, -64, -608],
        [224, -64, 608],
        [224, -32, -608],
        [224, -32, 608],
        [224, 0, -608],
        [224, 0, 608],
        [224, 32, -608],
        [224, 32, 608],
        [224, 64, -608],
        [224, 64, 608],
        [224, 96, -608],
        [224, 96, 608],
        [224, 128, -608],
        [224, 128, 608],
        [224, 160, -608],
        [224, 160, 608],
        [224, 192, -608],
        [224, 192, 608],
        [224, 224, -608],
        [224, 224, 608],
        [224, 256, -608],
        [224, 256, 608],
        [224, 288, -608],
        [224, 288, 608],
        [224, 320, -608],
        [224, 320, 608],
        [224, 352, -608],
        [224, 352, 608],
        [224, 384, -608],
        [224, 384, 608],
        [224, 416, -608],
        [224, 416, 608],
        [224, 448, -608],
        [224, 448, 608],
        [224, 480, -608],
        [224, 480, 608],
        [224, 512, -608],
        [224, 512, 608],
        [224, 544, -608],
        [224, 544, 608],
        [224, 576, -608],
        [224, 576, 608],
        [224, 608, -608],
        [224, 608, 608],
        [224, -608, -576],
        [224, 608, -576],
        [224, -608, -544],
        [224, 608, -544],
        [224, -608, -512],
        [224, 608, -512],
        [224, -608, -480],
        [224, 608, -480],
        [224, -608, -448],
        [224, 608, -448],
        [224, -608, -416],
        [224, 608, -416],
        [224, -608, -384],
        [224, 608, -384],
        [224, -608, -352],
        [224, 608, -352],
        [224, -608, -320],
        [224, 608, -320],
        [224, -608, -288],
        [224, 608, -288],
        [224, -608, -256],
        [224, 608, -256],
        [224, -608, -224],
        [224, 608, -224],
        [224, -608, -192],
        [224, 608, -192],
        [224, -608, -160],
        [224, 608, -160],
        [224, -608, -128],
        [224, 608, -128],
        [224, -608, -96],
        [224, 608, -96],
        [224, -608, -64],
        [224, 608, -64],
        [224, -608, -32],
        [224, 608, -32],
        [224, -608, 0],
        [224, 608, 0],
        [224, -608, 32],
        [224, 608, 32],
        [224, -608, 64],
        [224, 608, 64],
        [224, -608, 96],
        [224, 608, 96],
        [224, -608, 128],
        [224, 608, 128],
        [224, -608, 160],
        [224, 608, 160],
        [224, -608, 192],
        [224, 608, 192],
        [224, -608, 224],
        [224, 608, 224],
        [224, -608, 256],
        [224, 608, 256],
        [224, -608, 288],
        [224, 608, 288],
        [224, -608, 320],
        [224, 608, 320],
        [224, -608, 352],
        [224, 608, 352],
        [224, -608, 384],
        [224, 608, 384],
        [224, -608, 416],
        [224, 608, 416],
        [224, -608, 448],
        [224, 608, 448],
        [224, -608, 480],
        [224, 608, 480],
        [224, -608, 512],
        [224, 608, 512],
        [224, -608, 544],
        [224, 608, 544],
        [224, -608, 576],
        [224, 608, 576],
        [256, -608, -608],
        [256, -608, 608],
        [256, -576, -608],
        [256, -576, 608],
        [256, -544, -608],
        [256, -544, 608],
        [256, -512, -608],
        [256, -512, 608],
        [256, -480, -608],
        [256, -480, 608],
        [256, -448, -608],
        [256, -448, 608],
        [256, -416, -608],
        [256, -416, 608],
        [256, -384, -608],
        [256, -384, 608],
        [256, -352, -608],
        [256, -352, 608],
        [256, -320, -608],
        [256, -320, 608],
        [256, -288, -608],
        [256, -288, 608],
        [256, -256, -608],
        [256, -256, 608],
        [256, -224, -608],
        [256, -224, 608],
        [256, -192, -608],
        [256, -192, 608],
        [256, -160, -608],
        [256, -160, 608],
        [256, -128, -608],
        [256, -128, 608],
        [256, -96, -608],
        [256, -96, 608],
        [256, -64, -608],
        [256, -64, 608],
        [256, -32, -608],
        [256, -32, 608],
        [256, 0, -608],
        [256, 0, 608],
        [256, 32, -608],
        [256, 32, 608],
        [256, 64, -608],
        [256, 64, 608],
        [256, 96, -608],
        [256, 96, 608],
        [256, 128, -608],
        [256, 128, 608],
        [256, 160, -608],
        [256, 160, 608],
        [256, 192, -608],
        [256, 192, 608],
        [256, 224, -608],
        [256, 224, 608],
        [256, 256, -608],
        [256, 256, 608],
        [256, 288, -608],
        [256, 288, 608],
        [256, 320, -608],
        [256, 320, 608],
        [256, 352, -608],
        [256, 352, 608],
        [256, 384, -608],
        [256, 384, 608],
        [256, 416, -608],
        [256, 416, 608],
        [256, 448, -608],
        [256, 448, 608],
        [256, 480, -608],
        [256, 480, 608],
        [256, 512, -608],
        [256, 512, 608],
        [256, 544, -608],
        [256, 544, 608],
        [256, 576, -608],
        [256, 576, 608],
        [256, 608, -608],
        [256, 608, 608],
        [256, -608, -576],
        [256, 608, -576],
        [256, -608, -544],
        [256, 608, -544],
        [256, -608, -512],
        [256, 608, -512],
        [256, -608, -480],
        [256, 608, -480],
        [256, -608, -448],
        [256, 608, -448],
        [256, -608, -416],
        [256, 608, -416],
        [256, -608, -384],
        [256, 608, -384],
        [256, -608, -352],
        [256, 608, -352],
        [256, -608, -320],
        [256, 608, -320],
        [256, -608, -288],
        [256, 608, -288],
        [256, -608, -256],
        [256, 608, -256],
        [256, -608, -224],
        [256, 608, -224],
        [256, -608, -192],
        [256, 608, -192],
        [256, -608, -160],
        [256, 608, -160],
        [256, -608, -128],
        [256, 608, -128],
        [256, -608, -96],
        [256, 608, -96],
        [256, -608, -64],
        [256, 608, -64],
        [256, -608, -32],
        [256, 608, -32],
        [256, -608, 0],
        [256, 608, 0],
        [256, -608, 32],
        [256, 608, 32],
        [256, -608, 64],
        [256, 608, 64],
        [256, -608, 96],
        [256, 608, 96],
        [256, -608, 128],
        [256, 608, 128],
        [256, -608, 160],
        [256, 608, 160],
        [256, -608, 192],
        [256, 608, 192],
        [256, -608, 224],
        [256, 608, 224],
        [256, -608, 256],
        [256, 608, 256],
        [256, -608, 288],
        [256, 608, 288],
        [256, -608, 320],
        [256, 608, 320],
        [256, -608, 352],
        [256, 608, 352],
        [256, -608, 384],
        [256, 608, 384],
        [256, -608, 416],
        [256, 608, 416],
        [256, -608, 448],
        [256, 608, 448],
        [256, -608, 480],
        [256, 608, 480],
        [256, -608, 512],
        [256, 608, 512],
        [256, -608, 544],
        [256, 608, 544],
        [256, -608, 576],
        [256, 608, 576],
        [288, -608, -608],
        [288, -608, 608],
        [288, -576, -608],
        [288, -576, 608],
        [288, -544, -608],
        [288, -544, 608],
        [288, -512, -608],
        [288, -512, 608],
        [288, -480, -608],
        [288, -480, 608],
        [288, -448, -608],
        [288, -448, 608],
        [288, -416, -608],
        [288, -416, 608],
        [288, -384, -608],
        [288, -384, 608],
        [288, -352, -608],
        [288, -352, 608],
        [288, -320, -608],
        [288, -320, 608],
        [288, -288, -608],
        [288, -288, 608],
        [288, -256, -608],
        [288, -256, 608],
        [288, -224, -608],
        [288, -224, 608],
        [288, -192, -608],
        [288, -192, 608],
        [288, -160, -608],
        [288, -160, 608],
        [288, -128, -608],
        [288, -128, 608],
        [288, -96, -608],
        [288, -96, 608],
        [288, -64, -608],
        [288, -64, 608],
        [288, -32, -608],
        [288, -32, 608],
        [288, 0, -608],
        [288, 0, 608],
        [288, 32, -608],
        [288, 32, 608],
        [288, 64, -608],
        [288, 64, 608],
        [288, 96, -608],
        [288, 96, 608],
        [288, 128, -608],
        [288, 128, 608],
        [288, 160, -608],
        [288, 160, 608],
        [288, 192, -608],
        [288, 192, 608],
        [288, 224, -608],
        [288, 224, 608],
        [288, 256, -608],
        [288, 256, 608],
        [288, 288, -608],
        [288, 288, 608],
        [288, 320, -608],
        [288, 320, 608],
        [288, 352, -608],
        [288, 352, 608],
        [288, 384, -608],
        [288, 384, 608],
        [288, 416, -608],
        [288, 416, 608],
        [288, 448, -608],
        [288, 448, 608],
        [288, 480, -608],
        [288, 480, 608],
        [288, 512, -608],
        [288, 512, 608],
        [288, 544, -608],
        [288, 544, 608],
        [288, 576, -608],
        [288, 576, 608],
        [288, 608, -608],
        [288, 608, 608],
        [288, -608, -576],
        [288, 608, -576],
        [288, -608, -544],
        [288, 608, -544],
        [288, -608, -512],
        [288, 608, -512],
        [288, -608, -480],
        [288, 608, -480],
        [288, -608, -448],
        [288, 608, -448],
        [288, -608, -416],
        [288, 608, -416],
        [288, -608, -384],
        [288, 608, -384],
        [288, -608, -352],
        [288, 608, -352],
        [288, -608, -320],
        [288, 608, -320],
        [288, -608, -288],
        [288, 608, -288],
        [288, -608, -256],
        [288, 608, -256],
        [288, -608, -224],
        [288, 608, -224],
        [288, -608, -192],
        [288, 608, -192],
        [288, -608, -160],
        [288, 608, -160],
        [288, -608, -128],
        [288, 608, -128],
        [288, -608, -96],
        [288, 608, -96],
        [288, -608, -64],
        [288, 608, -64],
        [288, -608, -32],
        [288, 608, -32],
        [288, -608, 0],
        [288, 608, 0],
        [288, -608, 32],
        [288, 608, 32],
        [288, -608, 64],
        [288, 608, 64],
        [288, -608, 96],
        [288, 608, 96],
        [288, -608, 128],
        [288, 608, 128],
        [288, -608, 160],
        [288, 608, 160],
        [288, -608, 192],
        [288, 608, 192],
        [288, -608, 224],
        [288, 608, 224],
        [288, -608, 256],
        [288, 608, 256],
        [288, -608, 288],
        [288, 608, 288],
        [288, -608, 320],
        [288, 608, 320],
        [288, -608, 352],
        [288, 608, 352],
        [288, -608, 384],
        [288, 608, 384],
        [288, -608, 416],
        [288, 608, 416],
        [288, -608, 448],
        [288, 608, 448],
        [288, -608, 480],
        [288, 608, 480],
        [288, -608, 512],
        [288, 608, 512],
        [288, -608, 544],
        [288, 608, 544],
        [288, -608, 576],
        [288, 608, 576],
        [320, -608, -608],
        [320, -608, 608],
        [320, -576, -608],
        [320, -576, 608],
        [320, -544, -608],
        [320, -544, 608],
        [320, -512, -608],
        [320, -512, 608],
        [320, -480, -608],
        [320, -480, 608],
        [320, -448, -608],
        [320, -448, 608],
        [320, -416, -608],
        [320, -416, 608],
        [320, -384, -608],
        [320, -384, 608],
        [320, -352, -608],
        [320, -352, 608],
        [320, -320, -608],
        [320, -320, 608],
        [320, -288, -608],
        [320, -288, 608],
        [320, -256, -608],
        [320, -256, 608],
        [320, -224, -608],
        [320, -224, 608],
        [320, -192, -608],
        [320, -192, 608],
        [320, -160, -608],
        [320, -160, 608],
        [320, -128, -608],
        [320, -128, 608],
        [320, -96, -608],
        [320, -96, 608],
        [320, -64, -608],
        [320, -64, 608],
        [320, -32, -608],
        [320, -32, 608],
        [320, 0, -608],
        [320, 0, 608],
        [320, 32, -608],
        [320, 32, 608],
        [320, 64, -608],
        [320, 64, 608],
        [320, 96, -608],
        [320, 96, 608],
        [320, 128, -608],
        [320, 128, 608],
        [320, 160, -608],
        [320, 160, 608],
        [320, 192, -608],
        [320, 192, 608],
        [320, 224, -608],
        [320, 224, 608],
        [320, 256, -608],
        [320, 256, 608],
        [320, 288, -608],
        [320, 288, 608],
        [320, 320, -608],
        [320, 320, 608],
        [320, 352, -608],
        [320, 352, 608],
        [320, 384, -608],
        [320, 384, 608],
        [320, 416, -608],
        [320, 416, 608],
        [320, 448, -608],
        [320, 448, 608],
        [320, 480, -608],
        [320, 480, 608],
        [320, 512, -608],
        [320, 512, 608],
        [320, 544, -608],
        [320, 544, 608],
        [320, 576, -608],
        [320, 576, 608],
        [320, 608, -608],
        [320, 608, 608],
        [320, -608, -576],
        [320, 608, -576],
        [320, -608, -544],
        [320, 608, -544],
        [320, -608, -512],
        [320, 608, -512],
        [320, -608, -480],
        [320, 608, -480],
        [320, -608, -448],
        [320, 608, -448],
        [320, -608, -416],
        [320, 608, -416],
        [320, -608, -384],
        [320, 608, -384],
        [320, -608, -352],
        [320, 608, -352],
        [320, -608, -320],
        [320, 608, -320],
        [320, -608, -288],
        [320, 608, -288],
        [320, -608, -256],
        [320, 608, -256],
        [320, -608, -224],
        [320, 608, -224],
        [320, -608, -192],
        [320, 608, -192],
        [320, -608, -160],
        [320, 608, -160],
        [320, -608, -128],
        [320, 608, -128],
        [320, -608, -96],
        [320, 608, -96],
        [320, -608, -64],
        [320, 608, -64],
        [320, -608, -32],
        [320, 608, -32],
        [320, -608, 0],
        [320, 608, 0],
        [320, -608, 32],
        [320, 608, 32],
        [320, -608, 64],
        [320, 608, 64],
        [320, -608, 96],
        [320, 608, 96],
        [320, -608, 128],
        [320, 608, 128],
        [320, -608, 160],
        [320, 608, 160],
        [320, -608, 192],
        [320, 608, 192],
        [320, -608, 224],
        [320, 608, 224],
        [320, -608, 256],
        [320, 608, 256],
        [320, -608, 288],
        [320, 608, 288],
        [320, -608, 320],
        [320, 608, 320],
        [320, -608, 352],
        [320, 608, 352],
        [320, -608, 384],
        [320, 608, 384],
        [320, -608, 416],
        [320, 608, 416],
        [320, -608, 448],
        [320, 608, 448],
        [320, -608, 480],
        [320, 608, 480],
        [320, -608, 512],
        [320, 608, 512],
        [320, -608, 544],
        [320, 608, 544],
        [320, -608, 576],
        [320, 608, 576],
        [352, -608, -608],
        [352, -608, 608],
        [352, -576, -608],
        [352, -576, 608],
        [352, -544, -608],
        [352, -544, 608],
        [352, -512, -608],
        [352, -512, 608],
        [352, -480, -608],
        [352, -480, 608],
        [352, -448, -608],
        [352, -448, 608],
        [352, -416, -608],
        [352, -416, 608],
        [352, -384, -608],
        [352, -384, 608],
        [352, -352, -608],
        [352, -352, 608],
        [352, -320, -608],
        [352, -320, 608],
        [352, -288, -608],
        [352, -288, 608],
        [352, -256, -608],
        [352, -256, 608],
        [352, -224, -608],
        [352, -224, 608],
        [352, -192, -608],
        [352, -192, 608],
        [352, -160, -608],
        [352, -160, 608],
        [352, -128, -608],
        [352, -128, 608],
        [352, -96, -608],
        [352, -96, 608],
        [352, -64, -608],
        [352, -64, 608],
        [352, -32, -608],
        [352, -32, 608],
        [352, 0, -608],
        [352, 0, 608],
        [352, 32, -608],
        [352, 32, 608],
        [352, 64, -608],
        [352, 64, 608],
        [352, 96, -608],
        [352, 96, 608],
        [352, 128, -608],
        [352, 128, 608],
        [352, 160, -608],
        [352, 160, 608],
        [352, 192, -608],
        [352, 192, 608],
        [352, 224, -608],
        [352, 224, 608],
        [352, 256, -608],
        [352, 256, 608],
        [352, 288, -608],
        [352, 288, 608],
        [352, 320, -608],
        [352, 320, 608],
        [352, 352, -608],
        [352, 352, 608],
        [352, 384, -608],
        [352, 384, 608],
        [352, 416, -608],
        [352, 416, 608],
        [352, 448, -608],
        [352, 448, 608],
        [352, 480, -608],
        [352, 480, 608],
        [352, 512, -608],
        [352, 512, 608],
        [352, 544, -608],
        [352, 544, 608],
        [352, 576, -608],
        [352, 576, 608],
        [352, 608, -608],
        [352, 608, 608],
        [352, -608, -576],
        [352, 608, -576],
        [352, -608, -544],
        [352, 608, -544],
        [352, -608, -512],
        [352, 608, -512],
        [352, -608, -480],
        [352, 608, -480],
        [352, -608, -448],
        [352, 608, -448],
        [352, -608, -416],
        [352, 608, -416],
        [352, -608, -384],
        [352, 608, -384],
        [352, -608, -352],
        [352, 608, -352],
        [352, -608, -320],
        [352, 608, -320],
        [352, -608, -288],
        [352, 608, -288],
        [352, -608, -256],
        [352, 608, -256],
        [352, -608, -224],
        [352, 608, -224],
        [352, -608, -192],
        [352, 608, -192],
        [352, -608, -160],
        [352, 608, -160],
        [352, -608, -128],
        [352, 608, -128],
        [352, -608, -96],
        [352, 608, -96],
        [352, -608, -64],
        [352, 608, -64],
        [352, -608, -32],
        [352, 608, -32],
        [352, -608, 0],
        [352, 608, 0],
        [352, -608, 32],
        [352, 608, 32],
        [352, -608, 64],
        [352, 608, 64],
        [352, -608, 96],
        [352, 608, 96],
        [352, -608, 128],
        [352, 608, 128],
        [352, -608, 160],
        [352, 608, 160],
        [352, -608, 192],
        [352, 608, 192],
        [352, -608, 224],
        [352, 608, 224],
        [352, -608, 256],
        [352, 608, 256],
        [352, -608, 288],
        [352, 608, 288],
        [352, -608, 320],
        [352, 608, 320],
        [352, -608, 352],
        [352, 608, 352],
        [352, -608, 384],
        [352, 608, 384],
        [352, -608, 416],
        [352, 608, 416],
        [352, -608, 448],
        [352, 608, 448],
        [352, -608, 480],
        [352, 608, 480],
        [352, -608, 512],
        [352, 608, 512],
        [352, -608, 544],
        [352, 608, 544],
        [352, -608, 576],
        [352, 608, 576],
        [384, -608, -608],
        [384, -608, 608],
        [384, -576, -608],
        [384, -576, 608],
        [384, -544, -608],
        [384, -544, 608],
        [384, -512, -608],
        [384, -512, 608],
        [384, -480, -608],
        [384, -480, 608],
        [384, -448, -608],
        [384, -448, 608],
        [384, -416, -608],
        [384, -416, 608],
        [384, -384, -608],
        [384, -384, 608],
        [384, -352, -608],
        [384, -352, 608],
        [384, -320, -608],
        [384, -320, 608],
        [384, -288, -608],
        [384, -288, 608],
        [384, -256, -608],
        [384, -256, 608],
        [384, -224, -608],
        [384, -224, 608],
        [384, -192, -608],
        [384, -192, 608],
        [384, -160, -608],
        [384, -160, 608],
        [384, -128, -608],
        [384, -128, 608],
        [384, -96, -608],
        [384, -96, 608],
        [384, -64, -608],
        [384, -64, 608],
        [384, -32, -608],
        [384, -32, 608],
        [384, 0, -608],
        [384, 0, 608],
        [384, 32, -608],
        [384, 32, 608],
        [384, 64, -608],
        [384, 64, 608],
        [384, 96, -608],
        [384, 96, 608],
        [384, 128, -608],
        [384, 128, 608],
        [384, 160, -608],
        [384, 160, 608],
        [384, 192, -608],
        [384, 192, 608],
        [384, 224, -608],
        [384, 224, 608],
        [384, 256, -608],
        [384, 256, 608],
        [384, 288, -608],
        [384, 288, 608],
        [384, 320, -608],
        [384, 320, 608],
        [384, 352, -608],
        [384, 352, 608],
        [384, 384, -608],
        [384, 384, 608],
        [384, 416, -608],
        [384, 416, 608],
        [384, 448, -608],
        [384, 448, 608],
        [384, 480, -608],
        [384, 480, 608],
        [384, 512, -608],
        [384, 512, 608],
        [384, 544, -608],
        [384, 544, 608],
        [384, 576, -608],
        [384, 576, 608],
        [384, 608, -608],
        [384, 608, 608],
        [384, -608, -576],
        [384, 608, -576],
        [384, -608, -544],
        [384, 608, -544],
        [384, -608, -512],
        [384, 608, -512],
        [384, -608, -480],
        [384, 608, -480],
        [384, -608, -448],
        [384, 608, -448],
        [384, -608, -416],
        [384, 608, -416],
        [384, -608, -384],
        [384, 608, -384],
        [384, -608, -352],
        [384, 608, -352],
        [384, -608, -320],
        [384, 608, -320],
        [384, -608, -288],
        [384, 608, -288],
        [384, -608, -256],
        [384, 608, -256],
        [384, -608, -224],
        [384, 608, -224],
        [384, -608, -192],
        [384, 608, -192],
        [384, -608, -160],
        [384, 608, -160],
        [384, -608, -128],
        [384, 608, -128],
        [384, -608, -96],
        [384, 608, -96],
        [384, -608, -64],
        [384, 608, -64],
        [384, -608, -32],
        [384, 608, -32],
        [384, -608, 0],
        [384, 608, 0],
        [384, -608, 32],
        [384, 608, 32],
        [384, -608, 64],
        [384, 608, 64],
        [384, -608, 96],
        [384, 608, 96],
        [384, -608, 128],
        [384, 608, 128],
        [384, -608, 160],
        [384, 608, 160],
        [384, -608, 192],
        [384, 608, 192],
        [384, -608, 224],
        [384, 608, 224],
        [384, -608, 256],
        [384, 608, 256],
        [384, -608, 288],
        [384, 608, 288],
        [384, -608, 320],
        [384, 608, 320],
        [384, -608, 352],
        [384, 608, 352],
        [384, -608, 384],
        [384, 608, 384],
        [384, -608, 416],
        [384, 608, 416],
        [384, -608, 448],
        [384, 608, 448],
        [384, -608, 480],
        [384, 608, 480],
        [384, -608, 512],
        [384, 608, 512],
        [384, -608, 544],
        [384, 608, 544],
        [384, -608, 576],
        [384, 608, 576],
        [416, -608, -608],
        [416, -608, 608],
        [416, -576, -608],
        [416, -576, 608],
        [416, -544, -608],
        [416, -544, 608],
        [416, -512, -608],
        [416, -512, 608],
        [416, -480, -608],
        [416, -480, 608],
        [416, -448, -608],
        [416, -448, 608],
        [416, -416, -608],
        [416, -416, 608],
        [416, -384, -608],
        [416, -384, 608],
        [416, -352, -608],
        [416, -352, 608],
        [416, -320, -608],
        [416, -320, 608],
        [416, -288, -608],
        [416, -288, 608],
        [416, -256, -608],
        [416, -256, 608],
        [416, -224, -608],
        [416, -224, 608],
        [416, -192, -608],
        [416, -192, 608],
        [416, -160, -608],
        [416, -160, 608],
        [416, -128, -608],
        [416, -128, 608],
        [416, -96, -608],
        [416, -96, 608],
        [416, -64, -608],
        [416, -64, 608],
        [416, -32, -608],
        [416, -32, 608],
        [416, 0, -608],
        [416, 0, 608],
        [416, 32, -608],
        [416, 32, 608],
        [416, 64, -608],
        [416, 64, 608],
        [416, 96, -608],
        [416, 96, 608],
        [416, 128, -608],
        [416, 128, 608],
        [416, 160, -608],
        [416, 160, 608],
        [416, 192, -608],
        [416, 192, 608],
        [416, 224, -608],
        [416, 224, 608],
        [416, 256, -608],
        [416, 256, 608],
        [416, 288, -608],
        [416, 288, 608],
        [416, 320, -608],
        [416, 320, 608],
        [416, 352, -608],
        [416, 352, 608],
        [416, 384, -608],
        [416, 384, 608],
        [416, 416, -608],
        [416, 416, 608],
        [416, 448, -608],
        [416, 448, 608],
        [416, 480, -608],
        [416, 480, 608],
        [416, 512, -608],
        [416, 512, 608],
        [416, 544, -608],
        [416, 544, 608],
        [416, 576, -608],
        [416, 576, 608],
        [416, 608, -608],
        [416, 608, 608],
        [416, -608, -576],
        [416, 608, -576],
        [416, -608, -544],
        [416, 608, -544],
        [416, -608, -512],
        [416, 608, -512],
        [416, -608, -480],
        [416, 608, -480],
        [416, -608, -448],
        [416, 608, -448],
        [416, -608, -416],
        [416, 608, -416],
        [416, -608, -384],
        [416, 608, -384],
        [416, -608, -352],
        [416, 608, -352],
        [416, -608, -320],
        [416, 608, -320],
        [416, -608, -288],
        [416, 608, -288],
        [416, -608, -256],
        [416, 608, -256],
        [416, -608, -224],
        [416, 608, -224],
        [416, -608, -192],
        [416, 608, -192],
        [416, -608, -160],
        [416, 608, -160],
        [416, -608, -128],
        [416, 608, -128],
        [416, -608, -96],
        [416, 608, -96],
        [416, -608, -64],
        [416, 608, -64],
        [416, -608, -32],
        [416, 608, -32],
        [416, -608, 0],
        [416, 608, 0],
        [416, -608, 32],
        [416, 608, 32],
        [416, -608, 64],
        [416, 608, 64],
        [416, -608, 96],
        [416, 608, 96],
        [416, -608, 128],
        [416, 608, 128],
        [416, -608, 160],
        [416, 608, 160],
        [416, -608, 192],
        [416, 608, 192],
        [416, -608, 224],
        [416, 608, 224],
        [416, -608, 256],
        [416, 608, 256],
        [416, -608, 288],
        [416, 608, 288],
        [416, -608, 320],
        [416, 608, 320],
        [416, -608, 352],
        [416, 608, 352],
        [416, -608, 384],
        [416, 608, 384],
        [416, -608, 416],
        [416, 608, 416],
        [416, -608, 448],
        [416, 608, 448],
        [416, -608, 480],
        [416, 608, 480],
        [416, -608, 512],
        [416, 608, 512],
        [416, -608, 544],
        [416, 608, 544],
        [416, -608, 576],
        [416, 608, 576],
        [448, -608, -608],
        [448, -608, 608],
        [448, -576, -608],
        [448, -576, 608],
        [448, -544, -608],
        [448, -544, 608],
        [448, -512, -608],
        [448, -512, 608],
        [448, -480, -608],
        [448, -480, 608],
        [448, -448, -608],
        [448, -448, 608],
        [448, -416, -608],
        [448, -416, 608],
        [448, -384, -608],
        [448, -384, 608],
        [448, -352, -608],
        [448, -352, 608],
        [448, -320, -608],
        [448, -320, 608],
        [448, -288, -608],
        [448, -288, 608],
        [448, -256, -608],
        [448, -256, 608],
        [448, -224, -608],
        [448, -224, 608],
        [448, -192, -608],
        [448, -192, 608],
        [448, -160, -608],
        [448, -160, 608],
        [448, -128, -608],
        [448, -128, 608],
        [448, -96, -608],
        [448, -96, 608],
        [448, -64, -608],
        [448, -64, 608],
        [448, -32, -608],
        [448, -32, 608],
        [448, 0, -608],
        [448, 0, 608],
        [448, 32, -608],
        [448, 32, 608],
        [448, 64, -608],
        [448, 64, 608],
        [448, 96, -608],
        [448, 96, 608],
        [448, 128, -608],
        [448, 128, 608],
        [448, 160, -608],
        [448, 160, 608],
        [448, 192, -608],
        [448, 192, 608],
        [448, 224, -608],
        [448, 224, 608],
        [448, 256, -608],
        [448, 256, 608],
        [448, 288, -608],
        [448, 288, 608],
        [448, 320, -608],
        [448, 320, 608],
        [448, 352, -608],
        [448, 352, 608],
        [448, 384, -608],
        [448, 384, 608],
        [448, 416, -608],
        [448, 416, 608],
        [448, 448, -608],
        [448, 448, 608],
        [448, 480, -608],
        [448, 480, 608],
        [448, 512, -608],
        [448, 512, 608],
        [448, 544, -608],
        [448, 544, 608],
        [448, 576, -608],
        [448, 576, 608],
        [448, 608, -608],
        [448, 608, 608],
        [448, -608, -576],
        [448, 608, -576],
        [448, -608, -544],
        [448, 608, -544],
        [448, -608, -512],
        [448, 608, -512],
        [448, -608, -480],
        [448, 608, -480],
        [448, -608, -448],
        [448, 608, -448],
        [448, -608, -416],
        [448, 608, -416],
        [448, -608, -384],
        [448, 608, -384],
        [448, -608, -352],
        [448, 608, -352],
        [448, -608, -320],
        [448, 608, -320],
        [448, -608, -288],
        [448, 608, -288],
        [448, -608, -256],
        [448, 608, -256],
        [448, -608, -224],
        [448, 608, -224],
        [448, -608, -192],
        [448, 608, -192],
        [448, -608, -160],
        [448, 608, -160],
        [448, -608, -128],
        [448, 608, -128],
        [448, -608, -96],
        [448, 608, -96],
        [448, -608, -64],
        [448, 608, -64],
        [448, -608, -32],
        [448, 608, -32],
        [448, -608, 0],
        [448, 608, 0],
        [448, -608, 32],
        [448, 608, 32],
        [448, -608, 64],
        [448, 608, 64],
        [448, -608, 96],
        [448, 608, 96],
        [448, -608, 128],
        [448, 608, 128],
        [448, -608, 160],
        [448, 608, 160],
        [448, -608, 192],
        [448, 608, 192],
        [448, -608, 224],
        [448, 608, 224],
        [448, -608, 256],
        [448, 608, 256],
        [448, -608, 288],
        [448, 608, 288],
        [448, -608, 320],
        [448, 608, 320],
        [448, -608, 352],
        [448, 608, 352],
        [448, -608, 384],
        [448, 608, 384],
        [448, -608, 416],
        [448, 608, 416],
        [448, -608, 448],
        [448, 608, 448],
        [448, -608, 480],
        [448, 608, 480],
        [448, -608, 512],
        [448, 608, 512],
        [448, -608, 544],
        [448, 608, 544],
        [448, -608, 576],
        [448, 608, 576],
        [480, -608, -608],
        [480, -608, 608],
        [480, -576, -608],
        [480, -576, 608],
        [480, -544, -608],
        [480, -544, 608],
        [480, -512, -608],
        [480, -512, 608],
        [480, -480, -608],
        [480, -480, 608],
        [480, -448, -608],
        [480, -448, 608],
        [480, -416, -608],
        [480, -416, 608],
        [480, -384, -608],
        [480, -384, 608],
        [480, -352, -608],
        [480, -352, 608],
        [480, -320, -608],
        [480, -320, 608],
        [480, -288, -608],
        [480, -288, 608],
        [480, -256, -608],
        [480, -256, 608],
        [480, -224, -608],
        [480, -224, 608],
        [480, -192, -608],
        [480, -192, 608],
        [480, -160, -608],
        [480, -160, 608],
        [480, -128, -608],
        [480, -128, 608],
        [480, -96, -608],
        [480, -96, 608],
        [480, -64, -608],
        [480, -64, 608],
        [480, -32, -608],
        [480, -32, 608],
        [480, 0, -608],
        [480, 0, 608],
        [480, 32, -608],
        [480, 32, 608],
        [480, 64, -608],
        [480, 64, 608],
        [480, 96, -608],
        [480, 96, 608],
        [480, 128, -608],
        [480, 128, 608],
        [480, 160, -608],
        [480, 160, 608],
        [480, 192, -608],
        [480, 192, 608],
        [480, 224, -608],
        [480, 224, 608],
        [480, 256, -608],
        [480, 256, 608],
        [480, 288, -608],
        [480, 288, 608],
        [480, 320, -608],
        [480, 320, 608],
        [480, 352, -608],
        [480, 352, 608],
        [480, 384, -608],
        [480, 384, 608],
        [480, 416, -608],
        [480, 416, 608],
        [480, 448, -608],
        [480, 448, 608],
        [480, 480, -608],
        [480, 480, 608],
        [480, 512, -608],
        [480, 512, 608],
        [480, 544, -608],
        [480, 544, 608],
        [480, 576, -608],
        [480, 576, 608],
        [480, 608, -608],
        [480, 608, 608],
        [480, -608, -576],
        [480, 608, -576],
        [480, -608, -544],
        [480, 608, -544],
        [480, -608, -512],
        [480, 608, -512],
        [480, -608, -480],
        [480, 608, -480],
        [480, -608, -448],
        [480, 608, -448],
        [480, -608, -416],
        [480, 608, -416],
        [480, -608, -384],
        [480, 608, -384],
        [480, -608, -352],
        [480, 608, -352],
        [480, -608, -320],
        [480, 608, -320],
        [480, -608, -288],
        [480, 608, -288],
        [480, -608, -256],
        [480, 608, -256],
        [480, -608, -224],
        [480, 608, -224],
        [480, -608, -192],
        [480, 608, -192],
        [480, -608, -160],
        [480, 608, -160],
        [480, -608, -128],
        [480, 608, -128],
        [480, -608, -96],
        [480, 608, -96],
        [480, -608, -64],
        [480, 608, -64],
        [480, -608, -32],
        [480, 608, -32],
        [480, -608, 0],
        [480, 608, 0],
        [480, -608, 32],
        [480, 608, 32],
        [480, -608, 64],
        [480, 608, 64],
        [480, -608, 96],
        [480, 608, 96],
        [480, -608, 128],
        [480, 608, 128],
        [480, -608, 160],
        [480, 608, 160],
        [480, -608, 192],
        [480, 608, 192],
        [480, -608, 224],
        [480, 608, 224],
        [480, -608, 256],
        [480, 608, 256],
        [480, -608, 288],
        [480, 608, 288],
        [480, -608, 320],
        [480, 608, 320],
        [480, -608, 352],
        [480, 608, 352],
        [480, -608, 384],
        [480, 608, 384],
        [480, -608, 416],
        [480, 608, 416],
        [480, -608, 448],
        [480, 608, 448],
        [480, -608, 480],
        [480, 608, 480],
        [480, -608, 512],
        [480, 608, 512],
        [480, -608, 544],
        [480, 608, 544],
        [480, -608, 576],
        [480, 608, 576],
        [512, -608, -608],
        [512, -608, 608],
        [512, -576, -608],
        [512, -576, 608],
        [512, -544, -608],
        [512, -544, 608],
        [512, -512, -608],
        [512, -512, 608],
        [512, -480, -608],
        [512, -480, 608],
        [512, -448, -608],
        [512, -448, 608],
        [512, -416, -608],
        [512, -416, 608],
        [512, -384, -608],
        [512, -384, 608],
        [512, -352, -608],
        [512, -352, 608],
        [512, -320, -608],
        [512, -320, 608],
        [512, -288, -608],
        [512, -288, 608],
        [512, -256, -608],
        [512, -256, 608],
        [512, -224, -608],
        [512, -224, 608],
        [512, -192, -608],
        [512, -192, 608],
        [512, -160, -608],
        [512, -160, 608],
        [512, -128, -608],
        [512, -128, 608],
        [512, -96, -608],
        [512, -96, 608],
        [512, -64, -608],
        [512, -64, 608],
        [512, -32, -608],
        [512, -32, 608],
        [512, 0, -608],
        [512, 0, 608],
        [512, 32, -608],
        [512, 32, 608],
        [512, 64, -608],
        [512, 64, 608],
        [512, 96, -608],
        [512, 96, 608],
        [512, 128, -608],
        [512, 128, 608],
        [512, 160, -608],
        [512, 160, 608],
        [512, 192, -608],
        [512, 192, 608],
        [512, 224, -608],
        [512, 224, 608],
        [512, 256, -608],
        [512, 256, 608],
        [512, 288, -608],
        [512, 288, 608],
        [512, 320, -608],
        [512, 320, 608],
        [512, 352, -608],
        [512, 352, 608],
        [512, 384, -608],
        [512, 384, 608],
        [512, 416, -608],
        [512, 416, 608],
        [512, 448, -608],
        [512, 448, 608],
        [512, 480, -608],
        [512, 480, 608],
        [512, 512, -608],
        [512, 512, 608],
        [512, 544, -608],
        [512, 544, 608],
        [512, 576, -608],
        [512, 576, 608],
        [512, 608, -608],
        [512, 608, 608],
        [512, -608, -576],
        [512, 608, -576],
        [512, -608, -544],
        [512, 608, -544],
        [512, -608, -512],
        [512, 608, -512],
        [512, -608, -480],
        [512, 608, -480],
        [512, -608, -448],
        [512, 608, -448],
        [512, -608, -416],
        [512, 608, -416],
        [512, -608, -384],
        [512, 608, -384],
        [512, -608, -352],
        [512, 608, -352],
        [512, -608, -320],
        [512, 608, -320],
        [512, -608, -288],
        [512, 608, -288],
        [512, -608, -256],
        [512, 608, -256],
        [512, -608, -224],
        [512, 608, -224],
        [512, -608, -192],
        [512, 608, -192],
        [512, -608, -160],
        [512, 608, -160],
        [512, -608, -128],
        [512, 608, -128],
        [512, -608, -96],
        [512, 608, -96],
        [512, -608, -64],
        [512, 608, -64],
        [512, -608, -32],
        [512, 608, -32],
        [512, -608, 0],
        [512, 608, 0],
        [512, -608, 32],
        [512, 608, 32],
        [512, -608, 64],
        [512, 608, 64],
        [512, -608, 96],
        [512, 608, 96],
        [512, -608, 128],
        [512, 608, 128],
        [512, -608, 160],
        [512, 608, 160],
        [512, -608, 192],
        [512, 608, 192],
        [512, -608, 224],
        [512, 608, 224],
        [512, -608, 256],
        [512, 608, 256],
        [512, -608, 288],
        [512, 608, 288],
        [512, -608, 320],
        [512, 608, 320],
        [512, -608, 352],
        [512, 608, 352],
        [512, -608, 384],
        [512, 608, 384],
        [512, -608, 416],
        [512, 608, 416],
        [512, -608, 448],
        [512, 608, 448],
        [512, -608, 480],
        [512, 608, 480],
        [512, -608, 512],
        [512, 608, 512],
        [512, -608, 544],
        [512, 608, 544],
        [512, -608, 576],
        [512, 608, 576],
        [544, -608, -608],
        [544, -608, 608],
        [544, -576, -608],
        [544, -576, 608],
        [544, -544, -608],
        [544, -544, 608],
        [544, -512, -608],
        [544, -512, 608],
        [544, -480, -608],
        [544, -480, 608],
        [544, -448, -608],
        [544, -448, 608],
        [544, -416, -608],
        [544, -416, 608],
        [544, -384, -608],
        [544, -384, 608],
        [544, -352, -608],
        [544, -352, 608],
        [544, -320, -608],
        [544, -320, 608],
        [544, -288, -608],
        [544, -288, 608],
        [544, -256, -608],
        [544, -256, 608],
        [544, -224, -608],
        [544, -224, 608],
        [544, -192, -608],
        [544, -192, 608],
        [544, -160, -608],
        [544, -160, 608],
        [544, -128, -608],
        [544, -128, 608],
        [544, -96, -608],
        [544, -96, 608],
        [544, -64, -608],
        [544, -64, 608],
        [544, -32, -608],
        [544, -32, 608],
        [544, 0, -608],
        [544, 0, 608],
        [544, 32, -608],
        [544, 32, 608],
        [544, 64, -608],
        [544, 64, 608],
        [544, 96, -608],
        [544, 96, 608],
        [544, 128, -608],
        [544, 128, 608],
        [544, 160, -608],
        [544, 160, 608],
        [544, 192, -608],
        [544, 192, 608],
        [544, 224, -608],
        [544, 224, 608],
        [544, 256, -608],
        [544, 256, 608],
        [544, 288, -608],
        [544, 288, 608],
        [544, 320, -608],
        [544, 320, 608],
        [544, 352, -608],
        [544, 352, 608],
        [544, 384, -608],
        [544, 384, 608],
        [544, 416, -608],
        [544, 416, 608],
        [544, 448, -608],
        [544, 448, 608],
        [544, 480, -608],
        [544, 480, 608],
        [544, 512, -608],
        [544, 512, 608],
        [544, 544, -608],
        [544, 544, 608],
        [544, 576, -608],
        [544, 576, 608],
        [544, 608, -608],
        [544, 608, 608],
        [544, -608, -576],
        [544, 608, -576],
        [544, -608, -544],
        [544, 608, -544],
        [544, -608, -512],
        [544, 608, -512],
        [544, -608, -480],
        [544, 608, -480],
        [544, -608, -448],
        [544, 608, -448],
        [544, -608, -416],
        [544, 608, -416],
        [544, -608, -384],
        [544, 608, -384],
        [544, -608, -352],
        [544, 608, -352],
        [544, -608, -320],
        [544, 608, -320],
        [544, -608, -288],
        [544, 608, -288],
        [544, -608, -256],
        [544, 608, -256],
        [544, -608, -224],
        [544, 608, -224],
        [544, -608, -192],
        [544, 608, -192],
        [544, -608, -160],
        [544, 608, -160],
        [544, -608, -128],
        [544, 608, -128],
        [544, -608, -96],
        [544, 608, -96],
        [544, -608, -64],
        [544, 608, -64],
        [544, -608, -32],
        [544, 608, -32],
        [544, -608, 0],
        [544, 608, 0],
        [544, -608, 32],
        [544, 608, 32],
        [544, -608, 64],
        [544, 608, 64],
        [544, -608, 96],
        [544, 608, 96],
        [544, -608, 128],
        [544, 608, 128],
        [544, -608, 160],
        [544, 608, 160],
        [544, -608, 192],
        [544, 608, 192],
        [544, -608, 224],
        [544, 608, 224],
        [544, -608, 256],
        [544, 608, 256],
        [544, -608, 288],
        [544, 608, 288],
        [544, -608, 320],
        [544, 608, 320],
        [544, -608, 352],
        [544, 608, 352],
        [544, -608, 384],
        [544, 608, 384],
        [544, -608, 416],
        [544, 608, 416],
        [544, -608, 448],
        [544, 608, 448],
        [544, -608, 480],
        [544, 608, 480],
        [544, -608, 512],
        [544, 608, 512],
        [544, -608, 544],
        [544, 608, 544],
        [544, -608, 576],
        [544, 608, 576],
        [576, -608, -608],
        [576, -608, 608],
        [576, -576, -608],
        [576, -576, 608],
        [576, -544, -608],
        [576, -544, 608],
        [576, -512, -608],
        [576, -512, 608],
        [576, -480, -608],
        [576, -480, 608],
        [576, -448, -608],
        [576, -448, 608],
        [576, -416, -608],
        [576, -416, 608],
        [576, -384, -608],
        [576, -384, 608],
        [576, -352, -608],
        [576, -352, 608],
        [576, -320, -608],
        [576, -320, 608],
        [576, -288, -608],
        [576, -288, 608],
        [576, -256, -608],
        [576, -256, 608],
        [576, -224, -608],
        [576, -224, 608],
        [576, -192, -608],
        [576, -192, 608],
        [576, -160, -608],
        [576, -160, 608],
        [576, -128, -608],
        [576, -128, 608],
        [576, -96, -608],
        [576, -96, 608],
        [576, -64, -608],
        [576, -64, 608],
        [576, -32, -608],
        [576, -32, 608],
        [576, 0, -608],
        [576, 0, 608],
        [576, 32, -608],
        [576, 32, 608],
        [576, 64, -608],
        [576, 64, 608],
        [576, 96, -608],
        [576, 96, 608],
        [576, 128, -608],
        [576, 128, 608],
        [576, 160, -608],
        [576, 160, 608],
        [576, 192, -608],
        [576, 192, 608],
        [576, 224, -608],
        [576, 224, 608],
        [576, 256, -608],
        [576, 256, 608],
        [576, 288, -608],
        [576, 288, 608],
        [576, 320, -608],
        [576, 320, 608],
        [576, 352, -608],
        [576, 352, 608],
        [576, 384, -608],
        [576, 384, 608],
        [576, 416, -608],
        [576, 416, 608],
        [576, 448, -608],
        [576, 448, 608],
        [576, 480, -608],
        [576, 480, 608],
        [576, 512, -608],
        [576, 512, 608],
        [576, 544, -608],
        [576, 544, 608],
        [576, 576, -608],
        [576, 576, 608],
        [576, 608, -608],
        [576, 608, 608],
        [576, -608, -576],
        [576, 608, -576],
        [576, -608, -544],
        [576, 608, -544],
        [576, -608, -512],
        [576, 608, -512],
        [576, -608, -480],
        [576, 608, -480],
        [576, -608, -448],
        [576, 608, -448],
        [576, -608, -416],
        [576, 608, -416],
        [576, -608, -384],
        [576, 608, -384],
        [576, -608, -352],
        [576, 608, -352],
        [576, -608, -320],
        [576, 608, -320],
        [576, -608, -288],
        [576, 608, -288],
        [576, -608, -256],
        [576, 608, -256],
        [576, -608, -224],
        [576, 608, -224],
        [576, -608, -192],
        [576, 608, -192],
        [576, -608, -160],
        [576, 608, -160],
        [576, -608, -128],
        [576, 608, -128],
        [576, -608, -96],
        [576, 608, -96],
        [576, -608, -64],
        [576, 608, -64],
        [576, -608, -32],
        [576, 608, -32],
        [576, -608, 0],
        [576, 608, 0],
        [576, -608, 32],
        [576, 608, 32],
        [576, -608, 64],
        [576, 608, 64],
        [576, -608, 96],
        [576, 608, 96],
        [576, -608, 128],
        [576, 608, 128],
        [576, -608, 160],
        [576, 608, 160],
        [576, -608, 192],
        [576, 608, 192],
        [576, -608, 224],
        [576, 608, 224],
        [576, -608, 256],
        [576, 608, 256],
        [576, -608, 288],
        [576, 608, 288],
        [576, -608, 320],
        [576, 608, 320],
        [576, -608, 352],
        [576, 608, 352],
        [576, -608, 384],
        [576, 608, 384],
        [576, -608, 416],
        [576, 608, 416],
        [576, -608, 448],
        [576, 608, 448],
        [576, -608, 480],
        [576, 608, 480],
        [576, -608, 512],
        [576, 608, 512],
        [576, -608, 544],
        [576, 608, 544],
        [576, -608, 576],
        [576, 608, 576],
        [608, -608, -608],
        [608, -608, 608],
        [608, -576, -608],
        [608, -576, 608],
        [608, -544, -608],
        [608, -544, 608],
        [608, -512, -608],
        [608, -512, 608],
        [608, -480, -608],
        [608, -480, 608],
        [608, -448, -608],
        [608, -448, 608],
        [608, -416, -608],
        [608, -416, 608],
        [608, -384, -608],
        [608, -384, 608],
        [608, -352, -608],
        [608, -352, 608],
        [608, -320, -608],
        [608, -320, 608],
        [608, -288, -608],
        [608, -288, 608],
        [608, -256, -608],
        [608, -256, 608],
        [608, -224, -608],
        [608, -224, 608],
        [608, -192, -608],
        [608, -192, 608],
        [608, -160, -608],
        [608, -160, 608],
        [608, -128, -608],
        [608, -128, 608],
        [608, -96, -608],
        [608, -96, 608],
        [608, -64, -608],
        [608, -64, 608],
        [608, -32, -608],
        [608, -32, 608],
        [608, 0, -608],
        [608, 0, 608],
        [608, 32, -608],
        [608, 32, 608],
        [608, 64, -608],
        [608, 64, 608],
        [608, 96, -608],
        [608, 96, 608],
        [608, 128, -608],
        [608, 128, 608],
        [608, 160, -608],
        [608, 160, 608],
        [608, 192, -608],
        [608, 192, 608],
        [608, 224, -608],
        [608, 224, 608],
        [608, 256, -608],
        [608, 256, 608],
        [608, 288, -608],
        [608, 288, 608],
        [608, 320, -608],
        [608, 320, 608],
        [608, 352, -608],
        [608, 352, 608],
        [608, 384, -608],
        [608, 384, 608],
        [608, 416, -608],
        [608, 416, 608],
        [608, 448, -608],
        [608, 448, 608],
        [608, 480, -608],
        [608, 480, 608],
        [608, 512, -608],
        [608, 512, 608],
        [608, 544, -608],
        [608, 544, 608],
        [608, 576, -608],
        [608, 576, 608],
        [608, 608, -608],
        [608, 608, 608],
        [608, -608, -576],
        [608, 608, -576],
        [608, -608, -544],
        [608, 608, -544],
        [608, -608, -512],
        [608, 608, -512],
        [608, -608, -480],
        [608, 608, -480],
        [608, -608, -448],
        [608, 608, -448],
        [608, -608, -416],
        [608, 608, -416],
        [608, -608, -384],
        [608, 608, -384],
        [608, -608, -352],
        [608, 608, -352],
        [608, -608, -320],
        [608, 608, -320],
        [608, -608, -288],
        [608, 608, -288],
        [608, -608, -256],
        [608, 608, -256],
        [608, -608, -224],
        [608, 608, -224],
        [608, -608, -192],
        [608, 608, -192],
        [608, -608, -160],
        [608, 608, -160],
        [608, -608, -128],
        [608, 608, -128],
        [608, -608, -96],
        [608, 608, -96],
        [608, -608, -64],
        [608, 608, -64],
        [608, -608, -32],
        [608, 608, -32],
        [608, -608, 0],
        [608, 608, 0],
        [608, -608, 32],
        [608, 608, 32],
        [608, -608, 64],
        [608, 608, 64],
        [608, -608, 96],
        [608, 608, 96],
        [608, -608, 128],
        [608, 608, 128],
        [608, -608, 160],
        [608, 608, 160],
        [608, -608, 192],
        [608, 608, 192],
        [608, -608, 224],
        [608, 608, 224],
        [608, -608, 256],
        [608, 608, 256],
        [608, -608, 288],
        [608, 608, 288],
        [608, -608, 320],
        [608, 608, 320],
        [608, -608, 352],
        [608, 608, 352],
        [608, -608, 384],
        [608, 608, 384],
        [608, -608, 416],
        [608, 608, 416],
        [608, -608, 448],
        [608, 608, 448],
        [608, -608, 480],
        [608, 608, 480],
        [608, -608, 512],
        [608, 608, 512],
        [608, -608, 544],
        [608, 608, 544],
        [608, -608, 576],
        [608, 608, 576],
        [-608, -576, -576],
        [608, -576, -576],
        [-608, -544, -576],
        [608, -544, -576],
        [-608, -512, -576],
        [608, -512, -576],
        [-608, -480, -576],
        [608, -480, -576],
        [-608, -448, -576],
        [608, -448, -576],
        [-608, -416, -576],
        [608, -416, -576],
        [-608, -384, -576],
        [608, -384, -576],
        [-608, -352, -576],
        [608, -352, -576],
        [-608, -320, -576],
        [608, -320, -576],
        [-608, -288, -576],
        [608, -288, -576],
        [-608, -256, -576],
        [608, -256, -576],
        [-608, -224, -576],
        [608, -224, -576],
        [-608, -192, -576],
        [608, -192, -576],
        [-608, -160, -576],
        [608, -160, -576],
        [-608, -128, -576],
        [608, -128, -576],
        [-608, -96, -576],
        [608, -96, -576],
        [-608, -64, -576],
        [608, -64, -576],
        [-608, -32, -576],
        [608, -32, -576],
        [-608, 0, -576],
        [608, 0, -576],
        [-608, 32, -576],
        [608, 32, -576],
        [-608, 64, -576],
        [608, 64, -576],
        [-608, 96, -576],
        [608, 96, -576],
        [-608, 128, -576],
        [608, 128, -576],
        [-608, 160, -576],
        [608, 160, -576],
        [-608, 192, -576],
        [608, 192, -576],
        [-608, 224, -576],
        [608, 224, -576],
        [-608, 256, -576],
        [608, 256, -576],
        [-608, 288, -576],
        [608, 288, -576],
        [-608, 320, -576],
        [608, 320, -576],
        [-608, 352, -576],
        [608, 352, -576],
        [-608, 384, -576],
        [608, 384, -576],
        [-608, 416, -576],
        [608, 416, -576],
        [-608, 448, -576],
        [608, 448, -576],
        [-608, 480, -576],
        [608, 480, -576],
        [-608, 512, -576],
        [608, 512, -576],
        [-608, 544, -576],
        [608, 544, -576],
        [-608, 576, -576],
        [608, 576, -576],
        [-608, -576, -544],
        [608, -576, -544],
        [-608, -544, -544],
        [608, -544, -544],
        [-608, -512, -544],
        [608, -512, -544],
        [-608, -480, -544],
        [608, -480, -544],
        [-608, -448, -544],
        [608, -448, -544],
        [-608, -416, -544],
        [608, -416, -544],
        [-608, -384, -544],
        [608, -384, -544],
        [-608, -352, -544],
        [608, -352, -544],
        [-608, -320, -544],
        [608, -320, -544],
        [-608, -288, -544],
        [608, -288, -544],
        [-608, -256, -544],
        [608, -256, -544],
        [-608, -224, -544],
        [608, -224, -544],
        [-608, -192, -544],
        [608, -192, -544],
        [-608, -160, -544],
        [608, -160, -544],
        [-608, -128, -544],
        [608, -128, -544],
        [-608, -96, -544],
        [608, -96, -544],
        [-608, -64, -544],
        [608, -64, -544],
        [-608, -32, -544],
        [608, -32, -544],
        [-608, 0, -544],
        [608, 0, -544],
        [-608, 32, -544],
        [608, 32, -544],
        [-608, 64, -544],
        [608, 64, -544],
        [-608, 96, -544],
        [608, 96, -544],
        [-608, 128, -544],
        [608, 128, -544],
        [-608, 160, -544],
        [608, 160, -544],
        [-608, 192, -544],
        [608, 192, -544],
        [-608, 224, -544],
        [608, 224, -544],
        [-608, 256, -544],
        [608, 256, -544],
        [-608, 288, -544],
        [608, 288, -544],
        [-608, 320, -544],
        [608, 320, -544],
        [-608, 352, -544],
        [608, 352, -544],
        [-608, 384, -544],
        [608, 384, -544],
        [-608, 416, -544],
        [608, 416, -544],
        [-608, 448, -544],
        [608, 448, -544],
        [-608, 480, -544],
        [608, 480, -544],
        [-608, 512, -544],
        [608, 512, -544],
        [-608, 544, -544],
        [608, 544, -544],
        [-608, 576, -544],
        [608, 576, -544],
        [-608, -576, -512],
        [608, -576, -512],
        [-608, -544, -512],
        [608, -544, -512],
        [-608, -512, -512],
        [608, -512, -512],
        [-608, -480, -512],
        [608, -480, -512],
        [-608, -448, -512],
        [608, -448, -512],
        [-608, -416, -512],
        [608, -416, -512],
        [-608, -384, -512],
        [608, -384, -512],
        [-608, -352, -512],
        [608, -352, -512],
        [-608, -320, -512],
        [608, -320, -512],
        [-608, -288, -512],
        [608, -288, -512],
        [-608, -256, -512],
        [608, -256, -512],
        [-608, -224, -512],
        [608, -224, -512],
        [-608, -192, -512],
        [608, -192, -512],
        [-608, -160, -512],
        [608, -160, -512],
        [-608, -128, -512],
        [608, -128, -512],
        [-608, -96, -512],
        [608, -96, -512],
        [-608, -64, -512],
        [608, -64, -512],
        [-608, -32, -512],
        [608, -32, -512],
        [-608, 0, -512],
        [608, 0, -512],
        [-608, 32, -512],
        [608, 32, -512],
        [-608, 64, -512],
        [608, 64, -512],
        [-608, 96, -512],
        [608, 96, -512],
        [-608, 128, -512],
        [608, 128, -512],
        [-608, 160, -512],
        [608, 160, -512],
        [-608, 192, -512],
        [608, 192, -512],
        [-608, 224, -512],
        [608, 224, -512],
        [-608, 256, -512],
        [608, 256, -512],
        [-608, 288, -512],
        [608, 288, -512],
        [-608, 320, -512],
        [608, 320, -512],
        [-608, 352, -512],
        [608, 352, -512],
        [-608, 384, -512],
        [608, 384, -512],
        [-608, 416, -512],
        [608, 416, -512],
        [-608, 448, -512],
        [608, 448, -512],
        [-608, 480, -512],
        [608, 480, -512],
        [-608, 512, -512],
        [608, 512, -512],
        [-608, 544, -512],
        [608, 544, -512],
        [-608, 576, -512],
        [608, 576, -512],
        [-608, -576, -480],
        [608, -576, -480],
        [-608, -544, -480],
        [608, -544, -480],
        [-608, -512, -480],
        [608, -512, -480],
        [-608, -480, -480],
        [608, -480, -480],
        [-608, -448, -480],
        [608, -448, -480],
        [-608, -416, -480],
        [608, -416, -480],
        [-608, -384, -480],
        [608, -384, -480],
        [-608, -352, -480],
        [608, -352, -480],
        [-608, -320, -480],
        [608, -320, -480],
        [-608, -288, -480],
        [608, -288, -480],
        [-608, -256, -480],
        [608, -256, -480],
        [-608, -224, -480],
        [608, -224, -480],
        [-608, -192, -480],
        [608, -192, -480],
        [-608, -160, -480],
        [608, -160, -480],
        [-608, -128, -480],
        [608, -128, -480],
        [-608, -96, -480],
        [608, -96, -480],
        [-608, -64, -480],
        [608, -64, -480],
        [-608, -32, -480],
        [608, -32, -480],
        [-608, 0, -480],
        [608, 0, -480],
        [-608, 32, -480],
        [608, 32, -480],
        [-608, 64, -480],
        [608, 64, -480],
        [-608, 96, -480],
        [608, 96, -480],
        [-608, 128, -480],
        [608, 128, -480],
        [-608, 160, -480],
        [608, 160, -480],
        [-608, 192, -480],
        [608, 192, -480],
        [-608, 224, -480],
        [608, 224, -480],
        [-608, 256, -480],
        [608, 256, -480],
        [-608, 288, -480],
        [608, 288, -480],
        [-608, 320, -480],
        [608, 320, -480],
        [-608, 352, -480],
        [608, 352, -480],
        [-608, 384, -480],
        [608, 384, -480],
        [-608, 416, -480],
        [608, 416, -480],
        [-608, 448, -480],
        [608, 448, -480],
        [-608, 480, -480],
        [608, 480, -480],
        [-608, 512, -480],
        [608, 512, -480],
        [-608, 544, -480],
        [608, 544, -480],
        [-608, 576, -480],
        [608, 576, -480],
        [-608, -576, -448],
        [608, -576, -448],
        [-608, -544, -448],
        [608, -544, -448],
        [-608, -512, -448],
        [608, -512, -448],
        [-608, -480, -448],
        [608, -480, -448],
        [-608, -448, -448],
        [608, -448, -448],
        [-608, -416, -448],
        [608, -416, -448],
        [-608, -384, -448],
        [608, -384, -448],
        [-608, -352, -448],
        [608, -352, -448],
        [-608, -320, -448],
        [608, -320, -448],
        [-608, -288, -448],
        [608, -288, -448],
        [-608, -256, -448],
        [608, -256, -448],
        [-608, -224, -448],
        [608, -224, -448],
        [-608, -192, -448],
        [608, -192, -448],
        [-608, -160, -448],
        [608, -160, -448],
        [-608, -128, -448],
        [608, -128, -448],
        [-608, -96, -448],
        [608, -96, -448],
        [-608, -64, -448],
        [608, -64, -448],
        [-608, -32, -448],
        [608, -32, -448],
        [-608, 0, -448],
        [608, 0, -448],
        [-608, 32, -448],
        [608, 32, -448],
        [-608, 64, -448],
        [608, 64, -448],
        [-608, 96, -448],
        [608, 96, -448],
        [-608, 128, -448],
        [608, 128, -448],
        [-608, 160, -448],
        [608, 160, -448],
        [-608, 192, -448],
        [608, 192, -448],
        [-608, 224, -448],
        [608, 224, -448],
        [-608, 256, -448],
        [608, 256, -448],
        [-608, 288, -448],
        [608, 288, -448],
        [-608, 320, -448],
        [608, 320, -448],
        [-608, 352, -448],
        [608, 352, -448],
        [-608, 384, -448],
        [608, 384, -448],
        [-608, 416, -448],
        [608, 416, -448],
        [-608, 448, -448],
        [608, 448, -448],
        [-608, 480, -448],
        [608, 480, -448],
        [-608, 512, -448],
        [608, 512, -448],
        [-608, 544, -448],
        [608, 544, -448],
        [-608, 576, -448],
        [608, 576, -448],
        [-608, -576, -416],
        [608, -576, -416],
        [-608, -544, -416],
        [608, -544, -416],
        [-608, -512, -416],
        [608, -512, -416],
        [-608, -480, -416],
        [608, -480, -416],
        [-608, -448, -416],
        [608, -448, -416],
        [-608, -416, -416],
        [608, -416, -416],
        [-608, -384, -416],
        [608, -384, -416],
        [-608, -352, -416],
        [608, -352, -416],
        [-608, -320, -416],
        [608, -320, -416],
        [-608, -288, -416],
        [608, -288, -416],
        [-608, -256, -416],
        [608, -256, -416],
        [-608, -224, -416],
        [608, -224, -416],
        [-608, -192, -416],
        [608, -192, -416],
        [-608, -160, -416],
        [608, -160, -416],
        [-608, -128, -416],
        [608, -128, -416],
        [-608, -96, -416],
        [608, -96, -416],
        [-608, -64, -416],
        [608, -64, -416],
        [-608, -32, -416],
        [608, -32, -416],
        [-608, 0, -416],
        [608, 0, -416],
        [-608, 32, -416],
        [608, 32, -416],
        [-608, 64, -416],
        [608, 64, -416],
        [-608, 96, -416],
        [608, 96, -416],
        [-608, 128, -416],
        [608, 128, -416],
        [-608, 160, -416],
        [608, 160, -416],
        [-608, 192, -416],
        [608, 192, -416],
        [-608, 224, -416],
        [608, 224, -416],
        [-608, 256, -416],
        [608, 256, -416],
        [-608, 288, -416],
        [608, 288, -416],
        [-608, 320, -416],
        [608, 320, -416],
        [-608, 352, -416],
        [608, 352, -416],
        [-608, 384, -416],
        [608, 384, -416],
        [-608, 416, -416],
        [608, 416, -416],
        [-608, 448, -416],
        [608, 448, -416],
        [-608, 480, -416],
        [608, 480, -416],
        [-608, 512, -416],
        [608, 512, -416],
        [-608, 544, -416],
        [608, 544, -416],
        [-608, 576, -416],
        [608, 576, -416],
        [-608, -576, -384],
        [608, -576, -384],
        [-608, -544, -384],
        [608, -544, -384],
        [-608, -512, -384],
        [608, -512, -384],
        [-608, -480, -384],
        [608, -480, -384],
        [-608, -448, -384],
        [608, -448, -384],
        [-608, -416, -384],
        [608, -416, -384],
        [-608, -384, -384],
        [608, -384, -384],
        [-608, -352, -384],
        [608, -352, -384],
        [-608, -320, -384],
        [608, -320, -384],
        [-608, -288, -384],
        [608, -288, -384],
        [-608, -256, -384],
        [608, -256, -384],
        [-608, -224, -384],
        [608, -224, -384],
        [-608, -192, -384],
        [608, -192, -384],
        [-608, -160, -384],
        [608, -160, -384],
        [-608, -128, -384],
        [608, -128, -384],
        [-608, -96, -384],
        [608, -96, -384],
        [-608, -64, -384],
        [608, -64, -384],
        [-608, -32, -384],
        [608, -32, -384],
        [-608, 0, -384],
        [608, 0, -384],
        [-608, 32, -384],
        [608, 32, -384],
        [-608, 64, -384],
        [608, 64, -384],
        [-608, 96, -384],
        [608, 96, -384],
        [-608, 128, -384],
        [608, 128, -384],
        [-608, 160, -384],
        [608, 160, -384],
        [-608, 192, -384],
        [608, 192, -384],
        [-608, 224, -384],
        [608, 224, -384],
        [-608, 256, -384],
        [608, 256, -384],
        [-608, 288, -384],
        [608, 288, -384],
        [-608, 320, -384],
        [608, 320, -384],
        [-608, 352, -384],
        [608, 352, -384],
        [-608, 384, -384],
        [608, 384, -384],
        [-608, 416, -384],
        [608, 416, -384],
        [-608, 448, -384],
        [608, 448, -384],
        [-608, 480, -384],
        [608, 480, -384],
        [-608, 512, -384],
        [608, 512, -384],
        [-608, 544, -384],
        [608, 544, -384],
        [-608, 576, -384],
        [608, 576, -384],
        [-608, -576, -352],
        [608, -576, -352],
        [-608, -544, -352],
        [608, -544, -352],
        [-608, -512, -352],
        [608, -512, -352],
        [-608, -480, -352],
        [608, -480, -352],
        [-608, -448, -352],
        [608, -448, -352],
        [-608, -416, -352],
        [608, -416, -352],
        [-608, -384, -352],
        [608, -384, -352],
        [-608, -352, -352],
        [608, -352, -352],
        [-608, -320, -352],
        [608, -320, -352],
        [-608, -288, -352],
        [608, -288, -352],
        [-608, -256, -352],
        [608, -256, -352],
        [-608, -224, -352],
        [608, -224, -352],
        [-608, -192, -352],
        [608, -192, -352],
        [-608, -160, -352],
        [608, -160, -352],
        [-608, -128, -352],
        [608, -128, -352],
        [-608, -96, -352],
        [608, -96, -352],
        [-608, -64, -352],
        [608, -64, -352],
        [-608, -32, -352],
        [608, -32, -352],
        [-608, 0, -352],
        [608, 0, -352],
        [-608, 32, -352],
        [608, 32, -352],
        [-608, 64, -352],
        [608, 64, -352],
        [-608, 96, -352],
        [608, 96, -352],
        [-608, 128, -352],
        [608, 128, -352],
        [-608, 160, -352],
        [608, 160, -352],
        [-608, 192, -352],
        [608, 192, -352],
        [-608, 224, -352],
        [608, 224, -352],
        [-608, 256, -352],
        [608, 256, -352],
        [-608, 288, -352],
        [608, 288, -352],
        [-608, 320, -352],
        [608, 320, -352],
        [-608, 352, -352],
        [608, 352, -352],
        [-608, 384, -352],
        [608, 384, -352],
        [-608, 416, -352],
        [608, 416, -352],
        [-608, 448, -352],
        [608, 448, -352],
        [-608, 480, -352],
        [608, 480, -352],
        [-608, 512, -352],
        [608, 512, -352],
        [-608, 544, -352],
        [608, 544, -352],
        [-608, 576, -352],
        [608, 576, -352],
        [-608, -576, -320],
        [608, -576, -320],
        [-608, -544, -320],
        [608, -544, -320],
        [-608, -512, -320],
        [608, -512, -320],
        [-608, -480, -320],
        [608, -480, -320],
        [-608, -448, -320],
        [608, -448, -320],
        [-608, -416, -320],
        [608, -416, -320],
        [-608, -384, -320],
        [608, -384, -320],
        [-608, -352, -320],
        [608, -352, -320],
        [-608, -320, -320],
        [608, -320, -320],
        [-608, -288, -320],
        [608, -288, -320],
        [-608, -256, -320],
        [608, -256, -320],
        [-608, -224, -320],
        [608, -224, -320],
        [-608, -192, -320],
        [608, -192, -320],
        [-608, -160, -320],
        [608, -160, -320],
        [-608, -128, -320],
        [608, -128, -320],
        [-608, -96, -320],
        [608, -96, -320],
        [-608, -64, -320],
        [608, -64, -320],
        [-608, -32, -320],
        [608, -32, -320],
        [-608, 0, -320],
        [608, 0, -320],
        [-608, 32, -320],
        [608, 32, -320],
        [-608, 64, -320],
        [608, 64, -320],
        [-608, 96, -320],
        [608, 96, -320],
        [-608, 128, -320],
        [608, 128, -320],
        [-608, 160, -320],
        [608, 160, -320],
        [-608, 192, -320],
        [608, 192, -320],
        [-608, 224, -320],
        [608, 224, -320],
        [-608, 256, -320],
        [608, 256, -320],
        [-608, 288, -320],
        [608, 288, -320],
        [-608, 320, -320],
        [608, 320, -320],
        [-608, 352, -320],
        [608, 352, -320],
        [-608, 384, -320],
        [608, 384, -320],
        [-608, 416, -320],
        [608, 416, -320],
        [-608, 448, -320],
        [608, 448, -320],
        [-608, 480, -320],
        [608, 480, -320],
        [-608, 512, -320],
        [608, 512, -320],
        [-608, 544, -320],
        [608, 544, -320],
        [-608, 576, -320],
        [608, 576, -320],
        [-608, -576, -288],
        [608, -576, -288],
        [-608, -544, -288],
        [608, -544, -288],
        [-608, -512, -288],
        [608, -512, -288],
        [-608, -480, -288],
        [608, -480, -288],
        [-608, -448, -288],
        [608, -448, -288],
        [-608, -416, -288],
        [608, -416, -288],
        [-608, -384, -288],
        [608, -384, -288],
        [-608, -352, -288],
        [608, -352, -288],
        [-608, -320, -288],
        [608, -320, -288],
        [-608, -288, -288],
        [608, -288, -288],
        [-608, -256, -288],
        [608, -256, -288],
        [-608, -224, -288],
        [608, -224, -288],
        [-608, -192, -288],
        [608, -192, -288],
        [-608, -160, -288],
        [608, -160, -288],
        [-608, -128, -288],
        [608, -128, -288],
        [-608, -96, -288],
        [608, -96, -288],
        [-608, -64, -288],
        [608, -64, -288],
        [-608, -32, -288],
        [608, -32, -288],
        [-608, 0, -288],
        [608, 0, -288],
        [-608, 32, -288],
        [608, 32, -288],
        [-608, 64, -288],
        [608, 64, -288],
        [-608, 96, -288],
        [608, 96, -288],
        [-608, 128, -288],
        [608, 128, -288],
        [-608, 160, -288],
        [608, 160, -288],
        [-608, 192, -288],
        [608, 192, -288],
        [-608, 224, -288],
        [608, 224, -288],
        [-608, 256, -288],
        [608, 256, -288],
        [-608, 288, -288],
        [608, 288, -288],
        [-608, 320, -288],
        [608, 320, -288],
        [-608, 352, -288],
        [608, 352, -288],
        [-608, 384, -288],
        [608, 384, -288],
        [-608, 416, -288],
        [608, 416, -288],
        [-608, 448, -288],
        [608, 448, -288],
        [-608, 480, -288],
        [608, 480, -288],
        [-608, 512, -288],
        [608, 512, -288],
        [-608, 544, -288],
        [608, 544, -288],
        [-608, 576, -288],
        [608, 576, -288],
        [-608, -576, -256],
        [608, -576, -256],
        [-608, -544, -256],
        [608, -544, -256],
        [-608, -512, -256],
        [608, -512, -256],
        [-608, -480, -256],
        [608, -480, -256],
        [-608, -448, -256],
        [608, -448, -256],
        [-608, -416, -256],
        [608, -416, -256],
        [-608, -384, -256],
        [608, -384, -256],
        [-608, -352, -256],
        [608, -352, -256],
        [-608, -320, -256],
        [608, -320, -256],
        [-608, -288, -256],
        [608, -288, -256],
        [-608, -256, -256],
        [608, -256, -256],
        [-608, -224, -256],
        [608, -224, -256],
        [-608, -192, -256],
        [608, -192, -256],
        [-608, -160, -256],
        [608, -160, -256],
        [-608, -128, -256],
        [608, -128, -256],
        [-608, -96, -256],
        [608, -96, -256],
        [-608, -64, -256],
        [608, -64, -256],
        [-608, -32, -256],
        [608, -32, -256],
        [-608, 0, -256],
        [608, 0, -256],
        [-608, 32, -256],
        [608, 32, -256],
        [-608, 64, -256],
        [608, 64, -256],
        [-608, 96, -256],
        [608, 96, -256],
        [-608, 128, -256],
        [608, 128, -256],
        [-608, 160, -256],
        [608, 160, -256],
        [-608, 192, -256],
        [608, 192, -256],
        [-608, 224, -256],
        [608, 224, -256],
        [-608, 256, -256],
        [608, 256, -256],
        [-608, 288, -256],
        [608, 288, -256],
        [-608, 320, -256],
        [608, 320, -256],
        [-608, 352, -256],
        [608, 352, -256],
        [-608, 384, -256],
        [608, 384, -256],
        [-608, 416, -256],
        [608, 416, -256],
        [-608, 448, -256],
        [608, 448, -256],
        [-608, 480, -256],
        [608, 480, -256],
        [-608, 512, -256],
        [608, 512, -256],
        [-608, 544, -256],
        [608, 544, -256],
        [-608, 576, -256],
        [608, 576, -256],
        [-608, -576, -224],
        [608, -576, -224],
        [-608, -544, -224],
        [608, -544, -224],
        [-608, -512, -224],
        [608, -512, -224],
        [-608, -480, -224],
        [608, -480, -224],
        [-608, -448, -224],
        [608, -448, -224],
        [-608, -416, -224],
        [608, -416, -224],
        [-608, -384, -224],
        [608, -384, -224],
        [-608, -352, -224],
        [608, -352, -224],
        [-608, -320, -224],
        [608, -320, -224],
        [-608, -288, -224],
        [608, -288, -224],
        [-608, -256, -224],
        [608, -256, -224],
        [-608, -224, -224],
        [608, -224, -224],
        [-608, -192, -224],
        [608, -192, -224],
        [-608, -160, -224],
        [608, -160, -224],
        [-608, -128, -224],
        [608, -128, -224],
        [-608, -96, -224],
        [608, -96, -224],
        [-608, -64, -224],
        [608, -64, -224],
        [-608, -32, -224],
        [608, -32, -224],
        [-608, 0, -224],
        [608, 0, -224],
        [-608, 32, -224],
        [608, 32, -224],
        [-608, 64, -224],
        [608, 64, -224],
        [-608, 96, -224],
        [608, 96, -224],
        [-608, 128, -224],
        [608, 128, -224],
        [-608, 160, -224],
        [608, 160, -224],
        [-608, 192, -224],
        [608, 192, -224],
        [-608, 224, -224],
        [608, 224, -224],
        [-608, 256, -224],
        [608, 256, -224],
        [-608, 288, -224],
        [608, 288, -224],
        [-608, 320, -224],
        [608, 320, -224],
        [-608, 352, -224],
        [608, 352, -224],
        [-608, 384, -224],
        [608, 384, -224],
        [-608, 416, -224],
        [608, 416, -224],
        [-608, 448, -224],
        [608, 448, -224],
        [-608, 480, -224],
        [608, 480, -224],
        [-608, 512, -224],
        [608, 512, -224],
        [-608, 544, -224],
        [608, 544, -224],
        [-608, 576, -224],
        [608, 576, -224],
        [-608, -576, -192],
        [608, -576, -192],
        [-608, -544, -192],
        [608, -544, -192],
        [-608, -512, -192],
        [608, -512, -192],
        [-608, -480, -192],
        [608, -480, -192],
        [-608, -448, -192],
        [608, -448, -192],
        [-608, -416, -192],
        [608, -416, -192],
        [-608, -384, -192],
        [608, -384, -192],
        [-608, -352, -192],
        [608, -352, -192],
        [-608, -320, -192],
        [608, -320, -192],
        [-608, -288, -192],
        [608, -288, -192],
        [-608, -256, -192],
        [608, -256, -192],
        [-608, -224, -192],
        [608, -224, -192],
        [-608, -192, -192],
        [608, -192, -192],
        [-608, -160, -192],
        [608, -160, -192],
        [-608, -128, -192],
        [608, -128, -192],
        [-608, -96, -192],
        [608, -96, -192],
        [-608, -64, -192],
        [608, -64, -192],
        [-608, -32, -192],
        [608, -32, -192],
        [-608, 0, -192],
        [608, 0, -192],
        [-608, 32, -192],
        [608, 32, -192],
        [-608, 64, -192],
        [608, 64, -192],
        [-608, 96, -192],
        [608, 96, -192],
        [-608, 128, -192],
        [608, 128, -192],
        [-608, 160, -192],
        [608, 160, -192],
        [-608, 192, -192],
        [608, 192, -192],
        [-608, 224, -192],
        [608, 224, -192],
        [-608, 256, -192],
        [608, 256, -192],
        [-608, 288, -192],
        [608, 288, -192],
        [-608, 320, -192],
        [608, 320, -192],
        [-608, 352, -192],
        [608, 352, -192],
        [-608, 384, -192],
        [608, 384, -192],
        [-608, 416, -192],
        [608, 416, -192],
        [-608, 448, -192],
        [608, 448, -192],
        [-608, 480, -192],
        [608, 480, -192],
        [-608, 512, -192],
        [608, 512, -192],
        [-608, 544, -192],
        [608, 544, -192],
        [-608, 576, -192],
        [608, 576, -192],
        [-608, -576, -160],
        [608, -576, -160],
        [-608, -544, -160],
        [608, -544, -160],
        [-608, -512, -160],
        [608, -512, -160],
        [-608, -480, -160],
        [608, -480, -160],
        [-608, -448, -160],
        [608, -448, -160],
        [-608, -416, -160],
        [608, -416, -160],
        [-608, -384, -160],
        [608, -384, -160],
        [-608, -352, -160],
        [608, -352, -160],
        [-608, -320, -160],
        [608, -320, -160],
        [-608, -288, -160],
        [608, -288, -160],
        [-608, -256, -160],
        [608, -256, -160],
        [-608, -224, -160],
        [608, -224, -160],
        [-608, -192, -160],
        [608, -192, -160],
        [-608, -160, -160],
        [608, -160, -160],
        [-608, -128, -160],
        [608, -128, -160],
        [-608, -96, -160],
        [608, -96, -160],
        [-608, -64, -160],
        [608, -64, -160],
        [-608, -32, -160],
        [608, -32, -160],
        [-608, 0, -160],
        [608, 0, -160],
        [-608, 32, -160],
        [608, 32, -160],
        [-608, 64, -160],
        [608, 64, -160],
        [-608, 96, -160],
        [608, 96, -160],
        [-608, 128, -160],
        [608, 128, -160],
        [-608, 160, -160],
        [608, 160, -160],
        [-608, 192, -160],
        [608, 192, -160],
        [-608, 224, -160],
        [608, 224, -160],
        [-608, 256, -160],
        [608, 256, -160],
        [-608, 288, -160],
        [608, 288, -160],
        [-608, 320, -160],
        [608, 320, -160],
        [-608, 352, -160],
        [608, 352, -160],
        [-608, 384, -160],
        [608, 384, -160],
        [-608, 416, -160],
        [608, 416, -160],
        [-608, 448, -160],
        [608, 448, -160],
        [-608, 480, -160],
        [608, 480, -160],
        [-608, 512, -160],
        [608, 512, -160],
        [-608, 544, -160],
        [608, 544, -160],
        [-608, 576, -160],
        [608, 576, -160],
        [-608, -576, -128],
        [608, -576, -128],
        [-608, -544, -128],
        [608, -544, -128],
        [-608, -512, -128],
        [608, -512, -128],
        [-608, -480, -128],
        [608, -480, -128],
        [-608, -448, -128],
        [608, -448, -128],
        [-608, -416, -128],
        [608, -416, -128],
        [-608, -384, -128],
        [608, -384, -128],
        [-608, -352, -128],
        [608, -352, -128],
        [-608, -320, -128],
        [608, -320, -128],
        [-608, -288, -128],
        [608, -288, -128],
        [-608, -256, -128],
        [608, -256, -128],
        [-608, -224, -128],
        [608, -224, -128],
        [-608, -192, -128],
        [608, -192, -128],
        [-608, -160, -128],
        [608, -160, -128],
        [-608, -128, -128],
        [608, -128, -128],
        [-608, -96, -128],
        [608, -96, -128],
        [-608, -64, -128],
        [608, -64, -128],
        [-608, -32, -128],
        [608, -32, -128],
        [-608, 0, -128],
        [608, 0, -128],
        [-608, 32, -128],
        [608, 32, -128],
        [-608, 64, -128],
        [608, 64, -128],
        [-608, 96, -128],
        [608, 96, -128],
        [-608, 128, -128],
        [608, 128, -128],
        [-608, 160, -128],
        [608, 160, -128],
        [-608, 192, -128],
        [608, 192, -128],
        [-608, 224, -128],
        [608, 224, -128],
        [-608, 256, -128],
        [608, 256, -128],
        [-608, 288, -128],
        [608, 288, -128],
        [-608, 320, -128],
        [608, 320, -128],
        [-608, 352, -128],
        [608, 352, -128],
        [-608, 384, -128],
        [608, 384, -128],
        [-608, 416, -128],
        [608, 416, -128],
        [-608, 448, -128],
        [608, 448, -128],
        [-608, 480, -128],
        [608, 480, -128],
        [-608, 512, -128],
        [608, 512, -128],
        [-608, 544, -128],
        [608, 544, -128],
        [-608, 576, -128],
        [608, 576, -128],
        [-608, -576, -96],
        [608, -576, -96],
        [-608, -544, -96],
        [608, -544, -96],
        [-608, -512, -96],
        [608, -512, -96],
        [-608, -480, -96],
        [608, -480, -96],
        [-608, -448, -96],
        [608, -448, -96],
        [-608, -416, -96],
        [608, -416, -96],
        [-608, -384, -96],
        [608, -384, -96],
        [-608, -352, -96],
        [608, -352, -96],
        [-608, -320, -96],
        [608, -320, -96],
        [-608, -288, -96],
        [608, -288, -96],
        [-608, -256, -96],
        [608, -256, -96],
        [-608, -224, -96],
        [608, -224, -96],
        [-608, -192, -96],
        [608, -192, -96],
        [-608, -160, -96],
        [608, -160, -96],
        [-608, -128, -96],
        [608, -128, -96],
        [-608, -96, -96],
        [608, -96, -96],
        [-608, -64, -96],
        [608, -64, -96],
        [-608, -32, -96],
        [608, -32, -96],
        [-608, 0, -96],
        [608, 0, -96],
        [-608, 32, -96],
        [608, 32, -96],
        [-608, 64, -96],
        [608, 64, -96],
        [-608, 96, -96],
        [608, 96, -96],
        [-608, 128, -96],
        [608, 128, -96],
        [-608, 160, -96],
        [608, 160, -96],
        [-608, 192, -96],
        [608, 192, -96],
        [-608, 224, -96],
        [608, 224, -96],
        [-608, 256, -96],
        [608, 256, -96],
        [-608, 288, -96],
        [608, 288, -96],
        [-608, 320, -96],
        [608, 320, -96],
        [-608, 352, -96],
        [608, 352, -96],
        [-608, 384, -96],
        [608, 384, -96],
        [-608, 416, -96],
        [608, 416, -96],
        [-608, 448, -96],
        [608, 448, -96],
        [-608, 480, -96],
        [608, 480, -96],
        [-608, 512, -96],
        [608, 512, -96],
        [-608, 544, -96],
        [608, 544, -96],
        [-608, 576, -96],
        [608, 576, -96],
        [-608, -576, -64],
        [608, -576, -64],
        [-608, -544, -64],
        [608, -544, -64],
        [-608, -512, -64],
        [608, -512, -64],
        [-608, -480, -64],
        [608, -480, -64],
        [-608, -448, -64],
        [608, -448, -64],
        [-608, -416, -64],
        [608, -416, -64],
        [-608, -384, -64],
        [608, -384, -64],
        [-608, -352, -64],
        [608, -352, -64],
        [-608, -320, -64],
        [608, -320, -64],
        [-608, -288, -64],
        [608, -288, -64],
        [-608, -256, -64],
        [608, -256, -64],
        [-608, -224, -64],
        [608, -224, -64],
        [-608, -192, -64],
        [608, -192, -64],
        [-608, -160, -64],
        [608, -160, -64],
        [-608, -128, -64],
        [608, -128, -64],
        [-608, -96, -64],
        [608, -96, -64],
        [-608, -64, -64],
        [608, -64, -64],
        [-608, -32, -64],
        [608, -32, -64],
        [-608, 0, -64],
        [608, 0, -64],
        [-608, 32, -64],
        [608, 32, -64],
        [-608, 64, -64],
        [608, 64, -64],
        [-608, 96, -64],
        [608, 96, -64],
        [-608, 128, -64],
        [608, 128, -64],
        [-608, 160, -64],
        [608, 160, -64],
        [-608, 192, -64],
        [608, 192, -64],
        [-608, 224, -64],
        [608, 224, -64],
        [-608, 256, -64],
        [608, 256, -64],
        [-608, 288, -64],
        [608, 288, -64],
        [-608, 320, -64],
        [608, 320, -64],
        [-608, 352, -64],
        [608, 352, -64],
        [-608, 384, -64],
        [608, 384, -64],
        [-608, 416, -64],
        [608, 416, -64],
        [-608, 448, -64],
        [608, 448, -64],
        [-608, 480, -64],
        [608, 480, -64],
        [-608, 512, -64],
        [608, 512, -64],
        [-608, 544, -64],
        [608, 544, -64],
        [-608, 576, -64],
        [608, 576, -64],
        [-608, -576, -32],
        [608, -576, -32],
        [-608, -544, -32],
        [608, -544, -32],
        [-608, -512, -32],
        [608, -512, -32],
        [-608, -480, -32],
        [608, -480, -32],
        [-608, -448, -32],
        [608, -448, -32],
        [-608, -416, -32],
        [608, -416, -32],
        [-608, -384, -32],
        [608, -384, -32],
        [-608, -352, -32],
        [608, -352, -32],
        [-608, -320, -32],
        [608, -320, -32],
        [-608, -288, -32],
        [608, -288, -32],
        [-608, -256, -32],
        [608, -256, -32],
        [-608, -224, -32],
        [608, -224, -32],
        [-608, -192, -32],
        [608, -192, -32],
        [-608, -160, -32],
        [608, -160, -32],
        [-608, -128, -32],
        [608, -128, -32],
        [-608, -96, -32],
        [608, -96, -32],
        [-608, -64, -32],
        [608, -64, -32],
        [-608, -32, -32],
        [608, -32, -32],
        [-608, 0, -32],
        [608, 0, -32],
        [-608, 32, -32],
        [608, 32, -32],
        [-608, 64, -32],
        [608, 64, -32],
        [-608, 96, -32],
        [608, 96, -32],
        [-608, 128, -32],
        [608, 128, -32],
        [-608, 160, -32],
        [608, 160, -32],
        [-608, 192, -32],
        [608, 192, -32],
        [-608, 224, -32],
        [608, 224, -32],
        [-608, 256, -32],
        [608, 256, -32],
        [-608, 288, -32],
        [608, 288, -32],
        [-608, 320, -32],
        [608, 320, -32],
        [-608, 352, -32],
        [608, 352, -32],
        [-608, 384, -32],
        [608, 384, -32],
        [-608, 416, -32],
        [608, 416, -32],
        [-608, 448, -32],
        [608, 448, -32],
        [-608, 480, -32],
        [608, 480, -32],
        [-608, 512, -32],
        [608, 512, -32],
        [-608, 544, -32],
        [608, 544, -32],
        [-608, 576, -32],
        [608, 576, -32],
        [-608, -576, 0],
        [608, -576, 0],
        [-608, -544, 0],
        [608, -544, 0],
        [-608, -512, 0],
        [608, -512, 0],
        [-608, -480, 0],
        [608, -480, 0],
        [-608, -448, 0],
        [608, -448, 0],
        [-608, -416, 0],
        [608, -416, 0],
        [-608, -384, 0],
        [608, -384, 0],
        [-608, -352, 0],
        [608, -352, 0],
        [-608, -320, 0],
        [608, -320, 0],
        [-608, -288, 0],
        [608, -288, 0],
        [-608, -256, 0],
        [608, -256, 0],
        [-608, -224, 0],
        [608, -224, 0],
        [-608, -192, 0],
        [608, -192, 0],
        [-608, -160, 0],
        [608, -160, 0],
        [-608, -128, 0],
        [608, -128, 0],
        [-608, -96, 0],
        [608, -96, 0],
        [-608, -64, 0],
        [608, -64, 0],
        [-608, -32, 0],
        [608, -32, 0],
        [-608, 0, 0],
        [608, 0, 0],
        [-608, 32, 0],
        [608, 32, 0],
        [-608, 64, 0],
        [608, 64, 0],
        [-608, 96, 0],
        [608, 96, 0],
        [-608, 128, 0],
        [608, 128, 0],
        [-608, 160, 0],
        [608, 160, 0],
        [-608, 192, 0],
        [608, 192, 0],
        [-608, 224, 0],
        [608, 224, 0],
        [-608, 256, 0],
        [608, 256, 0],
        [-608, 288, 0],
        [608, 288, 0],
        [-608, 320, 0],
        [608, 320, 0],
        [-608, 352, 0],
        [608, 352, 0],
        [-608, 384, 0],
        [608, 384, 0],
        [-608, 416, 0],
        [608, 416, 0],
        [-608, 448, 0],
        [608, 448, 0],
        [-608, 480, 0],
        [608, 480, 0],
        [-608, 512, 0],
        [608, 512, 0],
        [-608, 544, 0],
        [608, 544, 0],
        [-608, 576, 0],
        [608, 576, 0],
        [-608, -576, 32],
        [608, -576, 32],
        [-608, -544, 32],
        [608, -544, 32],
        [-608, -512, 32],
        [608, -512, 32],
        [-608, -480, 32],
        [608, -480, 32],
        [-608, -448, 32],
        [608, -448, 32],
        [-608, -416, 32],
        [608, -416, 32],
        [-608, -384, 32],
        [608, -384, 32],
        [-608, -352, 32],
        [608, -352, 32],
        [-608, -320, 32],
        [608, -320, 32],
        [-608, -288, 32],
        [608, -288, 32],
        [-608, -256, 32],
        [608, -256, 32],
        [-608, -224, 32],
        [608, -224, 32],
        [-608, -192, 32],
        [608, -192, 32],
        [-608, -160, 32],
        [608, -160, 32],
        [-608, -128, 32],
        [608, -128, 32],
        [-608, -96, 32],
        [608, -96, 32],
        [-608, -64, 32],
        [608, -64, 32],
        [-608, -32, 32],
        [608, -32, 32],
        [-608, 0, 32],
        [608, 0, 32],
        [-608, 32, 32],
        [608, 32, 32],
        [-608, 64, 32],
        [608, 64, 32],
        [-608, 96, 32],
        [608, 96, 32],
        [-608, 128, 32],
        [608, 128, 32],
        [-608, 160, 32],
        [608, 160, 32],
        [-608, 192, 32],
        [608, 192, 32],
        [-608, 224, 32],
        [608, 224, 32],
        [-608, 256, 32],
        [608, 256, 32],
        [-608, 288, 32],
        [608, 288, 32],
        [-608, 320, 32],
        [608, 320, 32],
        [-608, 352, 32],
        [608, 352, 32],
        [-608, 384, 32],
        [608, 384, 32],
        [-608, 416, 32],
        [608, 416, 32],
        [-608, 448, 32],
        [608, 448, 32],
        [-608, 480, 32],
        [608, 480, 32],
        [-608, 512, 32],
        [608, 512, 32],
        [-608, 544, 32],
        [608, 544, 32],
        [-608, 576, 32],
        [608, 576, 32],
        [-608, -576, 64],
        [608, -576, 64],
        [-608, -544, 64],
        [608, -544, 64],
        [-608, -512, 64],
        [608, -512, 64],
        [-608, -480, 64],
        [608, -480, 64],
        [-608, -448, 64],
        [608, -448, 64],
        [-608, -416, 64],
        [608, -416, 64],
        [-608, -384, 64],
        [608, -384, 64],
        [-608, -352, 64],
        [608, -352, 64],
        [-608, -320, 64],
        [608, -320, 64],
        [-608, -288, 64],
        [608, -288, 64],
        [-608, -256, 64],
        [608, -256, 64],
        [-608, -224, 64],
        [608, -224, 64],
        [-608, -192, 64],
        [608, -192, 64],
        [-608, -160, 64],
        [608, -160, 64],
        [-608, -128, 64],
        [608, -128, 64],
        [-608, -96, 64],
        [608, -96, 64],
        [-608, -64, 64],
        [608, -64, 64],
        [-608, -32, 64],
        [608, -32, 64],
        [-608, 0, 64],
        [608, 0, 64],
        [-608, 32, 64],
        [608, 32, 64],
        [-608, 64, 64],
        [608, 64, 64],
        [-608, 96, 64],
        [608, 96, 64],
        [-608, 128, 64],
        [608, 128, 64],
        [-608, 160, 64],
        [608, 160, 64],
        [-608, 192, 64],
        [608, 192, 64],
        [-608, 224, 64],
        [608, 224, 64],
        [-608, 256, 64],
        [608, 256, 64],
        [-608, 288, 64],
        [608, 288, 64],
        [-608, 320, 64],
        [608, 320, 64],
        [-608, 352, 64],
        [608, 352, 64],
        [-608, 384, 64],
        [608, 384, 64],
        [-608, 416, 64],
        [608, 416, 64],
        [-608, 448, 64],
        [608, 448, 64],
        [-608, 480, 64],
        [608, 480, 64],
        [-608, 512, 64],
        [608, 512, 64],
        [-608, 544, 64],
        [608, 544, 64],
        [-608, 576, 64],
        [608, 576, 64],
        [-608, -576, 96],
        [608, -576, 96],
        [-608, -544, 96],
        [608, -544, 96],
        [-608, -512, 96],
        [608, -512, 96],
        [-608, -480, 96],
        [608, -480, 96],
        [-608, -448, 96],
        [608, -448, 96],
        [-608, -416, 96],
        [608, -416, 96],
        [-608, -384, 96],
        [608, -384, 96],
        [-608, -352, 96],
        [608, -352, 96],
        [-608, -320, 96],
        [608, -320, 96],
        [-608, -288, 96],
        [608, -288, 96],
        [-608, -256, 96],
        [608, -256, 96],
        [-608, -224, 96],
        [608, -224, 96],
        [-608, -192, 96],
        [608, -192, 96],
        [-608, -160, 96],
        [608, -160, 96],
        [-608, -128, 96],
        [608, -128, 96],
        [-608, -96, 96],
        [608, -96, 96],
        [-608, -64, 96],
        [608, -64, 96],
        [-608, -32, 96],
        [608, -32, 96],
        [-608, 0, 96],
        [608, 0, 96],
        [-608, 32, 96],
        [608, 32, 96],
        [-608, 64, 96],
        [608, 64, 96],
        [-608, 96, 96],
        [608, 96, 96],
        [-608, 128, 96],
        [608, 128, 96],
        [-608, 160, 96],
        [608, 160, 96],
        [-608, 192, 96],
        [608, 192, 96],
        [-608, 224, 96],
        [608, 224, 96],
        [-608, 256, 96],
        [608, 256, 96],
        [-608, 288, 96],
        [608, 288, 96],
        [-608, 320, 96],
        [608, 320, 96],
        [-608, 352, 96],
        [608, 352, 96],
        [-608, 384, 96],
        [608, 384, 96],
        [-608, 416, 96],
        [608, 416, 96],
        [-608, 448, 96],
        [608, 448, 96],
        [-608, 480, 96],
        [608, 480, 96],
        [-608, 512, 96],
        [608, 512, 96],
        [-608, 544, 96],
        [608, 544, 96],
        [-608, 576, 96],
        [608, 576, 96],
        [-608, -576, 128],
        [608, -576, 128],
        [-608, -544, 128],
        [608, -544, 128],
        [-608, -512, 128],
        [608, -512, 128],
        [-608, -480, 128],
        [608, -480, 128],
        [-608, -448, 128],
        [608, -448, 128],
        [-608, -416, 128],
        [608, -416, 128],
        [-608, -384, 128],
        [608, -384, 128],
        [-608, -352, 128],
        [608, -352, 128],
        [-608, -320, 128],
        [608, -320, 128],
        [-608, -288, 128],
        [608, -288, 128],
        [-608, -256, 128],
        [608, -256, 128],
        [-608, -224, 128],
        [608, -224, 128],
        [-608, -192, 128],
        [608, -192, 128],
        [-608, -160, 128],
        [608, -160, 128],
        [-608, -128, 128],
        [608, -128, 128],
        [-608, -96, 128],
        [608, -96, 128],
        [-608, -64, 128],
        [608, -64, 128],
        [-608, -32, 128],
        [608, -32, 128],
        [-608, 0, 128],
        [608, 0, 128],
        [-608, 32, 128],
        [608, 32, 128],
        [-608, 64, 128],
        [608, 64, 128],
        [-608, 96, 128],
        [608, 96, 128],
        [-608, 128, 128],
        [608, 128, 128],
        [-608, 160, 128],
        [608, 160, 128],
        [-608, 192, 128],
        [608, 192, 128],
        [-608, 224, 128],
        [608, 224, 128],
        [-608, 256, 128],
        [608, 256, 128],
        [-608, 288, 128],
        [608, 288, 128],
        [-608, 320, 128],
        [608, 320, 128],
        [-608, 352, 128],
        [608, 352, 128],
        [-608, 384, 128],
        [608, 384, 128],
        [-608, 416, 128],
        [608, 416, 128],
        [-608, 448, 128],
        [608, 448, 128],
        [-608, 480, 128],
        [608, 480, 128],
        [-608, 512, 128],
        [608, 512, 128],
        [-608, 544, 128],
        [608, 544, 128],
        [-608, 576, 128],
        [608, 576, 128],
        [-608, -576, 160],
        [608, -576, 160],
        [-608, -544, 160],
        [608, -544, 160],
        [-608, -512, 160],
        [608, -512, 160],
        [-608, -480, 160],
        [608, -480, 160],
        [-608, -448, 160],
        [608, -448, 160],
        [-608, -416, 160],
        [608, -416, 160],
        [-608, -384, 160],
        [608, -384, 160],
        [-608, -352, 160],
        [608, -352, 160],
        [-608, -320, 160],
        [608, -320, 160],
        [-608, -288, 160],
        [608, -288, 160],
        [-608, -256, 160],
        [608, -256, 160],
        [-608, -224, 160],
        [608, -224, 160],
        [-608, -192, 160],
        [608, -192, 160],
        [-608, -160, 160],
        [608, -160, 160],
        [-608, -128, 160],
        [608, -128, 160],
        [-608, -96, 160],
        [608, -96, 160],
        [-608, -64, 160],
        [608, -64, 160],
        [-608, -32, 160],
        [608, -32, 160],
        [-608, 0, 160],
        [608, 0, 160],
        [-608, 32, 160],
        [608, 32, 160],
        [-608, 64, 160],
        [608, 64, 160],
        [-608, 96, 160],
        [608, 96, 160],
        [-608, 128, 160],
        [608, 128, 160],
        [-608, 160, 160],
        [608, 160, 160],
        [-608, 192, 160],
        [608, 192, 160],
        [-608, 224, 160],
        [608, 224, 160],
        [-608, 256, 160],
        [608, 256, 160],
        [-608, 288, 160],
        [608, 288, 160],
        [-608, 320, 160],
        [608, 320, 160],
        [-608, 352, 160],
        [608, 352, 160],
        [-608, 384, 160],
        [608, 384, 160],
        [-608, 416, 160],
        [608, 416, 160],
        [-608, 448, 160],
        [608, 448, 160],
        [-608, 480, 160],
        [608, 480, 160],
        [-608, 512, 160],
        [608, 512, 160],
        [-608, 544, 160],
        [608, 544, 160],
        [-608, 576, 160],
        [608, 576, 160],
        [-608, -576, 192],
        [608, -576, 192],
        [-608, -544, 192],
        [608, -544, 192],
        [-608, -512, 192],
        [608, -512, 192],
        [-608, -480, 192],
        [608, -480, 192],
        [-608, -448, 192],
        [608, -448, 192],
        [-608, -416, 192],
        [608, -416, 192],
        [-608, -384, 192],
        [608, -384, 192],
        [-608, -352, 192],
        [608, -352, 192],
        [-608, -320, 192],
        [608, -320, 192],
        [-608, -288, 192],
        [608, -288, 192],
        [-608, -256, 192],
        [608, -256, 192],
        [-608, -224, 192],
        [608, -224, 192],
        [-608, -192, 192],
        [608, -192, 192],
        [-608, -160, 192],
        [608, -160, 192],
        [-608, -128, 192],
        [608, -128, 192],
        [-608, -96, 192],
        [608, -96, 192],
        [-608, -64, 192],
        [608, -64, 192],
        [-608, -32, 192],
        [608, -32, 192],
        [-608, 0, 192],
        [608, 0, 192],
        [-608, 32, 192],
        [608, 32, 192],
        [-608, 64, 192],
        [608, 64, 192],
        [-608, 96, 192],
        [608, 96, 192],
        [-608, 128, 192],
        [608, 128, 192],
        [-608, 160, 192],
        [608, 160, 192],
        [-608, 192, 192],
        [608, 192, 192],
        [-608, 224, 192],
        [608, 224, 192],
        [-608, 256, 192],
        [608, 256, 192],
        [-608, 288, 192],
        [608, 288, 192],
        [-608, 320, 192],
        [608, 320, 192],
        [-608, 352, 192],
        [608, 352, 192],
        [-608, 384, 192],
        [608, 384, 192],
        [-608, 416, 192],
        [608, 416, 192],
        [-608, 448, 192],
        [608, 448, 192],
        [-608, 480, 192],
        [608, 480, 192],
        [-608, 512, 192],
        [608, 512, 192],
        [-608, 544, 192],
        [608, 544, 192],
        [-608, 576, 192],
        [608, 576, 192],
        [-608, -576, 224],
        [608, -576, 224],
        [-608, -544, 224],
        [608, -544, 224],
        [-608, -512, 224],
        [608, -512, 224],
        [-608, -480, 224],
        [608, -480, 224],
        [-608, -448, 224],
        [608, -448, 224],
        [-608, -416, 224],
        [608, -416, 224],
        [-608, -384, 224],
        [608, -384, 224],
        [-608, -352, 224],
        [608, -352, 224],
        [-608, -320, 224],
        [608, -320, 224],
        [-608, -288, 224],
        [608, -288, 224],
        [-608, -256, 224],
        [608, -256, 224],
        [-608, -224, 224],
        [608, -224, 224],
        [-608, -192, 224],
        [608, -192, 224],
        [-608, -160, 224],
        [608, -160, 224],
        [-608, -128, 224],
        [608, -128, 224],
        [-608, -96, 224],
        [608, -96, 224],
        [-608, -64, 224],
        [608, -64, 224],
        [-608, -32, 224],
        [608, -32, 224],
        [-608, 0, 224],
        [608, 0, 224],
        [-608, 32, 224],
        [608, 32, 224],
        [-608, 64, 224],
        [608, 64, 224],
        [-608, 96, 224],
        [608, 96, 224],
        [-608, 128, 224],
        [608, 128, 224],
        [-608, 160, 224],
        [608, 160, 224],
        [-608, 192, 224],
        [608, 192, 224],
        [-608, 224, 224],
        [608, 224, 224],
        [-608, 256, 224],
        [608, 256, 224],
        [-608, 288, 224],
        [608, 288, 224],
        [-608, 320, 224],
        [608, 320, 224],
        [-608, 352, 224],
        [608, 352, 224],
        [-608, 384, 224],
        [608, 384, 224],
        [-608, 416, 224],
        [608, 416, 224],
        [-608, 448, 224],
        [608, 448, 224],
        [-608, 480, 224],
        [608, 480, 224],
        [-608, 512, 224],
        [608, 512, 224],
        [-608, 544, 224],
        [608, 544, 224],
        [-608, 576, 224],
        [608, 576, 224],
        [-608, -576, 256],
        [608, -576, 256],
        [-608, -544, 256],
        [608, -544, 256],
        [-608, -512, 256],
        [608, -512, 256],
        [-608, -480, 256],
        [608, -480, 256],
        [-608, -448, 256],
        [608, -448, 256],
        [-608, -416, 256],
        [608, -416, 256],
        [-608, -384, 256],
        [608, -384, 256],
        [-608, -352, 256],
        [608, -352, 256],
        [-608, -320, 256],
        [608, -320, 256],
        [-608, -288, 256],
        [608, -288, 256],
        [-608, -256, 256],
        [608, -256, 256],
        [-608, -224, 256],
        [608, -224, 256],
        [-608, -192, 256],
        [608, -192, 256],
        [-608, -160, 256],
        [608, -160, 256],
        [-608, -128, 256],
        [608, -128, 256],
        [-608, -96, 256],
        [608, -96, 256],
        [-608, -64, 256],
        [608, -64, 256],
        [-608, -32, 256],
        [608, -32, 256],
        [-608, 0, 256],
        [608, 0, 256],
        [-608, 32, 256],
        [608, 32, 256],
        [-608, 64, 256],
        [608, 64, 256],
        [-608, 96, 256],
        [608, 96, 256],
        [-608, 128, 256],
        [608, 128, 256],
        [-608, 160, 256],
        [608, 160, 256],
        [-608, 192, 256],
        [608, 192, 256],
        [-608, 224, 256],
        [608, 224, 256],
        [-608, 256, 256],
        [608, 256, 256],
        [-608, 288, 256],
        [608, 288, 256],
        [-608, 320, 256],
        [608, 320, 256],
        [-608, 352, 256],
        [608, 352, 256],
        [-608, 384, 256],
        [608, 384, 256],
        [-608, 416, 256],
        [608, 416, 256],
        [-608, 448, 256],
        [608, 448, 256],
        [-608, 480, 256],
        [608, 480, 256],
        [-608, 512, 256],
        [608, 512, 256],
        [-608, 544, 256],
        [608, 544, 256],
        [-608, 576, 256],
        [608, 576, 256],
        [-608, -576, 288],
        [608, -576, 288],
        [-608, -544, 288],
        [608, -544, 288],
        [-608, -512, 288],
        [608, -512, 288],
        [-608, -480, 288],
        [608, -480, 288],
        [-608, -448, 288],
        [608, -448, 288],
        [-608, -416, 288],
        [608, -416, 288],
        [-608, -384, 288],
        [608, -384, 288],
        [-608, -352, 288],
        [608, -352, 288],
        [-608, -320, 288],
        [608, -320, 288],
        [-608, -288, 288],
        [608, -288, 288],
        [-608, -256, 288],
        [608, -256, 288],
        [-608, -224, 288],
        [608, -224, 288],
        [-608, -192, 288],
        [608, -192, 288],
        [-608, -160, 288],
        [608, -160, 288],
        [-608, -128, 288],
        [608, -128, 288],
        [-608, -96, 288],
        [608, -96, 288],
        [-608, -64, 288],
        [608, -64, 288],
        [-608, -32, 288],
        [608, -32, 288],
        [-608, 0, 288],
        [608, 0, 288],
        [-608, 32, 288],
        [608, 32, 288],
        [-608, 64, 288],
        [608, 64, 288],
        [-608, 96, 288],
        [608, 96, 288],
        [-608, 128, 288],
        [608, 128, 288],
        [-608, 160, 288],
        [608, 160, 288],
        [-608, 192, 288],
        [608, 192, 288],
        [-608, 224, 288],
        [608, 224, 288],
        [-608, 256, 288],
        [608, 256, 288],
        [-608, 288, 288],
        [608, 288, 288],
        [-608, 320, 288],
        [608, 320, 288],
        [-608, 352, 288],
        [608, 352, 288],
        [-608, 384, 288],
        [608, 384, 288],
        [-608, 416, 288],
        [608, 416, 288],
        [-608, 448, 288],
        [608, 448, 288],
        [-608, 480, 288],
        [608, 480, 288],
        [-608, 512, 288],
        [608, 512, 288],
        [-608, 544, 288],
        [608, 544, 288],
        [-608, 576, 288],
        [608, 576, 288],
        [-608, -576, 320],
        [608, -576, 320],
        [-608, -544, 320],
        [608, -544, 320],
        [-608, -512, 320],
        [608, -512, 320],
        [-608, -480, 320],
        [608, -480, 320],
        [-608, -448, 320],
        [608, -448, 320],
        [-608, -416, 320],
        [608, -416, 320],
        [-608, -384, 320],
        [608, -384, 320],
        [-608, -352, 320],
        [608, -352, 320],
        [-608, -320, 320],
        [608, -320, 320],
        [-608, -288, 320],
        [608, -288, 320],
        [-608, -256, 320],
        [608, -256, 320],
        [-608, -224, 320],
        [608, -224, 320],
        [-608, -192, 320],
        [608, -192, 320],
        [-608, -160, 320],
        [608, -160, 320],
        [-608, -128, 320],
        [608, -128, 320],
        [-608, -96, 320],
        [608, -96, 320],
        [-608, -64, 320],
        [608, -64, 320],
        [-608, -32, 320],
        [608, -32, 320],
        [-608, 0, 320],
        [608, 0, 320],
        [-608, 32, 320],
        [608, 32, 320],
        [-608, 64, 320],
        [608, 64, 320],
        [-608, 96, 320],
        [608, 96, 320],
        [-608, 128, 320],
        [608, 128, 320],
        [-608, 160, 320],
        [608, 160, 320],
        [-608, 192, 320],
        [608, 192, 320],
        [-608, 224, 320],
        [608, 224, 320],
        [-608, 256, 320],
        [608, 256, 320],
        [-608, 288, 320],
        [608, 288, 320],
        [-608, 320, 320],
        [608, 320, 320],
        [-608, 352, 320],
        [608, 352, 320],
        [-608, 384, 320],
        [608, 384, 320],
        [-608, 416, 320],
        [608, 416, 320],
        [-608, 448, 320],
        [608, 448, 320],
        [-608, 480, 320],
        [608, 480, 320],
        [-608, 512, 320],
        [608, 512, 320],
        [-608, 544, 320],
        [608, 544, 320],
        [-608, 576, 320],
        [608, 576, 320],
        [-608, -576, 352],
        [608, -576, 352],
        [-608, -544, 352],
        [608, -544, 352],
        [-608, -512, 352],
        [608, -512, 352],
        [-608, -480, 352],
        [608, -480, 352],
        [-608, -448, 352],
        [608, -448, 352],
        [-608, -416, 352],
        [608, -416, 352],
        [-608, -384, 352],
        [608, -384, 352],
        [-608, -352, 352],
        [608, -352, 352],
        [-608, -320, 352],
        [608, -320, 352],
        [-608, -288, 352],
        [608, -288, 352],
        [-608, -256, 352],
        [608, -256, 352],
        [-608, -224, 352],
        [608, -224, 352],
        [-608, -192, 352],
        [608, -192, 352],
        [-608, -160, 352],
        [608, -160, 352],
        [-608, -128, 352],
        [608, -128, 352],
        [-608, -96, 352],
        [608, -96, 352],
        [-608, -64, 352],
        [608, -64, 352],
        [-608, -32, 352],
        [608, -32, 352],
        [-608, 0, 352],
        [608, 0, 352],
        [-608, 32, 352],
        [608, 32, 352],
        [-608, 64, 352],
        [608, 64, 352],
        [-608, 96, 352],
        [608, 96, 352],
        [-608, 128, 352],
        [608, 128, 352],
        [-608, 160, 352],
        [608, 160, 352],
        [-608, 192, 352],
        [608, 192, 352],
        [-608, 224, 352],
        [608, 224, 352],
        [-608, 256, 352],
        [608, 256, 352],
        [-608, 288, 352],
        [608, 288, 352],
        [-608, 320, 352],
        [608, 320, 352],
        [-608, 352, 352],
        [608, 352, 352],
        [-608, 384, 352],
        [608, 384, 352],
        [-608, 416, 352],
        [608, 416, 352],
        [-608, 448, 352],
        [608, 448, 352],
        [-608, 480, 352],
        [608, 480, 352],
        [-608, 512, 352],
        [608, 512, 352],
        [-608, 544, 352],
        [608, 544, 352],
        [-608, 576, 352],
        [608, 576, 352],
        [-608, -576, 384],
        [608, -576, 384],
        [-608, -544, 384],
        [608, -544, 384],
        [-608, -512, 384],
        [608, -512, 384],
        [-608, -480, 384],
        [608, -480, 384],
        [-608, -448, 384],
        [608, -448, 384],
        [-608, -416, 384],
        [608, -416, 384],
        [-608, -384, 384],
        [608, -384, 384],
        [-608, -352, 384],
        [608, -352, 384],
        [-608, -320, 384],
        [608, -320, 384],
        [-608, -288, 384],
        [608, -288, 384],
        [-608, -256, 384],
        [608, -256, 384],
        [-608, -224, 384],
        [608, -224, 384],
        [-608, -192, 384],
        [608, -192, 384],
        [-608, -160, 384],
        [608, -160, 384],
        [-608, -128, 384],
        [608, -128, 384],
        [-608, -96, 384],
        [608, -96, 384],
        [-608, -64, 384],
        [608, -64, 384],
        [-608, -32, 384],
        [608, -32, 384],
        [-608, 0, 384],
        [608, 0, 384],
        [-608, 32, 384],
        [608, 32, 384],
        [-608, 64, 384],
        [608, 64, 384],
        [-608, 96, 384],
        [608, 96, 384],
        [-608, 128, 384],
        [608, 128, 384],
        [-608, 160, 384],
        [608, 160, 384],
        [-608, 192, 384],
        [608, 192, 384],
        [-608, 224, 384],
        [608, 224, 384],
        [-608, 256, 384],
        [608, 256, 384],
        [-608, 288, 384],
        [608, 288, 384],
        [-608, 320, 384],
        [608, 320, 384],
        [-608, 352, 384],
        [608, 352, 384],
        [-608, 384, 384],
        [608, 384, 384],
        [-608, 416, 384],
        [608, 416, 384],
        [-608, 448, 384],
        [608, 448, 384],
        [-608, 480, 384],
        [608, 480, 384],
        [-608, 512, 384],
        [608, 512, 384],
        [-608, 544, 384],
        [608, 544, 384],
        [-608, 576, 384],
        [608, 576, 384],
        [-608, -576, 416],
        [608, -576, 416],
        [-608, -544, 416],
        [608, -544, 416],
        [-608, -512, 416],
        [608, -512, 416],
        [-608, -480, 416],
        [608, -480, 416],
        [-608, -448, 416],
        [608, -448, 416],
        [-608, -416, 416],
        [608, -416, 416],
        [-608, -384, 416],
        [608, -384, 416],
        [-608, -352, 416],
        [608, -352, 416],
        [-608, -320, 416],
        [608, -320, 416],
        [-608, -288, 416],
        [608, -288, 416],
        [-608, -256, 416],
        [608, -256, 416],
        [-608, -224, 416],
        [608, -224, 416],
        [-608, -192, 416],
        [608, -192, 416],
        [-608, -160, 416],
        [608, -160, 416],
        [-608, -128, 416],
        [608, -128, 416],
        [-608, -96, 416],
        [608, -96, 416],
        [-608, -64, 416],
        [608, -64, 416],
        [-608, -32, 416],
        [608, -32, 416],
        [-608, 0, 416],
        [608, 0, 416],
        [-608, 32, 416],
        [608, 32, 416],
        [-608, 64, 416],
        [608, 64, 416],
        [-608, 96, 416],
        [608, 96, 416],
        [-608, 128, 416],
        [608, 128, 416],
        [-608, 160, 416],
        [608, 160, 416],
        [-608, 192, 416],
        [608, 192, 416],
        [-608, 224, 416],
        [608, 224, 416],
        [-608, 256, 416],
        [608, 256, 416],
        [-608, 288, 416],
        [608, 288, 416],
        [-608, 320, 416],
        [608, 320, 416],
        [-608, 352, 416],
        [608, 352, 416],
        [-608, 384, 416],
        [608, 384, 416],
        [-608, 416, 416],
        [608, 416, 416],
        [-608, 448, 416],
        [608, 448, 416],
        [-608, 480, 416],
        [608, 480, 416],
        [-608, 512, 416],
        [608, 512, 416],
        [-608, 544, 416],
        [608, 544, 416],
        [-608, 576, 416],
        [608, 576, 416],
        [-608, -576, 448],
        [608, -576, 448],
        [-608, -544, 448],
        [608, -544, 448],
        [-608, -512, 448],
        [608, -512, 448],
        [-608, -480, 448],
        [608, -480, 448],
        [-608, -448, 448],
        [608, -448, 448],
        [-608, -416, 448],
        [608, -416, 448],
        [-608, -384, 448],
        [608, -384, 448],
        [-608, -352, 448],
        [608, -352, 448],
        [-608, -320, 448],
        [608, -320, 448],
        [-608, -288, 448],
        [608, -288, 448],
        [-608, -256, 448],
        [608, -256, 448],
        [-608, -224, 448],
        [608, -224, 448],
        [-608, -192, 448],
        [608, -192, 448],
        [-608, -160, 448],
        [608, -160, 448],
        [-608, -128, 448],
        [608, -128, 448],
        [-608, -96, 448],
        [608, -96, 448],
        [-608, -64, 448],
        [608, -64, 448],
        [-608, -32, 448],
        [608, -32, 448],
        [-608, 0, 448],
        [608, 0, 448],
        [-608, 32, 448],
        [608, 32, 448],
        [-608, 64, 448],
        [608, 64, 448],
        [-608, 96, 448],
        [608, 96, 448],
        [-608, 128, 448],
        [608, 128, 448],
        [-608, 160, 448],
        [608, 160, 448],
        [-608, 192, 448],
        [608, 192, 448],
        [-608, 224, 448],
        [608, 224, 448],
        [-608, 256, 448],
        [608, 256, 448],
        [-608, 288, 448],
        [608, 288, 448],
        [-608, 320, 448],
        [608, 320, 448],
        [-608, 352, 448],
        [608, 352, 448],
        [-608, 384, 448],
        [608, 384, 448],
        [-608, 416, 448],
        [608, 416, 448],
        [-608, 448, 448],
        [608, 448, 448],
        [-608, 480, 448],
        [608, 480, 448],
        [-608, 512, 448],
        [608, 512, 448],
        [-608, 544, 448],
        [608, 544, 448],
        [-608, 576, 448],
        [608, 576, 448],
        [-608, -576, 480],
        [608, -576, 480],
        [-608, -544, 480],
        [608, -544, 480],
        [-608, -512, 480],
        [608, -512, 480],
        [-608, -480, 480],
        [608, -480, 480],
        [-608, -448, 480],
        [608, -448, 480],
        [-608, -416, 480],
        [608, -416, 480],
        [-608, -384, 480],
        [608, -384, 480],
        [-608, -352, 480],
        [608, -352, 480],
        [-608, -320, 480],
        [608, -320, 480],
        [-608, -288, 480],
        [608, -288, 480],
        [-608, -256, 480],
        [608, -256, 480],
        [-608, -224, 480],
        [608, -224, 480],
        [-608, -192, 480],
        [608, -192, 480],
        [-608, -160, 480],
        [608, -160, 480],
        [-608, -128, 480],
        [608, -128, 480],
        [-608, -96, 480],
        [608, -96, 480],
        [-608, -64, 480],
        [608, -64, 480],
        [-608, -32, 480],
        [608, -32, 480],
        [-608, 0, 480],
        [608, 0, 480],
        [-608, 32, 480],
        [608, 32, 480],
        [-608, 64, 480],
        [608, 64, 480],
        [-608, 96, 480],
        [608, 96, 480],
        [-608, 128, 480],
        [608, 128, 480],
        [-608, 160, 480],
        [608, 160, 480],
        [-608, 192, 480],
        [608, 192, 480],
        [-608, 224, 480],
        [608, 224, 480],
        [-608, 256, 480],
        [608, 256, 480],
        [-608, 288, 480],
        [608, 288, 480],
        [-608, 320, 480],
        [608, 320, 480],
        [-608, 352, 480],
        [608, 352, 480],
        [-608, 384, 480],
        [608, 384, 480],
        [-608, 416, 480],
        [608, 416, 480],
        [-608, 448, 480],
        [608, 448, 480],
        [-608, 480, 480],
        [608, 480, 480],
        [-608, 512, 480],
        [608, 512, 480],
        [-608, 544, 480],
        [608, 544, 480],
        [-608, 576, 480],
        [608, 576, 480],
        [-608, -576, 512],
        [608, -576, 512],
        [-608, -544, 512],
        [608, -544, 512],
        [-608, -512, 512],
        [608, -512, 512],
        [-608, -480, 512],
        [608, -480, 512],
        [-608, -448, 512],
        [608, -448, 512],
        [-608, -416, 512],
        [608, -416, 512],
        [-608, -384, 512],
        [608, -384, 512],
        [-608, -352, 512],
        [608, -352, 512],
        [-608, -320, 512],
        [608, -320, 512],
        [-608, -288, 512],
        [608, -288, 512],
        [-608, -256, 512],
        [608, -256, 512],
        [-608, -224, 512],
        [608, -224, 512],
        [-608, -192, 512],
        [608, -192, 512],
        [-608, -160, 512],
        [608, -160, 512],
        [-608, -128, 512],
        [608, -128, 512],
        [-608, -96, 512],
        [608, -96, 512],
        [-608, -64, 512],
        [608, -64, 512],
        [-608, -32, 512],
        [608, -32, 512],
        [-608, 0, 512],
        [608, 0, 512],
        [-608, 32, 512],
        [608, 32, 512],
        [-608, 64, 512],
        [608, 64, 512],
        [-608, 96, 512],
        [608, 96, 512],
        [-608, 128, 512],
        [608, 128, 512],
        [-608, 160, 512],
        [608, 160, 512],
        [-608, 192, 512],
        [608, 192, 512],
        [-608, 224, 512],
        [608, 224, 512],
        [-608, 256, 512],
        [608, 256, 512],
        [-608, 288, 512],
        [608, 288, 512],
        [-608, 320, 512],
        [608, 320, 512],
        [-608, 352, 512],
        [608, 352, 512],
        [-608, 384, 512],
        [608, 384, 512],
        [-608, 416, 512],
        [608, 416, 512],
        [-608, 448, 512],
        [608, 448, 512],
        [-608, 480, 512],
        [608, 480, 512],
        [-608, 512, 512],
        [608, 512, 512],
        [-608, 544, 512],
        [608, 544, 512],
        [-608, 576, 512],
        [608, 576, 512],
        [-608, -576, 544],
        [608, -576, 544],
        [-608, -544, 544],
        [608, -544, 544],
        [-608, -512, 544],
        [608, -512, 544],
        [-608, -480, 544],
        [608, -480, 544],
        [-608, -448, 544],
        [608, -448, 544],
        [-608, -416, 544],
        [608, -416, 544],
        [-608, -384, 544],
        [608, -384, 544],
        [-608, -352, 544],
        [608, -352, 544],
        [-608, -320, 544],
        [608, -320, 544],
        [-608, -288, 544],
        [608, -288, 544],
        [-608, -256, 544],
        [608, -256, 544],
        [-608, -224, 544],
        [608, -224, 544],
        [-608, -192, 544],
        [608, -192, 544],
        [-608, -160, 544],
        [608, -160, 544],
        [-608, -128, 544],
        [608, -128, 544],
        [-608, -96, 544],
        [608, -96, 544],
        [-608, -64, 544],
        [608, -64, 544],
        [-608, -32, 544],
        [608, -32, 544],
        [-608, 0, 544],
        [608, 0, 544],
        [-608, 32, 544],
        [608, 32, 544],
        [-608, 64, 544],
        [608, 64, 544],
        [-608, 96, 544],
        [608, 96, 544],
        [-608, 128, 544],
        [608, 128, 544],
        [-608, 160, 544],
        [608, 160, 544],
        [-608, 192, 544],
        [608, 192, 544],
        [-608, 224, 544],
        [608, 224, 544],
        [-608, 256, 544],
        [608, 256, 544],
        [-608, 288, 544],
        [608, 288, 544],
        [-608, 320, 544],
        [608, 320, 544],
        [-608, 352, 544],
        [608, 352, 544],
        [-608, 384, 544],
        [608, 384, 544],
        [-608, 416, 544],
        [608, 416, 544],
        [-608, 448, 544],
        [608, 448, 544],
        [-608, 480, 544],
        [608, 480, 544],
        [-608, 512, 544],
        [608, 512, 544],
        [-608, 544, 544],
        [608, 544, 544],
        [-608, 576, 544],
        [608, 576, 544],
        [-608, -576, 576],
        [608, -576, 576],
        [-608, -544, 576],
        [608, -544, 576],
        [-608, -512, 576],
        [608, -512, 576],
        [-608, -480, 576],
        [608, -480, 576],
        [-608, -448, 576],
        [608, -448, 576],
        [-608, -416, 576],
        [608, -416, 576],
        [-608, -384, 576],
        [608, -384, 576],
        [-608, -352, 576],
        [608, -352, 576],
        [-608, -320, 576],
        [608, -320, 576],
        [-608, -288, 576],
        [608, -288, 576],
        [-608, -256, 576],
        [608, -256, 576],
        [-608, -224, 576],
        [608, -224, 576],
        [-608, -192, 576],
        [608, -192, 576],
        [-608, -160, 576],
        [608, -160, 576],
        [-608, -128, 576],
        [608, -128, 576],
        [-608, -96, 576],
        [608, -96, 576],
        [-608, -64, 576],
        [608, -64, 576],
        [-608, -32, 576],
        [608, -32, 576],
        [-608, 0, 576],
        [608, 0, 576],
        [-608, 32, 576],
        [608, 32, 576],
        [-608, 64, 576],
        [608, 64, 576],
        [-608, 96, 576],
        [608, 96, 576],
        [-608, 128, 576],
        [608, 128, 576],
        [-608, 160, 576],
        [608, 160, 576],
        [-608, 192, 576],
        [608, 192, 576],
        [-608, 224, 576],
        [608, 224, 576],
        [-608, 256, 576],
        [608, 256, 576],
        [-608, 288, 576],
        [608, 288, 576],
        [-608, 320, 576],
        [608, 320, 576],
        [-608, 352, 576],
        [608, 352, 576],
        [-608, 384, 576],
        [608, 384, 576],
        [-608, 416, 576],
        [608, 416, 576],
        [-608, 448, 576],
        [608, 448, 576],
        [-608, 480, 576],
        [608, 480, 576],
        [-608, 512, 576],
        [608, 512, 576],
        [-608, 544, 576],
        [608, 544, 576],
        [-608, 576, 576],
        [608, 576, 576]],
    '20': [[-640, -640, -640],
        [-640, -640, 640],
        [-640, -608, -640],
        [-640, -608, 640],
        [-640, -576, -640],
        [-640, -576, 640],
        [-640, -544, -640],
        [-640, -544, 640],
        [-640, -512, -640],
        [-640, -512, 640],
        [-640, -480, -640],
        [-640, -480, 640],
        [-640, -448, -640],
        [-640, -448, 640],
        [-640, -416, -640],
        [-640, -416, 640],
        [-640, -384, -640],
        [-640, -384, 640],
        [-640, -352, -640],
        [-640, -352, 640],
        [-640, -320, -640],
        [-640, -320, 640],
        [-640, -288, -640],
        [-640, -288, 640],
        [-640, -256, -640],
        [-640, -256, 640],
        [-640, -224, -640],
        [-640, -224, 640],
        [-640, -192, -640],
        [-640, -192, 640],
        [-640, -160, -640],
        [-640, -160, 640],
        [-640, -128, -640],
        [-640, -128, 640],
        [-640, -96, -640],
        [-640, -96, 640],
        [-640, -64, -640],
        [-640, -64, 640],
        [-640, -32, -640],
        [-640, -32, 640],
        [-640, 0, -640],
        [-640, 0, 640],
        [-640, 32, -640],
        [-640, 32, 640],
        [-640, 64, -640],
        [-640, 64, 640],
        [-640, 96, -640],
        [-640, 96, 640],
        [-640, 128, -640],
        [-640, 128, 640],
        [-640, 160, -640],
        [-640, 160, 640],
        [-640, 192, -640],
        [-640, 192, 640],
        [-640, 224, -640],
        [-640, 224, 640],
        [-640, 256, -640],
        [-640, 256, 640],
        [-640, 288, -640],
        [-640, 288, 640],
        [-640, 320, -640],
        [-640, 320, 640],
        [-640, 352, -640],
        [-640, 352, 640],
        [-640, 384, -640],
        [-640, 384, 640],
        [-640, 416, -640],
        [-640, 416, 640],
        [-640, 448, -640],
        [-640, 448, 640],
        [-640, 480, -640],
        [-640, 480, 640],
        [-640, 512, -640],
        [-640, 512, 640],
        [-640, 544, -640],
        [-640, 544, 640],
        [-640, 576, -640],
        [-640, 576, 640],
        [-640, 608, -640],
        [-640, 608, 640],
        [-640, 640, -640],
        [-640, 640, 640],
        [-640, -640, -608],
        [-640, 640, -608],
        [-640, -640, -576],
        [-640, 640, -576],
        [-640, -640, -544],
        [-640, 640, -544],
        [-640, -640, -512],
        [-640, 640, -512],
        [-640, -640, -480],
        [-640, 640, -480],
        [-640, -640, -448],
        [-640, 640, -448],
        [-640, -640, -416],
        [-640, 640, -416],
        [-640, -640, -384],
        [-640, 640, -384],
        [-640, -640, -352],
        [-640, 640, -352],
        [-640, -640, -320],
        [-640, 640, -320],
        [-640, -640, -288],
        [-640, 640, -288],
        [-640, -640, -256],
        [-640, 640, -256],
        [-640, -640, -224],
        [-640, 640, -224],
        [-640, -640, -192],
        [-640, 640, -192],
        [-640, -640, -160],
        [-640, 640, -160],
        [-640, -640, -128],
        [-640, 640, -128],
        [-640, -640, -96],
        [-640, 640, -96],
        [-640, -640, -64],
        [-640, 640, -64],
        [-640, -640, -32],
        [-640, 640, -32],
        [-640, -640, 0],
        [-640, 640, 0],
        [-640, -640, 32],
        [-640, 640, 32],
        [-640, -640, 64],
        [-640, 640, 64],
        [-640, -640, 96],
        [-640, 640, 96],
        [-640, -640, 128],
        [-640, 640, 128],
        [-640, -640, 160],
        [-640, 640, 160],
        [-640, -640, 192],
        [-640, 640, 192],
        [-640, -640, 224],
        [-640, 640, 224],
        [-640, -640, 256],
        [-640, 640, 256],
        [-640, -640, 288],
        [-640, 640, 288],
        [-640, -640, 320],
        [-640, 640, 320],
        [-640, -640, 352],
        [-640, 640, 352],
        [-640, -640, 384],
        [-640, 640, 384],
        [-640, -640, 416],
        [-640, 640, 416],
        [-640, -640, 448],
        [-640, 640, 448],
        [-640, -640, 480],
        [-640, 640, 480],
        [-640, -640, 512],
        [-640, 640, 512],
        [-640, -640, 544],
        [-640, 640, 544],
        [-640, -640, 576],
        [-640, 640, 576],
        [-640, -640, 608],
        [-640, 640, 608],
        [-608, -640, -640],
        [-608, -640, 640],
        [-608, -608, -640],
        [-608, -608, 640],
        [-608, -576, -640],
        [-608, -576, 640],
        [-608, -544, -640],
        [-608, -544, 640],
        [-608, -512, -640],
        [-608, -512, 640],
        [-608, -480, -640],
        [-608, -480, 640],
        [-608, -448, -640],
        [-608, -448, 640],
        [-608, -416, -640],
        [-608, -416, 640],
        [-608, -384, -640],
        [-608, -384, 640],
        [-608, -352, -640],
        [-608, -352, 640],
        [-608, -320, -640],
        [-608, -320, 640],
        [-608, -288, -640],
        [-608, -288, 640],
        [-608, -256, -640],
        [-608, -256, 640],
        [-608, -224, -640],
        [-608, -224, 640],
        [-608, -192, -640],
        [-608, -192, 640],
        [-608, -160, -640],
        [-608, -160, 640],
        [-608, -128, -640],
        [-608, -128, 640],
        [-608, -96, -640],
        [-608, -96, 640],
        [-608, -64, -640],
        [-608, -64, 640],
        [-608, -32, -640],
        [-608, -32, 640],
        [-608, 0, -640],
        [-608, 0, 640],
        [-608, 32, -640],
        [-608, 32, 640],
        [-608, 64, -640],
        [-608, 64, 640],
        [-608, 96, -640],
        [-608, 96, 640],
        [-608, 128, -640],
        [-608, 128, 640],
        [-608, 160, -640],
        [-608, 160, 640],
        [-608, 192, -640],
        [-608, 192, 640],
        [-608, 224, -640],
        [-608, 224, 640],
        [-608, 256, -640],
        [-608, 256, 640],
        [-608, 288, -640],
        [-608, 288, 640],
        [-608, 320, -640],
        [-608, 320, 640],
        [-608, 352, -640],
        [-608, 352, 640],
        [-608, 384, -640],
        [-608, 384, 640],
        [-608, 416, -640],
        [-608, 416, 640],
        [-608, 448, -640],
        [-608, 448, 640],
        [-608, 480, -640],
        [-608, 480, 640],
        [-608, 512, -640],
        [-608, 512, 640],
        [-608, 544, -640],
        [-608, 544, 640],
        [-608, 576, -640],
        [-608, 576, 640],
        [-608, 608, -640],
        [-608, 608, 640],
        [-608, 640, -640],
        [-608, 640, 640],
        [-608, -640, -608],
        [-608, 640, -608],
        [-608, -640, -576],
        [-608, 640, -576],
        [-608, -640, -544],
        [-608, 640, -544],
        [-608, -640, -512],
        [-608, 640, -512],
        [-608, -640, -480],
        [-608, 640, -480],
        [-608, -640, -448],
        [-608, 640, -448],
        [-608, -640, -416],
        [-608, 640, -416],
        [-608, -640, -384],
        [-608, 640, -384],
        [-608, -640, -352],
        [-608, 640, -352],
        [-608, -640, -320],
        [-608, 640, -320],
        [-608, -640, -288],
        [-608, 640, -288],
        [-608, -640, -256],
        [-608, 640, -256],
        [-608, -640, -224],
        [-608, 640, -224],
        [-608, -640, -192],
        [-608, 640, -192],
        [-608, -640, -160],
        [-608, 640, -160],
        [-608, -640, -128],
        [-608, 640, -128],
        [-608, -640, -96],
        [-608, 640, -96],
        [-608, -640, -64],
        [-608, 640, -64],
        [-608, -640, -32],
        [-608, 640, -32],
        [-608, -640, 0],
        [-608, 640, 0],
        [-608, -640, 32],
        [-608, 640, 32],
        [-608, -640, 64],
        [-608, 640, 64],
        [-608, -640, 96],
        [-608, 640, 96],
        [-608, -640, 128],
        [-608, 640, 128],
        [-608, -640, 160],
        [-608, 640, 160],
        [-608, -640, 192],
        [-608, 640, 192],
        [-608, -640, 224],
        [-608, 640, 224],
        [-608, -640, 256],
        [-608, 640, 256],
        [-608, -640, 288],
        [-608, 640, 288],
        [-608, -640, 320],
        [-608, 640, 320],
        [-608, -640, 352],
        [-608, 640, 352],
        [-608, -640, 384],
        [-608, 640, 384],
        [-608, -640, 416],
        [-608, 640, 416],
        [-608, -640, 448],
        [-608, 640, 448],
        [-608, -640, 480],
        [-608, 640, 480],
        [-608, -640, 512],
        [-608, 640, 512],
        [-608, -640, 544],
        [-608, 640, 544],
        [-608, -640, 576],
        [-608, 640, 576],
        [-608, -640, 608],
        [-608, 640, 608],
        [-576, -640, -640],
        [-576, -640, 640],
        [-576, -608, -640],
        [-576, -608, 640],
        [-576, -576, -640],
        [-576, -576, 640],
        [-576, -544, -640],
        [-576, -544, 640],
        [-576, -512, -640],
        [-576, -512, 640],
        [-576, -480, -640],
        [-576, -480, 640],
        [-576, -448, -640],
        [-576, -448, 640],
        [-576, -416, -640],
        [-576, -416, 640],
        [-576, -384, -640],
        [-576, -384, 640],
        [-576, -352, -640],
        [-576, -352, 640],
        [-576, -320, -640],
        [-576, -320, 640],
        [-576, -288, -640],
        [-576, -288, 640],
        [-576, -256, -640],
        [-576, -256, 640],
        [-576, -224, -640],
        [-576, -224, 640],
        [-576, -192, -640],
        [-576, -192, 640],
        [-576, -160, -640],
        [-576, -160, 640],
        [-576, -128, -640],
        [-576, -128, 640],
        [-576, -96, -640],
        [-576, -96, 640],
        [-576, -64, -640],
        [-576, -64, 640],
        [-576, -32, -640],
        [-576, -32, 640],
        [-576, 0, -640],
        [-576, 0, 640],
        [-576, 32, -640],
        [-576, 32, 640],
        [-576, 64, -640],
        [-576, 64, 640],
        [-576, 96, -640],
        [-576, 96, 640],
        [-576, 128, -640],
        [-576, 128, 640],
        [-576, 160, -640],
        [-576, 160, 640],
        [-576, 192, -640],
        [-576, 192, 640],
        [-576, 224, -640],
        [-576, 224, 640],
        [-576, 256, -640],
        [-576, 256, 640],
        [-576, 288, -640],
        [-576, 288, 640],
        [-576, 320, -640],
        [-576, 320, 640],
        [-576, 352, -640],
        [-576, 352, 640],
        [-576, 384, -640],
        [-576, 384, 640],
        [-576, 416, -640],
        [-576, 416, 640],
        [-576, 448, -640],
        [-576, 448, 640],
        [-576, 480, -640],
        [-576, 480, 640],
        [-576, 512, -640],
        [-576, 512, 640],
        [-576, 544, -640],
        [-576, 544, 640],
        [-576, 576, -640],
        [-576, 576, 640],
        [-576, 608, -640],
        [-576, 608, 640],
        [-576, 640, -640],
        [-576, 640, 640],
        [-576, -640, -608],
        [-576, 640, -608],
        [-576, -640, -576],
        [-576, 640, -576],
        [-576, -640, -544],
        [-576, 640, -544],
        [-576, -640, -512],
        [-576, 640, -512],
        [-576, -640, -480],
        [-576, 640, -480],
        [-576, -640, -448],
        [-576, 640, -448],
        [-576, -640, -416],
        [-576, 640, -416],
        [-576, -640, -384],
        [-576, 640, -384],
        [-576, -640, -352],
        [-576, 640, -352],
        [-576, -640, -320],
        [-576, 640, -320],
        [-576, -640, -288],
        [-576, 640, -288],
        [-576, -640, -256],
        [-576, 640, -256],
        [-576, -640, -224],
        [-576, 640, -224],
        [-576, -640, -192],
        [-576, 640, -192],
        [-576, -640, -160],
        [-576, 640, -160],
        [-576, -640, -128],
        [-576, 640, -128],
        [-576, -640, -96],
        [-576, 640, -96],
        [-576, -640, -64],
        [-576, 640, -64],
        [-576, -640, -32],
        [-576, 640, -32],
        [-576, -640, 0],
        [-576, 640, 0],
        [-576, -640, 32],
        [-576, 640, 32],
        [-576, -640, 64],
        [-576, 640, 64],
        [-576, -640, 96],
        [-576, 640, 96],
        [-576, -640, 128],
        [-576, 640, 128],
        [-576, -640, 160],
        [-576, 640, 160],
        [-576, -640, 192],
        [-576, 640, 192],
        [-576, -640, 224],
        [-576, 640, 224],
        [-576, -640, 256],
        [-576, 640, 256],
        [-576, -640, 288],
        [-576, 640, 288],
        [-576, -640, 320],
        [-576, 640, 320],
        [-576, -640, 352],
        [-576, 640, 352],
        [-576, -640, 384],
        [-576, 640, 384],
        [-576, -640, 416],
        [-576, 640, 416],
        [-576, -640, 448],
        [-576, 640, 448],
        [-576, -640, 480],
        [-576, 640, 480],
        [-576, -640, 512],
        [-576, 640, 512],
        [-576, -640, 544],
        [-576, 640, 544],
        [-576, -640, 576],
        [-576, 640, 576],
        [-576, -640, 608],
        [-576, 640, 608],
        [-544, -640, -640],
        [-544, -640, 640],
        [-544, -608, -640],
        [-544, -608, 640],
        [-544, -576, -640],
        [-544, -576, 640],
        [-544, -544, -640],
        [-544, -544, 640],
        [-544, -512, -640],
        [-544, -512, 640],
        [-544, -480, -640],
        [-544, -480, 640],
        [-544, -448, -640],
        [-544, -448, 640],
        [-544, -416, -640],
        [-544, -416, 640],
        [-544, -384, -640],
        [-544, -384, 640],
        [-544, -352, -640],
        [-544, -352, 640],
        [-544, -320, -640],
        [-544, -320, 640],
        [-544, -288, -640],
        [-544, -288, 640],
        [-544, -256, -640],
        [-544, -256, 640],
        [-544, -224, -640],
        [-544, -224, 640],
        [-544, -192, -640],
        [-544, -192, 640],
        [-544, -160, -640],
        [-544, -160, 640],
        [-544, -128, -640],
        [-544, -128, 640],
        [-544, -96, -640],
        [-544, -96, 640],
        [-544, -64, -640],
        [-544, -64, 640],
        [-544, -32, -640],
        [-544, -32, 640],
        [-544, 0, -640],
        [-544, 0, 640],
        [-544, 32, -640],
        [-544, 32, 640],
        [-544, 64, -640],
        [-544, 64, 640],
        [-544, 96, -640],
        [-544, 96, 640],
        [-544, 128, -640],
        [-544, 128, 640],
        [-544, 160, -640],
        [-544, 160, 640],
        [-544, 192, -640],
        [-544, 192, 640],
        [-544, 224, -640],
        [-544, 224, 640],
        [-544, 256, -640],
        [-544, 256, 640],
        [-544, 288, -640],
        [-544, 288, 640],
        [-544, 320, -640],
        [-544, 320, 640],
        [-544, 352, -640],
        [-544, 352, 640],
        [-544, 384, -640],
        [-544, 384, 640],
        [-544, 416, -640],
        [-544, 416, 640],
        [-544, 448, -640],
        [-544, 448, 640],
        [-544, 480, -640],
        [-544, 480, 640],
        [-544, 512, -640],
        [-544, 512, 640],
        [-544, 544, -640],
        [-544, 544, 640],
        [-544, 576, -640],
        [-544, 576, 640],
        [-544, 608, -640],
        [-544, 608, 640],
        [-544, 640, -640],
        [-544, 640, 640],
        [-544, -640, -608],
        [-544, 640, -608],
        [-544, -640, -576],
        [-544, 640, -576],
        [-544, -640, -544],
        [-544, 640, -544],
        [-544, -640, -512],
        [-544, 640, -512],
        [-544, -640, -480],
        [-544, 640, -480],
        [-544, -640, -448],
        [-544, 640, -448],
        [-544, -640, -416],
        [-544, 640, -416],
        [-544, -640, -384],
        [-544, 640, -384],
        [-544, -640, -352],
        [-544, 640, -352],
        [-544, -640, -320],
        [-544, 640, -320],
        [-544, -640, -288],
        [-544, 640, -288],
        [-544, -640, -256],
        [-544, 640, -256],
        [-544, -640, -224],
        [-544, 640, -224],
        [-544, -640, -192],
        [-544, 640, -192],
        [-544, -640, -160],
        [-544, 640, -160],
        [-544, -640, -128],
        [-544, 640, -128],
        [-544, -640, -96],
        [-544, 640, -96],
        [-544, -640, -64],
        [-544, 640, -64],
        [-544, -640, -32],
        [-544, 640, -32],
        [-544, -640, 0],
        [-544, 640, 0],
        [-544, -640, 32],
        [-544, 640, 32],
        [-544, -640, 64],
        [-544, 640, 64],
        [-544, -640, 96],
        [-544, 640, 96],
        [-544, -640, 128],
        [-544, 640, 128],
        [-544, -640, 160],
        [-544, 640, 160],
        [-544, -640, 192],
        [-544, 640, 192],
        [-544, -640, 224],
        [-544, 640, 224],
        [-544, -640, 256],
        [-544, 640, 256],
        [-544, -640, 288],
        [-544, 640, 288],
        [-544, -640, 320],
        [-544, 640, 320],
        [-544, -640, 352],
        [-544, 640, 352],
        [-544, -640, 384],
        [-544, 640, 384],
        [-544, -640, 416],
        [-544, 640, 416],
        [-544, -640, 448],
        [-544, 640, 448],
        [-544, -640, 480],
        [-544, 640, 480],
        [-544, -640, 512],
        [-544, 640, 512],
        [-544, -640, 544],
        [-544, 640, 544],
        [-544, -640, 576],
        [-544, 640, 576],
        [-544, -640, 608],
        [-544, 640, 608],
        [-512, -640, -640],
        [-512, -640, 640],
        [-512, -608, -640],
        [-512, -608, 640],
        [-512, -576, -640],
        [-512, -576, 640],
        [-512, -544, -640],
        [-512, -544, 640],
        [-512, -512, -640],
        [-512, -512, 640],
        [-512, -480, -640],
        [-512, -480, 640],
        [-512, -448, -640],
        [-512, -448, 640],
        [-512, -416, -640],
        [-512, -416, 640],
        [-512, -384, -640],
        [-512, -384, 640],
        [-512, -352, -640],
        [-512, -352, 640],
        [-512, -320, -640],
        [-512, -320, 640],
        [-512, -288, -640],
        [-512, -288, 640],
        [-512, -256, -640],
        [-512, -256, 640],
        [-512, -224, -640],
        [-512, -224, 640],
        [-512, -192, -640],
        [-512, -192, 640],
        [-512, -160, -640],
        [-512, -160, 640],
        [-512, -128, -640],
        [-512, -128, 640],
        [-512, -96, -640],
        [-512, -96, 640],
        [-512, -64, -640],
        [-512, -64, 640],
        [-512, -32, -640],
        [-512, -32, 640],
        [-512, 0, -640],
        [-512, 0, 640],
        [-512, 32, -640],
        [-512, 32, 640],
        [-512, 64, -640],
        [-512, 64, 640],
        [-512, 96, -640],
        [-512, 96, 640],
        [-512, 128, -640],
        [-512, 128, 640],
        [-512, 160, -640],
        [-512, 160, 640],
        [-512, 192, -640],
        [-512, 192, 640],
        [-512, 224, -640],
        [-512, 224, 640],
        [-512, 256, -640],
        [-512, 256, 640],
        [-512, 288, -640],
        [-512, 288, 640],
        [-512, 320, -640],
        [-512, 320, 640],
        [-512, 352, -640],
        [-512, 352, 640],
        [-512, 384, -640],
        [-512, 384, 640],
        [-512, 416, -640],
        [-512, 416, 640],
        [-512, 448, -640],
        [-512, 448, 640],
        [-512, 480, -640],
        [-512, 480, 640],
        [-512, 512, -640],
        [-512, 512, 640],
        [-512, 544, -640],
        [-512, 544, 640],
        [-512, 576, -640],
        [-512, 576, 640],
        [-512, 608, -640],
        [-512, 608, 640],
        [-512, 640, -640],
        [-512, 640, 640],
        [-512, -640, -608],
        [-512, 640, -608],
        [-512, -640, -576],
        [-512, 640, -576],
        [-512, -640, -544],
        [-512, 640, -544],
        [-512, -640, -512],
        [-512, 640, -512],
        [-512, -640, -480],
        [-512, 640, -480],
        [-512, -640, -448],
        [-512, 640, -448],
        [-512, -640, -416],
        [-512, 640, -416],
        [-512, -640, -384],
        [-512, 640, -384],
        [-512, -640, -352],
        [-512, 640, -352],
        [-512, -640, -320],
        [-512, 640, -320],
        [-512, -640, -288],
        [-512, 640, -288],
        [-512, -640, -256],
        [-512, 640, -256],
        [-512, -640, -224],
        [-512, 640, -224],
        [-512, -640, -192],
        [-512, 640, -192],
        [-512, -640, -160],
        [-512, 640, -160],
        [-512, -640, -128],
        [-512, 640, -128],
        [-512, -640, -96],
        [-512, 640, -96],
        [-512, -640, -64],
        [-512, 640, -64],
        [-512, -640, -32],
        [-512, 640, -32],
        [-512, -640, 0],
        [-512, 640, 0],
        [-512, -640, 32],
        [-512, 640, 32],
        [-512, -640, 64],
        [-512, 640, 64],
        [-512, -640, 96],
        [-512, 640, 96],
        [-512, -640, 128],
        [-512, 640, 128],
        [-512, -640, 160],
        [-512, 640, 160],
        [-512, -640, 192],
        [-512, 640, 192],
        [-512, -640, 224],
        [-512, 640, 224],
        [-512, -640, 256],
        [-512, 640, 256],
        [-512, -640, 288],
        [-512, 640, 288],
        [-512, -640, 320],
        [-512, 640, 320],
        [-512, -640, 352],
        [-512, 640, 352],
        [-512, -640, 384],
        [-512, 640, 384],
        [-512, -640, 416],
        [-512, 640, 416],
        [-512, -640, 448],
        [-512, 640, 448],
        [-512, -640, 480],
        [-512, 640, 480],
        [-512, -640, 512],
        [-512, 640, 512],
        [-512, -640, 544],
        [-512, 640, 544],
        [-512, -640, 576],
        [-512, 640, 576],
        [-512, -640, 608],
        [-512, 640, 608],
        [-480, -640, -640],
        [-480, -640, 640],
        [-480, -608, -640],
        [-480, -608, 640],
        [-480, -576, -640],
        [-480, -576, 640],
        [-480, -544, -640],
        [-480, -544, 640],
        [-480, -512, -640],
        [-480, -512, 640],
        [-480, -480, -640],
        [-480, -480, 640],
        [-480, -448, -640],
        [-480, -448, 640],
        [-480, -416, -640],
        [-480, -416, 640],
        [-480, -384, -640],
        [-480, -384, 640],
        [-480, -352, -640],
        [-480, -352, 640],
        [-480, -320, -640],
        [-480, -320, 640],
        [-480, -288, -640],
        [-480, -288, 640],
        [-480, -256, -640],
        [-480, -256, 640],
        [-480, -224, -640],
        [-480, -224, 640],
        [-480, -192, -640],
        [-480, -192, 640],
        [-480, -160, -640],
        [-480, -160, 640],
        [-480, -128, -640],
        [-480, -128, 640],
        [-480, -96, -640],
        [-480, -96, 640],
        [-480, -64, -640],
        [-480, -64, 640],
        [-480, -32, -640],
        [-480, -32, 640],
        [-480, 0, -640],
        [-480, 0, 640],
        [-480, 32, -640],
        [-480, 32, 640],
        [-480, 64, -640],
        [-480, 64, 640],
        [-480, 96, -640],
        [-480, 96, 640],
        [-480, 128, -640],
        [-480, 128, 640],
        [-480, 160, -640],
        [-480, 160, 640],
        [-480, 192, -640],
        [-480, 192, 640],
        [-480, 224, -640],
        [-480, 224, 640],
        [-480, 256, -640],
        [-480, 256, 640],
        [-480, 288, -640],
        [-480, 288, 640],
        [-480, 320, -640],
        [-480, 320, 640],
        [-480, 352, -640],
        [-480, 352, 640],
        [-480, 384, -640],
        [-480, 384, 640],
        [-480, 416, -640],
        [-480, 416, 640],
        [-480, 448, -640],
        [-480, 448, 640],
        [-480, 480, -640],
        [-480, 480, 640],
        [-480, 512, -640],
        [-480, 512, 640],
        [-480, 544, -640],
        [-480, 544, 640],
        [-480, 576, -640],
        [-480, 576, 640],
        [-480, 608, -640],
        [-480, 608, 640],
        [-480, 640, -640],
        [-480, 640, 640],
        [-480, -640, -608],
        [-480, 640, -608],
        [-480, -640, -576],
        [-480, 640, -576],
        [-480, -640, -544],
        [-480, 640, -544],
        [-480, -640, -512],
        [-480, 640, -512],
        [-480, -640, -480],
        [-480, 640, -480],
        [-480, -640, -448],
        [-480, 640, -448],
        [-480, -640, -416],
        [-480, 640, -416],
        [-480, -640, -384],
        [-480, 640, -384],
        [-480, -640, -352],
        [-480, 640, -352],
        [-480, -640, -320],
        [-480, 640, -320],
        [-480, -640, -288],
        [-480, 640, -288],
        [-480, -640, -256],
        [-480, 640, -256],
        [-480, -640, -224],
        [-480, 640, -224],
        [-480, -640, -192],
        [-480, 640, -192],
        [-480, -640, -160],
        [-480, 640, -160],
        [-480, -640, -128],
        [-480, 640, -128],
        [-480, -640, -96],
        [-480, 640, -96],
        [-480, -640, -64],
        [-480, 640, -64],
        [-480, -640, -32],
        [-480, 640, -32],
        [-480, -640, 0],
        [-480, 640, 0],
        [-480, -640, 32],
        [-480, 640, 32],
        [-480, -640, 64],
        [-480, 640, 64],
        [-480, -640, 96],
        [-480, 640, 96],
        [-480, -640, 128],
        [-480, 640, 128],
        [-480, -640, 160],
        [-480, 640, 160],
        [-480, -640, 192],
        [-480, 640, 192],
        [-480, -640, 224],
        [-480, 640, 224],
        [-480, -640, 256],
        [-480, 640, 256],
        [-480, -640, 288],
        [-480, 640, 288],
        [-480, -640, 320],
        [-480, 640, 320],
        [-480, -640, 352],
        [-480, 640, 352],
        [-480, -640, 384],
        [-480, 640, 384],
        [-480, -640, 416],
        [-480, 640, 416],
        [-480, -640, 448],
        [-480, 640, 448],
        [-480, -640, 480],
        [-480, 640, 480],
        [-480, -640, 512],
        [-480, 640, 512],
        [-480, -640, 544],
        [-480, 640, 544],
        [-480, -640, 576],
        [-480, 640, 576],
        [-480, -640, 608],
        [-480, 640, 608],
        [-448, -640, -640],
        [-448, -640, 640],
        [-448, -608, -640],
        [-448, -608, 640],
        [-448, -576, -640],
        [-448, -576, 640],
        [-448, -544, -640],
        [-448, -544, 640],
        [-448, -512, -640],
        [-448, -512, 640],
        [-448, -480, -640],
        [-448, -480, 640],
        [-448, -448, -640],
        [-448, -448, 640],
        [-448, -416, -640],
        [-448, -416, 640],
        [-448, -384, -640],
        [-448, -384, 640],
        [-448, -352, -640],
        [-448, -352, 640],
        [-448, -320, -640],
        [-448, -320, 640],
        [-448, -288, -640],
        [-448, -288, 640],
        [-448, -256, -640],
        [-448, -256, 640],
        [-448, -224, -640],
        [-448, -224, 640],
        [-448, -192, -640],
        [-448, -192, 640],
        [-448, -160, -640],
        [-448, -160, 640],
        [-448, -128, -640],
        [-448, -128, 640],
        [-448, -96, -640],
        [-448, -96, 640],
        [-448, -64, -640],
        [-448, -64, 640],
        [-448, -32, -640],
        [-448, -32, 640],
        [-448, 0, -640],
        [-448, 0, 640],
        [-448, 32, -640],
        [-448, 32, 640],
        [-448, 64, -640],
        [-448, 64, 640],
        [-448, 96, -640],
        [-448, 96, 640],
        [-448, 128, -640],
        [-448, 128, 640],
        [-448, 160, -640],
        [-448, 160, 640],
        [-448, 192, -640],
        [-448, 192, 640],
        [-448, 224, -640],
        [-448, 224, 640],
        [-448, 256, -640],
        [-448, 256, 640],
        [-448, 288, -640],
        [-448, 288, 640],
        [-448, 320, -640],
        [-448, 320, 640],
        [-448, 352, -640],
        [-448, 352, 640],
        [-448, 384, -640],
        [-448, 384, 640],
        [-448, 416, -640],
        [-448, 416, 640],
        [-448, 448, -640],
        [-448, 448, 640],
        [-448, 480, -640],
        [-448, 480, 640],
        [-448, 512, -640],
        [-448, 512, 640],
        [-448, 544, -640],
        [-448, 544, 640],
        [-448, 576, -640],
        [-448, 576, 640],
        [-448, 608, -640],
        [-448, 608, 640],
        [-448, 640, -640],
        [-448, 640, 640],
        [-448, -640, -608],
        [-448, 640, -608],
        [-448, -640, -576],
        [-448, 640, -576],
        [-448, -640, -544],
        [-448, 640, -544],
        [-448, -640, -512],
        [-448, 640, -512],
        [-448, -640, -480],
        [-448, 640, -480],
        [-448, -640, -448],
        [-448, 640, -448],
        [-448, -640, -416],
        [-448, 640, -416],
        [-448, -640, -384],
        [-448, 640, -384],
        [-448, -640, -352],
        [-448, 640, -352],
        [-448, -640, -320],
        [-448, 640, -320],
        [-448, -640, -288],
        [-448, 640, -288],
        [-448, -640, -256],
        [-448, 640, -256],
        [-448, -640, -224],
        [-448, 640, -224],
        [-448, -640, -192],
        [-448, 640, -192],
        [-448, -640, -160],
        [-448, 640, -160],
        [-448, -640, -128],
        [-448, 640, -128],
        [-448, -640, -96],
        [-448, 640, -96],
        [-448, -640, -64],
        [-448, 640, -64],
        [-448, -640, -32],
        [-448, 640, -32],
        [-448, -640, 0],
        [-448, 640, 0],
        [-448, -640, 32],
        [-448, 640, 32],
        [-448, -640, 64],
        [-448, 640, 64],
        [-448, -640, 96],
        [-448, 640, 96],
        [-448, -640, 128],
        [-448, 640, 128],
        [-448, -640, 160],
        [-448, 640, 160],
        [-448, -640, 192],
        [-448, 640, 192],
        [-448, -640, 224],
        [-448, 640, 224],
        [-448, -640, 256],
        [-448, 640, 256],
        [-448, -640, 288],
        [-448, 640, 288],
        [-448, -640, 320],
        [-448, 640, 320],
        [-448, -640, 352],
        [-448, 640, 352],
        [-448, -640, 384],
        [-448, 640, 384],
        [-448, -640, 416],
        [-448, 640, 416],
        [-448, -640, 448],
        [-448, 640, 448],
        [-448, -640, 480],
        [-448, 640, 480],
        [-448, -640, 512],
        [-448, 640, 512],
        [-448, -640, 544],
        [-448, 640, 544],
        [-448, -640, 576],
        [-448, 640, 576],
        [-448, -640, 608],
        [-448, 640, 608],
        [-416, -640, -640],
        [-416, -640, 640],
        [-416, -608, -640],
        [-416, -608, 640],
        [-416, -576, -640],
        [-416, -576, 640],
        [-416, -544, -640],
        [-416, -544, 640],
        [-416, -512, -640],
        [-416, -512, 640],
        [-416, -480, -640],
        [-416, -480, 640],
        [-416, -448, -640],
        [-416, -448, 640],
        [-416, -416, -640],
        [-416, -416, 640],
        [-416, -384, -640],
        [-416, -384, 640],
        [-416, -352, -640],
        [-416, -352, 640],
        [-416, -320, -640],
        [-416, -320, 640],
        [-416, -288, -640],
        [-416, -288, 640],
        [-416, -256, -640],
        [-416, -256, 640],
        [-416, -224, -640],
        [-416, -224, 640],
        [-416, -192, -640],
        [-416, -192, 640],
        [-416, -160, -640],
        [-416, -160, 640],
        [-416, -128, -640],
        [-416, -128, 640],
        [-416, -96, -640],
        [-416, -96, 640],
        [-416, -64, -640],
        [-416, -64, 640],
        [-416, -32, -640],
        [-416, -32, 640],
        [-416, 0, -640],
        [-416, 0, 640],
        [-416, 32, -640],
        [-416, 32, 640],
        [-416, 64, -640],
        [-416, 64, 640],
        [-416, 96, -640],
        [-416, 96, 640],
        [-416, 128, -640],
        [-416, 128, 640],
        [-416, 160, -640],
        [-416, 160, 640],
        [-416, 192, -640],
        [-416, 192, 640],
        [-416, 224, -640],
        [-416, 224, 640],
        [-416, 256, -640],
        [-416, 256, 640],
        [-416, 288, -640],
        [-416, 288, 640],
        [-416, 320, -640],
        [-416, 320, 640],
        [-416, 352, -640],
        [-416, 352, 640],
        [-416, 384, -640],
        [-416, 384, 640],
        [-416, 416, -640],
        [-416, 416, 640],
        [-416, 448, -640],
        [-416, 448, 640],
        [-416, 480, -640],
        [-416, 480, 640],
        [-416, 512, -640],
        [-416, 512, 640],
        [-416, 544, -640],
        [-416, 544, 640],
        [-416, 576, -640],
        [-416, 576, 640],
        [-416, 608, -640],
        [-416, 608, 640],
        [-416, 640, -640],
        [-416, 640, 640],
        [-416, -640, -608],
        [-416, 640, -608],
        [-416, -640, -576],
        [-416, 640, -576],
        [-416, -640, -544],
        [-416, 640, -544],
        [-416, -640, -512],
        [-416, 640, -512],
        [-416, -640, -480],
        [-416, 640, -480],
        [-416, -640, -448],
        [-416, 640, -448],
        [-416, -640, -416],
        [-416, 640, -416],
        [-416, -640, -384],
        [-416, 640, -384],
        [-416, -640, -352],
        [-416, 640, -352],
        [-416, -640, -320],
        [-416, 640, -320],
        [-416, -640, -288],
        [-416, 640, -288],
        [-416, -640, -256],
        [-416, 640, -256],
        [-416, -640, -224],
        [-416, 640, -224],
        [-416, -640, -192],
        [-416, 640, -192],
        [-416, -640, -160],
        [-416, 640, -160],
        [-416, -640, -128],
        [-416, 640, -128],
        [-416, -640, -96],
        [-416, 640, -96],
        [-416, -640, -64],
        [-416, 640, -64],
        [-416, -640, -32],
        [-416, 640, -32],
        [-416, -640, 0],
        [-416, 640, 0],
        [-416, -640, 32],
        [-416, 640, 32],
        [-416, -640, 64],
        [-416, 640, 64],
        [-416, -640, 96],
        [-416, 640, 96],
        [-416, -640, 128],
        [-416, 640, 128],
        [-416, -640, 160],
        [-416, 640, 160],
        [-416, -640, 192],
        [-416, 640, 192],
        [-416, -640, 224],
        [-416, 640, 224],
        [-416, -640, 256],
        [-416, 640, 256],
        [-416, -640, 288],
        [-416, 640, 288],
        [-416, -640, 320],
        [-416, 640, 320],
        [-416, -640, 352],
        [-416, 640, 352],
        [-416, -640, 384],
        [-416, 640, 384],
        [-416, -640, 416],
        [-416, 640, 416],
        [-416, -640, 448],
        [-416, 640, 448],
        [-416, -640, 480],
        [-416, 640, 480],
        [-416, -640, 512],
        [-416, 640, 512],
        [-416, -640, 544],
        [-416, 640, 544],
        [-416, -640, 576],
        [-416, 640, 576],
        [-416, -640, 608],
        [-416, 640, 608],
        [-384, -640, -640],
        [-384, -640, 640],
        [-384, -608, -640],
        [-384, -608, 640],
        [-384, -576, -640],
        [-384, -576, 640],
        [-384, -544, -640],
        [-384, -544, 640],
        [-384, -512, -640],
        [-384, -512, 640],
        [-384, -480, -640],
        [-384, -480, 640],
        [-384, -448, -640],
        [-384, -448, 640],
        [-384, -416, -640],
        [-384, -416, 640],
        [-384, -384, -640],
        [-384, -384, 640],
        [-384, -352, -640],
        [-384, -352, 640],
        [-384, -320, -640],
        [-384, -320, 640],
        [-384, -288, -640],
        [-384, -288, 640],
        [-384, -256, -640],
        [-384, -256, 640],
        [-384, -224, -640],
        [-384, -224, 640],
        [-384, -192, -640],
        [-384, -192, 640],
        [-384, -160, -640],
        [-384, -160, 640],
        [-384, -128, -640],
        [-384, -128, 640],
        [-384, -96, -640],
        [-384, -96, 640],
        [-384, -64, -640],
        [-384, -64, 640],
        [-384, -32, -640],
        [-384, -32, 640],
        [-384, 0, -640],
        [-384, 0, 640],
        [-384, 32, -640],
        [-384, 32, 640],
        [-384, 64, -640],
        [-384, 64, 640],
        [-384, 96, -640],
        [-384, 96, 640],
        [-384, 128, -640],
        [-384, 128, 640],
        [-384, 160, -640],
        [-384, 160, 640],
        [-384, 192, -640],
        [-384, 192, 640],
        [-384, 224, -640],
        [-384, 224, 640],
        [-384, 256, -640],
        [-384, 256, 640],
        [-384, 288, -640],
        [-384, 288, 640],
        [-384, 320, -640],
        [-384, 320, 640],
        [-384, 352, -640],
        [-384, 352, 640],
        [-384, 384, -640],
        [-384, 384, 640],
        [-384, 416, -640],
        [-384, 416, 640],
        [-384, 448, -640],
        [-384, 448, 640],
        [-384, 480, -640],
        [-384, 480, 640],
        [-384, 512, -640],
        [-384, 512, 640],
        [-384, 544, -640],
        [-384, 544, 640],
        [-384, 576, -640],
        [-384, 576, 640],
        [-384, 608, -640],
        [-384, 608, 640],
        [-384, 640, -640],
        [-384, 640, 640],
        [-384, -640, -608],
        [-384, 640, -608],
        [-384, -640, -576],
        [-384, 640, -576],
        [-384, -640, -544],
        [-384, 640, -544],
        [-384, -640, -512],
        [-384, 640, -512],
        [-384, -640, -480],
        [-384, 640, -480],
        [-384, -640, -448],
        [-384, 640, -448],
        [-384, -640, -416],
        [-384, 640, -416],
        [-384, -640, -384],
        [-384, 640, -384],
        [-384, -640, -352],
        [-384, 640, -352],
        [-384, -640, -320],
        [-384, 640, -320],
        [-384, -640, -288],
        [-384, 640, -288],
        [-384, -640, -256],
        [-384, 640, -256],
        [-384, -640, -224],
        [-384, 640, -224],
        [-384, -640, -192],
        [-384, 640, -192],
        [-384, -640, -160],
        [-384, 640, -160],
        [-384, -640, -128],
        [-384, 640, -128],
        [-384, -640, -96],
        [-384, 640, -96],
        [-384, -640, -64],
        [-384, 640, -64],
        [-384, -640, -32],
        [-384, 640, -32],
        [-384, -640, 0],
        [-384, 640, 0],
        [-384, -640, 32],
        [-384, 640, 32],
        [-384, -640, 64],
        [-384, 640, 64],
        [-384, -640, 96],
        [-384, 640, 96],
        [-384, -640, 128],
        [-384, 640, 128],
        [-384, -640, 160],
        [-384, 640, 160],
        [-384, -640, 192],
        [-384, 640, 192],
        [-384, -640, 224],
        [-384, 640, 224],
        [-384, -640, 256],
        [-384, 640, 256],
        [-384, -640, 288],
        [-384, 640, 288],
        [-384, -640, 320],
        [-384, 640, 320],
        [-384, -640, 352],
        [-384, 640, 352],
        [-384, -640, 384],
        [-384, 640, 384],
        [-384, -640, 416],
        [-384, 640, 416],
        [-384, -640, 448],
        [-384, 640, 448],
        [-384, -640, 480],
        [-384, 640, 480],
        [-384, -640, 512],
        [-384, 640, 512],
        [-384, -640, 544],
        [-384, 640, 544],
        [-384, -640, 576],
        [-384, 640, 576],
        [-384, -640, 608],
        [-384, 640, 608],
        [-352, -640, -640],
        [-352, -640, 640],
        [-352, -608, -640],
        [-352, -608, 640],
        [-352, -576, -640],
        [-352, -576, 640],
        [-352, -544, -640],
        [-352, -544, 640],
        [-352, -512, -640],
        [-352, -512, 640],
        [-352, -480, -640],
        [-352, -480, 640],
        [-352, -448, -640],
        [-352, -448, 640],
        [-352, -416, -640],
        [-352, -416, 640],
        [-352, -384, -640],
        [-352, -384, 640],
        [-352, -352, -640],
        [-352, -352, 640],
        [-352, -320, -640],
        [-352, -320, 640],
        [-352, -288, -640],
        [-352, -288, 640],
        [-352, -256, -640],
        [-352, -256, 640],
        [-352, -224, -640],
        [-352, -224, 640],
        [-352, -192, -640],
        [-352, -192, 640],
        [-352, -160, -640],
        [-352, -160, 640],
        [-352, -128, -640],
        [-352, -128, 640],
        [-352, -96, -640],
        [-352, -96, 640],
        [-352, -64, -640],
        [-352, -64, 640],
        [-352, -32, -640],
        [-352, -32, 640],
        [-352, 0, -640],
        [-352, 0, 640],
        [-352, 32, -640],
        [-352, 32, 640],
        [-352, 64, -640],
        [-352, 64, 640],
        [-352, 96, -640],
        [-352, 96, 640],
        [-352, 128, -640],
        [-352, 128, 640],
        [-352, 160, -640],
        [-352, 160, 640],
        [-352, 192, -640],
        [-352, 192, 640],
        [-352, 224, -640],
        [-352, 224, 640],
        [-352, 256, -640],
        [-352, 256, 640],
        [-352, 288, -640],
        [-352, 288, 640],
        [-352, 320, -640],
        [-352, 320, 640],
        [-352, 352, -640],
        [-352, 352, 640],
        [-352, 384, -640],
        [-352, 384, 640],
        [-352, 416, -640],
        [-352, 416, 640],
        [-352, 448, -640],
        [-352, 448, 640],
        [-352, 480, -640],
        [-352, 480, 640],
        [-352, 512, -640],
        [-352, 512, 640],
        [-352, 544, -640],
        [-352, 544, 640],
        [-352, 576, -640],
        [-352, 576, 640],
        [-352, 608, -640],
        [-352, 608, 640],
        [-352, 640, -640],
        [-352, 640, 640],
        [-352, -640, -608],
        [-352, 640, -608],
        [-352, -640, -576],
        [-352, 640, -576],
        [-352, -640, -544],
        [-352, 640, -544],
        [-352, -640, -512],
        [-352, 640, -512],
        [-352, -640, -480],
        [-352, 640, -480],
        [-352, -640, -448],
        [-352, 640, -448],
        [-352, -640, -416],
        [-352, 640, -416],
        [-352, -640, -384],
        [-352, 640, -384],
        [-352, -640, -352],
        [-352, 640, -352],
        [-352, -640, -320],
        [-352, 640, -320],
        [-352, -640, -288],
        [-352, 640, -288],
        [-352, -640, -256],
        [-352, 640, -256],
        [-352, -640, -224],
        [-352, 640, -224],
        [-352, -640, -192],
        [-352, 640, -192],
        [-352, -640, -160],
        [-352, 640, -160],
        [-352, -640, -128],
        [-352, 640, -128],
        [-352, -640, -96],
        [-352, 640, -96],
        [-352, -640, -64],
        [-352, 640, -64],
        [-352, -640, -32],
        [-352, 640, -32],
        [-352, -640, 0],
        [-352, 640, 0],
        [-352, -640, 32],
        [-352, 640, 32],
        [-352, -640, 64],
        [-352, 640, 64],
        [-352, -640, 96],
        [-352, 640, 96],
        [-352, -640, 128],
        [-352, 640, 128],
        [-352, -640, 160],
        [-352, 640, 160],
        [-352, -640, 192],
        [-352, 640, 192],
        [-352, -640, 224],
        [-352, 640, 224],
        [-352, -640, 256],
        [-352, 640, 256],
        [-352, -640, 288],
        [-352, 640, 288],
        [-352, -640, 320],
        [-352, 640, 320],
        [-352, -640, 352],
        [-352, 640, 352],
        [-352, -640, 384],
        [-352, 640, 384],
        [-352, -640, 416],
        [-352, 640, 416],
        [-352, -640, 448],
        [-352, 640, 448],
        [-352, -640, 480],
        [-352, 640, 480],
        [-352, -640, 512],
        [-352, 640, 512],
        [-352, -640, 544],
        [-352, 640, 544],
        [-352, -640, 576],
        [-352, 640, 576],
        [-352, -640, 608],
        [-352, 640, 608],
        [-320, -640, -640],
        [-320, -640, 640],
        [-320, -608, -640],
        [-320, -608, 640],
        [-320, -576, -640],
        [-320, -576, 640],
        [-320, -544, -640],
        [-320, -544, 640],
        [-320, -512, -640],
        [-320, -512, 640],
        [-320, -480, -640],
        [-320, -480, 640],
        [-320, -448, -640],
        [-320, -448, 640],
        [-320, -416, -640],
        [-320, -416, 640],
        [-320, -384, -640],
        [-320, -384, 640],
        [-320, -352, -640],
        [-320, -352, 640],
        [-320, -320, -640],
        [-320, -320, 640],
        [-320, -288, -640],
        [-320, -288, 640],
        [-320, -256, -640],
        [-320, -256, 640],
        [-320, -224, -640],
        [-320, -224, 640],
        [-320, -192, -640],
        [-320, -192, 640],
        [-320, -160, -640],
        [-320, -160, 640],
        [-320, -128, -640],
        [-320, -128, 640],
        [-320, -96, -640],
        [-320, -96, 640],
        [-320, -64, -640],
        [-320, -64, 640],
        [-320, -32, -640],
        [-320, -32, 640],
        [-320, 0, -640],
        [-320, 0, 640],
        [-320, 32, -640],
        [-320, 32, 640],
        [-320, 64, -640],
        [-320, 64, 640],
        [-320, 96, -640],
        [-320, 96, 640],
        [-320, 128, -640],
        [-320, 128, 640],
        [-320, 160, -640],
        [-320, 160, 640],
        [-320, 192, -640],
        [-320, 192, 640],
        [-320, 224, -640],
        [-320, 224, 640],
        [-320, 256, -640],
        [-320, 256, 640],
        [-320, 288, -640],
        [-320, 288, 640],
        [-320, 320, -640],
        [-320, 320, 640],
        [-320, 352, -640],
        [-320, 352, 640],
        [-320, 384, -640],
        [-320, 384, 640],
        [-320, 416, -640],
        [-320, 416, 640],
        [-320, 448, -640],
        [-320, 448, 640],
        [-320, 480, -640],
        [-320, 480, 640],
        [-320, 512, -640],
        [-320, 512, 640],
        [-320, 544, -640],
        [-320, 544, 640],
        [-320, 576, -640],
        [-320, 576, 640],
        [-320, 608, -640],
        [-320, 608, 640],
        [-320, 640, -640],
        [-320, 640, 640],
        [-320, -640, -608],
        [-320, 640, -608],
        [-320, -640, -576],
        [-320, 640, -576],
        [-320, -640, -544],
        [-320, 640, -544],
        [-320, -640, -512],
        [-320, 640, -512],
        [-320, -640, -480],
        [-320, 640, -480],
        [-320, -640, -448],
        [-320, 640, -448],
        [-320, -640, -416],
        [-320, 640, -416],
        [-320, -640, -384],
        [-320, 640, -384],
        [-320, -640, -352],
        [-320, 640, -352],
        [-320, -640, -320],
        [-320, 640, -320],
        [-320, -640, -288],
        [-320, 640, -288],
        [-320, -640, -256],
        [-320, 640, -256],
        [-320, -640, -224],
        [-320, 640, -224],
        [-320, -640, -192],
        [-320, 640, -192],
        [-320, -640, -160],
        [-320, 640, -160],
        [-320, -640, -128],
        [-320, 640, -128],
        [-320, -640, -96],
        [-320, 640, -96],
        [-320, -640, -64],
        [-320, 640, -64],
        [-320, -640, -32],
        [-320, 640, -32],
        [-320, -640, 0],
        [-320, 640, 0],
        [-320, -640, 32],
        [-320, 640, 32],
        [-320, -640, 64],
        [-320, 640, 64],
        [-320, -640, 96],
        [-320, 640, 96],
        [-320, -640, 128],
        [-320, 640, 128],
        [-320, -640, 160],
        [-320, 640, 160],
        [-320, -640, 192],
        [-320, 640, 192],
        [-320, -640, 224],
        [-320, 640, 224],
        [-320, -640, 256],
        [-320, 640, 256],
        [-320, -640, 288],
        [-320, 640, 288],
        [-320, -640, 320],
        [-320, 640, 320],
        [-320, -640, 352],
        [-320, 640, 352],
        [-320, -640, 384],
        [-320, 640, 384],
        [-320, -640, 416],
        [-320, 640, 416],
        [-320, -640, 448],
        [-320, 640, 448],
        [-320, -640, 480],
        [-320, 640, 480],
        [-320, -640, 512],
        [-320, 640, 512],
        [-320, -640, 544],
        [-320, 640, 544],
        [-320, -640, 576],
        [-320, 640, 576],
        [-320, -640, 608],
        [-320, 640, 608],
        [-288, -640, -640],
        [-288, -640, 640],
        [-288, -608, -640],
        [-288, -608, 640],
        [-288, -576, -640],
        [-288, -576, 640],
        [-288, -544, -640],
        [-288, -544, 640],
        [-288, -512, -640],
        [-288, -512, 640],
        [-288, -480, -640],
        [-288, -480, 640],
        [-288, -448, -640],
        [-288, -448, 640],
        [-288, -416, -640],
        [-288, -416, 640],
        [-288, -384, -640],
        [-288, -384, 640],
        [-288, -352, -640],
        [-288, -352, 640],
        [-288, -320, -640],
        [-288, -320, 640],
        [-288, -288, -640],
        [-288, -288, 640],
        [-288, -256, -640],
        [-288, -256, 640],
        [-288, -224, -640],
        [-288, -224, 640],
        [-288, -192, -640],
        [-288, -192, 640],
        [-288, -160, -640],
        [-288, -160, 640],
        [-288, -128, -640],
        [-288, -128, 640],
        [-288, -96, -640],
        [-288, -96, 640],
        [-288, -64, -640],
        [-288, -64, 640],
        [-288, -32, -640],
        [-288, -32, 640],
        [-288, 0, -640],
        [-288, 0, 640],
        [-288, 32, -640],
        [-288, 32, 640],
        [-288, 64, -640],
        [-288, 64, 640],
        [-288, 96, -640],
        [-288, 96, 640],
        [-288, 128, -640],
        [-288, 128, 640],
        [-288, 160, -640],
        [-288, 160, 640],
        [-288, 192, -640],
        [-288, 192, 640],
        [-288, 224, -640],
        [-288, 224, 640],
        [-288, 256, -640],
        [-288, 256, 640],
        [-288, 288, -640],
        [-288, 288, 640],
        [-288, 320, -640],
        [-288, 320, 640],
        [-288, 352, -640],
        [-288, 352, 640],
        [-288, 384, -640],
        [-288, 384, 640],
        [-288, 416, -640],
        [-288, 416, 640],
        [-288, 448, -640],
        [-288, 448, 640],
        [-288, 480, -640],
        [-288, 480, 640],
        [-288, 512, -640],
        [-288, 512, 640],
        [-288, 544, -640],
        [-288, 544, 640],
        [-288, 576, -640],
        [-288, 576, 640],
        [-288, 608, -640],
        [-288, 608, 640],
        [-288, 640, -640],
        [-288, 640, 640],
        [-288, -640, -608],
        [-288, 640, -608],
        [-288, -640, -576],
        [-288, 640, -576],
        [-288, -640, -544],
        [-288, 640, -544],
        [-288, -640, -512],
        [-288, 640, -512],
        [-288, -640, -480],
        [-288, 640, -480],
        [-288, -640, -448],
        [-288, 640, -448],
        [-288, -640, -416],
        [-288, 640, -416],
        [-288, -640, -384],
        [-288, 640, -384],
        [-288, -640, -352],
        [-288, 640, -352],
        [-288, -640, -320],
        [-288, 640, -320],
        [-288, -640, -288],
        [-288, 640, -288],
        [-288, -640, -256],
        [-288, 640, -256],
        [-288, -640, -224],
        [-288, 640, -224],
        [-288, -640, -192],
        [-288, 640, -192],
        [-288, -640, -160],
        [-288, 640, -160],
        [-288, -640, -128],
        [-288, 640, -128],
        [-288, -640, -96],
        [-288, 640, -96],
        [-288, -640, -64],
        [-288, 640, -64],
        [-288, -640, -32],
        [-288, 640, -32],
        [-288, -640, 0],
        [-288, 640, 0],
        [-288, -640, 32],
        [-288, 640, 32],
        [-288, -640, 64],
        [-288, 640, 64],
        [-288, -640, 96],
        [-288, 640, 96],
        [-288, -640, 128],
        [-288, 640, 128],
        [-288, -640, 160],
        [-288, 640, 160],
        [-288, -640, 192],
        [-288, 640, 192],
        [-288, -640, 224],
        [-288, 640, 224],
        [-288, -640, 256],
        [-288, 640, 256],
        [-288, -640, 288],
        [-288, 640, 288],
        [-288, -640, 320],
        [-288, 640, 320],
        [-288, -640, 352],
        [-288, 640, 352],
        [-288, -640, 384],
        [-288, 640, 384],
        [-288, -640, 416],
        [-288, 640, 416],
        [-288, -640, 448],
        [-288, 640, 448],
        [-288, -640, 480],
        [-288, 640, 480],
        [-288, -640, 512],
        [-288, 640, 512],
        [-288, -640, 544],
        [-288, 640, 544],
        [-288, -640, 576],
        [-288, 640, 576],
        [-288, -640, 608],
        [-288, 640, 608],
        [-256, -640, -640],
        [-256, -640, 640],
        [-256, -608, -640],
        [-256, -608, 640],
        [-256, -576, -640],
        [-256, -576, 640],
        [-256, -544, -640],
        [-256, -544, 640],
        [-256, -512, -640],
        [-256, -512, 640],
        [-256, -480, -640],
        [-256, -480, 640],
        [-256, -448, -640],
        [-256, -448, 640],
        [-256, -416, -640],
        [-256, -416, 640],
        [-256, -384, -640],
        [-256, -384, 640],
        [-256, -352, -640],
        [-256, -352, 640],
        [-256, -320, -640],
        [-256, -320, 640],
        [-256, -288, -640],
        [-256, -288, 640],
        [-256, -256, -640],
        [-256, -256, 640],
        [-256, -224, -640],
        [-256, -224, 640],
        [-256, -192, -640],
        [-256, -192, 640],
        [-256, -160, -640],
        [-256, -160, 640],
        [-256, -128, -640],
        [-256, -128, 640],
        [-256, -96, -640],
        [-256, -96, 640],
        [-256, -64, -640],
        [-256, -64, 640],
        [-256, -32, -640],
        [-256, -32, 640],
        [-256, 0, -640],
        [-256, 0, 640],
        [-256, 32, -640],
        [-256, 32, 640],
        [-256, 64, -640],
        [-256, 64, 640],
        [-256, 96, -640],
        [-256, 96, 640],
        [-256, 128, -640],
        [-256, 128, 640],
        [-256, 160, -640],
        [-256, 160, 640],
        [-256, 192, -640],
        [-256, 192, 640],
        [-256, 224, -640],
        [-256, 224, 640],
        [-256, 256, -640],
        [-256, 256, 640],
        [-256, 288, -640],
        [-256, 288, 640],
        [-256, 320, -640],
        [-256, 320, 640],
        [-256, 352, -640],
        [-256, 352, 640],
        [-256, 384, -640],
        [-256, 384, 640],
        [-256, 416, -640],
        [-256, 416, 640],
        [-256, 448, -640],
        [-256, 448, 640],
        [-256, 480, -640],
        [-256, 480, 640],
        [-256, 512, -640],
        [-256, 512, 640],
        [-256, 544, -640],
        [-256, 544, 640],
        [-256, 576, -640],
        [-256, 576, 640],
        [-256, 608, -640],
        [-256, 608, 640],
        [-256, 640, -640],
        [-256, 640, 640],
        [-256, -640, -608],
        [-256, 640, -608],
        [-256, -640, -576],
        [-256, 640, -576],
        [-256, -640, -544],
        [-256, 640, -544],
        [-256, -640, -512],
        [-256, 640, -512],
        [-256, -640, -480],
        [-256, 640, -480],
        [-256, -640, -448],
        [-256, 640, -448],
        [-256, -640, -416],
        [-256, 640, -416],
        [-256, -640, -384],
        [-256, 640, -384],
        [-256, -640, -352],
        [-256, 640, -352],
        [-256, -640, -320],
        [-256, 640, -320],
        [-256, -640, -288],
        [-256, 640, -288],
        [-256, -640, -256],
        [-256, 640, -256],
        [-256, -640, -224],
        [-256, 640, -224],
        [-256, -640, -192],
        [-256, 640, -192],
        [-256, -640, -160],
        [-256, 640, -160],
        [-256, -640, -128],
        [-256, 640, -128],
        [-256, -640, -96],
        [-256, 640, -96],
        [-256, -640, -64],
        [-256, 640, -64],
        [-256, -640, -32],
        [-256, 640, -32],
        [-256, -640, 0],
        [-256, 640, 0],
        [-256, -640, 32],
        [-256, 640, 32],
        [-256, -640, 64],
        [-256, 640, 64],
        [-256, -640, 96],
        [-256, 640, 96],
        [-256, -640, 128],
        [-256, 640, 128],
        [-256, -640, 160],
        [-256, 640, 160],
        [-256, -640, 192],
        [-256, 640, 192],
        [-256, -640, 224],
        [-256, 640, 224],
        [-256, -640, 256],
        [-256, 640, 256],
        [-256, -640, 288],
        [-256, 640, 288],
        [-256, -640, 320],
        [-256, 640, 320],
        [-256, -640, 352],
        [-256, 640, 352],
        [-256, -640, 384],
        [-256, 640, 384],
        [-256, -640, 416],
        [-256, 640, 416],
        [-256, -640, 448],
        [-256, 640, 448],
        [-256, -640, 480],
        [-256, 640, 480],
        [-256, -640, 512],
        [-256, 640, 512],
        [-256, -640, 544],
        [-256, 640, 544],
        [-256, -640, 576],
        [-256, 640, 576],
        [-256, -640, 608],
        [-256, 640, 608],
        [-224, -640, -640],
        [-224, -640, 640],
        [-224, -608, -640],
        [-224, -608, 640],
        [-224, -576, -640],
        [-224, -576, 640],
        [-224, -544, -640],
        [-224, -544, 640],
        [-224, -512, -640],
        [-224, -512, 640],
        [-224, -480, -640],
        [-224, -480, 640],
        [-224, -448, -640],
        [-224, -448, 640],
        [-224, -416, -640],
        [-224, -416, 640],
        [-224, -384, -640],
        [-224, -384, 640],
        [-224, -352, -640],
        [-224, -352, 640],
        [-224, -320, -640],
        [-224, -320, 640],
        [-224, -288, -640],
        [-224, -288, 640],
        [-224, -256, -640],
        [-224, -256, 640],
        [-224, -224, -640],
        [-224, -224, 640],
        [-224, -192, -640],
        [-224, -192, 640],
        [-224, -160, -640],
        [-224, -160, 640],
        [-224, -128, -640],
        [-224, -128, 640],
        [-224, -96, -640],
        [-224, -96, 640],
        [-224, -64, -640],
        [-224, -64, 640],
        [-224, -32, -640],
        [-224, -32, 640],
        [-224, 0, -640],
        [-224, 0, 640],
        [-224, 32, -640],
        [-224, 32, 640],
        [-224, 64, -640],
        [-224, 64, 640],
        [-224, 96, -640],
        [-224, 96, 640],
        [-224, 128, -640],
        [-224, 128, 640],
        [-224, 160, -640],
        [-224, 160, 640],
        [-224, 192, -640],
        [-224, 192, 640],
        [-224, 224, -640],
        [-224, 224, 640],
        [-224, 256, -640],
        [-224, 256, 640],
        [-224, 288, -640],
        [-224, 288, 640],
        [-224, 320, -640],
        [-224, 320, 640],
        [-224, 352, -640],
        [-224, 352, 640],
        [-224, 384, -640],
        [-224, 384, 640],
        [-224, 416, -640],
        [-224, 416, 640],
        [-224, 448, -640],
        [-224, 448, 640],
        [-224, 480, -640],
        [-224, 480, 640],
        [-224, 512, -640],
        [-224, 512, 640],
        [-224, 544, -640],
        [-224, 544, 640],
        [-224, 576, -640],
        [-224, 576, 640],
        [-224, 608, -640],
        [-224, 608, 640],
        [-224, 640, -640],
        [-224, 640, 640],
        [-224, -640, -608],
        [-224, 640, -608],
        [-224, -640, -576],
        [-224, 640, -576],
        [-224, -640, -544],
        [-224, 640, -544],
        [-224, -640, -512],
        [-224, 640, -512],
        [-224, -640, -480],
        [-224, 640, -480],
        [-224, -640, -448],
        [-224, 640, -448],
        [-224, -640, -416],
        [-224, 640, -416],
        [-224, -640, -384],
        [-224, 640, -384],
        [-224, -640, -352],
        [-224, 640, -352],
        [-224, -640, -320],
        [-224, 640, -320],
        [-224, -640, -288],
        [-224, 640, -288],
        [-224, -640, -256],
        [-224, 640, -256],
        [-224, -640, -224],
        [-224, 640, -224],
        [-224, -640, -192],
        [-224, 640, -192],
        [-224, -640, -160],
        [-224, 640, -160],
        [-224, -640, -128],
        [-224, 640, -128],
        [-224, -640, -96],
        [-224, 640, -96],
        [-224, -640, -64],
        [-224, 640, -64],
        [-224, -640, -32],
        [-224, 640, -32],
        [-224, -640, 0],
        [-224, 640, 0],
        [-224, -640, 32],
        [-224, 640, 32],
        [-224, -640, 64],
        [-224, 640, 64],
        [-224, -640, 96],
        [-224, 640, 96],
        [-224, -640, 128],
        [-224, 640, 128],
        [-224, -640, 160],
        [-224, 640, 160],
        [-224, -640, 192],
        [-224, 640, 192],
        [-224, -640, 224],
        [-224, 640, 224],
        [-224, -640, 256],
        [-224, 640, 256],
        [-224, -640, 288],
        [-224, 640, 288],
        [-224, -640, 320],
        [-224, 640, 320],
        [-224, -640, 352],
        [-224, 640, 352],
        [-224, -640, 384],
        [-224, 640, 384],
        [-224, -640, 416],
        [-224, 640, 416],
        [-224, -640, 448],
        [-224, 640, 448],
        [-224, -640, 480],
        [-224, 640, 480],
        [-224, -640, 512],
        [-224, 640, 512],
        [-224, -640, 544],
        [-224, 640, 544],
        [-224, -640, 576],
        [-224, 640, 576],
        [-224, -640, 608],
        [-224, 640, 608],
        [-192, -640, -640],
        [-192, -640, 640],
        [-192, -608, -640],
        [-192, -608, 640],
        [-192, -576, -640],
        [-192, -576, 640],
        [-192, -544, -640],
        [-192, -544, 640],
        [-192, -512, -640],
        [-192, -512, 640],
        [-192, -480, -640],
        [-192, -480, 640],
        [-192, -448, -640],
        [-192, -448, 640],
        [-192, -416, -640],
        [-192, -416, 640],
        [-192, -384, -640],
        [-192, -384, 640],
        [-192, -352, -640],
        [-192, -352, 640],
        [-192, -320, -640],
        [-192, -320, 640],
        [-192, -288, -640],
        [-192, -288, 640],
        [-192, -256, -640],
        [-192, -256, 640],
        [-192, -224, -640],
        [-192, -224, 640],
        [-192, -192, -640],
        [-192, -192, 640],
        [-192, -160, -640],
        [-192, -160, 640],
        [-192, -128, -640],
        [-192, -128, 640],
        [-192, -96, -640],
        [-192, -96, 640],
        [-192, -64, -640],
        [-192, -64, 640],
        [-192, -32, -640],
        [-192, -32, 640],
        [-192, 0, -640],
        [-192, 0, 640],
        [-192, 32, -640],
        [-192, 32, 640],
        [-192, 64, -640],
        [-192, 64, 640],
        [-192, 96, -640],
        [-192, 96, 640],
        [-192, 128, -640],
        [-192, 128, 640],
        [-192, 160, -640],
        [-192, 160, 640],
        [-192, 192, -640],
        [-192, 192, 640],
        [-192, 224, -640],
        [-192, 224, 640],
        [-192, 256, -640],
        [-192, 256, 640],
        [-192, 288, -640],
        [-192, 288, 640],
        [-192, 320, -640],
        [-192, 320, 640],
        [-192, 352, -640],
        [-192, 352, 640],
        [-192, 384, -640],
        [-192, 384, 640],
        [-192, 416, -640],
        [-192, 416, 640],
        [-192, 448, -640],
        [-192, 448, 640],
        [-192, 480, -640],
        [-192, 480, 640],
        [-192, 512, -640],
        [-192, 512, 640],
        [-192, 544, -640],
        [-192, 544, 640],
        [-192, 576, -640],
        [-192, 576, 640],
        [-192, 608, -640],
        [-192, 608, 640],
        [-192, 640, -640],
        [-192, 640, 640],
        [-192, -640, -608],
        [-192, 640, -608],
        [-192, -640, -576],
        [-192, 640, -576],
        [-192, -640, -544],
        [-192, 640, -544],
        [-192, -640, -512],
        [-192, 640, -512],
        [-192, -640, -480],
        [-192, 640, -480],
        [-192, -640, -448],
        [-192, 640, -448],
        [-192, -640, -416],
        [-192, 640, -416],
        [-192, -640, -384],
        [-192, 640, -384],
        [-192, -640, -352],
        [-192, 640, -352],
        [-192, -640, -320],
        [-192, 640, -320],
        [-192, -640, -288],
        [-192, 640, -288],
        [-192, -640, -256],
        [-192, 640, -256],
        [-192, -640, -224],
        [-192, 640, -224],
        [-192, -640, -192],
        [-192, 640, -192],
        [-192, -640, -160],
        [-192, 640, -160],
        [-192, -640, -128],
        [-192, 640, -128],
        [-192, -640, -96],
        [-192, 640, -96],
        [-192, -640, -64],
        [-192, 640, -64],
        [-192, -640, -32],
        [-192, 640, -32],
        [-192, -640, 0],
        [-192, 640, 0],
        [-192, -640, 32],
        [-192, 640, 32],
        [-192, -640, 64],
        [-192, 640, 64],
        [-192, -640, 96],
        [-192, 640, 96],
        [-192, -640, 128],
        [-192, 640, 128],
        [-192, -640, 160],
        [-192, 640, 160],
        [-192, -640, 192],
        [-192, 640, 192],
        [-192, -640, 224],
        [-192, 640, 224],
        [-192, -640, 256],
        [-192, 640, 256],
        [-192, -640, 288],
        [-192, 640, 288],
        [-192, -640, 320],
        [-192, 640, 320],
        [-192, -640, 352],
        [-192, 640, 352],
        [-192, -640, 384],
        [-192, 640, 384],
        [-192, -640, 416],
        [-192, 640, 416],
        [-192, -640, 448],
        [-192, 640, 448],
        [-192, -640, 480],
        [-192, 640, 480],
        [-192, -640, 512],
        [-192, 640, 512],
        [-192, -640, 544],
        [-192, 640, 544],
        [-192, -640, 576],
        [-192, 640, 576],
        [-192, -640, 608],
        [-192, 640, 608],
        [-160, -640, -640],
        [-160, -640, 640],
        [-160, -608, -640],
        [-160, -608, 640],
        [-160, -576, -640],
        [-160, -576, 640],
        [-160, -544, -640],
        [-160, -544, 640],
        [-160, -512, -640],
        [-160, -512, 640],
        [-160, -480, -640],
        [-160, -480, 640],
        [-160, -448, -640],
        [-160, -448, 640],
        [-160, -416, -640],
        [-160, -416, 640],
        [-160, -384, -640],
        [-160, -384, 640],
        [-160, -352, -640],
        [-160, -352, 640],
        [-160, -320, -640],
        [-160, -320, 640],
        [-160, -288, -640],
        [-160, -288, 640],
        [-160, -256, -640],
        [-160, -256, 640],
        [-160, -224, -640],
        [-160, -224, 640],
        [-160, -192, -640],
        [-160, -192, 640],
        [-160, -160, -640],
        [-160, -160, 640],
        [-160, -128, -640],
        [-160, -128, 640],
        [-160, -96, -640],
        [-160, -96, 640],
        [-160, -64, -640],
        [-160, -64, 640],
        [-160, -32, -640],
        [-160, -32, 640],
        [-160, 0, -640],
        [-160, 0, 640],
        [-160, 32, -640],
        [-160, 32, 640],
        [-160, 64, -640],
        [-160, 64, 640],
        [-160, 96, -640],
        [-160, 96, 640],
        [-160, 128, -640],
        [-160, 128, 640],
        [-160, 160, -640],
        [-160, 160, 640],
        [-160, 192, -640],
        [-160, 192, 640],
        [-160, 224, -640],
        [-160, 224, 640],
        [-160, 256, -640],
        [-160, 256, 640],
        [-160, 288, -640],
        [-160, 288, 640],
        [-160, 320, -640],
        [-160, 320, 640],
        [-160, 352, -640],
        [-160, 352, 640],
        [-160, 384, -640],
        [-160, 384, 640],
        [-160, 416, -640],
        [-160, 416, 640],
        [-160, 448, -640],
        [-160, 448, 640],
        [-160, 480, -640],
        [-160, 480, 640],
        [-160, 512, -640],
        [-160, 512, 640],
        [-160, 544, -640],
        [-160, 544, 640],
        [-160, 576, -640],
        [-160, 576, 640],
        [-160, 608, -640],
        [-160, 608, 640],
        [-160, 640, -640],
        [-160, 640, 640],
        [-160, -640, -608],
        [-160, 640, -608],
        [-160, -640, -576],
        [-160, 640, -576],
        [-160, -640, -544],
        [-160, 640, -544],
        [-160, -640, -512],
        [-160, 640, -512],
        [-160, -640, -480],
        [-160, 640, -480],
        [-160, -640, -448],
        [-160, 640, -448],
        [-160, -640, -416],
        [-160, 640, -416],
        [-160, -640, -384],
        [-160, 640, -384],
        [-160, -640, -352],
        [-160, 640, -352],
        [-160, -640, -320],
        [-160, 640, -320],
        [-160, -640, -288],
        [-160, 640, -288],
        [-160, -640, -256],
        [-160, 640, -256],
        [-160, -640, -224],
        [-160, 640, -224],
        [-160, -640, -192],
        [-160, 640, -192],
        [-160, -640, -160],
        [-160, 640, -160],
        [-160, -640, -128],
        [-160, 640, -128],
        [-160, -640, -96],
        [-160, 640, -96],
        [-160, -640, -64],
        [-160, 640, -64],
        [-160, -640, -32],
        [-160, 640, -32],
        [-160, -640, 0],
        [-160, 640, 0],
        [-160, -640, 32],
        [-160, 640, 32],
        [-160, -640, 64],
        [-160, 640, 64],
        [-160, -640, 96],
        [-160, 640, 96],
        [-160, -640, 128],
        [-160, 640, 128],
        [-160, -640, 160],
        [-160, 640, 160],
        [-160, -640, 192],
        [-160, 640, 192],
        [-160, -640, 224],
        [-160, 640, 224],
        [-160, -640, 256],
        [-160, 640, 256],
        [-160, -640, 288],
        [-160, 640, 288],
        [-160, -640, 320],
        [-160, 640, 320],
        [-160, -640, 352],
        [-160, 640, 352],
        [-160, -640, 384],
        [-160, 640, 384],
        [-160, -640, 416],
        [-160, 640, 416],
        [-160, -640, 448],
        [-160, 640, 448],
        [-160, -640, 480],
        [-160, 640, 480],
        [-160, -640, 512],
        [-160, 640, 512],
        [-160, -640, 544],
        [-160, 640, 544],
        [-160, -640, 576],
        [-160, 640, 576],
        [-160, -640, 608],
        [-160, 640, 608],
        [-128, -640, -640],
        [-128, -640, 640],
        [-128, -608, -640],
        [-128, -608, 640],
        [-128, -576, -640],
        [-128, -576, 640],
        [-128, -544, -640],
        [-128, -544, 640],
        [-128, -512, -640],
        [-128, -512, 640],
        [-128, -480, -640],
        [-128, -480, 640],
        [-128, -448, -640],
        [-128, -448, 640],
        [-128, -416, -640],
        [-128, -416, 640],
        [-128, -384, -640],
        [-128, -384, 640],
        [-128, -352, -640],
        [-128, -352, 640],
        [-128, -320, -640],
        [-128, -320, 640],
        [-128, -288, -640],
        [-128, -288, 640],
        [-128, -256, -640],
        [-128, -256, 640],
        [-128, -224, -640],
        [-128, -224, 640],
        [-128, -192, -640],
        [-128, -192, 640],
        [-128, -160, -640],
        [-128, -160, 640],
        [-128, -128, -640],
        [-128, -128, 640],
        [-128, -96, -640],
        [-128, -96, 640],
        [-128, -64, -640],
        [-128, -64, 640],
        [-128, -32, -640],
        [-128, -32, 640],
        [-128, 0, -640],
        [-128, 0, 640],
        [-128, 32, -640],
        [-128, 32, 640],
        [-128, 64, -640],
        [-128, 64, 640],
        [-128, 96, -640],
        [-128, 96, 640],
        [-128, 128, -640],
        [-128, 128, 640],
        [-128, 160, -640],
        [-128, 160, 640],
        [-128, 192, -640],
        [-128, 192, 640],
        [-128, 224, -640],
        [-128, 224, 640],
        [-128, 256, -640],
        [-128, 256, 640],
        [-128, 288, -640],
        [-128, 288, 640],
        [-128, 320, -640],
        [-128, 320, 640],
        [-128, 352, -640],
        [-128, 352, 640],
        [-128, 384, -640],
        [-128, 384, 640],
        [-128, 416, -640],
        [-128, 416, 640],
        [-128, 448, -640],
        [-128, 448, 640],
        [-128, 480, -640],
        [-128, 480, 640],
        [-128, 512, -640],
        [-128, 512, 640],
        [-128, 544, -640],
        [-128, 544, 640],
        [-128, 576, -640],
        [-128, 576, 640],
        [-128, 608, -640],
        [-128, 608, 640],
        [-128, 640, -640],
        [-128, 640, 640],
        [-128, -640, -608],
        [-128, 640, -608],
        [-128, -640, -576],
        [-128, 640, -576],
        [-128, -640, -544],
        [-128, 640, -544],
        [-128, -640, -512],
        [-128, 640, -512],
        [-128, -640, -480],
        [-128, 640, -480],
        [-128, -640, -448],
        [-128, 640, -448],
        [-128, -640, -416],
        [-128, 640, -416],
        [-128, -640, -384],
        [-128, 640, -384],
        [-128, -640, -352],
        [-128, 640, -352],
        [-128, -640, -320],
        [-128, 640, -320],
        [-128, -640, -288],
        [-128, 640, -288],
        [-128, -640, -256],
        [-128, 640, -256],
        [-128, -640, -224],
        [-128, 640, -224],
        [-128, -640, -192],
        [-128, 640, -192],
        [-128, -640, -160],
        [-128, 640, -160],
        [-128, -640, -128],
        [-128, 640, -128],
        [-128, -640, -96],
        [-128, 640, -96],
        [-128, -640, -64],
        [-128, 640, -64],
        [-128, -640, -32],
        [-128, 640, -32],
        [-128, -640, 0],
        [-128, 640, 0],
        [-128, -640, 32],
        [-128, 640, 32],
        [-128, -640, 64],
        [-128, 640, 64],
        [-128, -640, 96],
        [-128, 640, 96],
        [-128, -640, 128],
        [-128, 640, 128],
        [-128, -640, 160],
        [-128, 640, 160],
        [-128, -640, 192],
        [-128, 640, 192],
        [-128, -640, 224],
        [-128, 640, 224],
        [-128, -640, 256],
        [-128, 640, 256],
        [-128, -640, 288],
        [-128, 640, 288],
        [-128, -640, 320],
        [-128, 640, 320],
        [-128, -640, 352],
        [-128, 640, 352],
        [-128, -640, 384],
        [-128, 640, 384],
        [-128, -640, 416],
        [-128, 640, 416],
        [-128, -640, 448],
        [-128, 640, 448],
        [-128, -640, 480],
        [-128, 640, 480],
        [-128, -640, 512],
        [-128, 640, 512],
        [-128, -640, 544],
        [-128, 640, 544],
        [-128, -640, 576],
        [-128, 640, 576],
        [-128, -640, 608],
        [-128, 640, 608],
        [-96, -640, -640],
        [-96, -640, 640],
        [-96, -608, -640],
        [-96, -608, 640],
        [-96, -576, -640],
        [-96, -576, 640],
        [-96, -544, -640],
        [-96, -544, 640],
        [-96, -512, -640],
        [-96, -512, 640],
        [-96, -480, -640],
        [-96, -480, 640],
        [-96, -448, -640],
        [-96, -448, 640],
        [-96, -416, -640],
        [-96, -416, 640],
        [-96, -384, -640],
        [-96, -384, 640],
        [-96, -352, -640],
        [-96, -352, 640],
        [-96, -320, -640],
        [-96, -320, 640],
        [-96, -288, -640],
        [-96, -288, 640],
        [-96, -256, -640],
        [-96, -256, 640],
        [-96, -224, -640],
        [-96, -224, 640],
        [-96, -192, -640],
        [-96, -192, 640],
        [-96, -160, -640],
        [-96, -160, 640],
        [-96, -128, -640],
        [-96, -128, 640],
        [-96, -96, -640],
        [-96, -96, 640],
        [-96, -64, -640],
        [-96, -64, 640],
        [-96, -32, -640],
        [-96, -32, 640],
        [-96, 0, -640],
        [-96, 0, 640],
        [-96, 32, -640],
        [-96, 32, 640],
        [-96, 64, -640],
        [-96, 64, 640],
        [-96, 96, -640],
        [-96, 96, 640],
        [-96, 128, -640],
        [-96, 128, 640],
        [-96, 160, -640],
        [-96, 160, 640],
        [-96, 192, -640],
        [-96, 192, 640],
        [-96, 224, -640],
        [-96, 224, 640],
        [-96, 256, -640],
        [-96, 256, 640],
        [-96, 288, -640],
        [-96, 288, 640],
        [-96, 320, -640],
        [-96, 320, 640],
        [-96, 352, -640],
        [-96, 352, 640],
        [-96, 384, -640],
        [-96, 384, 640],
        [-96, 416, -640],
        [-96, 416, 640],
        [-96, 448, -640],
        [-96, 448, 640],
        [-96, 480, -640],
        [-96, 480, 640],
        [-96, 512, -640],
        [-96, 512, 640],
        [-96, 544, -640],
        [-96, 544, 640],
        [-96, 576, -640],
        [-96, 576, 640],
        [-96, 608, -640],
        [-96, 608, 640],
        [-96, 640, -640],
        [-96, 640, 640],
        [-96, -640, -608],
        [-96, 640, -608],
        [-96, -640, -576],
        [-96, 640, -576],
        [-96, -640, -544],
        [-96, 640, -544],
        [-96, -640, -512],
        [-96, 640, -512],
        [-96, -640, -480],
        [-96, 640, -480],
        [-96, -640, -448],
        [-96, 640, -448],
        [-96, -640, -416],
        [-96, 640, -416],
        [-96, -640, -384],
        [-96, 640, -384],
        [-96, -640, -352],
        [-96, 640, -352],
        [-96, -640, -320],
        [-96, 640, -320],
        [-96, -640, -288],
        [-96, 640, -288],
        [-96, -640, -256],
        [-96, 640, -256],
        [-96, -640, -224],
        [-96, 640, -224],
        [-96, -640, -192],
        [-96, 640, -192],
        [-96, -640, -160],
        [-96, 640, -160],
        [-96, -640, -128],
        [-96, 640, -128],
        [-96, -640, -96],
        [-96, 640, -96],
        [-96, -640, -64],
        [-96, 640, -64],
        [-96, -640, -32],
        [-96, 640, -32],
        [-96, -640, 0],
        [-96, 640, 0],
        [-96, -640, 32],
        [-96, 640, 32],
        [-96, -640, 64],
        [-96, 640, 64],
        [-96, -640, 96],
        [-96, 640, 96],
        [-96, -640, 128],
        [-96, 640, 128],
        [-96, -640, 160],
        [-96, 640, 160],
        [-96, -640, 192],
        [-96, 640, 192],
        [-96, -640, 224],
        [-96, 640, 224],
        [-96, -640, 256],
        [-96, 640, 256],
        [-96, -640, 288],
        [-96, 640, 288],
        [-96, -640, 320],
        [-96, 640, 320],
        [-96, -640, 352],
        [-96, 640, 352],
        [-96, -640, 384],
        [-96, 640, 384],
        [-96, -640, 416],
        [-96, 640, 416],
        [-96, -640, 448],
        [-96, 640, 448],
        [-96, -640, 480],
        [-96, 640, 480],
        [-96, -640, 512],
        [-96, 640, 512],
        [-96, -640, 544],
        [-96, 640, 544],
        [-96, -640, 576],
        [-96, 640, 576],
        [-96, -640, 608],
        [-96, 640, 608],
        [-64, -640, -640],
        [-64, -640, 640],
        [-64, -608, -640],
        [-64, -608, 640],
        [-64, -576, -640],
        [-64, -576, 640],
        [-64, -544, -640],
        [-64, -544, 640],
        [-64, -512, -640],
        [-64, -512, 640],
        [-64, -480, -640],
        [-64, -480, 640],
        [-64, -448, -640],
        [-64, -448, 640],
        [-64, -416, -640],
        [-64, -416, 640],
        [-64, -384, -640],
        [-64, -384, 640],
        [-64, -352, -640],
        [-64, -352, 640],
        [-64, -320, -640],
        [-64, -320, 640],
        [-64, -288, -640],
        [-64, -288, 640],
        [-64, -256, -640],
        [-64, -256, 640],
        [-64, -224, -640],
        [-64, -224, 640],
        [-64, -192, -640],
        [-64, -192, 640],
        [-64, -160, -640],
        [-64, -160, 640],
        [-64, -128, -640],
        [-64, -128, 640],
        [-64, -96, -640],
        [-64, -96, 640],
        [-64, -64, -640],
        [-64, -64, 640],
        [-64, -32, -640],
        [-64, -32, 640],
        [-64, 0, -640],
        [-64, 0, 640],
        [-64, 32, -640],
        [-64, 32, 640],
        [-64, 64, -640],
        [-64, 64, 640],
        [-64, 96, -640],
        [-64, 96, 640],
        [-64, 128, -640],
        [-64, 128, 640],
        [-64, 160, -640],
        [-64, 160, 640],
        [-64, 192, -640],
        [-64, 192, 640],
        [-64, 224, -640],
        [-64, 224, 640],
        [-64, 256, -640],
        [-64, 256, 640],
        [-64, 288, -640],
        [-64, 288, 640],
        [-64, 320, -640],
        [-64, 320, 640],
        [-64, 352, -640],
        [-64, 352, 640],
        [-64, 384, -640],
        [-64, 384, 640],
        [-64, 416, -640],
        [-64, 416, 640],
        [-64, 448, -640],
        [-64, 448, 640],
        [-64, 480, -640],
        [-64, 480, 640],
        [-64, 512, -640],
        [-64, 512, 640],
        [-64, 544, -640],
        [-64, 544, 640],
        [-64, 576, -640],
        [-64, 576, 640],
        [-64, 608, -640],
        [-64, 608, 640],
        [-64, 640, -640],
        [-64, 640, 640],
        [-64, -640, -608],
        [-64, 640, -608],
        [-64, -640, -576],
        [-64, 640, -576],
        [-64, -640, -544],
        [-64, 640, -544],
        [-64, -640, -512],
        [-64, 640, -512],
        [-64, -640, -480],
        [-64, 640, -480],
        [-64, -640, -448],
        [-64, 640, -448],
        [-64, -640, -416],
        [-64, 640, -416],
        [-64, -640, -384],
        [-64, 640, -384],
        [-64, -640, -352],
        [-64, 640, -352],
        [-64, -640, -320],
        [-64, 640, -320],
        [-64, -640, -288],
        [-64, 640, -288],
        [-64, -640, -256],
        [-64, 640, -256],
        [-64, -640, -224],
        [-64, 640, -224],
        [-64, -640, -192],
        [-64, 640, -192],
        [-64, -640, -160],
        [-64, 640, -160],
        [-64, -640, -128],
        [-64, 640, -128],
        [-64, -640, -96],
        [-64, 640, -96],
        [-64, -640, -64],
        [-64, 640, -64],
        [-64, -640, -32],
        [-64, 640, -32],
        [-64, -640, 0],
        [-64, 640, 0],
        [-64, -640, 32],
        [-64, 640, 32],
        [-64, -640, 64],
        [-64, 640, 64],
        [-64, -640, 96],
        [-64, 640, 96],
        [-64, -640, 128],
        [-64, 640, 128],
        [-64, -640, 160],
        [-64, 640, 160],
        [-64, -640, 192],
        [-64, 640, 192],
        [-64, -640, 224],
        [-64, 640, 224],
        [-64, -640, 256],
        [-64, 640, 256],
        [-64, -640, 288],
        [-64, 640, 288],
        [-64, -640, 320],
        [-64, 640, 320],
        [-64, -640, 352],
        [-64, 640, 352],
        [-64, -640, 384],
        [-64, 640, 384],
        [-64, -640, 416],
        [-64, 640, 416],
        [-64, -640, 448],
        [-64, 640, 448],
        [-64, -640, 480],
        [-64, 640, 480],
        [-64, -640, 512],
        [-64, 640, 512],
        [-64, -640, 544],
        [-64, 640, 544],
        [-64, -640, 576],
        [-64, 640, 576],
        [-64, -640, 608],
        [-64, 640, 608],
        [-32, -640, -640],
        [-32, -640, 640],
        [-32, -608, -640],
        [-32, -608, 640],
        [-32, -576, -640],
        [-32, -576, 640],
        [-32, -544, -640],
        [-32, -544, 640],
        [-32, -512, -640],
        [-32, -512, 640],
        [-32, -480, -640],
        [-32, -480, 640],
        [-32, -448, -640],
        [-32, -448, 640],
        [-32, -416, -640],
        [-32, -416, 640],
        [-32, -384, -640],
        [-32, -384, 640],
        [-32, -352, -640],
        [-32, -352, 640],
        [-32, -320, -640],
        [-32, -320, 640],
        [-32, -288, -640],
        [-32, -288, 640],
        [-32, -256, -640],
        [-32, -256, 640],
        [-32, -224, -640],
        [-32, -224, 640],
        [-32, -192, -640],
        [-32, -192, 640],
        [-32, -160, -640],
        [-32, -160, 640],
        [-32, -128, -640],
        [-32, -128, 640],
        [-32, -96, -640],
        [-32, -96, 640],
        [-32, -64, -640],
        [-32, -64, 640],
        [-32, -32, -640],
        [-32, -32, 640],
        [-32, 0, -640],
        [-32, 0, 640],
        [-32, 32, -640],
        [-32, 32, 640],
        [-32, 64, -640],
        [-32, 64, 640],
        [-32, 96, -640],
        [-32, 96, 640],
        [-32, 128, -640],
        [-32, 128, 640],
        [-32, 160, -640],
        [-32, 160, 640],
        [-32, 192, -640],
        [-32, 192, 640],
        [-32, 224, -640],
        [-32, 224, 640],
        [-32, 256, -640],
        [-32, 256, 640],
        [-32, 288, -640],
        [-32, 288, 640],
        [-32, 320, -640],
        [-32, 320, 640],
        [-32, 352, -640],
        [-32, 352, 640],
        [-32, 384, -640],
        [-32, 384, 640],
        [-32, 416, -640],
        [-32, 416, 640],
        [-32, 448, -640],
        [-32, 448, 640],
        [-32, 480, -640],
        [-32, 480, 640],
        [-32, 512, -640],
        [-32, 512, 640],
        [-32, 544, -640],
        [-32, 544, 640],
        [-32, 576, -640],
        [-32, 576, 640],
        [-32, 608, -640],
        [-32, 608, 640],
        [-32, 640, -640],
        [-32, 640, 640],
        [-32, -640, -608],
        [-32, 640, -608],
        [-32, -640, -576],
        [-32, 640, -576],
        [-32, -640, -544],
        [-32, 640, -544],
        [-32, -640, -512],
        [-32, 640, -512],
        [-32, -640, -480],
        [-32, 640, -480],
        [-32, -640, -448],
        [-32, 640, -448],
        [-32, -640, -416],
        [-32, 640, -416],
        [-32, -640, -384],
        [-32, 640, -384],
        [-32, -640, -352],
        [-32, 640, -352],
        [-32, -640, -320],
        [-32, 640, -320],
        [-32, -640, -288],
        [-32, 640, -288],
        [-32, -640, -256],
        [-32, 640, -256],
        [-32, -640, -224],
        [-32, 640, -224],
        [-32, -640, -192],
        [-32, 640, -192],
        [-32, -640, -160],
        [-32, 640, -160],
        [-32, -640, -128],
        [-32, 640, -128],
        [-32, -640, -96],
        [-32, 640, -96],
        [-32, -640, -64],
        [-32, 640, -64],
        [-32, -640, -32],
        [-32, 640, -32],
        [-32, -640, 0],
        [-32, 640, 0],
        [-32, -640, 32],
        [-32, 640, 32],
        [-32, -640, 64],
        [-32, 640, 64],
        [-32, -640, 96],
        [-32, 640, 96],
        [-32, -640, 128],
        [-32, 640, 128],
        [-32, -640, 160],
        [-32, 640, 160],
        [-32, -640, 192],
        [-32, 640, 192],
        [-32, -640, 224],
        [-32, 640, 224],
        [-32, -640, 256],
        [-32, 640, 256],
        [-32, -640, 288],
        [-32, 640, 288],
        [-32, -640, 320],
        [-32, 640, 320],
        [-32, -640, 352],
        [-32, 640, 352],
        [-32, -640, 384],
        [-32, 640, 384],
        [-32, -640, 416],
        [-32, 640, 416],
        [-32, -640, 448],
        [-32, 640, 448],
        [-32, -640, 480],
        [-32, 640, 480],
        [-32, -640, 512],
        [-32, 640, 512],
        [-32, -640, 544],
        [-32, 640, 544],
        [-32, -640, 576],
        [-32, 640, 576],
        [-32, -640, 608],
        [-32, 640, 608],
        [0, -640, -640],
        [0, -640, 640],
        [0, -608, -640],
        [0, -608, 640],
        [0, -576, -640],
        [0, -576, 640],
        [0, -544, -640],
        [0, -544, 640],
        [0, -512, -640],
        [0, -512, 640],
        [0, -480, -640],
        [0, -480, 640],
        [0, -448, -640],
        [0, -448, 640],
        [0, -416, -640],
        [0, -416, 640],
        [0, -384, -640],
        [0, -384, 640],
        [0, -352, -640],
        [0, -352, 640],
        [0, -320, -640],
        [0, -320, 640],
        [0, -288, -640],
        [0, -288, 640],
        [0, -256, -640],
        [0, -256, 640],
        [0, -224, -640],
        [0, -224, 640],
        [0, -192, -640],
        [0, -192, 640],
        [0, -160, -640],
        [0, -160, 640],
        [0, -128, -640],
        [0, -128, 640],
        [0, -96, -640],
        [0, -96, 640],
        [0, -64, -640],
        [0, -64, 640],
        [0, -32, -640],
        [0, -32, 640],
        [0, 0, -640],
        [0, 0, 640],
        [0, 32, -640],
        [0, 32, 640],
        [0, 64, -640],
        [0, 64, 640],
        [0, 96, -640],
        [0, 96, 640],
        [0, 128, -640],
        [0, 128, 640],
        [0, 160, -640],
        [0, 160, 640],
        [0, 192, -640],
        [0, 192, 640],
        [0, 224, -640],
        [0, 224, 640],
        [0, 256, -640],
        [0, 256, 640],
        [0, 288, -640],
        [0, 288, 640],
        [0, 320, -640],
        [0, 320, 640],
        [0, 352, -640],
        [0, 352, 640],
        [0, 384, -640],
        [0, 384, 640],
        [0, 416, -640],
        [0, 416, 640],
        [0, 448, -640],
        [0, 448, 640],
        [0, 480, -640],
        [0, 480, 640],
        [0, 512, -640],
        [0, 512, 640],
        [0, 544, -640],
        [0, 544, 640],
        [0, 576, -640],
        [0, 576, 640],
        [0, 608, -640],
        [0, 608, 640],
        [0, 640, -640],
        [0, 640, 640],
        [0, -640, -608],
        [0, 640, -608],
        [0, -640, -576],
        [0, 640, -576],
        [0, -640, -544],
        [0, 640, -544],
        [0, -640, -512],
        [0, 640, -512],
        [0, -640, -480],
        [0, 640, -480],
        [0, -640, -448],
        [0, 640, -448],
        [0, -640, -416],
        [0, 640, -416],
        [0, -640, -384],
        [0, 640, -384],
        [0, -640, -352],
        [0, 640, -352],
        [0, -640, -320],
        [0, 640, -320],
        [0, -640, -288],
        [0, 640, -288],
        [0, -640, -256],
        [0, 640, -256],
        [0, -640, -224],
        [0, 640, -224],
        [0, -640, -192],
        [0, 640, -192],
        [0, -640, -160],
        [0, 640, -160],
        [0, -640, -128],
        [0, 640, -128],
        [0, -640, -96],
        [0, 640, -96],
        [0, -640, -64],
        [0, 640, -64],
        [0, -640, -32],
        [0, 640, -32],
        [0, -640, 0],
        [0, 640, 0],
        [0, -640, 32],
        [0, 640, 32],
        [0, -640, 64],
        [0, 640, 64],
        [0, -640, 96],
        [0, 640, 96],
        [0, -640, 128],
        [0, 640, 128],
        [0, -640, 160],
        [0, 640, 160],
        [0, -640, 192],
        [0, 640, 192],
        [0, -640, 224],
        [0, 640, 224],
        [0, -640, 256],
        [0, 640, 256],
        [0, -640, 288],
        [0, 640, 288],
        [0, -640, 320],
        [0, 640, 320],
        [0, -640, 352],
        [0, 640, 352],
        [0, -640, 384],
        [0, 640, 384],
        [0, -640, 416],
        [0, 640, 416],
        [0, -640, 448],
        [0, 640, 448],
        [0, -640, 480],
        [0, 640, 480],
        [0, -640, 512],
        [0, 640, 512],
        [0, -640, 544],
        [0, 640, 544],
        [0, -640, 576],
        [0, 640, 576],
        [0, -640, 608],
        [0, 640, 608],
        [32, -640, -640],
        [32, -640, 640],
        [32, -608, -640],
        [32, -608, 640],
        [32, -576, -640],
        [32, -576, 640],
        [32, -544, -640],
        [32, -544, 640],
        [32, -512, -640],
        [32, -512, 640],
        [32, -480, -640],
        [32, -480, 640],
        [32, -448, -640],
        [32, -448, 640],
        [32, -416, -640],
        [32, -416, 640],
        [32, -384, -640],
        [32, -384, 640],
        [32, -352, -640],
        [32, -352, 640],
        [32, -320, -640],
        [32, -320, 640],
        [32, -288, -640],
        [32, -288, 640],
        [32, -256, -640],
        [32, -256, 640],
        [32, -224, -640],
        [32, -224, 640],
        [32, -192, -640],
        [32, -192, 640],
        [32, -160, -640],
        [32, -160, 640],
        [32, -128, -640],
        [32, -128, 640],
        [32, -96, -640],
        [32, -96, 640],
        [32, -64, -640],
        [32, -64, 640],
        [32, -32, -640],
        [32, -32, 640],
        [32, 0, -640],
        [32, 0, 640],
        [32, 32, -640],
        [32, 32, 640],
        [32, 64, -640],
        [32, 64, 640],
        [32, 96, -640],
        [32, 96, 640],
        [32, 128, -640],
        [32, 128, 640],
        [32, 160, -640],
        [32, 160, 640],
        [32, 192, -640],
        [32, 192, 640],
        [32, 224, -640],
        [32, 224, 640],
        [32, 256, -640],
        [32, 256, 640],
        [32, 288, -640],
        [32, 288, 640],
        [32, 320, -640],
        [32, 320, 640],
        [32, 352, -640],
        [32, 352, 640],
        [32, 384, -640],
        [32, 384, 640],
        [32, 416, -640],
        [32, 416, 640],
        [32, 448, -640],
        [32, 448, 640],
        [32, 480, -640],
        [32, 480, 640],
        [32, 512, -640],
        [32, 512, 640],
        [32, 544, -640],
        [32, 544, 640],
        [32, 576, -640],
        [32, 576, 640],
        [32, 608, -640],
        [32, 608, 640],
        [32, 640, -640],
        [32, 640, 640],
        [32, -640, -608],
        [32, 640, -608],
        [32, -640, -576],
        [32, 640, -576],
        [32, -640, -544],
        [32, 640, -544],
        [32, -640, -512],
        [32, 640, -512],
        [32, -640, -480],
        [32, 640, -480],
        [32, -640, -448],
        [32, 640, -448],
        [32, -640, -416],
        [32, 640, -416],
        [32, -640, -384],
        [32, 640, -384],
        [32, -640, -352],
        [32, 640, -352],
        [32, -640, -320],
        [32, 640, -320],
        [32, -640, -288],
        [32, 640, -288],
        [32, -640, -256],
        [32, 640, -256],
        [32, -640, -224],
        [32, 640, -224],
        [32, -640, -192],
        [32, 640, -192],
        [32, -640, -160],
        [32, 640, -160],
        [32, -640, -128],
        [32, 640, -128],
        [32, -640, -96],
        [32, 640, -96],
        [32, -640, -64],
        [32, 640, -64],
        [32, -640, -32],
        [32, 640, -32],
        [32, -640, 0],
        [32, 640, 0],
        [32, -640, 32],
        [32, 640, 32],
        [32, -640, 64],
        [32, 640, 64],
        [32, -640, 96],
        [32, 640, 96],
        [32, -640, 128],
        [32, 640, 128],
        [32, -640, 160],
        [32, 640, 160],
        [32, -640, 192],
        [32, 640, 192],
        [32, -640, 224],
        [32, 640, 224],
        [32, -640, 256],
        [32, 640, 256],
        [32, -640, 288],
        [32, 640, 288],
        [32, -640, 320],
        [32, 640, 320],
        [32, -640, 352],
        [32, 640, 352],
        [32, -640, 384],
        [32, 640, 384],
        [32, -640, 416],
        [32, 640, 416],
        [32, -640, 448],
        [32, 640, 448],
        [32, -640, 480],
        [32, 640, 480],
        [32, -640, 512],
        [32, 640, 512],
        [32, -640, 544],
        [32, 640, 544],
        [32, -640, 576],
        [32, 640, 576],
        [32, -640, 608],
        [32, 640, 608],
        [64, -640, -640],
        [64, -640, 640],
        [64, -608, -640],
        [64, -608, 640],
        [64, -576, -640],
        [64, -576, 640],
        [64, -544, -640],
        [64, -544, 640],
        [64, -512, -640],
        [64, -512, 640],
        [64, -480, -640],
        [64, -480, 640],
        [64, -448, -640],
        [64, -448, 640],
        [64, -416, -640],
        [64, -416, 640],
        [64, -384, -640],
        [64, -384, 640],
        [64, -352, -640],
        [64, -352, 640],
        [64, -320, -640],
        [64, -320, 640],
        [64, -288, -640],
        [64, -288, 640],
        [64, -256, -640],
        [64, -256, 640],
        [64, -224, -640],
        [64, -224, 640],
        [64, -192, -640],
        [64, -192, 640],
        [64, -160, -640],
        [64, -160, 640],
        [64, -128, -640],
        [64, -128, 640],
        [64, -96, -640],
        [64, -96, 640],
        [64, -64, -640],
        [64, -64, 640],
        [64, -32, -640],
        [64, -32, 640],
        [64, 0, -640],
        [64, 0, 640],
        [64, 32, -640],
        [64, 32, 640],
        [64, 64, -640],
        [64, 64, 640],
        [64, 96, -640],
        [64, 96, 640],
        [64, 128, -640],
        [64, 128, 640],
        [64, 160, -640],
        [64, 160, 640],
        [64, 192, -640],
        [64, 192, 640],
        [64, 224, -640],
        [64, 224, 640],
        [64, 256, -640],
        [64, 256, 640],
        [64, 288, -640],
        [64, 288, 640],
        [64, 320, -640],
        [64, 320, 640],
        [64, 352, -640],
        [64, 352, 640],
        [64, 384, -640],
        [64, 384, 640],
        [64, 416, -640],
        [64, 416, 640],
        [64, 448, -640],
        [64, 448, 640],
        [64, 480, -640],
        [64, 480, 640],
        [64, 512, -640],
        [64, 512, 640],
        [64, 544, -640],
        [64, 544, 640],
        [64, 576, -640],
        [64, 576, 640],
        [64, 608, -640],
        [64, 608, 640],
        [64, 640, -640],
        [64, 640, 640],
        [64, -640, -608],
        [64, 640, -608],
        [64, -640, -576],
        [64, 640, -576],
        [64, -640, -544],
        [64, 640, -544],
        [64, -640, -512],
        [64, 640, -512],
        [64, -640, -480],
        [64, 640, -480],
        [64, -640, -448],
        [64, 640, -448],
        [64, -640, -416],
        [64, 640, -416],
        [64, -640, -384],
        [64, 640, -384],
        [64, -640, -352],
        [64, 640, -352],
        [64, -640, -320],
        [64, 640, -320],
        [64, -640, -288],
        [64, 640, -288],
        [64, -640, -256],
        [64, 640, -256],
        [64, -640, -224],
        [64, 640, -224],
        [64, -640, -192],
        [64, 640, -192],
        [64, -640, -160],
        [64, 640, -160],
        [64, -640, -128],
        [64, 640, -128],
        [64, -640, -96],
        [64, 640, -96],
        [64, -640, -64],
        [64, 640, -64],
        [64, -640, -32],
        [64, 640, -32],
        [64, -640, 0],
        [64, 640, 0],
        [64, -640, 32],
        [64, 640, 32],
        [64, -640, 64],
        [64, 640, 64],
        [64, -640, 96],
        [64, 640, 96],
        [64, -640, 128],
        [64, 640, 128],
        [64, -640, 160],
        [64, 640, 160],
        [64, -640, 192],
        [64, 640, 192],
        [64, -640, 224],
        [64, 640, 224],
        [64, -640, 256],
        [64, 640, 256],
        [64, -640, 288],
        [64, 640, 288],
        [64, -640, 320],
        [64, 640, 320],
        [64, -640, 352],
        [64, 640, 352],
        [64, -640, 384],
        [64, 640, 384],
        [64, -640, 416],
        [64, 640, 416],
        [64, -640, 448],
        [64, 640, 448],
        [64, -640, 480],
        [64, 640, 480],
        [64, -640, 512],
        [64, 640, 512],
        [64, -640, 544],
        [64, 640, 544],
        [64, -640, 576],
        [64, 640, 576],
        [64, -640, 608],
        [64, 640, 608],
        [96, -640, -640],
        [96, -640, 640],
        [96, -608, -640],
        [96, -608, 640],
        [96, -576, -640],
        [96, -576, 640],
        [96, -544, -640],
        [96, -544, 640],
        [96, -512, -640],
        [96, -512, 640],
        [96, -480, -640],
        [96, -480, 640],
        [96, -448, -640],
        [96, -448, 640],
        [96, -416, -640],
        [96, -416, 640],
        [96, -384, -640],
        [96, -384, 640],
        [96, -352, -640],
        [96, -352, 640],
        [96, -320, -640],
        [96, -320, 640],
        [96, -288, -640],
        [96, -288, 640],
        [96, -256, -640],
        [96, -256, 640],
        [96, -224, -640],
        [96, -224, 640],
        [96, -192, -640],
        [96, -192, 640],
        [96, -160, -640],
        [96, -160, 640],
        [96, -128, -640],
        [96, -128, 640],
        [96, -96, -640],
        [96, -96, 640],
        [96, -64, -640],
        [96, -64, 640],
        [96, -32, -640],
        [96, -32, 640],
        [96, 0, -640],
        [96, 0, 640],
        [96, 32, -640],
        [96, 32, 640],
        [96, 64, -640],
        [96, 64, 640],
        [96, 96, -640],
        [96, 96, 640],
        [96, 128, -640],
        [96, 128, 640],
        [96, 160, -640],
        [96, 160, 640],
        [96, 192, -640],
        [96, 192, 640],
        [96, 224, -640],
        [96, 224, 640],
        [96, 256, -640],
        [96, 256, 640],
        [96, 288, -640],
        [96, 288, 640],
        [96, 320, -640],
        [96, 320, 640],
        [96, 352, -640],
        [96, 352, 640],
        [96, 384, -640],
        [96, 384, 640],
        [96, 416, -640],
        [96, 416, 640],
        [96, 448, -640],
        [96, 448, 640],
        [96, 480, -640],
        [96, 480, 640],
        [96, 512, -640],
        [96, 512, 640],
        [96, 544, -640],
        [96, 544, 640],
        [96, 576, -640],
        [96, 576, 640],
        [96, 608, -640],
        [96, 608, 640],
        [96, 640, -640],
        [96, 640, 640],
        [96, -640, -608],
        [96, 640, -608],
        [96, -640, -576],
        [96, 640, -576],
        [96, -640, -544],
        [96, 640, -544],
        [96, -640, -512],
        [96, 640, -512],
        [96, -640, -480],
        [96, 640, -480],
        [96, -640, -448],
        [96, 640, -448],
        [96, -640, -416],
        [96, 640, -416],
        [96, -640, -384],
        [96, 640, -384],
        [96, -640, -352],
        [96, 640, -352],
        [96, -640, -320],
        [96, 640, -320],
        [96, -640, -288],
        [96, 640, -288],
        [96, -640, -256],
        [96, 640, -256],
        [96, -640, -224],
        [96, 640, -224],
        [96, -640, -192],
        [96, 640, -192],
        [96, -640, -160],
        [96, 640, -160],
        [96, -640, -128],
        [96, 640, -128],
        [96, -640, -96],
        [96, 640, -96],
        [96, -640, -64],
        [96, 640, -64],
        [96, -640, -32],
        [96, 640, -32],
        [96, -640, 0],
        [96, 640, 0],
        [96, -640, 32],
        [96, 640, 32],
        [96, -640, 64],
        [96, 640, 64],
        [96, -640, 96],
        [96, 640, 96],
        [96, -640, 128],
        [96, 640, 128],
        [96, -640, 160],
        [96, 640, 160],
        [96, -640, 192],
        [96, 640, 192],
        [96, -640, 224],
        [96, 640, 224],
        [96, -640, 256],
        [96, 640, 256],
        [96, -640, 288],
        [96, 640, 288],
        [96, -640, 320],
        [96, 640, 320],
        [96, -640, 352],
        [96, 640, 352],
        [96, -640, 384],
        [96, 640, 384],
        [96, -640, 416],
        [96, 640, 416],
        [96, -640, 448],
        [96, 640, 448],
        [96, -640, 480],
        [96, 640, 480],
        [96, -640, 512],
        [96, 640, 512],
        [96, -640, 544],
        [96, 640, 544],
        [96, -640, 576],
        [96, 640, 576],
        [96, -640, 608],
        [96, 640, 608],
        [128, -640, -640],
        [128, -640, 640],
        [128, -608, -640],
        [128, -608, 640],
        [128, -576, -640],
        [128, -576, 640],
        [128, -544, -640],
        [128, -544, 640],
        [128, -512, -640],
        [128, -512, 640],
        [128, -480, -640],
        [128, -480, 640],
        [128, -448, -640],
        [128, -448, 640],
        [128, -416, -640],
        [128, -416, 640],
        [128, -384, -640],
        [128, -384, 640],
        [128, -352, -640],
        [128, -352, 640],
        [128, -320, -640],
        [128, -320, 640],
        [128, -288, -640],
        [128, -288, 640],
        [128, -256, -640],
        [128, -256, 640],
        [128, -224, -640],
        [128, -224, 640],
        [128, -192, -640],
        [128, -192, 640],
        [128, -160, -640],
        [128, -160, 640],
        [128, -128, -640],
        [128, -128, 640],
        [128, -96, -640],
        [128, -96, 640],
        [128, -64, -640],
        [128, -64, 640],
        [128, -32, -640],
        [128, -32, 640],
        [128, 0, -640],
        [128, 0, 640],
        [128, 32, -640],
        [128, 32, 640],
        [128, 64, -640],
        [128, 64, 640],
        [128, 96, -640],
        [128, 96, 640],
        [128, 128, -640],
        [128, 128, 640],
        [128, 160, -640],
        [128, 160, 640],
        [128, 192, -640],
        [128, 192, 640],
        [128, 224, -640],
        [128, 224, 640],
        [128, 256, -640],
        [128, 256, 640],
        [128, 288, -640],
        [128, 288, 640],
        [128, 320, -640],
        [128, 320, 640],
        [128, 352, -640],
        [128, 352, 640],
        [128, 384, -640],
        [128, 384, 640],
        [128, 416, -640],
        [128, 416, 640],
        [128, 448, -640],
        [128, 448, 640],
        [128, 480, -640],
        [128, 480, 640],
        [128, 512, -640],
        [128, 512, 640],
        [128, 544, -640],
        [128, 544, 640],
        [128, 576, -640],
        [128, 576, 640],
        [128, 608, -640],
        [128, 608, 640],
        [128, 640, -640],
        [128, 640, 640],
        [128, -640, -608],
        [128, 640, -608],
        [128, -640, -576],
        [128, 640, -576],
        [128, -640, -544],
        [128, 640, -544],
        [128, -640, -512],
        [128, 640, -512],
        [128, -640, -480],
        [128, 640, -480],
        [128, -640, -448],
        [128, 640, -448],
        [128, -640, -416],
        [128, 640, -416],
        [128, -640, -384],
        [128, 640, -384],
        [128, -640, -352],
        [128, 640, -352],
        [128, -640, -320],
        [128, 640, -320],
        [128, -640, -288],
        [128, 640, -288],
        [128, -640, -256],
        [128, 640, -256],
        [128, -640, -224],
        [128, 640, -224],
        [128, -640, -192],
        [128, 640, -192],
        [128, -640, -160],
        [128, 640, -160],
        [128, -640, -128],
        [128, 640, -128],
        [128, -640, -96],
        [128, 640, -96],
        [128, -640, -64],
        [128, 640, -64],
        [128, -640, -32],
        [128, 640, -32],
        [128, -640, 0],
        [128, 640, 0],
        [128, -640, 32],
        [128, 640, 32],
        [128, -640, 64],
        [128, 640, 64],
        [128, -640, 96],
        [128, 640, 96],
        [128, -640, 128],
        [128, 640, 128],
        [128, -640, 160],
        [128, 640, 160],
        [128, -640, 192],
        [128, 640, 192],
        [128, -640, 224],
        [128, 640, 224],
        [128, -640, 256],
        [128, 640, 256],
        [128, -640, 288],
        [128, 640, 288],
        [128, -640, 320],
        [128, 640, 320],
        [128, -640, 352],
        [128, 640, 352],
        [128, -640, 384],
        [128, 640, 384],
        [128, -640, 416],
        [128, 640, 416],
        [128, -640, 448],
        [128, 640, 448],
        [128, -640, 480],
        [128, 640, 480],
        [128, -640, 512],
        [128, 640, 512],
        [128, -640, 544],
        [128, 640, 544],
        [128, -640, 576],
        [128, 640, 576],
        [128, -640, 608],
        [128, 640, 608],
        [160, -640, -640],
        [160, -640, 640],
        [160, -608, -640],
        [160, -608, 640],
        [160, -576, -640],
        [160, -576, 640],
        [160, -544, -640],
        [160, -544, 640],
        [160, -512, -640],
        [160, -512, 640],
        [160, -480, -640],
        [160, -480, 640],
        [160, -448, -640],
        [160, -448, 640],
        [160, -416, -640],
        [160, -416, 640],
        [160, -384, -640],
        [160, -384, 640],
        [160, -352, -640],
        [160, -352, 640],
        [160, -320, -640],
        [160, -320, 640],
        [160, -288, -640],
        [160, -288, 640],
        [160, -256, -640],
        [160, -256, 640],
        [160, -224, -640],
        [160, -224, 640],
        [160, -192, -640],
        [160, -192, 640],
        [160, -160, -640],
        [160, -160, 640],
        [160, -128, -640],
        [160, -128, 640],
        [160, -96, -640],
        [160, -96, 640],
        [160, -64, -640],
        [160, -64, 640],
        [160, -32, -640],
        [160, -32, 640],
        [160, 0, -640],
        [160, 0, 640],
        [160, 32, -640],
        [160, 32, 640],
        [160, 64, -640],
        [160, 64, 640],
        [160, 96, -640],
        [160, 96, 640],
        [160, 128, -640],
        [160, 128, 640],
        [160, 160, -640],
        [160, 160, 640],
        [160, 192, -640],
        [160, 192, 640],
        [160, 224, -640],
        [160, 224, 640],
        [160, 256, -640],
        [160, 256, 640],
        [160, 288, -640],
        [160, 288, 640],
        [160, 320, -640],
        [160, 320, 640],
        [160, 352, -640],
        [160, 352, 640],
        [160, 384, -640],
        [160, 384, 640],
        [160, 416, -640],
        [160, 416, 640],
        [160, 448, -640],
        [160, 448, 640],
        [160, 480, -640],
        [160, 480, 640],
        [160, 512, -640],
        [160, 512, 640],
        [160, 544, -640],
        [160, 544, 640],
        [160, 576, -640],
        [160, 576, 640],
        [160, 608, -640],
        [160, 608, 640],
        [160, 640, -640],
        [160, 640, 640],
        [160, -640, -608],
        [160, 640, -608],
        [160, -640, -576],
        [160, 640, -576],
        [160, -640, -544],
        [160, 640, -544],
        [160, -640, -512],
        [160, 640, -512],
        [160, -640, -480],
        [160, 640, -480],
        [160, -640, -448],
        [160, 640, -448],
        [160, -640, -416],
        [160, 640, -416],
        [160, -640, -384],
        [160, 640, -384],
        [160, -640, -352],
        [160, 640, -352],
        [160, -640, -320],
        [160, 640, -320],
        [160, -640, -288],
        [160, 640, -288],
        [160, -640, -256],
        [160, 640, -256],
        [160, -640, -224],
        [160, 640, -224],
        [160, -640, -192],
        [160, 640, -192],
        [160, -640, -160],
        [160, 640, -160],
        [160, -640, -128],
        [160, 640, -128],
        [160, -640, -96],
        [160, 640, -96],
        [160, -640, -64],
        [160, 640, -64],
        [160, -640, -32],
        [160, 640, -32],
        [160, -640, 0],
        [160, 640, 0],
        [160, -640, 32],
        [160, 640, 32],
        [160, -640, 64],
        [160, 640, 64],
        [160, -640, 96],
        [160, 640, 96],
        [160, -640, 128],
        [160, 640, 128],
        [160, -640, 160],
        [160, 640, 160],
        [160, -640, 192],
        [160, 640, 192],
        [160, -640, 224],
        [160, 640, 224],
        [160, -640, 256],
        [160, 640, 256],
        [160, -640, 288],
        [160, 640, 288],
        [160, -640, 320],
        [160, 640, 320],
        [160, -640, 352],
        [160, 640, 352],
        [160, -640, 384],
        [160, 640, 384],
        [160, -640, 416],
        [160, 640, 416],
        [160, -640, 448],
        [160, 640, 448],
        [160, -640, 480],
        [160, 640, 480],
        [160, -640, 512],
        [160, 640, 512],
        [160, -640, 544],
        [160, 640, 544],
        [160, -640, 576],
        [160, 640, 576],
        [160, -640, 608],
        [160, 640, 608],
        [192, -640, -640],
        [192, -640, 640],
        [192, -608, -640],
        [192, -608, 640],
        [192, -576, -640],
        [192, -576, 640],
        [192, -544, -640],
        [192, -544, 640],
        [192, -512, -640],
        [192, -512, 640],
        [192, -480, -640],
        [192, -480, 640],
        [192, -448, -640],
        [192, -448, 640],
        [192, -416, -640],
        [192, -416, 640],
        [192, -384, -640],
        [192, -384, 640],
        [192, -352, -640],
        [192, -352, 640],
        [192, -320, -640],
        [192, -320, 640],
        [192, -288, -640],
        [192, -288, 640],
        [192, -256, -640],
        [192, -256, 640],
        [192, -224, -640],
        [192, -224, 640],
        [192, -192, -640],
        [192, -192, 640],
        [192, -160, -640],
        [192, -160, 640],
        [192, -128, -640],
        [192, -128, 640],
        [192, -96, -640],
        [192, -96, 640],
        [192, -64, -640],
        [192, -64, 640],
        [192, -32, -640],
        [192, -32, 640],
        [192, 0, -640],
        [192, 0, 640],
        [192, 32, -640],
        [192, 32, 640],
        [192, 64, -640],
        [192, 64, 640],
        [192, 96, -640],
        [192, 96, 640],
        [192, 128, -640],
        [192, 128, 640],
        [192, 160, -640],
        [192, 160, 640],
        [192, 192, -640],
        [192, 192, 640],
        [192, 224, -640],
        [192, 224, 640],
        [192, 256, -640],
        [192, 256, 640],
        [192, 288, -640],
        [192, 288, 640],
        [192, 320, -640],
        [192, 320, 640],
        [192, 352, -640],
        [192, 352, 640],
        [192, 384, -640],
        [192, 384, 640],
        [192, 416, -640],
        [192, 416, 640],
        [192, 448, -640],
        [192, 448, 640],
        [192, 480, -640],
        [192, 480, 640],
        [192, 512, -640],
        [192, 512, 640],
        [192, 544, -640],
        [192, 544, 640],
        [192, 576, -640],
        [192, 576, 640],
        [192, 608, -640],
        [192, 608, 640],
        [192, 640, -640],
        [192, 640, 640],
        [192, -640, -608],
        [192, 640, -608],
        [192, -640, -576],
        [192, 640, -576],
        [192, -640, -544],
        [192, 640, -544],
        [192, -640, -512],
        [192, 640, -512],
        [192, -640, -480],
        [192, 640, -480],
        [192, -640, -448],
        [192, 640, -448],
        [192, -640, -416],
        [192, 640, -416],
        [192, -640, -384],
        [192, 640, -384],
        [192, -640, -352],
        [192, 640, -352],
        [192, -640, -320],
        [192, 640, -320],
        [192, -640, -288],
        [192, 640, -288],
        [192, -640, -256],
        [192, 640, -256],
        [192, -640, -224],
        [192, 640, -224],
        [192, -640, -192],
        [192, 640, -192],
        [192, -640, -160],
        [192, 640, -160],
        [192, -640, -128],
        [192, 640, -128],
        [192, -640, -96],
        [192, 640, -96],
        [192, -640, -64],
        [192, 640, -64],
        [192, -640, -32],
        [192, 640, -32],
        [192, -640, 0],
        [192, 640, 0],
        [192, -640, 32],
        [192, 640, 32],
        [192, -640, 64],
        [192, 640, 64],
        [192, -640, 96],
        [192, 640, 96],
        [192, -640, 128],
        [192, 640, 128],
        [192, -640, 160],
        [192, 640, 160],
        [192, -640, 192],
        [192, 640, 192],
        [192, -640, 224],
        [192, 640, 224],
        [192, -640, 256],
        [192, 640, 256],
        [192, -640, 288],
        [192, 640, 288],
        [192, -640, 320],
        [192, 640, 320],
        [192, -640, 352],
        [192, 640, 352],
        [192, -640, 384],
        [192, 640, 384],
        [192, -640, 416],
        [192, 640, 416],
        [192, -640, 448],
        [192, 640, 448],
        [192, -640, 480],
        [192, 640, 480],
        [192, -640, 512],
        [192, 640, 512],
        [192, -640, 544],
        [192, 640, 544],
        [192, -640, 576],
        [192, 640, 576],
        [192, -640, 608],
        [192, 640, 608],
        [224, -640, -640],
        [224, -640, 640],
        [224, -608, -640],
        [224, -608, 640],
        [224, -576, -640],
        [224, -576, 640],
        [224, -544, -640],
        [224, -544, 640],
        [224, -512, -640],
        [224, -512, 640],
        [224, -480, -640],
        [224, -480, 640],
        [224, -448, -640],
        [224, -448, 640],
        [224, -416, -640],
        [224, -416, 640],
        [224, -384, -640],
        [224, -384, 640],
        [224, -352, -640],
        [224, -352, 640],
        [224, -320, -640],
        [224, -320, 640],
        [224, -288, -640],
        [224, -288, 640],
        [224, -256, -640],
        [224, -256, 640],
        [224, -224, -640],
        [224, -224, 640],
        [224, -192, -640],
        [224, -192, 640],
        [224, -160, -640],
        [224, -160, 640],
        [224, -128, -640],
        [224, -128, 640],
        [224, -96, -640],
        [224, -96, 640],
        [224, -64, -640],
        [224, -64, 640],
        [224, -32, -640],
        [224, -32, 640],
        [224, 0, -640],
        [224, 0, 640],
        [224, 32, -640],
        [224, 32, 640],
        [224, 64, -640],
        [224, 64, 640],
        [224, 96, -640],
        [224, 96, 640],
        [224, 128, -640],
        [224, 128, 640],
        [224, 160, -640],
        [224, 160, 640],
        [224, 192, -640],
        [224, 192, 640],
        [224, 224, -640],
        [224, 224, 640],
        [224, 256, -640],
        [224, 256, 640],
        [224, 288, -640],
        [224, 288, 640],
        [224, 320, -640],
        [224, 320, 640],
        [224, 352, -640],
        [224, 352, 640],
        [224, 384, -640],
        [224, 384, 640],
        [224, 416, -640],
        [224, 416, 640],
        [224, 448, -640],
        [224, 448, 640],
        [224, 480, -640],
        [224, 480, 640],
        [224, 512, -640],
        [224, 512, 640],
        [224, 544, -640],
        [224, 544, 640],
        [224, 576, -640],
        [224, 576, 640],
        [224, 608, -640],
        [224, 608, 640],
        [224, 640, -640],
        [224, 640, 640],
        [224, -640, -608],
        [224, 640, -608],
        [224, -640, -576],
        [224, 640, -576],
        [224, -640, -544],
        [224, 640, -544],
        [224, -640, -512],
        [224, 640, -512],
        [224, -640, -480],
        [224, 640, -480],
        [224, -640, -448],
        [224, 640, -448],
        [224, -640, -416],
        [224, 640, -416],
        [224, -640, -384],
        [224, 640, -384],
        [224, -640, -352],
        [224, 640, -352],
        [224, -640, -320],
        [224, 640, -320],
        [224, -640, -288],
        [224, 640, -288],
        [224, -640, -256],
        [224, 640, -256],
        [224, -640, -224],
        [224, 640, -224],
        [224, -640, -192],
        [224, 640, -192],
        [224, -640, -160],
        [224, 640, -160],
        [224, -640, -128],
        [224, 640, -128],
        [224, -640, -96],
        [224, 640, -96],
        [224, -640, -64],
        [224, 640, -64],
        [224, -640, -32],
        [224, 640, -32],
        [224, -640, 0],
        [224, 640, 0],
        [224, -640, 32],
        [224, 640, 32],
        [224, -640, 64],
        [224, 640, 64],
        [224, -640, 96],
        [224, 640, 96],
        [224, -640, 128],
        [224, 640, 128],
        [224, -640, 160],
        [224, 640, 160],
        [224, -640, 192],
        [224, 640, 192],
        [224, -640, 224],
        [224, 640, 224],
        [224, -640, 256],
        [224, 640, 256],
        [224, -640, 288],
        [224, 640, 288],
        [224, -640, 320],
        [224, 640, 320],
        [224, -640, 352],
        [224, 640, 352],
        [224, -640, 384],
        [224, 640, 384],
        [224, -640, 416],
        [224, 640, 416],
        [224, -640, 448],
        [224, 640, 448],
        [224, -640, 480],
        [224, 640, 480],
        [224, -640, 512],
        [224, 640, 512],
        [224, -640, 544],
        [224, 640, 544],
        [224, -640, 576],
        [224, 640, 576],
        [224, -640, 608],
        [224, 640, 608],
        [256, -640, -640],
        [256, -640, 640],
        [256, -608, -640],
        [256, -608, 640],
        [256, -576, -640],
        [256, -576, 640],
        [256, -544, -640],
        [256, -544, 640],
        [256, -512, -640],
        [256, -512, 640],
        [256, -480, -640],
        [256, -480, 640],
        [256, -448, -640],
        [256, -448, 640],
        [256, -416, -640],
        [256, -416, 640],
        [256, -384, -640],
        [256, -384, 640],
        [256, -352, -640],
        [256, -352, 640],
        [256, -320, -640],
        [256, -320, 640],
        [256, -288, -640],
        [256, -288, 640],
        [256, -256, -640],
        [256, -256, 640],
        [256, -224, -640],
        [256, -224, 640],
        [256, -192, -640],
        [256, -192, 640],
        [256, -160, -640],
        [256, -160, 640],
        [256, -128, -640],
        [256, -128, 640],
        [256, -96, -640],
        [256, -96, 640],
        [256, -64, -640],
        [256, -64, 640],
        [256, -32, -640],
        [256, -32, 640],
        [256, 0, -640],
        [256, 0, 640],
        [256, 32, -640],
        [256, 32, 640],
        [256, 64, -640],
        [256, 64, 640],
        [256, 96, -640],
        [256, 96, 640],
        [256, 128, -640],
        [256, 128, 640],
        [256, 160, -640],
        [256, 160, 640],
        [256, 192, -640],
        [256, 192, 640],
        [256, 224, -640],
        [256, 224, 640],
        [256, 256, -640],
        [256, 256, 640],
        [256, 288, -640],
        [256, 288, 640],
        [256, 320, -640],
        [256, 320, 640],
        [256, 352, -640],
        [256, 352, 640],
        [256, 384, -640],
        [256, 384, 640],
        [256, 416, -640],
        [256, 416, 640],
        [256, 448, -640],
        [256, 448, 640],
        [256, 480, -640],
        [256, 480, 640],
        [256, 512, -640],
        [256, 512, 640],
        [256, 544, -640],
        [256, 544, 640],
        [256, 576, -640],
        [256, 576, 640],
        [256, 608, -640],
        [256, 608, 640],
        [256, 640, -640],
        [256, 640, 640],
        [256, -640, -608],
        [256, 640, -608],
        [256, -640, -576],
        [256, 640, -576],
        [256, -640, -544],
        [256, 640, -544],
        [256, -640, -512],
        [256, 640, -512],
        [256, -640, -480],
        [256, 640, -480],
        [256, -640, -448],
        [256, 640, -448],
        [256, -640, -416],
        [256, 640, -416],
        [256, -640, -384],
        [256, 640, -384],
        [256, -640, -352],
        [256, 640, -352],
        [256, -640, -320],
        [256, 640, -320],
        [256, -640, -288],
        [256, 640, -288],
        [256, -640, -256],
        [256, 640, -256],
        [256, -640, -224],
        [256, 640, -224],
        [256, -640, -192],
        [256, 640, -192],
        [256, -640, -160],
        [256, 640, -160],
        [256, -640, -128],
        [256, 640, -128],
        [256, -640, -96],
        [256, 640, -96],
        [256, -640, -64],
        [256, 640, -64],
        [256, -640, -32],
        [256, 640, -32],
        [256, -640, 0],
        [256, 640, 0],
        [256, -640, 32],
        [256, 640, 32],
        [256, -640, 64],
        [256, 640, 64],
        [256, -640, 96],
        [256, 640, 96],
        [256, -640, 128],
        [256, 640, 128],
        [256, -640, 160],
        [256, 640, 160],
        [256, -640, 192],
        [256, 640, 192],
        [256, -640, 224],
        [256, 640, 224],
        [256, -640, 256],
        [256, 640, 256],
        [256, -640, 288],
        [256, 640, 288],
        [256, -640, 320],
        [256, 640, 320],
        [256, -640, 352],
        [256, 640, 352],
        [256, -640, 384],
        [256, 640, 384],
        [256, -640, 416],
        [256, 640, 416],
        [256, -640, 448],
        [256, 640, 448],
        [256, -640, 480],
        [256, 640, 480],
        [256, -640, 512],
        [256, 640, 512],
        [256, -640, 544],
        [256, 640, 544],
        [256, -640, 576],
        [256, 640, 576],
        [256, -640, 608],
        [256, 640, 608],
        [288, -640, -640],
        [288, -640, 640],
        [288, -608, -640],
        [288, -608, 640],
        [288, -576, -640],
        [288, -576, 640],
        [288, -544, -640],
        [288, -544, 640],
        [288, -512, -640],
        [288, -512, 640],
        [288, -480, -640],
        [288, -480, 640],
        [288, -448, -640],
        [288, -448, 640],
        [288, -416, -640],
        [288, -416, 640],
        [288, -384, -640],
        [288, -384, 640],
        [288, -352, -640],
        [288, -352, 640],
        [288, -320, -640],
        [288, -320, 640],
        [288, -288, -640],
        [288, -288, 640],
        [288, -256, -640],
        [288, -256, 640],
        [288, -224, -640],
        [288, -224, 640],
        [288, -192, -640],
        [288, -192, 640],
        [288, -160, -640],
        [288, -160, 640],
        [288, -128, -640],
        [288, -128, 640],
        [288, -96, -640],
        [288, -96, 640],
        [288, -64, -640],
        [288, -64, 640],
        [288, -32, -640],
        [288, -32, 640],
        [288, 0, -640],
        [288, 0, 640],
        [288, 32, -640],
        [288, 32, 640],
        [288, 64, -640],
        [288, 64, 640],
        [288, 96, -640],
        [288, 96, 640],
        [288, 128, -640],
        [288, 128, 640],
        [288, 160, -640],
        [288, 160, 640],
        [288, 192, -640],
        [288, 192, 640],
        [288, 224, -640],
        [288, 224, 640],
        [288, 256, -640],
        [288, 256, 640],
        [288, 288, -640],
        [288, 288, 640],
        [288, 320, -640],
        [288, 320, 640],
        [288, 352, -640],
        [288, 352, 640],
        [288, 384, -640],
        [288, 384, 640],
        [288, 416, -640],
        [288, 416, 640],
        [288, 448, -640],
        [288, 448, 640],
        [288, 480, -640],
        [288, 480, 640],
        [288, 512, -640],
        [288, 512, 640],
        [288, 544, -640],
        [288, 544, 640],
        [288, 576, -640],
        [288, 576, 640],
        [288, 608, -640],
        [288, 608, 640],
        [288, 640, -640],
        [288, 640, 640],
        [288, -640, -608],
        [288, 640, -608],
        [288, -640, -576],
        [288, 640, -576],
        [288, -640, -544],
        [288, 640, -544],
        [288, -640, -512],
        [288, 640, -512],
        [288, -640, -480],
        [288, 640, -480],
        [288, -640, -448],
        [288, 640, -448],
        [288, -640, -416],
        [288, 640, -416],
        [288, -640, -384],
        [288, 640, -384],
        [288, -640, -352],
        [288, 640, -352],
        [288, -640, -320],
        [288, 640, -320],
        [288, -640, -288],
        [288, 640, -288],
        [288, -640, -256],
        [288, 640, -256],
        [288, -640, -224],
        [288, 640, -224],
        [288, -640, -192],
        [288, 640, -192],
        [288, -640, -160],
        [288, 640, -160],
        [288, -640, -128],
        [288, 640, -128],
        [288, -640, -96],
        [288, 640, -96],
        [288, -640, -64],
        [288, 640, -64],
        [288, -640, -32],
        [288, 640, -32],
        [288, -640, 0],
        [288, 640, 0],
        [288, -640, 32],
        [288, 640, 32],
        [288, -640, 64],
        [288, 640, 64],
        [288, -640, 96],
        [288, 640, 96],
        [288, -640, 128],
        [288, 640, 128],
        [288, -640, 160],
        [288, 640, 160],
        [288, -640, 192],
        [288, 640, 192],
        [288, -640, 224],
        [288, 640, 224],
        [288, -640, 256],
        [288, 640, 256],
        [288, -640, 288],
        [288, 640, 288],
        [288, -640, 320],
        [288, 640, 320],
        [288, -640, 352],
        [288, 640, 352],
        [288, -640, 384],
        [288, 640, 384],
        [288, -640, 416],
        [288, 640, 416],
        [288, -640, 448],
        [288, 640, 448],
        [288, -640, 480],
        [288, 640, 480],
        [288, -640, 512],
        [288, 640, 512],
        [288, -640, 544],
        [288, 640, 544],
        [288, -640, 576],
        [288, 640, 576],
        [288, -640, 608],
        [288, 640, 608],
        [320, -640, -640],
        [320, -640, 640],
        [320, -608, -640],
        [320, -608, 640],
        [320, -576, -640],
        [320, -576, 640],
        [320, -544, -640],
        [320, -544, 640],
        [320, -512, -640],
        [320, -512, 640],
        [320, -480, -640],
        [320, -480, 640],
        [320, -448, -640],
        [320, -448, 640],
        [320, -416, -640],
        [320, -416, 640],
        [320, -384, -640],
        [320, -384, 640],
        [320, -352, -640],
        [320, -352, 640],
        [320, -320, -640],
        [320, -320, 640],
        [320, -288, -640],
        [320, -288, 640],
        [320, -256, -640],
        [320, -256, 640],
        [320, -224, -640],
        [320, -224, 640],
        [320, -192, -640],
        [320, -192, 640],
        [320, -160, -640],
        [320, -160, 640],
        [320, -128, -640],
        [320, -128, 640],
        [320, -96, -640],
        [320, -96, 640],
        [320, -64, -640],
        [320, -64, 640],
        [320, -32, -640],
        [320, -32, 640],
        [320, 0, -640],
        [320, 0, 640],
        [320, 32, -640],
        [320, 32, 640],
        [320, 64, -640],
        [320, 64, 640],
        [320, 96, -640],
        [320, 96, 640],
        [320, 128, -640],
        [320, 128, 640],
        [320, 160, -640],
        [320, 160, 640],
        [320, 192, -640],
        [320, 192, 640],
        [320, 224, -640],
        [320, 224, 640],
        [320, 256, -640],
        [320, 256, 640],
        [320, 288, -640],
        [320, 288, 640],
        [320, 320, -640],
        [320, 320, 640],
        [320, 352, -640],
        [320, 352, 640],
        [320, 384, -640],
        [320, 384, 640],
        [320, 416, -640],
        [320, 416, 640],
        [320, 448, -640],
        [320, 448, 640],
        [320, 480, -640],
        [320, 480, 640],
        [320, 512, -640],
        [320, 512, 640],
        [320, 544, -640],
        [320, 544, 640],
        [320, 576, -640],
        [320, 576, 640],
        [320, 608, -640],
        [320, 608, 640],
        [320, 640, -640],
        [320, 640, 640],
        [320, -640, -608],
        [320, 640, -608],
        [320, -640, -576],
        [320, 640, -576],
        [320, -640, -544],
        [320, 640, -544],
        [320, -640, -512],
        [320, 640, -512],
        [320, -640, -480],
        [320, 640, -480],
        [320, -640, -448],
        [320, 640, -448],
        [320, -640, -416],
        [320, 640, -416],
        [320, -640, -384],
        [320, 640, -384],
        [320, -640, -352],
        [320, 640, -352],
        [320, -640, -320],
        [320, 640, -320],
        [320, -640, -288],
        [320, 640, -288],
        [320, -640, -256],
        [320, 640, -256],
        [320, -640, -224],
        [320, 640, -224],
        [320, -640, -192],
        [320, 640, -192],
        [320, -640, -160],
        [320, 640, -160],
        [320, -640, -128],
        [320, 640, -128],
        [320, -640, -96],
        [320, 640, -96],
        [320, -640, -64],
        [320, 640, -64],
        [320, -640, -32],
        [320, 640, -32],
        [320, -640, 0],
        [320, 640, 0],
        [320, -640, 32],
        [320, 640, 32],
        [320, -640, 64],
        [320, 640, 64],
        [320, -640, 96],
        [320, 640, 96],
        [320, -640, 128],
        [320, 640, 128],
        [320, -640, 160],
        [320, 640, 160],
        [320, -640, 192],
        [320, 640, 192],
        [320, -640, 224],
        [320, 640, 224],
        [320, -640, 256],
        [320, 640, 256],
        [320, -640, 288],
        [320, 640, 288],
        [320, -640, 320],
        [320, 640, 320],
        [320, -640, 352],
        [320, 640, 352],
        [320, -640, 384],
        [320, 640, 384],
        [320, -640, 416],
        [320, 640, 416],
        [320, -640, 448],
        [320, 640, 448],
        [320, -640, 480],
        [320, 640, 480],
        [320, -640, 512],
        [320, 640, 512],
        [320, -640, 544],
        [320, 640, 544],
        [320, -640, 576],
        [320, 640, 576],
        [320, -640, 608],
        [320, 640, 608],
        [352, -640, -640],
        [352, -640, 640],
        [352, -608, -640],
        [352, -608, 640],
        [352, -576, -640],
        [352, -576, 640],
        [352, -544, -640],
        [352, -544, 640],
        [352, -512, -640],
        [352, -512, 640],
        [352, -480, -640],
        [352, -480, 640],
        [352, -448, -640],
        [352, -448, 640],
        [352, -416, -640],
        [352, -416, 640],
        [352, -384, -640],
        [352, -384, 640],
        [352, -352, -640],
        [352, -352, 640],
        [352, -320, -640],
        [352, -320, 640],
        [352, -288, -640],
        [352, -288, 640],
        [352, -256, -640],
        [352, -256, 640],
        [352, -224, -640],
        [352, -224, 640],
        [352, -192, -640],
        [352, -192, 640],
        [352, -160, -640],
        [352, -160, 640],
        [352, -128, -640],
        [352, -128, 640],
        [352, -96, -640],
        [352, -96, 640],
        [352, -64, -640],
        [352, -64, 640],
        [352, -32, -640],
        [352, -32, 640],
        [352, 0, -640],
        [352, 0, 640],
        [352, 32, -640],
        [352, 32, 640],
        [352, 64, -640],
        [352, 64, 640],
        [352, 96, -640],
        [352, 96, 640],
        [352, 128, -640],
        [352, 128, 640],
        [352, 160, -640],
        [352, 160, 640],
        [352, 192, -640],
        [352, 192, 640],
        [352, 224, -640],
        [352, 224, 640],
        [352, 256, -640],
        [352, 256, 640],
        [352, 288, -640],
        [352, 288, 640],
        [352, 320, -640],
        [352, 320, 640],
        [352, 352, -640],
        [352, 352, 640],
        [352, 384, -640],
        [352, 384, 640],
        [352, 416, -640],
        [352, 416, 640],
        [352, 448, -640],
        [352, 448, 640],
        [352, 480, -640],
        [352, 480, 640],
        [352, 512, -640],
        [352, 512, 640],
        [352, 544, -640],
        [352, 544, 640],
        [352, 576, -640],
        [352, 576, 640],
        [352, 608, -640],
        [352, 608, 640],
        [352, 640, -640],
        [352, 640, 640],
        [352, -640, -608],
        [352, 640, -608],
        [352, -640, -576],
        [352, 640, -576],
        [352, -640, -544],
        [352, 640, -544],
        [352, -640, -512],
        [352, 640, -512],
        [352, -640, -480],
        [352, 640, -480],
        [352, -640, -448],
        [352, 640, -448],
        [352, -640, -416],
        [352, 640, -416],
        [352, -640, -384],
        [352, 640, -384],
        [352, -640, -352],
        [352, 640, -352],
        [352, -640, -320],
        [352, 640, -320],
        [352, -640, -288],
        [352, 640, -288],
        [352, -640, -256],
        [352, 640, -256],
        [352, -640, -224],
        [352, 640, -224],
        [352, -640, -192],
        [352, 640, -192],
        [352, -640, -160],
        [352, 640, -160],
        [352, -640, -128],
        [352, 640, -128],
        [352, -640, -96],
        [352, 640, -96],
        [352, -640, -64],
        [352, 640, -64],
        [352, -640, -32],
        [352, 640, -32],
        [352, -640, 0],
        [352, 640, 0],
        [352, -640, 32],
        [352, 640, 32],
        [352, -640, 64],
        [352, 640, 64],
        [352, -640, 96],
        [352, 640, 96],
        [352, -640, 128],
        [352, 640, 128],
        [352, -640, 160],
        [352, 640, 160],
        [352, -640, 192],
        [352, 640, 192],
        [352, -640, 224],
        [352, 640, 224],
        [352, -640, 256],
        [352, 640, 256],
        [352, -640, 288],
        [352, 640, 288],
        [352, -640, 320],
        [352, 640, 320],
        [352, -640, 352],
        [352, 640, 352],
        [352, -640, 384],
        [352, 640, 384],
        [352, -640, 416],
        [352, 640, 416],
        [352, -640, 448],
        [352, 640, 448],
        [352, -640, 480],
        [352, 640, 480],
        [352, -640, 512],
        [352, 640, 512],
        [352, -640, 544],
        [352, 640, 544],
        [352, -640, 576],
        [352, 640, 576],
        [352, -640, 608],
        [352, 640, 608],
        [384, -640, -640],
        [384, -640, 640],
        [384, -608, -640],
        [384, -608, 640],
        [384, -576, -640],
        [384, -576, 640],
        [384, -544, -640],
        [384, -544, 640],
        [384, -512, -640],
        [384, -512, 640],
        [384, -480, -640],
        [384, -480, 640],
        [384, -448, -640],
        [384, -448, 640],
        [384, -416, -640],
        [384, -416, 640],
        [384, -384, -640],
        [384, -384, 640],
        [384, -352, -640],
        [384, -352, 640],
        [384, -320, -640],
        [384, -320, 640],
        [384, -288, -640],
        [384, -288, 640],
        [384, -256, -640],
        [384, -256, 640],
        [384, -224, -640],
        [384, -224, 640],
        [384, -192, -640],
        [384, -192, 640],
        [384, -160, -640],
        [384, -160, 640],
        [384, -128, -640],
        [384, -128, 640],
        [384, -96, -640],
        [384, -96, 640],
        [384, -64, -640],
        [384, -64, 640],
        [384, -32, -640],
        [384, -32, 640],
        [384, 0, -640],
        [384, 0, 640],
        [384, 32, -640],
        [384, 32, 640],
        [384, 64, -640],
        [384, 64, 640],
        [384, 96, -640],
        [384, 96, 640],
        [384, 128, -640],
        [384, 128, 640],
        [384, 160, -640],
        [384, 160, 640],
        [384, 192, -640],
        [384, 192, 640],
        [384, 224, -640],
        [384, 224, 640],
        [384, 256, -640],
        [384, 256, 640],
        [384, 288, -640],
        [384, 288, 640],
        [384, 320, -640],
        [384, 320, 640],
        [384, 352, -640],
        [384, 352, 640],
        [384, 384, -640],
        [384, 384, 640],
        [384, 416, -640],
        [384, 416, 640],
        [384, 448, -640],
        [384, 448, 640],
        [384, 480, -640],
        [384, 480, 640],
        [384, 512, -640],
        [384, 512, 640],
        [384, 544, -640],
        [384, 544, 640],
        [384, 576, -640],
        [384, 576, 640],
        [384, 608, -640],
        [384, 608, 640],
        [384, 640, -640],
        [384, 640, 640],
        [384, -640, -608],
        [384, 640, -608],
        [384, -640, -576],
        [384, 640, -576],
        [384, -640, -544],
        [384, 640, -544],
        [384, -640, -512],
        [384, 640, -512],
        [384, -640, -480],
        [384, 640, -480],
        [384, -640, -448],
        [384, 640, -448],
        [384, -640, -416],
        [384, 640, -416],
        [384, -640, -384],
        [384, 640, -384],
        [384, -640, -352],
        [384, 640, -352],
        [384, -640, -320],
        [384, 640, -320],
        [384, -640, -288],
        [384, 640, -288],
        [384, -640, -256],
        [384, 640, -256],
        [384, -640, -224],
        [384, 640, -224],
        [384, -640, -192],
        [384, 640, -192],
        [384, -640, -160],
        [384, 640, -160],
        [384, -640, -128],
        [384, 640, -128],
        [384, -640, -96],
        [384, 640, -96],
        [384, -640, -64],
        [384, 640, -64],
        [384, -640, -32],
        [384, 640, -32],
        [384, -640, 0],
        [384, 640, 0],
        [384, -640, 32],
        [384, 640, 32],
        [384, -640, 64],
        [384, 640, 64],
        [384, -640, 96],
        [384, 640, 96],
        [384, -640, 128],
        [384, 640, 128],
        [384, -640, 160],
        [384, 640, 160],
        [384, -640, 192],
        [384, 640, 192],
        [384, -640, 224],
        [384, 640, 224],
        [384, -640, 256],
        [384, 640, 256],
        [384, -640, 288],
        [384, 640, 288],
        [384, -640, 320],
        [384, 640, 320],
        [384, -640, 352],
        [384, 640, 352],
        [384, -640, 384],
        [384, 640, 384],
        [384, -640, 416],
        [384, 640, 416],
        [384, -640, 448],
        [384, 640, 448],
        [384, -640, 480],
        [384, 640, 480],
        [384, -640, 512],
        [384, 640, 512],
        [384, -640, 544],
        [384, 640, 544],
        [384, -640, 576],
        [384, 640, 576],
        [384, -640, 608],
        [384, 640, 608],
        [416, -640, -640],
        [416, -640, 640],
        [416, -608, -640],
        [416, -608, 640],
        [416, -576, -640],
        [416, -576, 640],
        [416, -544, -640],
        [416, -544, 640],
        [416, -512, -640],
        [416, -512, 640],
        [416, -480, -640],
        [416, -480, 640],
        [416, -448, -640],
        [416, -448, 640],
        [416, -416, -640],
        [416, -416, 640],
        [416, -384, -640],
        [416, -384, 640],
        [416, -352, -640],
        [416, -352, 640],
        [416, -320, -640],
        [416, -320, 640],
        [416, -288, -640],
        [416, -288, 640],
        [416, -256, -640],
        [416, -256, 640],
        [416, -224, -640],
        [416, -224, 640],
        [416, -192, -640],
        [416, -192, 640],
        [416, -160, -640],
        [416, -160, 640],
        [416, -128, -640],
        [416, -128, 640],
        [416, -96, -640],
        [416, -96, 640],
        [416, -64, -640],
        [416, -64, 640],
        [416, -32, -640],
        [416, -32, 640],
        [416, 0, -640],
        [416, 0, 640],
        [416, 32, -640],
        [416, 32, 640],
        [416, 64, -640],
        [416, 64, 640],
        [416, 96, -640],
        [416, 96, 640],
        [416, 128, -640],
        [416, 128, 640],
        [416, 160, -640],
        [416, 160, 640],
        [416, 192, -640],
        [416, 192, 640],
        [416, 224, -640],
        [416, 224, 640],
        [416, 256, -640],
        [416, 256, 640],
        [416, 288, -640],
        [416, 288, 640],
        [416, 320, -640],
        [416, 320, 640],
        [416, 352, -640],
        [416, 352, 640],
        [416, 384, -640],
        [416, 384, 640],
        [416, 416, -640],
        [416, 416, 640],
        [416, 448, -640],
        [416, 448, 640],
        [416, 480, -640],
        [416, 480, 640],
        [416, 512, -640],
        [416, 512, 640],
        [416, 544, -640],
        [416, 544, 640],
        [416, 576, -640],
        [416, 576, 640],
        [416, 608, -640],
        [416, 608, 640],
        [416, 640, -640],
        [416, 640, 640],
        [416, -640, -608],
        [416, 640, -608],
        [416, -640, -576],
        [416, 640, -576],
        [416, -640, -544],
        [416, 640, -544],
        [416, -640, -512],
        [416, 640, -512],
        [416, -640, -480],
        [416, 640, -480],
        [416, -640, -448],
        [416, 640, -448],
        [416, -640, -416],
        [416, 640, -416],
        [416, -640, -384],
        [416, 640, -384],
        [416, -640, -352],
        [416, 640, -352],
        [416, -640, -320],
        [416, 640, -320],
        [416, -640, -288],
        [416, 640, -288],
        [416, -640, -256],
        [416, 640, -256],
        [416, -640, -224],
        [416, 640, -224],
        [416, -640, -192],
        [416, 640, -192],
        [416, -640, -160],
        [416, 640, -160],
        [416, -640, -128],
        [416, 640, -128],
        [416, -640, -96],
        [416, 640, -96],
        [416, -640, -64],
        [416, 640, -64],
        [416, -640, -32],
        [416, 640, -32],
        [416, -640, 0],
        [416, 640, 0],
        [416, -640, 32],
        [416, 640, 32],
        [416, -640, 64],
        [416, 640, 64],
        [416, -640, 96],
        [416, 640, 96],
        [416, -640, 128],
        [416, 640, 128],
        [416, -640, 160],
        [416, 640, 160],
        [416, -640, 192],
        [416, 640, 192],
        [416, -640, 224],
        [416, 640, 224],
        [416, -640, 256],
        [416, 640, 256],
        [416, -640, 288],
        [416, 640, 288],
        [416, -640, 320],
        [416, 640, 320],
        [416, -640, 352],
        [416, 640, 352],
        [416, -640, 384],
        [416, 640, 384],
        [416, -640, 416],
        [416, 640, 416],
        [416, -640, 448],
        [416, 640, 448],
        [416, -640, 480],
        [416, 640, 480],
        [416, -640, 512],
        [416, 640, 512],
        [416, -640, 544],
        [416, 640, 544],
        [416, -640, 576],
        [416, 640, 576],
        [416, -640, 608],
        [416, 640, 608],
        [448, -640, -640],
        [448, -640, 640],
        [448, -608, -640],
        [448, -608, 640],
        [448, -576, -640],
        [448, -576, 640],
        [448, -544, -640],
        [448, -544, 640],
        [448, -512, -640],
        [448, -512, 640],
        [448, -480, -640],
        [448, -480, 640],
        [448, -448, -640],
        [448, -448, 640],
        [448, -416, -640],
        [448, -416, 640],
        [448, -384, -640],
        [448, -384, 640],
        [448, -352, -640],
        [448, -352, 640],
        [448, -320, -640],
        [448, -320, 640],
        [448, -288, -640],
        [448, -288, 640],
        [448, -256, -640],
        [448, -256, 640],
        [448, -224, -640],
        [448, -224, 640],
        [448, -192, -640],
        [448, -192, 640],
        [448, -160, -640],
        [448, -160, 640],
        [448, -128, -640],
        [448, -128, 640],
        [448, -96, -640],
        [448, -96, 640],
        [448, -64, -640],
        [448, -64, 640],
        [448, -32, -640],
        [448, -32, 640],
        [448, 0, -640],
        [448, 0, 640],
        [448, 32, -640],
        [448, 32, 640],
        [448, 64, -640],
        [448, 64, 640],
        [448, 96, -640],
        [448, 96, 640],
        [448, 128, -640],
        [448, 128, 640],
        [448, 160, -640],
        [448, 160, 640],
        [448, 192, -640],
        [448, 192, 640],
        [448, 224, -640],
        [448, 224, 640],
        [448, 256, -640],
        [448, 256, 640],
        [448, 288, -640],
        [448, 288, 640],
        [448, 320, -640],
        [448, 320, 640],
        [448, 352, -640],
        [448, 352, 640],
        [448, 384, -640],
        [448, 384, 640],
        [448, 416, -640],
        [448, 416, 640],
        [448, 448, -640],
        [448, 448, 640],
        [448, 480, -640],
        [448, 480, 640],
        [448, 512, -640],
        [448, 512, 640],
        [448, 544, -640],
        [448, 544, 640],
        [448, 576, -640],
        [448, 576, 640],
        [448, 608, -640],
        [448, 608, 640],
        [448, 640, -640],
        [448, 640, 640],
        [448, -640, -608],
        [448, 640, -608],
        [448, -640, -576],
        [448, 640, -576],
        [448, -640, -544],
        [448, 640, -544],
        [448, -640, -512],
        [448, 640, -512],
        [448, -640, -480],
        [448, 640, -480],
        [448, -640, -448],
        [448, 640, -448],
        [448, -640, -416],
        [448, 640, -416],
        [448, -640, -384],
        [448, 640, -384],
        [448, -640, -352],
        [448, 640, -352],
        [448, -640, -320],
        [448, 640, -320],
        [448, -640, -288],
        [448, 640, -288],
        [448, -640, -256],
        [448, 640, -256],
        [448, -640, -224],
        [448, 640, -224],
        [448, -640, -192],
        [448, 640, -192],
        [448, -640, -160],
        [448, 640, -160],
        [448, -640, -128],
        [448, 640, -128],
        [448, -640, -96],
        [448, 640, -96],
        [448, -640, -64],
        [448, 640, -64],
        [448, -640, -32],
        [448, 640, -32],
        [448, -640, 0],
        [448, 640, 0],
        [448, -640, 32],
        [448, 640, 32],
        [448, -640, 64],
        [448, 640, 64],
        [448, -640, 96],
        [448, 640, 96],
        [448, -640, 128],
        [448, 640, 128],
        [448, -640, 160],
        [448, 640, 160],
        [448, -640, 192],
        [448, 640, 192],
        [448, -640, 224],
        [448, 640, 224],
        [448, -640, 256],
        [448, 640, 256],
        [448, -640, 288],
        [448, 640, 288],
        [448, -640, 320],
        [448, 640, 320],
        [448, -640, 352],
        [448, 640, 352],
        [448, -640, 384],
        [448, 640, 384],
        [448, -640, 416],
        [448, 640, 416],
        [448, -640, 448],
        [448, 640, 448],
        [448, -640, 480],
        [448, 640, 480],
        [448, -640, 512],
        [448, 640, 512],
        [448, -640, 544],
        [448, 640, 544],
        [448, -640, 576],
        [448, 640, 576],
        [448, -640, 608],
        [448, 640, 608],
        [480, -640, -640],
        [480, -640, 640],
        [480, -608, -640],
        [480, -608, 640],
        [480, -576, -640],
        [480, -576, 640],
        [480, -544, -640],
        [480, -544, 640],
        [480, -512, -640],
        [480, -512, 640],
        [480, -480, -640],
        [480, -480, 640],
        [480, -448, -640],
        [480, -448, 640],
        [480, -416, -640],
        [480, -416, 640],
        [480, -384, -640],
        [480, -384, 640],
        [480, -352, -640],
        [480, -352, 640],
        [480, -320, -640],
        [480, -320, 640],
        [480, -288, -640],
        [480, -288, 640],
        [480, -256, -640],
        [480, -256, 640],
        [480, -224, -640],
        [480, -224, 640],
        [480, -192, -640],
        [480, -192, 640],
        [480, -160, -640],
        [480, -160, 640],
        [480, -128, -640],
        [480, -128, 640],
        [480, -96, -640],
        [480, -96, 640],
        [480, -64, -640],
        [480, -64, 640],
        [480, -32, -640],
        [480, -32, 640],
        [480, 0, -640],
        [480, 0, 640],
        [480, 32, -640],
        [480, 32, 640],
        [480, 64, -640],
        [480, 64, 640],
        [480, 96, -640],
        [480, 96, 640],
        [480, 128, -640],
        [480, 128, 640],
        [480, 160, -640],
        [480, 160, 640],
        [480, 192, -640],
        [480, 192, 640],
        [480, 224, -640],
        [480, 224, 640],
        [480, 256, -640],
        [480, 256, 640],
        [480, 288, -640],
        [480, 288, 640],
        [480, 320, -640],
        [480, 320, 640],
        [480, 352, -640],
        [480, 352, 640],
        [480, 384, -640],
        [480, 384, 640],
        [480, 416, -640],
        [480, 416, 640],
        [480, 448, -640],
        [480, 448, 640],
        [480, 480, -640],
        [480, 480, 640],
        [480, 512, -640],
        [480, 512, 640],
        [480, 544, -640],
        [480, 544, 640],
        [480, 576, -640],
        [480, 576, 640],
        [480, 608, -640],
        [480, 608, 640],
        [480, 640, -640],
        [480, 640, 640],
        [480, -640, -608],
        [480, 640, -608],
        [480, -640, -576],
        [480, 640, -576],
        [480, -640, -544],
        [480, 640, -544],
        [480, -640, -512],
        [480, 640, -512],
        [480, -640, -480],
        [480, 640, -480],
        [480, -640, -448],
        [480, 640, -448],
        [480, -640, -416],
        [480, 640, -416],
        [480, -640, -384],
        [480, 640, -384],
        [480, -640, -352],
        [480, 640, -352],
        [480, -640, -320],
        [480, 640, -320],
        [480, -640, -288],
        [480, 640, -288],
        [480, -640, -256],
        [480, 640, -256],
        [480, -640, -224],
        [480, 640, -224],
        [480, -640, -192],
        [480, 640, -192],
        [480, -640, -160],
        [480, 640, -160],
        [480, -640, -128],
        [480, 640, -128],
        [480, -640, -96],
        [480, 640, -96],
        [480, -640, -64],
        [480, 640, -64],
        [480, -640, -32],
        [480, 640, -32],
        [480, -640, 0],
        [480, 640, 0],
        [480, -640, 32],
        [480, 640, 32],
        [480, -640, 64],
        [480, 640, 64],
        [480, -640, 96],
        [480, 640, 96],
        [480, -640, 128],
        [480, 640, 128],
        [480, -640, 160],
        [480, 640, 160],
        [480, -640, 192],
        [480, 640, 192],
        [480, -640, 224],
        [480, 640, 224],
        [480, -640, 256],
        [480, 640, 256],
        [480, -640, 288],
        [480, 640, 288],
        [480, -640, 320],
        [480, 640, 320],
        [480, -640, 352],
        [480, 640, 352],
        [480, -640, 384],
        [480, 640, 384],
        [480, -640, 416],
        [480, 640, 416],
        [480, -640, 448],
        [480, 640, 448],
        [480, -640, 480],
        [480, 640, 480],
        [480, -640, 512],
        [480, 640, 512],
        [480, -640, 544],
        [480, 640, 544],
        [480, -640, 576],
        [480, 640, 576],
        [480, -640, 608],
        [480, 640, 608],
        [512, -640, -640],
        [512, -640, 640],
        [512, -608, -640],
        [512, -608, 640],
        [512, -576, -640],
        [512, -576, 640],
        [512, -544, -640],
        [512, -544, 640],
        [512, -512, -640],
        [512, -512, 640],
        [512, -480, -640],
        [512, -480, 640],
        [512, -448, -640],
        [512, -448, 640],
        [512, -416, -640],
        [512, -416, 640],
        [512, -384, -640],
        [512, -384, 640],
        [512, -352, -640],
        [512, -352, 640],
        [512, -320, -640],
        [512, -320, 640],
        [512, -288, -640],
        [512, -288, 640],
        [512, -256, -640],
        [512, -256, 640],
        [512, -224, -640],
        [512, -224, 640],
        [512, -192, -640],
        [512, -192, 640],
        [512, -160, -640],
        [512, -160, 640],
        [512, -128, -640],
        [512, -128, 640],
        [512, -96, -640],
        [512, -96, 640],
        [512, -64, -640],
        [512, -64, 640],
        [512, -32, -640],
        [512, -32, 640],
        [512, 0, -640],
        [512, 0, 640],
        [512, 32, -640],
        [512, 32, 640],
        [512, 64, -640],
        [512, 64, 640],
        [512, 96, -640],
        [512, 96, 640],
        [512, 128, -640],
        [512, 128, 640],
        [512, 160, -640],
        [512, 160, 640],
        [512, 192, -640],
        [512, 192, 640],
        [512, 224, -640],
        [512, 224, 640],
        [512, 256, -640],
        [512, 256, 640],
        [512, 288, -640],
        [512, 288, 640],
        [512, 320, -640],
        [512, 320, 640],
        [512, 352, -640],
        [512, 352, 640],
        [512, 384, -640],
        [512, 384, 640],
        [512, 416, -640],
        [512, 416, 640],
        [512, 448, -640],
        [512, 448, 640],
        [512, 480, -640],
        [512, 480, 640],
        [512, 512, -640],
        [512, 512, 640],
        [512, 544, -640],
        [512, 544, 640],
        [512, 576, -640],
        [512, 576, 640],
        [512, 608, -640],
        [512, 608, 640],
        [512, 640, -640],
        [512, 640, 640],
        [512, -640, -608],
        [512, 640, -608],
        [512, -640, -576],
        [512, 640, -576],
        [512, -640, -544],
        [512, 640, -544],
        [512, -640, -512],
        [512, 640, -512],
        [512, -640, -480],
        [512, 640, -480],
        [512, -640, -448],
        [512, 640, -448],
        [512, -640, -416],
        [512, 640, -416],
        [512, -640, -384],
        [512, 640, -384],
        [512, -640, -352],
        [512, 640, -352],
        [512, -640, -320],
        [512, 640, -320],
        [512, -640, -288],
        [512, 640, -288],
        [512, -640, -256],
        [512, 640, -256],
        [512, -640, -224],
        [512, 640, -224],
        [512, -640, -192],
        [512, 640, -192],
        [512, -640, -160],
        [512, 640, -160],
        [512, -640, -128],
        [512, 640, -128],
        [512, -640, -96],
        [512, 640, -96],
        [512, -640, -64],
        [512, 640, -64],
        [512, -640, -32],
        [512, 640, -32],
        [512, -640, 0],
        [512, 640, 0],
        [512, -640, 32],
        [512, 640, 32],
        [512, -640, 64],
        [512, 640, 64],
        [512, -640, 96],
        [512, 640, 96],
        [512, -640, 128],
        [512, 640, 128],
        [512, -640, 160],
        [512, 640, 160],
        [512, -640, 192],
        [512, 640, 192],
        [512, -640, 224],
        [512, 640, 224],
        [512, -640, 256],
        [512, 640, 256],
        [512, -640, 288],
        [512, 640, 288],
        [512, -640, 320],
        [512, 640, 320],
        [512, -640, 352],
        [512, 640, 352],
        [512, -640, 384],
        [512, 640, 384],
        [512, -640, 416],
        [512, 640, 416],
        [512, -640, 448],
        [512, 640, 448],
        [512, -640, 480],
        [512, 640, 480],
        [512, -640, 512],
        [512, 640, 512],
        [512, -640, 544],
        [512, 640, 544],
        [512, -640, 576],
        [512, 640, 576],
        [512, -640, 608],
        [512, 640, 608],
        [544, -640, -640],
        [544, -640, 640],
        [544, -608, -640],
        [544, -608, 640],
        [544, -576, -640],
        [544, -576, 640],
        [544, -544, -640],
        [544, -544, 640],
        [544, -512, -640],
        [544, -512, 640],
        [544, -480, -640],
        [544, -480, 640],
        [544, -448, -640],
        [544, -448, 640],
        [544, -416, -640],
        [544, -416, 640],
        [544, -384, -640],
        [544, -384, 640],
        [544, -352, -640],
        [544, -352, 640],
        [544, -320, -640],
        [544, -320, 640],
        [544, -288, -640],
        [544, -288, 640],
        [544, -256, -640],
        [544, -256, 640],
        [544, -224, -640],
        [544, -224, 640],
        [544, -192, -640],
        [544, -192, 640],
        [544, -160, -640],
        [544, -160, 640],
        [544, -128, -640],
        [544, -128, 640],
        [544, -96, -640],
        [544, -96, 640],
        [544, -64, -640],
        [544, -64, 640],
        [544, -32, -640],
        [544, -32, 640],
        [544, 0, -640],
        [544, 0, 640],
        [544, 32, -640],
        [544, 32, 640],
        [544, 64, -640],
        [544, 64, 640],
        [544, 96, -640],
        [544, 96, 640],
        [544, 128, -640],
        [544, 128, 640],
        [544, 160, -640],
        [544, 160, 640],
        [544, 192, -640],
        [544, 192, 640],
        [544, 224, -640],
        [544, 224, 640],
        [544, 256, -640],
        [544, 256, 640],
        [544, 288, -640],
        [544, 288, 640],
        [544, 320, -640],
        [544, 320, 640],
        [544, 352, -640],
        [544, 352, 640],
        [544, 384, -640],
        [544, 384, 640],
        [544, 416, -640],
        [544, 416, 640],
        [544, 448, -640],
        [544, 448, 640],
        [544, 480, -640],
        [544, 480, 640],
        [544, 512, -640],
        [544, 512, 640],
        [544, 544, -640],
        [544, 544, 640],
        [544, 576, -640],
        [544, 576, 640],
        [544, 608, -640],
        [544, 608, 640],
        [544, 640, -640],
        [544, 640, 640],
        [544, -640, -608],
        [544, 640, -608],
        [544, -640, -576],
        [544, 640, -576],
        [544, -640, -544],
        [544, 640, -544],
        [544, -640, -512],
        [544, 640, -512],
        [544, -640, -480],
        [544, 640, -480],
        [544, -640, -448],
        [544, 640, -448],
        [544, -640, -416],
        [544, 640, -416],
        [544, -640, -384],
        [544, 640, -384],
        [544, -640, -352],
        [544, 640, -352],
        [544, -640, -320],
        [544, 640, -320],
        [544, -640, -288],
        [544, 640, -288],
        [544, -640, -256],
        [544, 640, -256],
        [544, -640, -224],
        [544, 640, -224],
        [544, -640, -192],
        [544, 640, -192],
        [544, -640, -160],
        [544, 640, -160],
        [544, -640, -128],
        [544, 640, -128],
        [544, -640, -96],
        [544, 640, -96],
        [544, -640, -64],
        [544, 640, -64],
        [544, -640, -32],
        [544, 640, -32],
        [544, -640, 0],
        [544, 640, 0],
        [544, -640, 32],
        [544, 640, 32],
        [544, -640, 64],
        [544, 640, 64],
        [544, -640, 96],
        [544, 640, 96],
        [544, -640, 128],
        [544, 640, 128],
        [544, -640, 160],
        [544, 640, 160],
        [544, -640, 192],
        [544, 640, 192],
        [544, -640, 224],
        [544, 640, 224],
        [544, -640, 256],
        [544, 640, 256],
        [544, -640, 288],
        [544, 640, 288],
        [544, -640, 320],
        [544, 640, 320],
        [544, -640, 352],
        [544, 640, 352],
        [544, -640, 384],
        [544, 640, 384],
        [544, -640, 416],
        [544, 640, 416],
        [544, -640, 448],
        [544, 640, 448],
        [544, -640, 480],
        [544, 640, 480],
        [544, -640, 512],
        [544, 640, 512],
        [544, -640, 544],
        [544, 640, 544],
        [544, -640, 576],
        [544, 640, 576],
        [544, -640, 608],
        [544, 640, 608],
        [576, -640, -640],
        [576, -640, 640],
        [576, -608, -640],
        [576, -608, 640],
        [576, -576, -640],
        [576, -576, 640],
        [576, -544, -640],
        [576, -544, 640],
        [576, -512, -640],
        [576, -512, 640],
        [576, -480, -640],
        [576, -480, 640],
        [576, -448, -640],
        [576, -448, 640],
        [576, -416, -640],
        [576, -416, 640],
        [576, -384, -640],
        [576, -384, 640],
        [576, -352, -640],
        [576, -352, 640],
        [576, -320, -640],
        [576, -320, 640],
        [576, -288, -640],
        [576, -288, 640],
        [576, -256, -640],
        [576, -256, 640],
        [576, -224, -640],
        [576, -224, 640],
        [576, -192, -640],
        [576, -192, 640],
        [576, -160, -640],
        [576, -160, 640],
        [576, -128, -640],
        [576, -128, 640],
        [576, -96, -640],
        [576, -96, 640],
        [576, -64, -640],
        [576, -64, 640],
        [576, -32, -640],
        [576, -32, 640],
        [576, 0, -640],
        [576, 0, 640],
        [576, 32, -640],
        [576, 32, 640],
        [576, 64, -640],
        [576, 64, 640],
        [576, 96, -640],
        [576, 96, 640],
        [576, 128, -640],
        [576, 128, 640],
        [576, 160, -640],
        [576, 160, 640],
        [576, 192, -640],
        [576, 192, 640],
        [576, 224, -640],
        [576, 224, 640],
        [576, 256, -640],
        [576, 256, 640],
        [576, 288, -640],
        [576, 288, 640],
        [576, 320, -640],
        [576, 320, 640],
        [576, 352, -640],
        [576, 352, 640],
        [576, 384, -640],
        [576, 384, 640],
        [576, 416, -640],
        [576, 416, 640],
        [576, 448, -640],
        [576, 448, 640],
        [576, 480, -640],
        [576, 480, 640],
        [576, 512, -640],
        [576, 512, 640],
        [576, 544, -640],
        [576, 544, 640],
        [576, 576, -640],
        [576, 576, 640],
        [576, 608, -640],
        [576, 608, 640],
        [576, 640, -640],
        [576, 640, 640],
        [576, -640, -608],
        [576, 640, -608],
        [576, -640, -576],
        [576, 640, -576],
        [576, -640, -544],
        [576, 640, -544],
        [576, -640, -512],
        [576, 640, -512],
        [576, -640, -480],
        [576, 640, -480],
        [576, -640, -448],
        [576, 640, -448],
        [576, -640, -416],
        [576, 640, -416],
        [576, -640, -384],
        [576, 640, -384],
        [576, -640, -352],
        [576, 640, -352],
        [576, -640, -320],
        [576, 640, -320],
        [576, -640, -288],
        [576, 640, -288],
        [576, -640, -256],
        [576, 640, -256],
        [576, -640, -224],
        [576, 640, -224],
        [576, -640, -192],
        [576, 640, -192],
        [576, -640, -160],
        [576, 640, -160],
        [576, -640, -128],
        [576, 640, -128],
        [576, -640, -96],
        [576, 640, -96],
        [576, -640, -64],
        [576, 640, -64],
        [576, -640, -32],
        [576, 640, -32],
        [576, -640, 0],
        [576, 640, 0],
        [576, -640, 32],
        [576, 640, 32],
        [576, -640, 64],
        [576, 640, 64],
        [576, -640, 96],
        [576, 640, 96],
        [576, -640, 128],
        [576, 640, 128],
        [576, -640, 160],
        [576, 640, 160],
        [576, -640, 192],
        [576, 640, 192],
        [576, -640, 224],
        [576, 640, 224],
        [576, -640, 256],
        [576, 640, 256],
        [576, -640, 288],
        [576, 640, 288],
        [576, -640, 320],
        [576, 640, 320],
        [576, -640, 352],
        [576, 640, 352],
        [576, -640, 384],
        [576, 640, 384],
        [576, -640, 416],
        [576, 640, 416],
        [576, -640, 448],
        [576, 640, 448],
        [576, -640, 480],
        [576, 640, 480],
        [576, -640, 512],
        [576, 640, 512],
        [576, -640, 544],
        [576, 640, 544],
        [576, -640, 576],
        [576, 640, 576],
        [576, -640, 608],
        [576, 640, 608],
        [608, -640, -640],
        [608, -640, 640],
        [608, -608, -640],
        [608, -608, 640],
        [608, -576, -640],
        [608, -576, 640],
        [608, -544, -640],
        [608, -544, 640],
        [608, -512, -640],
        [608, -512, 640],
        [608, -480, -640],
        [608, -480, 640],
        [608, -448, -640],
        [608, -448, 640],
        [608, -416, -640],
        [608, -416, 640],
        [608, -384, -640],
        [608, -384, 640],
        [608, -352, -640],
        [608, -352, 640],
        [608, -320, -640],
        [608, -320, 640],
        [608, -288, -640],
        [608, -288, 640],
        [608, -256, -640],
        [608, -256, 640],
        [608, -224, -640],
        [608, -224, 640],
        [608, -192, -640],
        [608, -192, 640],
        [608, -160, -640],
        [608, -160, 640],
        [608, -128, -640],
        [608, -128, 640],
        [608, -96, -640],
        [608, -96, 640],
        [608, -64, -640],
        [608, -64, 640],
        [608, -32, -640],
        [608, -32, 640],
        [608, 0, -640],
        [608, 0, 640],
        [608, 32, -640],
        [608, 32, 640],
        [608, 64, -640],
        [608, 64, 640],
        [608, 96, -640],
        [608, 96, 640],
        [608, 128, -640],
        [608, 128, 640],
        [608, 160, -640],
        [608, 160, 640],
        [608, 192, -640],
        [608, 192, 640],
        [608, 224, -640],
        [608, 224, 640],
        [608, 256, -640],
        [608, 256, 640],
        [608, 288, -640],
        [608, 288, 640],
        [608, 320, -640],
        [608, 320, 640],
        [608, 352, -640],
        [608, 352, 640],
        [608, 384, -640],
        [608, 384, 640],
        [608, 416, -640],
        [608, 416, 640],
        [608, 448, -640],
        [608, 448, 640],
        [608, 480, -640],
        [608, 480, 640],
        [608, 512, -640],
        [608, 512, 640],
        [608, 544, -640],
        [608, 544, 640],
        [608, 576, -640],
        [608, 576, 640],
        [608, 608, -640],
        [608, 608, 640],
        [608, 640, -640],
        [608, 640, 640],
        [608, -640, -608],
        [608, 640, -608],
        [608, -640, -576],
        [608, 640, -576],
        [608, -640, -544],
        [608, 640, -544],
        [608, -640, -512],
        [608, 640, -512],
        [608, -640, -480],
        [608, 640, -480],
        [608, -640, -448],
        [608, 640, -448],
        [608, -640, -416],
        [608, 640, -416],
        [608, -640, -384],
        [608, 640, -384],
        [608, -640, -352],
        [608, 640, -352],
        [608, -640, -320],
        [608, 640, -320],
        [608, -640, -288],
        [608, 640, -288],
        [608, -640, -256],
        [608, 640, -256],
        [608, -640, -224],
        [608, 640, -224],
        [608, -640, -192],
        [608, 640, -192],
        [608, -640, -160],
        [608, 640, -160],
        [608, -640, -128],
        [608, 640, -128],
        [608, -640, -96],
        [608, 640, -96],
        [608, -640, -64],
        [608, 640, -64],
        [608, -640, -32],
        [608, 640, -32],
        [608, -640, 0],
        [608, 640, 0],
        [608, -640, 32],
        [608, 640, 32],
        [608, -640, 64],
        [608, 640, 64],
        [608, -640, 96],
        [608, 640, 96],
        [608, -640, 128],
        [608, 640, 128],
        [608, -640, 160],
        [608, 640, 160],
        [608, -640, 192],
        [608, 640, 192],
        [608, -640, 224],
        [608, 640, 224],
        [608, -640, 256],
        [608, 640, 256],
        [608, -640, 288],
        [608, 640, 288],
        [608, -640, 320],
        [608, 640, 320],
        [608, -640, 352],
        [608, 640, 352],
        [608, -640, 384],
        [608, 640, 384],
        [608, -640, 416],
        [608, 640, 416],
        [608, -640, 448],
        [608, 640, 448],
        [608, -640, 480],
        [608, 640, 480],
        [608, -640, 512],
        [608, 640, 512],
        [608, -640, 544],
        [608, 640, 544],
        [608, -640, 576],
        [608, 640, 576],
        [608, -640, 608],
        [608, 640, 608],
        [640, -640, -640],
        [640, -640, 640],
        [640, -608, -640],
        [640, -608, 640],
        [640, -576, -640],
        [640, -576, 640],
        [640, -544, -640],
        [640, -544, 640],
        [640, -512, -640],
        [640, -512, 640],
        [640, -480, -640],
        [640, -480, 640],
        [640, -448, -640],
        [640, -448, 640],
        [640, -416, -640],
        [640, -416, 640],
        [640, -384, -640],
        [640, -384, 640],
        [640, -352, -640],
        [640, -352, 640],
        [640, -320, -640],
        [640, -320, 640],
        [640, -288, -640],
        [640, -288, 640],
        [640, -256, -640],
        [640, -256, 640],
        [640, -224, -640],
        [640, -224, 640],
        [640, -192, -640],
        [640, -192, 640],
        [640, -160, -640],
        [640, -160, 640],
        [640, -128, -640],
        [640, -128, 640],
        [640, -96, -640],
        [640, -96, 640],
        [640, -64, -640],
        [640, -64, 640],
        [640, -32, -640],
        [640, -32, 640],
        [640, 0, -640],
        [640, 0, 640],
        [640, 32, -640],
        [640, 32, 640],
        [640, 64, -640],
        [640, 64, 640],
        [640, 96, -640],
        [640, 96, 640],
        [640, 128, -640],
        [640, 128, 640],
        [640, 160, -640],
        [640, 160, 640],
        [640, 192, -640],
        [640, 192, 640],
        [640, 224, -640],
        [640, 224, 640],
        [640, 256, -640],
        [640, 256, 640],
        [640, 288, -640],
        [640, 288, 640],
        [640, 320, -640],
        [640, 320, 640],
        [640, 352, -640],
        [640, 352, 640],
        [640, 384, -640],
        [640, 384, 640],
        [640, 416, -640],
        [640, 416, 640],
        [640, 448, -640],
        [640, 448, 640],
        [640, 480, -640],
        [640, 480, 640],
        [640, 512, -640],
        [640, 512, 640],
        [640, 544, -640],
        [640, 544, 640],
        [640, 576, -640],
        [640, 576, 640],
        [640, 608, -640],
        [640, 608, 640],
        [640, 640, -640],
        [640, 640, 640],
        [640, -640, -608],
        [640, 640, -608],
        [640, -640, -576],
        [640, 640, -576],
        [640, -640, -544],
        [640, 640, -544],
        [640, -640, -512],
        [640, 640, -512],
        [640, -640, -480],
        [640, 640, -480],
        [640, -640, -448],
        [640, 640, -448],
        [640, -640, -416],
        [640, 640, -416],
        [640, -640, -384],
        [640, 640, -384],
        [640, -640, -352],
        [640, 640, -352],
        [640, -640, -320],
        [640, 640, -320],
        [640, -640, -288],
        [640, 640, -288],
        [640, -640, -256],
        [640, 640, -256],
        [640, -640, -224],
        [640, 640, -224],
        [640, -640, -192],
        [640, 640, -192],
        [640, -640, -160],
        [640, 640, -160],
        [640, -640, -128],
        [640, 640, -128],
        [640, -640, -96],
        [640, 640, -96],
        [640, -640, -64],
        [640, 640, -64],
        [640, -640, -32],
        [640, 640, -32],
        [640, -640, 0],
        [640, 640, 0],
        [640, -640, 32],
        [640, 640, 32],
        [640, -640, 64],
        [640, 640, 64],
        [640, -640, 96],
        [640, 640, 96],
        [640, -640, 128],
        [640, 640, 128],
        [640, -640, 160],
        [640, 640, 160],
        [640, -640, 192],
        [640, 640, 192],
        [640, -640, 224],
        [640, 640, 224],
        [640, -640, 256],
        [640, 640, 256],
        [640, -640, 288],
        [640, 640, 288],
        [640, -640, 320],
        [640, 640, 320],
        [640, -640, 352],
        [640, 640, 352],
        [640, -640, 384],
        [640, 640, 384],
        [640, -640, 416],
        [640, 640, 416],
        [640, -640, 448],
        [640, 640, 448],
        [640, -640, 480],
        [640, 640, 480],
        [640, -640, 512],
        [640, 640, 512],
        [640, -640, 544],
        [640, 640, 544],
        [640, -640, 576],
        [640, 640, 576],
        [640, -640, 608],
        [640, 640, 608],
        [-640, -608, -608],
        [640, -608, -608],
        [-640, -576, -608],
        [640, -576, -608],
        [-640, -544, -608],
        [640, -544, -608],
        [-640, -512, -608],
        [640, -512, -608],
        [-640, -480, -608],
        [640, -480, -608],
        [-640, -448, -608],
        [640, -448, -608],
        [-640, -416, -608],
        [640, -416, -608],
        [-640, -384, -608],
        [640, -384, -608],
        [-640, -352, -608],
        [640, -352, -608],
        [-640, -320, -608],
        [640, -320, -608],
        [-640, -288, -608],
        [640, -288, -608],
        [-640, -256, -608],
        [640, -256, -608],
        [-640, -224, -608],
        [640, -224, -608],
        [-640, -192, -608],
        [640, -192, -608],
        [-640, -160, -608],
        [640, -160, -608],
        [-640, -128, -608],
        [640, -128, -608],
        [-640, -96, -608],
        [640, -96, -608],
        [-640, -64, -608],
        [640, -64, -608],
        [-640, -32, -608],
        [640, -32, -608],
        [-640, 0, -608],
        [640, 0, -608],
        [-640, 32, -608],
        [640, 32, -608],
        [-640, 64, -608],
        [640, 64, -608],
        [-640, 96, -608],
        [640, 96, -608],
        [-640, 128, -608],
        [640, 128, -608],
        [-640, 160, -608],
        [640, 160, -608],
        [-640, 192, -608],
        [640, 192, -608],
        [-640, 224, -608],
        [640, 224, -608],
        [-640, 256, -608],
        [640, 256, -608],
        [-640, 288, -608],
        [640, 288, -608],
        [-640, 320, -608],
        [640, 320, -608],
        [-640, 352, -608],
        [640, 352, -608],
        [-640, 384, -608],
        [640, 384, -608],
        [-640, 416, -608],
        [640, 416, -608],
        [-640, 448, -608],
        [640, 448, -608],
        [-640, 480, -608],
        [640, 480, -608],
        [-640, 512, -608],
        [640, 512, -608],
        [-640, 544, -608],
        [640, 544, -608],
        [-640, 576, -608],
        [640, 576, -608],
        [-640, 608, -608],
        [640, 608, -608],
        [-640, -608, -576],
        [640, -608, -576],
        [-640, -576, -576],
        [640, -576, -576],
        [-640, -544, -576],
        [640, -544, -576],
        [-640, -512, -576],
        [640, -512, -576],
        [-640, -480, -576],
        [640, -480, -576],
        [-640, -448, -576],
        [640, -448, -576],
        [-640, -416, -576],
        [640, -416, -576],
        [-640, -384, -576],
        [640, -384, -576],
        [-640, -352, -576],
        [640, -352, -576],
        [-640, -320, -576],
        [640, -320, -576],
        [-640, -288, -576],
        [640, -288, -576],
        [-640, -256, -576],
        [640, -256, -576],
        [-640, -224, -576],
        [640, -224, -576],
        [-640, -192, -576],
        [640, -192, -576],
        [-640, -160, -576],
        [640, -160, -576],
        [-640, -128, -576],
        [640, -128, -576],
        [-640, -96, -576],
        [640, -96, -576],
        [-640, -64, -576],
        [640, -64, -576],
        [-640, -32, -576],
        [640, -32, -576],
        [-640, 0, -576],
        [640, 0, -576],
        [-640, 32, -576],
        [640, 32, -576],
        [-640, 64, -576],
        [640, 64, -576],
        [-640, 96, -576],
        [640, 96, -576],
        [-640, 128, -576],
        [640, 128, -576],
        [-640, 160, -576],
        [640, 160, -576],
        [-640, 192, -576],
        [640, 192, -576],
        [-640, 224, -576],
        [640, 224, -576],
        [-640, 256, -576],
        [640, 256, -576],
        [-640, 288, -576],
        [640, 288, -576],
        [-640, 320, -576],
        [640, 320, -576],
        [-640, 352, -576],
        [640, 352, -576],
        [-640, 384, -576],
        [640, 384, -576],
        [-640, 416, -576],
        [640, 416, -576],
        [-640, 448, -576],
        [640, 448, -576],
        [-640, 480, -576],
        [640, 480, -576],
        [-640, 512, -576],
        [640, 512, -576],
        [-640, 544, -576],
        [640, 544, -576],
        [-640, 576, -576],
        [640, 576, -576],
        [-640, 608, -576],
        [640, 608, -576],
        [-640, -608, -544],
        [640, -608, -544],
        [-640, -576, -544],
        [640, -576, -544],
        [-640, -544, -544],
        [640, -544, -544],
        [-640, -512, -544],
        [640, -512, -544],
        [-640, -480, -544],
        [640, -480, -544],
        [-640, -448, -544],
        [640, -448, -544],
        [-640, -416, -544],
        [640, -416, -544],
        [-640, -384, -544],
        [640, -384, -544],
        [-640, -352, -544],
        [640, -352, -544],
        [-640, -320, -544],
        [640, -320, -544],
        [-640, -288, -544],
        [640, -288, -544],
        [-640, -256, -544],
        [640, -256, -544],
        [-640, -224, -544],
        [640, -224, -544],
        [-640, -192, -544],
        [640, -192, -544],
        [-640, -160, -544],
        [640, -160, -544],
        [-640, -128, -544],
        [640, -128, -544],
        [-640, -96, -544],
        [640, -96, -544],
        [-640, -64, -544],
        [640, -64, -544],
        [-640, -32, -544],
        [640, -32, -544],
        [-640, 0, -544],
        [640, 0, -544],
        [-640, 32, -544],
        [640, 32, -544],
        [-640, 64, -544],
        [640, 64, -544],
        [-640, 96, -544],
        [640, 96, -544],
        [-640, 128, -544],
        [640, 128, -544],
        [-640, 160, -544],
        [640, 160, -544],
        [-640, 192, -544],
        [640, 192, -544],
        [-640, 224, -544],
        [640, 224, -544],
        [-640, 256, -544],
        [640, 256, -544],
        [-640, 288, -544],
        [640, 288, -544],
        [-640, 320, -544],
        [640, 320, -544],
        [-640, 352, -544],
        [640, 352, -544],
        [-640, 384, -544],
        [640, 384, -544],
        [-640, 416, -544],
        [640, 416, -544],
        [-640, 448, -544],
        [640, 448, -544],
        [-640, 480, -544],
        [640, 480, -544],
        [-640, 512, -544],
        [640, 512, -544],
        [-640, 544, -544],
        [640, 544, -544],
        [-640, 576, -544],
        [640, 576, -544],
        [-640, 608, -544],
        [640, 608, -544],
        [-640, -608, -512],
        [640, -608, -512],
        [-640, -576, -512],
        [640, -576, -512],
        [-640, -544, -512],
        [640, -544, -512],
        [-640, -512, -512],
        [640, -512, -512],
        [-640, -480, -512],
        [640, -480, -512],
        [-640, -448, -512],
        [640, -448, -512],
        [-640, -416, -512],
        [640, -416, -512],
        [-640, -384, -512],
        [640, -384, -512],
        [-640, -352, -512],
        [640, -352, -512],
        [-640, -320, -512],
        [640, -320, -512],
        [-640, -288, -512],
        [640, -288, -512],
        [-640, -256, -512],
        [640, -256, -512],
        [-640, -224, -512],
        [640, -224, -512],
        [-640, -192, -512],
        [640, -192, -512],
        [-640, -160, -512],
        [640, -160, -512],
        [-640, -128, -512],
        [640, -128, -512],
        [-640, -96, -512],
        [640, -96, -512],
        [-640, -64, -512],
        [640, -64, -512],
        [-640, -32, -512],
        [640, -32, -512],
        [-640, 0, -512],
        [640, 0, -512],
        [-640, 32, -512],
        [640, 32, -512],
        [-640, 64, -512],
        [640, 64, -512],
        [-640, 96, -512],
        [640, 96, -512],
        [-640, 128, -512],
        [640, 128, -512],
        [-640, 160, -512],
        [640, 160, -512],
        [-640, 192, -512],
        [640, 192, -512],
        [-640, 224, -512],
        [640, 224, -512],
        [-640, 256, -512],
        [640, 256, -512],
        [-640, 288, -512],
        [640, 288, -512],
        [-640, 320, -512],
        [640, 320, -512],
        [-640, 352, -512],
        [640, 352, -512],
        [-640, 384, -512],
        [640, 384, -512],
        [-640, 416, -512],
        [640, 416, -512],
        [-640, 448, -512],
        [640, 448, -512],
        [-640, 480, -512],
        [640, 480, -512],
        [-640, 512, -512],
        [640, 512, -512],
        [-640, 544, -512],
        [640, 544, -512],
        [-640, 576, -512],
        [640, 576, -512],
        [-640, 608, -512],
        [640, 608, -512],
        [-640, -608, -480],
        [640, -608, -480],
        [-640, -576, -480],
        [640, -576, -480],
        [-640, -544, -480],
        [640, -544, -480],
        [-640, -512, -480],
        [640, -512, -480],
        [-640, -480, -480],
        [640, -480, -480],
        [-640, -448, -480],
        [640, -448, -480],
        [-640, -416, -480],
        [640, -416, -480],
        [-640, -384, -480],
        [640, -384, -480],
        [-640, -352, -480],
        [640, -352, -480],
        [-640, -320, -480],
        [640, -320, -480],
        [-640, -288, -480],
        [640, -288, -480],
        [-640, -256, -480],
        [640, -256, -480],
        [-640, -224, -480],
        [640, -224, -480],
        [-640, -192, -480],
        [640, -192, -480],
        [-640, -160, -480],
        [640, -160, -480],
        [-640, -128, -480],
        [640, -128, -480],
        [-640, -96, -480],
        [640, -96, -480],
        [-640, -64, -480],
        [640, -64, -480],
        [-640, -32, -480],
        [640, -32, -480],
        [-640, 0, -480],
        [640, 0, -480],
        [-640, 32, -480],
        [640, 32, -480],
        [-640, 64, -480],
        [640, 64, -480],
        [-640, 96, -480],
        [640, 96, -480],
        [-640, 128, -480],
        [640, 128, -480],
        [-640, 160, -480],
        [640, 160, -480],
        [-640, 192, -480],
        [640, 192, -480],
        [-640, 224, -480],
        [640, 224, -480],
        [-640, 256, -480],
        [640, 256, -480],
        [-640, 288, -480],
        [640, 288, -480],
        [-640, 320, -480],
        [640, 320, -480],
        [-640, 352, -480],
        [640, 352, -480],
        [-640, 384, -480],
        [640, 384, -480],
        [-640, 416, -480],
        [640, 416, -480],
        [-640, 448, -480],
        [640, 448, -480],
        [-640, 480, -480],
        [640, 480, -480],
        [-640, 512, -480],
        [640, 512, -480],
        [-640, 544, -480],
        [640, 544, -480],
        [-640, 576, -480],
        [640, 576, -480],
        [-640, 608, -480],
        [640, 608, -480],
        [-640, -608, -448],
        [640, -608, -448],
        [-640, -576, -448],
        [640, -576, -448],
        [-640, -544, -448],
        [640, -544, -448],
        [-640, -512, -448],
        [640, -512, -448],
        [-640, -480, -448],
        [640, -480, -448],
        [-640, -448, -448],
        [640, -448, -448],
        [-640, -416, -448],
        [640, -416, -448],
        [-640, -384, -448],
        [640, -384, -448],
        [-640, -352, -448],
        [640, -352, -448],
        [-640, -320, -448],
        [640, -320, -448],
        [-640, -288, -448],
        [640, -288, -448],
        [-640, -256, -448],
        [640, -256, -448],
        [-640, -224, -448],
        [640, -224, -448],
        [-640, -192, -448],
        [640, -192, -448],
        [-640, -160, -448],
        [640, -160, -448],
        [-640, -128, -448],
        [640, -128, -448],
        [-640, -96, -448],
        [640, -96, -448],
        [-640, -64, -448],
        [640, -64, -448],
        [-640, -32, -448],
        [640, -32, -448],
        [-640, 0, -448],
        [640, 0, -448],
        [-640, 32, -448],
        [640, 32, -448],
        [-640, 64, -448],
        [640, 64, -448],
        [-640, 96, -448],
        [640, 96, -448],
        [-640, 128, -448],
        [640, 128, -448],
        [-640, 160, -448],
        [640, 160, -448],
        [-640, 192, -448],
        [640, 192, -448],
        [-640, 224, -448],
        [640, 224, -448],
        [-640, 256, -448],
        [640, 256, -448],
        [-640, 288, -448],
        [640, 288, -448],
        [-640, 320, -448],
        [640, 320, -448],
        [-640, 352, -448],
        [640, 352, -448],
        [-640, 384, -448],
        [640, 384, -448],
        [-640, 416, -448],
        [640, 416, -448],
        [-640, 448, -448],
        [640, 448, -448],
        [-640, 480, -448],
        [640, 480, -448],
        [-640, 512, -448],
        [640, 512, -448],
        [-640, 544, -448],
        [640, 544, -448],
        [-640, 576, -448],
        [640, 576, -448],
        [-640, 608, -448],
        [640, 608, -448],
        [-640, -608, -416],
        [640, -608, -416],
        [-640, -576, -416],
        [640, -576, -416],
        [-640, -544, -416],
        [640, -544, -416],
        [-640, -512, -416],
        [640, -512, -416],
        [-640, -480, -416],
        [640, -480, -416],
        [-640, -448, -416],
        [640, -448, -416],
        [-640, -416, -416],
        [640, -416, -416],
        [-640, -384, -416],
        [640, -384, -416],
        [-640, -352, -416],
        [640, -352, -416],
        [-640, -320, -416],
        [640, -320, -416],
        [-640, -288, -416],
        [640, -288, -416],
        [-640, -256, -416],
        [640, -256, -416],
        [-640, -224, -416],
        [640, -224, -416],
        [-640, -192, -416],
        [640, -192, -416],
        [-640, -160, -416],
        [640, -160, -416],
        [-640, -128, -416],
        [640, -128, -416],
        [-640, -96, -416],
        [640, -96, -416],
        [-640, -64, -416],
        [640, -64, -416],
        [-640, -32, -416],
        [640, -32, -416],
        [-640, 0, -416],
        [640, 0, -416],
        [-640, 32, -416],
        [640, 32, -416],
        [-640, 64, -416],
        [640, 64, -416],
        [-640, 96, -416],
        [640, 96, -416],
        [-640, 128, -416],
        [640, 128, -416],
        [-640, 160, -416],
        [640, 160, -416],
        [-640, 192, -416],
        [640, 192, -416],
        [-640, 224, -416],
        [640, 224, -416],
        [-640, 256, -416],
        [640, 256, -416],
        [-640, 288, -416],
        [640, 288, -416],
        [-640, 320, -416],
        [640, 320, -416],
        [-640, 352, -416],
        [640, 352, -416],
        [-640, 384, -416],
        [640, 384, -416],
        [-640, 416, -416],
        [640, 416, -416],
        [-640, 448, -416],
        [640, 448, -416],
        [-640, 480, -416],
        [640, 480, -416],
        [-640, 512, -416],
        [640, 512, -416],
        [-640, 544, -416],
        [640, 544, -416],
        [-640, 576, -416],
        [640, 576, -416],
        [-640, 608, -416],
        [640, 608, -416],
        [-640, -608, -384],
        [640, -608, -384],
        [-640, -576, -384],
        [640, -576, -384],
        [-640, -544, -384],
        [640, -544, -384],
        [-640, -512, -384],
        [640, -512, -384],
        [-640, -480, -384],
        [640, -480, -384],
        [-640, -448, -384],
        [640, -448, -384],
        [-640, -416, -384],
        [640, -416, -384],
        [-640, -384, -384],
        [640, -384, -384],
        [-640, -352, -384],
        [640, -352, -384],
        [-640, -320, -384],
        [640, -320, -384],
        [-640, -288, -384],
        [640, -288, -384],
        [-640, -256, -384],
        [640, -256, -384],
        [-640, -224, -384],
        [640, -224, -384],
        [-640, -192, -384],
        [640, -192, -384],
        [-640, -160, -384],
        [640, -160, -384],
        [-640, -128, -384],
        [640, -128, -384],
        [-640, -96, -384],
        [640, -96, -384],
        [-640, -64, -384],
        [640, -64, -384],
        [-640, -32, -384],
        [640, -32, -384],
        [-640, 0, -384],
        [640, 0, -384],
        [-640, 32, -384],
        [640, 32, -384],
        [-640, 64, -384],
        [640, 64, -384],
        [-640, 96, -384],
        [640, 96, -384],
        [-640, 128, -384],
        [640, 128, -384],
        [-640, 160, -384],
        [640, 160, -384],
        [-640, 192, -384],
        [640, 192, -384],
        [-640, 224, -384],
        [640, 224, -384],
        [-640, 256, -384],
        [640, 256, -384],
        [-640, 288, -384],
        [640, 288, -384],
        [-640, 320, -384],
        [640, 320, -384],
        [-640, 352, -384],
        [640, 352, -384],
        [-640, 384, -384],
        [640, 384, -384],
        [-640, 416, -384],
        [640, 416, -384],
        [-640, 448, -384],
        [640, 448, -384],
        [-640, 480, -384],
        [640, 480, -384],
        [-640, 512, -384],
        [640, 512, -384],
        [-640, 544, -384],
        [640, 544, -384],
        [-640, 576, -384],
        [640, 576, -384],
        [-640, 608, -384],
        [640, 608, -384],
        [-640, -608, -352],
        [640, -608, -352],
        [-640, -576, -352],
        [640, -576, -352],
        [-640, -544, -352],
        [640, -544, -352],
        [-640, -512, -352],
        [640, -512, -352],
        [-640, -480, -352],
        [640, -480, -352],
        [-640, -448, -352],
        [640, -448, -352],
        [-640, -416, -352],
        [640, -416, -352],
        [-640, -384, -352],
        [640, -384, -352],
        [-640, -352, -352],
        [640, -352, -352],
        [-640, -320, -352],
        [640, -320, -352],
        [-640, -288, -352],
        [640, -288, -352],
        [-640, -256, -352],
        [640, -256, -352],
        [-640, -224, -352],
        [640, -224, -352],
        [-640, -192, -352],
        [640, -192, -352],
        [-640, -160, -352],
        [640, -160, -352],
        [-640, -128, -352],
        [640, -128, -352],
        [-640, -96, -352],
        [640, -96, -352],
        [-640, -64, -352],
        [640, -64, -352],
        [-640, -32, -352],
        [640, -32, -352],
        [-640, 0, -352],
        [640, 0, -352],
        [-640, 32, -352],
        [640, 32, -352],
        [-640, 64, -352],
        [640, 64, -352],
        [-640, 96, -352],
        [640, 96, -352],
        [-640, 128, -352],
        [640, 128, -352],
        [-640, 160, -352],
        [640, 160, -352],
        [-640, 192, -352],
        [640, 192, -352],
        [-640, 224, -352],
        [640, 224, -352],
        [-640, 256, -352],
        [640, 256, -352],
        [-640, 288, -352],
        [640, 288, -352],
        [-640, 320, -352],
        [640, 320, -352],
        [-640, 352, -352],
        [640, 352, -352],
        [-640, 384, -352],
        [640, 384, -352],
        [-640, 416, -352],
        [640, 416, -352],
        [-640, 448, -352],
        [640, 448, -352],
        [-640, 480, -352],
        [640, 480, -352],
        [-640, 512, -352],
        [640, 512, -352],
        [-640, 544, -352],
        [640, 544, -352],
        [-640, 576, -352],
        [640, 576, -352],
        [-640, 608, -352],
        [640, 608, -352],
        [-640, -608, -320],
        [640, -608, -320],
        [-640, -576, -320],
        [640, -576, -320],
        [-640, -544, -320],
        [640, -544, -320],
        [-640, -512, -320],
        [640, -512, -320],
        [-640, -480, -320],
        [640, -480, -320],
        [-640, -448, -320],
        [640, -448, -320],
        [-640, -416, -320],
        [640, -416, -320],
        [-640, -384, -320],
        [640, -384, -320],
        [-640, -352, -320],
        [640, -352, -320],
        [-640, -320, -320],
        [640, -320, -320],
        [-640, -288, -320],
        [640, -288, -320],
        [-640, -256, -320],
        [640, -256, -320],
        [-640, -224, -320],
        [640, -224, -320],
        [-640, -192, -320],
        [640, -192, -320],
        [-640, -160, -320],
        [640, -160, -320],
        [-640, -128, -320],
        [640, -128, -320],
        [-640, -96, -320],
        [640, -96, -320],
        [-640, -64, -320],
        [640, -64, -320],
        [-640, -32, -320],
        [640, -32, -320],
        [-640, 0, -320],
        [640, 0, -320],
        [-640, 32, -320],
        [640, 32, -320],
        [-640, 64, -320],
        [640, 64, -320],
        [-640, 96, -320],
        [640, 96, -320],
        [-640, 128, -320],
        [640, 128, -320],
        [-640, 160, -320],
        [640, 160, -320],
        [-640, 192, -320],
        [640, 192, -320],
        [-640, 224, -320],
        [640, 224, -320],
        [-640, 256, -320],
        [640, 256, -320],
        [-640, 288, -320],
        [640, 288, -320],
        [-640, 320, -320],
        [640, 320, -320],
        [-640, 352, -320],
        [640, 352, -320],
        [-640, 384, -320],
        [640, 384, -320],
        [-640, 416, -320],
        [640, 416, -320],
        [-640, 448, -320],
        [640, 448, -320],
        [-640, 480, -320],
        [640, 480, -320],
        [-640, 512, -320],
        [640, 512, -320],
        [-640, 544, -320],
        [640, 544, -320],
        [-640, 576, -320],
        [640, 576, -320],
        [-640, 608, -320],
        [640, 608, -320],
        [-640, -608, -288],
        [640, -608, -288],
        [-640, -576, -288],
        [640, -576, -288],
        [-640, -544, -288],
        [640, -544, -288],
        [-640, -512, -288],
        [640, -512, -288],
        [-640, -480, -288],
        [640, -480, -288],
        [-640, -448, -288],
        [640, -448, -288],
        [-640, -416, -288],
        [640, -416, -288],
        [-640, -384, -288],
        [640, -384, -288],
        [-640, -352, -288],
        [640, -352, -288],
        [-640, -320, -288],
        [640, -320, -288],
        [-640, -288, -288],
        [640, -288, -288],
        [-640, -256, -288],
        [640, -256, -288],
        [-640, -224, -288],
        [640, -224, -288],
        [-640, -192, -288],
        [640, -192, -288],
        [-640, -160, -288],
        [640, -160, -288],
        [-640, -128, -288],
        [640, -128, -288],
        [-640, -96, -288],
        [640, -96, -288],
        [-640, -64, -288],
        [640, -64, -288],
        [-640, -32, -288],
        [640, -32, -288],
        [-640, 0, -288],
        [640, 0, -288],
        [-640, 32, -288],
        [640, 32, -288],
        [-640, 64, -288],
        [640, 64, -288],
        [-640, 96, -288],
        [640, 96, -288],
        [-640, 128, -288],
        [640, 128, -288],
        [-640, 160, -288],
        [640, 160, -288],
        [-640, 192, -288],
        [640, 192, -288],
        [-640, 224, -288],
        [640, 224, -288],
        [-640, 256, -288],
        [640, 256, -288],
        [-640, 288, -288],
        [640, 288, -288],
        [-640, 320, -288],
        [640, 320, -288],
        [-640, 352, -288],
        [640, 352, -288],
        [-640, 384, -288],
        [640, 384, -288],
        [-640, 416, -288],
        [640, 416, -288],
        [-640, 448, -288],
        [640, 448, -288],
        [-640, 480, -288],
        [640, 480, -288],
        [-640, 512, -288],
        [640, 512, -288],
        [-640, 544, -288],
        [640, 544, -288],
        [-640, 576, -288],
        [640, 576, -288],
        [-640, 608, -288],
        [640, 608, -288],
        [-640, -608, -256],
        [640, -608, -256],
        [-640, -576, -256],
        [640, -576, -256],
        [-640, -544, -256],
        [640, -544, -256],
        [-640, -512, -256],
        [640, -512, -256],
        [-640, -480, -256],
        [640, -480, -256],
        [-640, -448, -256],
        [640, -448, -256],
        [-640, -416, -256],
        [640, -416, -256],
        [-640, -384, -256],
        [640, -384, -256],
        [-640, -352, -256],
        [640, -352, -256],
        [-640, -320, -256],
        [640, -320, -256],
        [-640, -288, -256],
        [640, -288, -256],
        [-640, -256, -256],
        [640, -256, -256],
        [-640, -224, -256],
        [640, -224, -256],
        [-640, -192, -256],
        [640, -192, -256],
        [-640, -160, -256],
        [640, -160, -256],
        [-640, -128, -256],
        [640, -128, -256],
        [-640, -96, -256],
        [640, -96, -256],
        [-640, -64, -256],
        [640, -64, -256],
        [-640, -32, -256],
        [640, -32, -256],
        [-640, 0, -256],
        [640, 0, -256],
        [-640, 32, -256],
        [640, 32, -256],
        [-640, 64, -256],
        [640, 64, -256],
        [-640, 96, -256],
        [640, 96, -256],
        [-640, 128, -256],
        [640, 128, -256],
        [-640, 160, -256],
        [640, 160, -256],
        [-640, 192, -256],
        [640, 192, -256],
        [-640, 224, -256],
        [640, 224, -256],
        [-640, 256, -256],
        [640, 256, -256],
        [-640, 288, -256],
        [640, 288, -256],
        [-640, 320, -256],
        [640, 320, -256],
        [-640, 352, -256],
        [640, 352, -256],
        [-640, 384, -256],
        [640, 384, -256],
        [-640, 416, -256],
        [640, 416, -256],
        [-640, 448, -256],
        [640, 448, -256],
        [-640, 480, -256],
        [640, 480, -256],
        [-640, 512, -256],
        [640, 512, -256],
        [-640, 544, -256],
        [640, 544, -256],
        [-640, 576, -256],
        [640, 576, -256],
        [-640, 608, -256],
        [640, 608, -256],
        [-640, -608, -224],
        [640, -608, -224],
        [-640, -576, -224],
        [640, -576, -224],
        [-640, -544, -224],
        [640, -544, -224],
        [-640, -512, -224],
        [640, -512, -224],
        [-640, -480, -224],
        [640, -480, -224],
        [-640, -448, -224],
        [640, -448, -224],
        [-640, -416, -224],
        [640, -416, -224],
        [-640, -384, -224],
        [640, -384, -224],
        [-640, -352, -224],
        [640, -352, -224],
        [-640, -320, -224],
        [640, -320, -224],
        [-640, -288, -224],
        [640, -288, -224],
        [-640, -256, -224],
        [640, -256, -224],
        [-640, -224, -224],
        [640, -224, -224],
        [-640, -192, -224],
        [640, -192, -224],
        [-640, -160, -224],
        [640, -160, -224],
        [-640, -128, -224],
        [640, -128, -224],
        [-640, -96, -224],
        [640, -96, -224],
        [-640, -64, -224],
        [640, -64, -224],
        [-640, -32, -224],
        [640, -32, -224],
        [-640, 0, -224],
        [640, 0, -224],
        [-640, 32, -224],
        [640, 32, -224],
        [-640, 64, -224],
        [640, 64, -224],
        [-640, 96, -224],
        [640, 96, -224],
        [-640, 128, -224],
        [640, 128, -224],
        [-640, 160, -224],
        [640, 160, -224],
        [-640, 192, -224],
        [640, 192, -224],
        [-640, 224, -224],
        [640, 224, -224],
        [-640, 256, -224],
        [640, 256, -224],
        [-640, 288, -224],
        [640, 288, -224],
        [-640, 320, -224],
        [640, 320, -224],
        [-640, 352, -224],
        [640, 352, -224],
        [-640, 384, -224],
        [640, 384, -224],
        [-640, 416, -224],
        [640, 416, -224],
        [-640, 448, -224],
        [640, 448, -224],
        [-640, 480, -224],
        [640, 480, -224],
        [-640, 512, -224],
        [640, 512, -224],
        [-640, 544, -224],
        [640, 544, -224],
        [-640, 576, -224],
        [640, 576, -224],
        [-640, 608, -224],
        [640, 608, -224],
        [-640, -608, -192],
        [640, -608, -192],
        [-640, -576, -192],
        [640, -576, -192],
        [-640, -544, -192],
        [640, -544, -192],
        [-640, -512, -192],
        [640, -512, -192],
        [-640, -480, -192],
        [640, -480, -192],
        [-640, -448, -192],
        [640, -448, -192],
        [-640, -416, -192],
        [640, -416, -192],
        [-640, -384, -192],
        [640, -384, -192],
        [-640, -352, -192],
        [640, -352, -192],
        [-640, -320, -192],
        [640, -320, -192],
        [-640, -288, -192],
        [640, -288, -192],
        [-640, -256, -192],
        [640, -256, -192],
        [-640, -224, -192],
        [640, -224, -192],
        [-640, -192, -192],
        [640, -192, -192],
        [-640, -160, -192],
        [640, -160, -192],
        [-640, -128, -192],
        [640, -128, -192],
        [-640, -96, -192],
        [640, -96, -192],
        [-640, -64, -192],
        [640, -64, -192],
        [-640, -32, -192],
        [640, -32, -192],
        [-640, 0, -192],
        [640, 0, -192],
        [-640, 32, -192],
        [640, 32, -192],
        [-640, 64, -192],
        [640, 64, -192],
        [-640, 96, -192],
        [640, 96, -192],
        [-640, 128, -192],
        [640, 128, -192],
        [-640, 160, -192],
        [640, 160, -192],
        [-640, 192, -192],
        [640, 192, -192],
        [-640, 224, -192],
        [640, 224, -192],
        [-640, 256, -192],
        [640, 256, -192],
        [-640, 288, -192],
        [640, 288, -192],
        [-640, 320, -192],
        [640, 320, -192],
        [-640, 352, -192],
        [640, 352, -192],
        [-640, 384, -192],
        [640, 384, -192],
        [-640, 416, -192],
        [640, 416, -192],
        [-640, 448, -192],
        [640, 448, -192],
        [-640, 480, -192],
        [640, 480, -192],
        [-640, 512, -192],
        [640, 512, -192],
        [-640, 544, -192],
        [640, 544, -192],
        [-640, 576, -192],
        [640, 576, -192],
        [-640, 608, -192],
        [640, 608, -192],
        [-640, -608, -160],
        [640, -608, -160],
        [-640, -576, -160],
        [640, -576, -160],
        [-640, -544, -160],
        [640, -544, -160],
        [-640, -512, -160],
        [640, -512, -160],
        [-640, -480, -160],
        [640, -480, -160],
        [-640, -448, -160],
        [640, -448, -160],
        [-640, -416, -160],
        [640, -416, -160],
        [-640, -384, -160],
        [640, -384, -160],
        [-640, -352, -160],
        [640, -352, -160],
        [-640, -320, -160],
        [640, -320, -160],
        [-640, -288, -160],
        [640, -288, -160],
        [-640, -256, -160],
        [640, -256, -160],
        [-640, -224, -160],
        [640, -224, -160],
        [-640, -192, -160],
        [640, -192, -160],
        [-640, -160, -160],
        [640, -160, -160],
        [-640, -128, -160],
        [640, -128, -160],
        [-640, -96, -160],
        [640, -96, -160],
        [-640, -64, -160],
        [640, -64, -160],
        [-640, -32, -160],
        [640, -32, -160],
        [-640, 0, -160],
        [640, 0, -160],
        [-640, 32, -160],
        [640, 32, -160],
        [-640, 64, -160],
        [640, 64, -160],
        [-640, 96, -160],
        [640, 96, -160],
        [-640, 128, -160],
        [640, 128, -160],
        [-640, 160, -160],
        [640, 160, -160],
        [-640, 192, -160],
        [640, 192, -160],
        [-640, 224, -160],
        [640, 224, -160],
        [-640, 256, -160],
        [640, 256, -160],
        [-640, 288, -160],
        [640, 288, -160],
        [-640, 320, -160],
        [640, 320, -160],
        [-640, 352, -160],
        [640, 352, -160],
        [-640, 384, -160],
        [640, 384, -160],
        [-640, 416, -160],
        [640, 416, -160],
        [-640, 448, -160],
        [640, 448, -160],
        [-640, 480, -160],
        [640, 480, -160],
        [-640, 512, -160],
        [640, 512, -160],
        [-640, 544, -160],
        [640, 544, -160],
        [-640, 576, -160],
        [640, 576, -160],
        [-640, 608, -160],
        [640, 608, -160],
        [-640, -608, -128],
        [640, -608, -128],
        [-640, -576, -128],
        [640, -576, -128],
        [-640, -544, -128],
        [640, -544, -128],
        [-640, -512, -128],
        [640, -512, -128],
        [-640, -480, -128],
        [640, -480, -128],
        [-640, -448, -128],
        [640, -448, -128],
        [-640, -416, -128],
        [640, -416, -128],
        [-640, -384, -128],
        [640, -384, -128],
        [-640, -352, -128],
        [640, -352, -128],
        [-640, -320, -128],
        [640, -320, -128],
        [-640, -288, -128],
        [640, -288, -128],
        [-640, -256, -128],
        [640, -256, -128],
        [-640, -224, -128],
        [640, -224, -128],
        [-640, -192, -128],
        [640, -192, -128],
        [-640, -160, -128],
        [640, -160, -128],
        [-640, -128, -128],
        [640, -128, -128],
        [-640, -96, -128],
        [640, -96, -128],
        [-640, -64, -128],
        [640, -64, -128],
        [-640, -32, -128],
        [640, -32, -128],
        [-640, 0, -128],
        [640, 0, -128],
        [-640, 32, -128],
        [640, 32, -128],
        [-640, 64, -128],
        [640, 64, -128],
        [-640, 96, -128],
        [640, 96, -128],
        [-640, 128, -128],
        [640, 128, -128],
        [-640, 160, -128],
        [640, 160, -128],
        [-640, 192, -128],
        [640, 192, -128],
        [-640, 224, -128],
        [640, 224, -128],
        [-640, 256, -128],
        [640, 256, -128],
        [-640, 288, -128],
        [640, 288, -128],
        [-640, 320, -128],
        [640, 320, -128],
        [-640, 352, -128],
        [640, 352, -128],
        [-640, 384, -128],
        [640, 384, -128],
        [-640, 416, -128],
        [640, 416, -128],
        [-640, 448, -128],
        [640, 448, -128],
        [-640, 480, -128],
        [640, 480, -128],
        [-640, 512, -128],
        [640, 512, -128],
        [-640, 544, -128],
        [640, 544, -128],
        [-640, 576, -128],
        [640, 576, -128],
        [-640, 608, -128],
        [640, 608, -128],
        [-640, -608, -96],
        [640, -608, -96],
        [-640, -576, -96],
        [640, -576, -96],
        [-640, -544, -96],
        [640, -544, -96],
        [-640, -512, -96],
        [640, -512, -96],
        [-640, -480, -96],
        [640, -480, -96],
        [-640, -448, -96],
        [640, -448, -96],
        [-640, -416, -96],
        [640, -416, -96],
        [-640, -384, -96],
        [640, -384, -96],
        [-640, -352, -96],
        [640, -352, -96],
        [-640, -320, -96],
        [640, -320, -96],
        [-640, -288, -96],
        [640, -288, -96],
        [-640, -256, -96],
        [640, -256, -96],
        [-640, -224, -96],
        [640, -224, -96],
        [-640, -192, -96],
        [640, -192, -96],
        [-640, -160, -96],
        [640, -160, -96],
        [-640, -128, -96],
        [640, -128, -96],
        [-640, -96, -96],
        [640, -96, -96],
        [-640, -64, -96],
        [640, -64, -96],
        [-640, -32, -96],
        [640, -32, -96],
        [-640, 0, -96],
        [640, 0, -96],
        [-640, 32, -96],
        [640, 32, -96],
        [-640, 64, -96],
        [640, 64, -96],
        [-640, 96, -96],
        [640, 96, -96],
        [-640, 128, -96],
        [640, 128, -96],
        [-640, 160, -96],
        [640, 160, -96],
        [-640, 192, -96],
        [640, 192, -96],
        [-640, 224, -96],
        [640, 224, -96],
        [-640, 256, -96],
        [640, 256, -96],
        [-640, 288, -96],
        [640, 288, -96],
        [-640, 320, -96],
        [640, 320, -96],
        [-640, 352, -96],
        [640, 352, -96],
        [-640, 384, -96],
        [640, 384, -96],
        [-640, 416, -96],
        [640, 416, -96],
        [-640, 448, -96],
        [640, 448, -96],
        [-640, 480, -96],
        [640, 480, -96],
        [-640, 512, -96],
        [640, 512, -96],
        [-640, 544, -96],
        [640, 544, -96],
        [-640, 576, -96],
        [640, 576, -96],
        [-640, 608, -96],
        [640, 608, -96],
        [-640, -608, -64],
        [640, -608, -64],
        [-640, -576, -64],
        [640, -576, -64],
        [-640, -544, -64],
        [640, -544, -64],
        [-640, -512, -64],
        [640, -512, -64],
        [-640, -480, -64],
        [640, -480, -64],
        [-640, -448, -64],
        [640, -448, -64],
        [-640, -416, -64],
        [640, -416, -64],
        [-640, -384, -64],
        [640, -384, -64],
        [-640, -352, -64],
        [640, -352, -64],
        [-640, -320, -64],
        [640, -320, -64],
        [-640, -288, -64],
        [640, -288, -64],
        [-640, -256, -64],
        [640, -256, -64],
        [-640, -224, -64],
        [640, -224, -64],
        [-640, -192, -64],
        [640, -192, -64],
        [-640, -160, -64],
        [640, -160, -64],
        [-640, -128, -64],
        [640, -128, -64],
        [-640, -96, -64],
        [640, -96, -64],
        [-640, -64, -64],
        [640, -64, -64],
        [-640, -32, -64],
        [640, -32, -64],
        [-640, 0, -64],
        [640, 0, -64],
        [-640, 32, -64],
        [640, 32, -64],
        [-640, 64, -64],
        [640, 64, -64],
        [-640, 96, -64],
        [640, 96, -64],
        [-640, 128, -64],
        [640, 128, -64],
        [-640, 160, -64],
        [640, 160, -64],
        [-640, 192, -64],
        [640, 192, -64],
        [-640, 224, -64],
        [640, 224, -64],
        [-640, 256, -64],
        [640, 256, -64],
        [-640, 288, -64],
        [640, 288, -64],
        [-640, 320, -64],
        [640, 320, -64],
        [-640, 352, -64],
        [640, 352, -64],
        [-640, 384, -64],
        [640, 384, -64],
        [-640, 416, -64],
        [640, 416, -64],
        [-640, 448, -64],
        [640, 448, -64],
        [-640, 480, -64],
        [640, 480, -64],
        [-640, 512, -64],
        [640, 512, -64],
        [-640, 544, -64],
        [640, 544, -64],
        [-640, 576, -64],
        [640, 576, -64],
        [-640, 608, -64],
        [640, 608, -64],
        [-640, -608, -32],
        [640, -608, -32],
        [-640, -576, -32],
        [640, -576, -32],
        [-640, -544, -32],
        [640, -544, -32],
        [-640, -512, -32],
        [640, -512, -32],
        [-640, -480, -32],
        [640, -480, -32],
        [-640, -448, -32],
        [640, -448, -32],
        [-640, -416, -32],
        [640, -416, -32],
        [-640, -384, -32],
        [640, -384, -32],
        [-640, -352, -32],
        [640, -352, -32],
        [-640, -320, -32],
        [640, -320, -32],
        [-640, -288, -32],
        [640, -288, -32],
        [-640, -256, -32],
        [640, -256, -32],
        [-640, -224, -32],
        [640, -224, -32],
        [-640, -192, -32],
        [640, -192, -32],
        [-640, -160, -32],
        [640, -160, -32],
        [-640, -128, -32],
        [640, -128, -32],
        [-640, -96, -32],
        [640, -96, -32],
        [-640, -64, -32],
        [640, -64, -32],
        [-640, -32, -32],
        [640, -32, -32],
        [-640, 0, -32],
        [640, 0, -32],
        [-640, 32, -32],
        [640, 32, -32],
        [-640, 64, -32],
        [640, 64, -32],
        [-640, 96, -32],
        [640, 96, -32],
        [-640, 128, -32],
        [640, 128, -32],
        [-640, 160, -32],
        [640, 160, -32],
        [-640, 192, -32],
        [640, 192, -32],
        [-640, 224, -32],
        [640, 224, -32],
        [-640, 256, -32],
        [640, 256, -32],
        [-640, 288, -32],
        [640, 288, -32],
        [-640, 320, -32],
        [640, 320, -32],
        [-640, 352, -32],
        [640, 352, -32],
        [-640, 384, -32],
        [640, 384, -32],
        [-640, 416, -32],
        [640, 416, -32],
        [-640, 448, -32],
        [640, 448, -32],
        [-640, 480, -32],
        [640, 480, -32],
        [-640, 512, -32],
        [640, 512, -32],
        [-640, 544, -32],
        [640, 544, -32],
        [-640, 576, -32],
        [640, 576, -32],
        [-640, 608, -32],
        [640, 608, -32],
        [-640, -608, 0],
        [640, -608, 0],
        [-640, -576, 0],
        [640, -576, 0],
        [-640, -544, 0],
        [640, -544, 0],
        [-640, -512, 0],
        [640, -512, 0],
        [-640, -480, 0],
        [640, -480, 0],
        [-640, -448, 0],
        [640, -448, 0],
        [-640, -416, 0],
        [640, -416, 0],
        [-640, -384, 0],
        [640, -384, 0],
        [-640, -352, 0],
        [640, -352, 0],
        [-640, -320, 0],
        [640, -320, 0],
        [-640, -288, 0],
        [640, -288, 0],
        [-640, -256, 0],
        [640, -256, 0],
        [-640, -224, 0],
        [640, -224, 0],
        [-640, -192, 0],
        [640, -192, 0],
        [-640, -160, 0],
        [640, -160, 0],
        [-640, -128, 0],
        [640, -128, 0],
        [-640, -96, 0],
        [640, -96, 0],
        [-640, -64, 0],
        [640, -64, 0],
        [-640, -32, 0],
        [640, -32, 0],
        [-640, 0, 0],
        [640, 0, 0],
        [-640, 32, 0],
        [640, 32, 0],
        [-640, 64, 0],
        [640, 64, 0],
        [-640, 96, 0],
        [640, 96, 0],
        [-640, 128, 0],
        [640, 128, 0],
        [-640, 160, 0],
        [640, 160, 0],
        [-640, 192, 0],
        [640, 192, 0],
        [-640, 224, 0],
        [640, 224, 0],
        [-640, 256, 0],
        [640, 256, 0],
        [-640, 288, 0],
        [640, 288, 0],
        [-640, 320, 0],
        [640, 320, 0],
        [-640, 352, 0],
        [640, 352, 0],
        [-640, 384, 0],
        [640, 384, 0],
        [-640, 416, 0],
        [640, 416, 0],
        [-640, 448, 0],
        [640, 448, 0],
        [-640, 480, 0],
        [640, 480, 0],
        [-640, 512, 0],
        [640, 512, 0],
        [-640, 544, 0],
        [640, 544, 0],
        [-640, 576, 0],
        [640, 576, 0],
        [-640, 608, 0],
        [640, 608, 0],
        [-640, -608, 32],
        [640, -608, 32],
        [-640, -576, 32],
        [640, -576, 32],
        [-640, -544, 32],
        [640, -544, 32],
        [-640, -512, 32],
        [640, -512, 32],
        [-640, -480, 32],
        [640, -480, 32],
        [-640, -448, 32],
        [640, -448, 32],
        [-640, -416, 32],
        [640, -416, 32],
        [-640, -384, 32],
        [640, -384, 32],
        [-640, -352, 32],
        [640, -352, 32],
        [-640, -320, 32],
        [640, -320, 32],
        [-640, -288, 32],
        [640, -288, 32],
        [-640, -256, 32],
        [640, -256, 32],
        [-640, -224, 32],
        [640, -224, 32],
        [-640, -192, 32],
        [640, -192, 32],
        [-640, -160, 32],
        [640, -160, 32],
        [-640, -128, 32],
        [640, -128, 32],
        [-640, -96, 32],
        [640, -96, 32],
        [-640, -64, 32],
        [640, -64, 32],
        [-640, -32, 32],
        [640, -32, 32],
        [-640, 0, 32],
        [640, 0, 32],
        [-640, 32, 32],
        [640, 32, 32],
        [-640, 64, 32],
        [640, 64, 32],
        [-640, 96, 32],
        [640, 96, 32],
        [-640, 128, 32],
        [640, 128, 32],
        [-640, 160, 32],
        [640, 160, 32],
        [-640, 192, 32],
        [640, 192, 32],
        [-640, 224, 32],
        [640, 224, 32],
        [-640, 256, 32],
        [640, 256, 32],
        [-640, 288, 32],
        [640, 288, 32],
        [-640, 320, 32],
        [640, 320, 32],
        [-640, 352, 32],
        [640, 352, 32],
        [-640, 384, 32],
        [640, 384, 32],
        [-640, 416, 32],
        [640, 416, 32],
        [-640, 448, 32],
        [640, 448, 32],
        [-640, 480, 32],
        [640, 480, 32],
        [-640, 512, 32],
        [640, 512, 32],
        [-640, 544, 32],
        [640, 544, 32],
        [-640, 576, 32],
        [640, 576, 32],
        [-640, 608, 32],
        [640, 608, 32],
        [-640, -608, 64],
        [640, -608, 64],
        [-640, -576, 64],
        [640, -576, 64],
        [-640, -544, 64],
        [640, -544, 64],
        [-640, -512, 64],
        [640, -512, 64],
        [-640, -480, 64],
        [640, -480, 64],
        [-640, -448, 64],
        [640, -448, 64],
        [-640, -416, 64],
        [640, -416, 64],
        [-640, -384, 64],
        [640, -384, 64],
        [-640, -352, 64],
        [640, -352, 64],
        [-640, -320, 64],
        [640, -320, 64],
        [-640, -288, 64],
        [640, -288, 64],
        [-640, -256, 64],
        [640, -256, 64],
        [-640, -224, 64],
        [640, -224, 64],
        [-640, -192, 64],
        [640, -192, 64],
        [-640, -160, 64],
        [640, -160, 64],
        [-640, -128, 64],
        [640, -128, 64],
        [-640, -96, 64],
        [640, -96, 64],
        [-640, -64, 64],
        [640, -64, 64],
        [-640, -32, 64],
        [640, -32, 64],
        [-640, 0, 64],
        [640, 0, 64],
        [-640, 32, 64],
        [640, 32, 64],
        [-640, 64, 64],
        [640, 64, 64],
        [-640, 96, 64],
        [640, 96, 64],
        [-640, 128, 64],
        [640, 128, 64],
        [-640, 160, 64],
        [640, 160, 64],
        [-640, 192, 64],
        [640, 192, 64],
        [-640, 224, 64],
        [640, 224, 64],
        [-640, 256, 64],
        [640, 256, 64],
        [-640, 288, 64],
        [640, 288, 64],
        [-640, 320, 64],
        [640, 320, 64],
        [-640, 352, 64],
        [640, 352, 64],
        [-640, 384, 64],
        [640, 384, 64],
        [-640, 416, 64],
        [640, 416, 64],
        [-640, 448, 64],
        [640, 448, 64],
        [-640, 480, 64],
        [640, 480, 64],
        [-640, 512, 64],
        [640, 512, 64],
        [-640, 544, 64],
        [640, 544, 64],
        [-640, 576, 64],
        [640, 576, 64],
        [-640, 608, 64],
        [640, 608, 64],
        [-640, -608, 96],
        [640, -608, 96],
        [-640, -576, 96],
        [640, -576, 96],
        [-640, -544, 96],
        [640, -544, 96],
        [-640, -512, 96],
        [640, -512, 96],
        [-640, -480, 96],
        [640, -480, 96],
        [-640, -448, 96],
        [640, -448, 96],
        [-640, -416, 96],
        [640, -416, 96],
        [-640, -384, 96],
        [640, -384, 96],
        [-640, -352, 96],
        [640, -352, 96],
        [-640, -320, 96],
        [640, -320, 96],
        [-640, -288, 96],
        [640, -288, 96],
        [-640, -256, 96],
        [640, -256, 96],
        [-640, -224, 96],
        [640, -224, 96],
        [-640, -192, 96],
        [640, -192, 96],
        [-640, -160, 96],
        [640, -160, 96],
        [-640, -128, 96],
        [640, -128, 96],
        [-640, -96, 96],
        [640, -96, 96],
        [-640, -64, 96],
        [640, -64, 96],
        [-640, -32, 96],
        [640, -32, 96],
        [-640, 0, 96],
        [640, 0, 96],
        [-640, 32, 96],
        [640, 32, 96],
        [-640, 64, 96],
        [640, 64, 96],
        [-640, 96, 96],
        [640, 96, 96],
        [-640, 128, 96],
        [640, 128, 96],
        [-640, 160, 96],
        [640, 160, 96],
        [-640, 192, 96],
        [640, 192, 96],
        [-640, 224, 96],
        [640, 224, 96],
        [-640, 256, 96],
        [640, 256, 96],
        [-640, 288, 96],
        [640, 288, 96],
        [-640, 320, 96],
        [640, 320, 96],
        [-640, 352, 96],
        [640, 352, 96],
        [-640, 384, 96],
        [640, 384, 96],
        [-640, 416, 96],
        [640, 416, 96],
        [-640, 448, 96],
        [640, 448, 96],
        [-640, 480, 96],
        [640, 480, 96],
        [-640, 512, 96],
        [640, 512, 96],
        [-640, 544, 96],
        [640, 544, 96],
        [-640, 576, 96],
        [640, 576, 96],
        [-640, 608, 96],
        [640, 608, 96],
        [-640, -608, 128],
        [640, -608, 128],
        [-640, -576, 128],
        [640, -576, 128],
        [-640, -544, 128],
        [640, -544, 128],
        [-640, -512, 128],
        [640, -512, 128],
        [-640, -480, 128],
        [640, -480, 128],
        [-640, -448, 128],
        [640, -448, 128],
        [-640, -416, 128],
        [640, -416, 128],
        [-640, -384, 128],
        [640, -384, 128],
        [-640, -352, 128],
        [640, -352, 128],
        [-640, -320, 128],
        [640, -320, 128],
        [-640, -288, 128],
        [640, -288, 128],
        [-640, -256, 128],
        [640, -256, 128],
        [-640, -224, 128],
        [640, -224, 128],
        [-640, -192, 128],
        [640, -192, 128],
        [-640, -160, 128],
        [640, -160, 128],
        [-640, -128, 128],
        [640, -128, 128],
        [-640, -96, 128],
        [640, -96, 128],
        [-640, -64, 128],
        [640, -64, 128],
        [-640, -32, 128],
        [640, -32, 128],
        [-640, 0, 128],
        [640, 0, 128],
        [-640, 32, 128],
        [640, 32, 128],
        [-640, 64, 128],
        [640, 64, 128],
        [-640, 96, 128],
        [640, 96, 128],
        [-640, 128, 128],
        [640, 128, 128],
        [-640, 160, 128],
        [640, 160, 128],
        [-640, 192, 128],
        [640, 192, 128],
        [-640, 224, 128],
        [640, 224, 128],
        [-640, 256, 128],
        [640, 256, 128],
        [-640, 288, 128],
        [640, 288, 128],
        [-640, 320, 128],
        [640, 320, 128],
        [-640, 352, 128],
        [640, 352, 128],
        [-640, 384, 128],
        [640, 384, 128],
        [-640, 416, 128],
        [640, 416, 128],
        [-640, 448, 128],
        [640, 448, 128],
        [-640, 480, 128],
        [640, 480, 128],
        [-640, 512, 128],
        [640, 512, 128],
        [-640, 544, 128],
        [640, 544, 128],
        [-640, 576, 128],
        [640, 576, 128],
        [-640, 608, 128],
        [640, 608, 128],
        [-640, -608, 160],
        [640, -608, 160],
        [-640, -576, 160],
        [640, -576, 160],
        [-640, -544, 160],
        [640, -544, 160],
        [-640, -512, 160],
        [640, -512, 160],
        [-640, -480, 160],
        [640, -480, 160],
        [-640, -448, 160],
        [640, -448, 160],
        [-640, -416, 160],
        [640, -416, 160],
        [-640, -384, 160],
        [640, -384, 160],
        [-640, -352, 160],
        [640, -352, 160],
        [-640, -320, 160],
        [640, -320, 160],
        [-640, -288, 160],
        [640, -288, 160],
        [-640, -256, 160],
        [640, -256, 160],
        [-640, -224, 160],
        [640, -224, 160],
        [-640, -192, 160],
        [640, -192, 160],
        [-640, -160, 160],
        [640, -160, 160],
        [-640, -128, 160],
        [640, -128, 160],
        [-640, -96, 160],
        [640, -96, 160],
        [-640, -64, 160],
        [640, -64, 160],
        [-640, -32, 160],
        [640, -32, 160],
        [-640, 0, 160],
        [640, 0, 160],
        [-640, 32, 160],
        [640, 32, 160],
        [-640, 64, 160],
        [640, 64, 160],
        [-640, 96, 160],
        [640, 96, 160],
        [-640, 128, 160],
        [640, 128, 160],
        [-640, 160, 160],
        [640, 160, 160],
        [-640, 192, 160],
        [640, 192, 160],
        [-640, 224, 160],
        [640, 224, 160],
        [-640, 256, 160],
        [640, 256, 160],
        [-640, 288, 160],
        [640, 288, 160],
        [-640, 320, 160],
        [640, 320, 160],
        [-640, 352, 160],
        [640, 352, 160],
        [-640, 384, 160],
        [640, 384, 160],
        [-640, 416, 160],
        [640, 416, 160],
        [-640, 448, 160],
        [640, 448, 160],
        [-640, 480, 160],
        [640, 480, 160],
        [-640, 512, 160],
        [640, 512, 160],
        [-640, 544, 160],
        [640, 544, 160],
        [-640, 576, 160],
        [640, 576, 160],
        [-640, 608, 160],
        [640, 608, 160],
        [-640, -608, 192],
        [640, -608, 192],
        [-640, -576, 192],
        [640, -576, 192],
        [-640, -544, 192],
        [640, -544, 192],
        [-640, -512, 192],
        [640, -512, 192],
        [-640, -480, 192],
        [640, -480, 192],
        [-640, -448, 192],
        [640, -448, 192],
        [-640, -416, 192],
        [640, -416, 192],
        [-640, -384, 192],
        [640, -384, 192],
        [-640, -352, 192],
        [640, -352, 192],
        [-640, -320, 192],
        [640, -320, 192],
        [-640, -288, 192],
        [640, -288, 192],
        [-640, -256, 192],
        [640, -256, 192],
        [-640, -224, 192],
        [640, -224, 192],
        [-640, -192, 192],
        [640, -192, 192],
        [-640, -160, 192],
        [640, -160, 192],
        [-640, -128, 192],
        [640, -128, 192],
        [-640, -96, 192],
        [640, -96, 192],
        [-640, -64, 192],
        [640, -64, 192],
        [-640, -32, 192],
        [640, -32, 192],
        [-640, 0, 192],
        [640, 0, 192],
        [-640, 32, 192],
        [640, 32, 192],
        [-640, 64, 192],
        [640, 64, 192],
        [-640, 96, 192],
        [640, 96, 192],
        [-640, 128, 192],
        [640, 128, 192],
        [-640, 160, 192],
        [640, 160, 192],
        [-640, 192, 192],
        [640, 192, 192],
        [-640, 224, 192],
        [640, 224, 192],
        [-640, 256, 192],
        [640, 256, 192],
        [-640, 288, 192],
        [640, 288, 192],
        [-640, 320, 192],
        [640, 320, 192],
        [-640, 352, 192],
        [640, 352, 192],
        [-640, 384, 192],
        [640, 384, 192],
        [-640, 416, 192],
        [640, 416, 192],
        [-640, 448, 192],
        [640, 448, 192],
        [-640, 480, 192],
        [640, 480, 192],
        [-640, 512, 192],
        [640, 512, 192],
        [-640, 544, 192],
        [640, 544, 192],
        [-640, 576, 192],
        [640, 576, 192],
        [-640, 608, 192],
        [640, 608, 192],
        [-640, -608, 224],
        [640, -608, 224],
        [-640, -576, 224],
        [640, -576, 224],
        [-640, -544, 224],
        [640, -544, 224],
        [-640, -512, 224],
        [640, -512, 224],
        [-640, -480, 224],
        [640, -480, 224],
        [-640, -448, 224],
        [640, -448, 224],
        [-640, -416, 224],
        [640, -416, 224],
        [-640, -384, 224],
        [640, -384, 224],
        [-640, -352, 224],
        [640, -352, 224],
        [-640, -320, 224],
        [640, -320, 224],
        [-640, -288, 224],
        [640, -288, 224],
        [-640, -256, 224],
        [640, -256, 224],
        [-640, -224, 224],
        [640, -224, 224],
        [-640, -192, 224],
        [640, -192, 224],
        [-640, -160, 224],
        [640, -160, 224],
        [-640, -128, 224],
        [640, -128, 224],
        [-640, -96, 224],
        [640, -96, 224],
        [-640, -64, 224],
        [640, -64, 224],
        [-640, -32, 224],
        [640, -32, 224],
        [-640, 0, 224],
        [640, 0, 224],
        [-640, 32, 224],
        [640, 32, 224],
        [-640, 64, 224],
        [640, 64, 224],
        [-640, 96, 224],
        [640, 96, 224],
        [-640, 128, 224],
        [640, 128, 224],
        [-640, 160, 224],
        [640, 160, 224],
        [-640, 192, 224],
        [640, 192, 224],
        [-640, 224, 224],
        [640, 224, 224],
        [-640, 256, 224],
        [640, 256, 224],
        [-640, 288, 224],
        [640, 288, 224],
        [-640, 320, 224],
        [640, 320, 224],
        [-640, 352, 224],
        [640, 352, 224],
        [-640, 384, 224],
        [640, 384, 224],
        [-640, 416, 224],
        [640, 416, 224],
        [-640, 448, 224],
        [640, 448, 224],
        [-640, 480, 224],
        [640, 480, 224],
        [-640, 512, 224],
        [640, 512, 224],
        [-640, 544, 224],
        [640, 544, 224],
        [-640, 576, 224],
        [640, 576, 224],
        [-640, 608, 224],
        [640, 608, 224],
        [-640, -608, 256],
        [640, -608, 256],
        [-640, -576, 256],
        [640, -576, 256],
        [-640, -544, 256],
        [640, -544, 256],
        [-640, -512, 256],
        [640, -512, 256],
        [-640, -480, 256],
        [640, -480, 256],
        [-640, -448, 256],
        [640, -448, 256],
        [-640, -416, 256],
        [640, -416, 256],
        [-640, -384, 256],
        [640, -384, 256],
        [-640, -352, 256],
        [640, -352, 256],
        [-640, -320, 256],
        [640, -320, 256],
        [-640, -288, 256],
        [640, -288, 256],
        [-640, -256, 256],
        [640, -256, 256],
        [-640, -224, 256],
        [640, -224, 256],
        [-640, -192, 256],
        [640, -192, 256],
        [-640, -160, 256],
        [640, -160, 256],
        [-640, -128, 256],
        [640, -128, 256],
        [-640, -96, 256],
        [640, -96, 256],
        [-640, -64, 256],
        [640, -64, 256],
        [-640, -32, 256],
        [640, -32, 256],
        [-640, 0, 256],
        [640, 0, 256],
        [-640, 32, 256],
        [640, 32, 256],
        [-640, 64, 256],
        [640, 64, 256],
        [-640, 96, 256],
        [640, 96, 256],
        [-640, 128, 256],
        [640, 128, 256],
        [-640, 160, 256],
        [640, 160, 256],
        [-640, 192, 256],
        [640, 192, 256],
        [-640, 224, 256],
        [640, 224, 256],
        [-640, 256, 256],
        [640, 256, 256],
        [-640, 288, 256],
        [640, 288, 256],
        [-640, 320, 256],
        [640, 320, 256],
        [-640, 352, 256],
        [640, 352, 256],
        [-640, 384, 256],
        [640, 384, 256],
        [-640, 416, 256],
        [640, 416, 256],
        [-640, 448, 256],
        [640, 448, 256],
        [-640, 480, 256],
        [640, 480, 256],
        [-640, 512, 256],
        [640, 512, 256],
        [-640, 544, 256],
        [640, 544, 256],
        [-640, 576, 256],
        [640, 576, 256],
        [-640, 608, 256],
        [640, 608, 256],
        [-640, -608, 288],
        [640, -608, 288],
        [-640, -576, 288],
        [640, -576, 288],
        [-640, -544, 288],
        [640, -544, 288],
        [-640, -512, 288],
        [640, -512, 288],
        [-640, -480, 288],
        [640, -480, 288],
        [-640, -448, 288],
        [640, -448, 288],
        [-640, -416, 288],
        [640, -416, 288],
        [-640, -384, 288],
        [640, -384, 288],
        [-640, -352, 288],
        [640, -352, 288],
        [-640, -320, 288],
        [640, -320, 288],
        [-640, -288, 288],
        [640, -288, 288],
        [-640, -256, 288],
        [640, -256, 288],
        [-640, -224, 288],
        [640, -224, 288],
        [-640, -192, 288],
        [640, -192, 288],
        [-640, -160, 288],
        [640, -160, 288],
        [-640, -128, 288],
        [640, -128, 288],
        [-640, -96, 288],
        [640, -96, 288],
        [-640, -64, 288],
        [640, -64, 288],
        [-640, -32, 288],
        [640, -32, 288],
        [-640, 0, 288],
        [640, 0, 288],
        [-640, 32, 288],
        [640, 32, 288],
        [-640, 64, 288],
        [640, 64, 288],
        [-640, 96, 288],
        [640, 96, 288],
        [-640, 128, 288],
        [640, 128, 288],
        [-640, 160, 288],
        [640, 160, 288],
        [-640, 192, 288],
        [640, 192, 288],
        [-640, 224, 288],
        [640, 224, 288],
        [-640, 256, 288],
        [640, 256, 288],
        [-640, 288, 288],
        [640, 288, 288],
        [-640, 320, 288],
        [640, 320, 288],
        [-640, 352, 288],
        [640, 352, 288],
        [-640, 384, 288],
        [640, 384, 288],
        [-640, 416, 288],
        [640, 416, 288],
        [-640, 448, 288],
        [640, 448, 288],
        [-640, 480, 288],
        [640, 480, 288],
        [-640, 512, 288],
        [640, 512, 288],
        [-640, 544, 288],
        [640, 544, 288],
        [-640, 576, 288],
        [640, 576, 288],
        [-640, 608, 288],
        [640, 608, 288],
        [-640, -608, 320],
        [640, -608, 320],
        [-640, -576, 320],
        [640, -576, 320],
        [-640, -544, 320],
        [640, -544, 320],
        [-640, -512, 320],
        [640, -512, 320],
        [-640, -480, 320],
        [640, -480, 320],
        [-640, -448, 320],
        [640, -448, 320],
        [-640, -416, 320],
        [640, -416, 320],
        [-640, -384, 320],
        [640, -384, 320],
        [-640, -352, 320],
        [640, -352, 320],
        [-640, -320, 320],
        [640, -320, 320],
        [-640, -288, 320],
        [640, -288, 320],
        [-640, -256, 320],
        [640, -256, 320],
        [-640, -224, 320],
        [640, -224, 320],
        [-640, -192, 320],
        [640, -192, 320],
        [-640, -160, 320],
        [640, -160, 320],
        [-640, -128, 320],
        [640, -128, 320],
        [-640, -96, 320],
        [640, -96, 320],
        [-640, -64, 320],
        [640, -64, 320],
        [-640, -32, 320],
        [640, -32, 320],
        [-640, 0, 320],
        [640, 0, 320],
        [-640, 32, 320],
        [640, 32, 320],
        [-640, 64, 320],
        [640, 64, 320],
        [-640, 96, 320],
        [640, 96, 320],
        [-640, 128, 320],
        [640, 128, 320],
        [-640, 160, 320],
        [640, 160, 320],
        [-640, 192, 320],
        [640, 192, 320],
        [-640, 224, 320],
        [640, 224, 320],
        [-640, 256, 320],
        [640, 256, 320],
        [-640, 288, 320],
        [640, 288, 320],
        [-640, 320, 320],
        [640, 320, 320],
        [-640, 352, 320],
        [640, 352, 320],
        [-640, 384, 320],
        [640, 384, 320],
        [-640, 416, 320],
        [640, 416, 320],
        [-640, 448, 320],
        [640, 448, 320],
        [-640, 480, 320],
        [640, 480, 320],
        [-640, 512, 320],
        [640, 512, 320],
        [-640, 544, 320],
        [640, 544, 320],
        [-640, 576, 320],
        [640, 576, 320],
        [-640, 608, 320],
        [640, 608, 320],
        [-640, -608, 352],
        [640, -608, 352],
        [-640, -576, 352],
        [640, -576, 352],
        [-640, -544, 352],
        [640, -544, 352],
        [-640, -512, 352],
        [640, -512, 352],
        [-640, -480, 352],
        [640, -480, 352],
        [-640, -448, 352],
        [640, -448, 352],
        [-640, -416, 352],
        [640, -416, 352],
        [-640, -384, 352],
        [640, -384, 352],
        [-640, -352, 352],
        [640, -352, 352],
        [-640, -320, 352],
        [640, -320, 352],
        [-640, -288, 352],
        [640, -288, 352],
        [-640, -256, 352],
        [640, -256, 352],
        [-640, -224, 352],
        [640, -224, 352],
        [-640, -192, 352],
        [640, -192, 352],
        [-640, -160, 352],
        [640, -160, 352],
        [-640, -128, 352],
        [640, -128, 352],
        [-640, -96, 352],
        [640, -96, 352],
        [-640, -64, 352],
        [640, -64, 352],
        [-640, -32, 352],
        [640, -32, 352],
        [-640, 0, 352],
        [640, 0, 352],
        [-640, 32, 352],
        [640, 32, 352],
        [-640, 64, 352],
        [640, 64, 352],
        [-640, 96, 352],
        [640, 96, 352],
        [-640, 128, 352],
        [640, 128, 352],
        [-640, 160, 352],
        [640, 160, 352],
        [-640, 192, 352],
        [640, 192, 352],
        [-640, 224, 352],
        [640, 224, 352],
        [-640, 256, 352],
        [640, 256, 352],
        [-640, 288, 352],
        [640, 288, 352],
        [-640, 320, 352],
        [640, 320, 352],
        [-640, 352, 352],
        [640, 352, 352],
        [-640, 384, 352],
        [640, 384, 352],
        [-640, 416, 352],
        [640, 416, 352],
        [-640, 448, 352],
        [640, 448, 352],
        [-640, 480, 352],
        [640, 480, 352],
        [-640, 512, 352],
        [640, 512, 352],
        [-640, 544, 352],
        [640, 544, 352],
        [-640, 576, 352],
        [640, 576, 352],
        [-640, 608, 352],
        [640, 608, 352],
        [-640, -608, 384],
        [640, -608, 384],
        [-640, -576, 384],
        [640, -576, 384],
        [-640, -544, 384],
        [640, -544, 384],
        [-640, -512, 384],
        [640, -512, 384],
        [-640, -480, 384],
        [640, -480, 384],
        [-640, -448, 384],
        [640, -448, 384],
        [-640, -416, 384],
        [640, -416, 384],
        [-640, -384, 384],
        [640, -384, 384],
        [-640, -352, 384],
        [640, -352, 384],
        [-640, -320, 384],
        [640, -320, 384],
        [-640, -288, 384],
        [640, -288, 384],
        [-640, -256, 384],
        [640, -256, 384],
        [-640, -224, 384],
        [640, -224, 384],
        [-640, -192, 384],
        [640, -192, 384],
        [-640, -160, 384],
        [640, -160, 384],
        [-640, -128, 384],
        [640, -128, 384],
        [-640, -96, 384],
        [640, -96, 384],
        [-640, -64, 384],
        [640, -64, 384],
        [-640, -32, 384],
        [640, -32, 384],
        [-640, 0, 384],
        [640, 0, 384],
        [-640, 32, 384],
        [640, 32, 384],
        [-640, 64, 384],
        [640, 64, 384],
        [-640, 96, 384],
        [640, 96, 384],
        [-640, 128, 384],
        [640, 128, 384],
        [-640, 160, 384],
        [640, 160, 384],
        [-640, 192, 384],
        [640, 192, 384],
        [-640, 224, 384],
        [640, 224, 384],
        [-640, 256, 384],
        [640, 256, 384],
        [-640, 288, 384],
        [640, 288, 384],
        [-640, 320, 384],
        [640, 320, 384],
        [-640, 352, 384],
        [640, 352, 384],
        [-640, 384, 384],
        [640, 384, 384],
        [-640, 416, 384],
        [640, 416, 384],
        [-640, 448, 384],
        [640, 448, 384],
        [-640, 480, 384],
        [640, 480, 384],
        [-640, 512, 384],
        [640, 512, 384],
        [-640, 544, 384],
        [640, 544, 384],
        [-640, 576, 384],
        [640, 576, 384],
        [-640, 608, 384],
        [640, 608, 384],
        [-640, -608, 416],
        [640, -608, 416],
        [-640, -576, 416],
        [640, -576, 416],
        [-640, -544, 416],
        [640, -544, 416],
        [-640, -512, 416],
        [640, -512, 416],
        [-640, -480, 416],
        [640, -480, 416],
        [-640, -448, 416],
        [640, -448, 416],
        [-640, -416, 416],
        [640, -416, 416],
        [-640, -384, 416],
        [640, -384, 416],
        [-640, -352, 416],
        [640, -352, 416],
        [-640, -320, 416],
        [640, -320, 416],
        [-640, -288, 416],
        [640, -288, 416],
        [-640, -256, 416],
        [640, -256, 416],
        [-640, -224, 416],
        [640, -224, 416],
        [-640, -192, 416],
        [640, -192, 416],
        [-640, -160, 416],
        [640, -160, 416],
        [-640, -128, 416],
        [640, -128, 416],
        [-640, -96, 416],
        [640, -96, 416],
        [-640, -64, 416],
        [640, -64, 416],
        [-640, -32, 416],
        [640, -32, 416],
        [-640, 0, 416],
        [640, 0, 416],
        [-640, 32, 416],
        [640, 32, 416],
        [-640, 64, 416],
        [640, 64, 416],
        [-640, 96, 416],
        [640, 96, 416],
        [-640, 128, 416],
        [640, 128, 416],
        [-640, 160, 416],
        [640, 160, 416],
        [-640, 192, 416],
        [640, 192, 416],
        [-640, 224, 416],
        [640, 224, 416],
        [-640, 256, 416],
        [640, 256, 416],
        [-640, 288, 416],
        [640, 288, 416],
        [-640, 320, 416],
        [640, 320, 416],
        [-640, 352, 416],
        [640, 352, 416],
        [-640, 384, 416],
        [640, 384, 416],
        [-640, 416, 416],
        [640, 416, 416],
        [-640, 448, 416],
        [640, 448, 416],
        [-640, 480, 416],
        [640, 480, 416],
        [-640, 512, 416],
        [640, 512, 416],
        [-640, 544, 416],
        [640, 544, 416],
        [-640, 576, 416],
        [640, 576, 416],
        [-640, 608, 416],
        [640, 608, 416],
        [-640, -608, 448],
        [640, -608, 448],
        [-640, -576, 448],
        [640, -576, 448],
        [-640, -544, 448],
        [640, -544, 448],
        [-640, -512, 448],
        [640, -512, 448],
        [-640, -480, 448],
        [640, -480, 448],
        [-640, -448, 448],
        [640, -448, 448],
        [-640, -416, 448],
        [640, -416, 448],
        [-640, -384, 448],
        [640, -384, 448],
        [-640, -352, 448],
        [640, -352, 448],
        [-640, -320, 448],
        [640, -320, 448],
        [-640, -288, 448],
        [640, -288, 448],
        [-640, -256, 448],
        [640, -256, 448],
        [-640, -224, 448],
        [640, -224, 448],
        [-640, -192, 448],
        [640, -192, 448],
        [-640, -160, 448],
        [640, -160, 448],
        [-640, -128, 448],
        [640, -128, 448],
        [-640, -96, 448],
        [640, -96, 448],
        [-640, -64, 448],
        [640, -64, 448],
        [-640, -32, 448],
        [640, -32, 448],
        [-640, 0, 448],
        [640, 0, 448],
        [-640, 32, 448],
        [640, 32, 448],
        [-640, 64, 448],
        [640, 64, 448],
        [-640, 96, 448],
        [640, 96, 448],
        [-640, 128, 448],
        [640, 128, 448],
        [-640, 160, 448],
        [640, 160, 448],
        [-640, 192, 448],
        [640, 192, 448],
        [-640, 224, 448],
        [640, 224, 448],
        [-640, 256, 448],
        [640, 256, 448],
        [-640, 288, 448],
        [640, 288, 448],
        [-640, 320, 448],
        [640, 320, 448],
        [-640, 352, 448],
        [640, 352, 448],
        [-640, 384, 448],
        [640, 384, 448],
        [-640, 416, 448],
        [640, 416, 448],
        [-640, 448, 448],
        [640, 448, 448],
        [-640, 480, 448],
        [640, 480, 448],
        [-640, 512, 448],
        [640, 512, 448],
        [-640, 544, 448],
        [640, 544, 448],
        [-640, 576, 448],
        [640, 576, 448],
        [-640, 608, 448],
        [640, 608, 448],
        [-640, -608, 480],
        [640, -608, 480],
        [-640, -576, 480],
        [640, -576, 480],
        [-640, -544, 480],
        [640, -544, 480],
        [-640, -512, 480],
        [640, -512, 480],
        [-640, -480, 480],
        [640, -480, 480],
        [-640, -448, 480],
        [640, -448, 480],
        [-640, -416, 480],
        [640, -416, 480],
        [-640, -384, 480],
        [640, -384, 480],
        [-640, -352, 480],
        [640, -352, 480],
        [-640, -320, 480],
        [640, -320, 480],
        [-640, -288, 480],
        [640, -288, 480],
        [-640, -256, 480],
        [640, -256, 480],
        [-640, -224, 480],
        [640, -224, 480],
        [-640, -192, 480],
        [640, -192, 480],
        [-640, -160, 480],
        [640, -160, 480],
        [-640, -128, 480],
        [640, -128, 480],
        [-640, -96, 480],
        [640, -96, 480],
        [-640, -64, 480],
        [640, -64, 480],
        [-640, -32, 480],
        [640, -32, 480],
        [-640, 0, 480],
        [640, 0, 480],
        [-640, 32, 480],
        [640, 32, 480],
        [-640, 64, 480],
        [640, 64, 480],
        [-640, 96, 480],
        [640, 96, 480],
        [-640, 128, 480],
        [640, 128, 480],
        [-640, 160, 480],
        [640, 160, 480],
        [-640, 192, 480],
        [640, 192, 480],
        [-640, 224, 480],
        [640, 224, 480],
        [-640, 256, 480],
        [640, 256, 480],
        [-640, 288, 480],
        [640, 288, 480],
        [-640, 320, 480],
        [640, 320, 480],
        [-640, 352, 480],
        [640, 352, 480],
        [-640, 384, 480],
        [640, 384, 480],
        [-640, 416, 480],
        [640, 416, 480],
        [-640, 448, 480],
        [640, 448, 480],
        [-640, 480, 480],
        [640, 480, 480],
        [-640, 512, 480],
        [640, 512, 480],
        [-640, 544, 480],
        [640, 544, 480],
        [-640, 576, 480],
        [640, 576, 480],
        [-640, 608, 480],
        [640, 608, 480],
        [-640, -608, 512],
        [640, -608, 512],
        [-640, -576, 512],
        [640, -576, 512],
        [-640, -544, 512],
        [640, -544, 512],
        [-640, -512, 512],
        [640, -512, 512],
        [-640, -480, 512],
        [640, -480, 512],
        [-640, -448, 512],
        [640, -448, 512],
        [-640, -416, 512],
        [640, -416, 512],
        [-640, -384, 512],
        [640, -384, 512],
        [-640, -352, 512],
        [640, -352, 512],
        [-640, -320, 512],
        [640, -320, 512],
        [-640, -288, 512],
        [640, -288, 512],
        [-640, -256, 512],
        [640, -256, 512],
        [-640, -224, 512],
        [640, -224, 512],
        [-640, -192, 512],
        [640, -192, 512],
        [-640, -160, 512],
        [640, -160, 512],
        [-640, -128, 512],
        [640, -128, 512],
        [-640, -96, 512],
        [640, -96, 512],
        [-640, -64, 512],
        [640, -64, 512],
        [-640, -32, 512],
        [640, -32, 512],
        [-640, 0, 512],
        [640, 0, 512],
        [-640, 32, 512],
        [640, 32, 512],
        [-640, 64, 512],
        [640, 64, 512],
        [-640, 96, 512],
        [640, 96, 512],
        [-640, 128, 512],
        [640, 128, 512],
        [-640, 160, 512],
        [640, 160, 512],
        [-640, 192, 512],
        [640, 192, 512],
        [-640, 224, 512],
        [640, 224, 512],
        [-640, 256, 512],
        [640, 256, 512],
        [-640, 288, 512],
        [640, 288, 512],
        [-640, 320, 512],
        [640, 320, 512],
        [-640, 352, 512],
        [640, 352, 512],
        [-640, 384, 512],
        [640, 384, 512],
        [-640, 416, 512],
        [640, 416, 512],
        [-640, 448, 512],
        [640, 448, 512],
        [-640, 480, 512],
        [640, 480, 512],
        [-640, 512, 512],
        [640, 512, 512],
        [-640, 544, 512],
        [640, 544, 512],
        [-640, 576, 512],
        [640, 576, 512],
        [-640, 608, 512],
        [640, 608, 512],
        [-640, -608, 544],
        [640, -608, 544],
        [-640, -576, 544],
        [640, -576, 544],
        [-640, -544, 544],
        [640, -544, 544],
        [-640, -512, 544],
        [640, -512, 544],
        [-640, -480, 544],
        [640, -480, 544],
        [-640, -448, 544],
        [640, -448, 544],
        [-640, -416, 544],
        [640, -416, 544],
        [-640, -384, 544],
        [640, -384, 544],
        [-640, -352, 544],
        [640, -352, 544],
        [-640, -320, 544],
        [640, -320, 544],
        [-640, -288, 544],
        [640, -288, 544],
        [-640, -256, 544],
        [640, -256, 544],
        [-640, -224, 544],
        [640, -224, 544],
        [-640, -192, 544],
        [640, -192, 544],
        [-640, -160, 544],
        [640, -160, 544],
        [-640, -128, 544],
        [640, -128, 544],
        [-640, -96, 544],
        [640, -96, 544],
        [-640, -64, 544],
        [640, -64, 544],
        [-640, -32, 544],
        [640, -32, 544],
        [-640, 0, 544],
        [640, 0, 544],
        [-640, 32, 544],
        [640, 32, 544],
        [-640, 64, 544],
        [640, 64, 544],
        [-640, 96, 544],
        [640, 96, 544],
        [-640, 128, 544],
        [640, 128, 544],
        [-640, 160, 544],
        [640, 160, 544],
        [-640, 192, 544],
        [640, 192, 544],
        [-640, 224, 544],
        [640, 224, 544],
        [-640, 256, 544],
        [640, 256, 544],
        [-640, 288, 544],
        [640, 288, 544],
        [-640, 320, 544],
        [640, 320, 544],
        [-640, 352, 544],
        [640, 352, 544],
        [-640, 384, 544],
        [640, 384, 544],
        [-640, 416, 544],
        [640, 416, 544],
        [-640, 448, 544],
        [640, 448, 544],
        [-640, 480, 544],
        [640, 480, 544],
        [-640, 512, 544],
        [640, 512, 544],
        [-640, 544, 544],
        [640, 544, 544],
        [-640, 576, 544],
        [640, 576, 544],
        [-640, 608, 544],
        [640, 608, 544],
        [-640, -608, 576],
        [640, -608, 576],
        [-640, -576, 576],
        [640, -576, 576],
        [-640, -544, 576],
        [640, -544, 576],
        [-640, -512, 576],
        [640, -512, 576],
        [-640, -480, 576],
        [640, -480, 576],
        [-640, -448, 576],
        [640, -448, 576],
        [-640, -416, 576],
        [640, -416, 576],
        [-640, -384, 576],
        [640, -384, 576],
        [-640, -352, 576],
        [640, -352, 576],
        [-640, -320, 576],
        [640, -320, 576],
        [-640, -288, 576],
        [640, -288, 576],
        [-640, -256, 576],
        [640, -256, 576],
        [-640, -224, 576],
        [640, -224, 576],
        [-640, -192, 576],
        [640, -192, 576],
        [-640, -160, 576],
        [640, -160, 576],
        [-640, -128, 576],
        [640, -128, 576],
        [-640, -96, 576],
        [640, -96, 576],
        [-640, -64, 576],
        [640, -64, 576],
        [-640, -32, 576],
        [640, -32, 576],
        [-640, 0, 576],
        [640, 0, 576],
        [-640, 32, 576],
        [640, 32, 576],
        [-640, 64, 576],
        [640, 64, 576],
        [-640, 96, 576],
        [640, 96, 576],
        [-640, 128, 576],
        [640, 128, 576],
        [-640, 160, 576],
        [640, 160, 576],
        [-640, 192, 576],
        [640, 192, 576],
        [-640, 224, 576],
        [640, 224, 576],
        [-640, 256, 576],
        [640, 256, 576],
        [-640, 288, 576],
        [640, 288, 576],
        [-640, 320, 576],
        [640, 320, 576],
        [-640, 352, 576],
        [640, 352, 576],
        [-640, 384, 576],
        [640, 384, 576],
        [-640, 416, 576],
        [640, 416, 576],
        [-640, 448, 576],
        [640, 448, 576],
        [-640, 480, 576],
        [640, 480, 576],
        [-640, 512, 576],
        [640, 512, 576],
        [-640, 544, 576],
        [640, 544, 576],
        [-640, 576, 576],
        [640, 576, 576],
        [-640, 608, 576],
        [640, 608, 576],
        [-640, -608, 608],
        [640, -608, 608],
        [-640, -576, 608],
        [640, -576, 608],
        [-640, -544, 608],
        [640, -544, 608],
        [-640, -512, 608],
        [640, -512, 608],
        [-640, -480, 608],
        [640, -480, 608],
        [-640, -448, 608],
        [640, -448, 608],
        [-640, -416, 608],
        [640, -416, 608],
        [-640, -384, 608],
        [640, -384, 608],
        [-640, -352, 608],
        [640, -352, 608],
        [-640, -320, 608],
        [640, -320, 608],
        [-640, -288, 608],
        [640, -288, 608],
        [-640, -256, 608],
        [640, -256, 608],
        [-640, -224, 608],
        [640, -224, 608],
        [-640, -192, 608],
        [640, -192, 608],
        [-640, -160, 608],
        [640, -160, 608],
        [-640, -128, 608],
        [640, -128, 608],
        [-640, -96, 608],
        [640, -96, 608],
        [-640, -64, 608],
        [640, -64, 608],
        [-640, -32, 608],
        [640, -32, 608],
        [-640, 0, 608],
        [640, 0, 608],
        [-640, 32, 608],
        [640, 32, 608],
        [-640, 64, 608],
        [640, 64, 608],
        [-640, 96, 608],
        [640, 96, 608],
        [-640, 128, 608],
        [640, 128, 608],
        [-640, 160, 608],
        [640, 160, 608],
        [-640, 192, 608],
        [640, 192, 608],
        [-640, 224, 608],
        [640, 224, 608],
        [-640, 256, 608],
        [640, 256, 608],
        [-640, 288, 608],
        [640, 288, 608],
        [-640, 320, 608],
        [640, 320, 608],
        [-640, 352, 608],
        [640, 352, 608],
        [-640, 384, 608],
        [640, 384, 608],
        [-640, 416, 608],
        [640, 416, 608],
        [-640, 448, 608],
        [640, 448, 608],
        [-640, 480, 608],
        [640, 480, 608],
        [-640, 512, 608],
        [640, 512, 608],
        [-640, 544, 608],
        [640, 544, 608],
        [-640, 576, 608],
        [640, 576, 608],
        [-640, 608, 608],
        [640, 608, 608]] };

},{}],29:[function(require,module,exports){
// From: https://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9
var log = Function.prototype.bind.call(console.log, console);
var stub = function () {
};
// enabled param allow us to turn log output on/off when we initialize the logging module
// removes the need for a separate debug boolean in each file, and the associated conditionals
module.exports = function (moduleName, enabled) {
    if (!enabled) {
        return stub;
    }
    return function () {
        var args = new Array(arguments.length + 1);
        args[0] = moduleName;
        for (var i = 0, len = arguments.length; i < len; i++) {
            args[i + 1] = arguments[i];
        }
        log.apply(console, args);
    };
};

},{}],30:[function(require,module,exports){
module.exports = {
	chunkSize : 32,
	drawDistance : 2,
	removeDistance : 3,
	initialPosition : [ 16.5, 25.5, 16.5 ],
	worldRadius : 10,
	chunkFolder : 'chunks/your-world/',
	mysql : {
		connectionLimit : 10,
		user : 'root',
		password : 'toor',
		database : 'voxeling',
		host : 'localhost'
	},
	server : 'ws://127.0.0.1:10005',
	websocketBindAddress : '127.0.0.1',
	websocketBindPort : 10005,
	maxPlayers : 10,
	textures : [{
		value : 1,
		name : 'grass+dirt',
		sides : [
			14,
			302, 302, 302, 302,
			3
		]
	},{
		value : 14,
		name : 'grass',
		src : '/testbdcraft/default_grass.png'
	},{
		value : 17,
		name : 'grass2',
		src : '/testbdcraft/default_grass_footsteps.png'
	},{
		value : 3,
		name : 'dirt',
		src : '/testbdcraft/default_dirt.png'
	},{
		value : 302,
		name : 'grass_dirt',
		src : '/testbdcraft/default_grass_side.png',
		hidden : true
	},{
		value : 2,
		name : 'brick',
		src : '/testbdcraft/default_brick.png'
	},{
		value : 9,
		name : 'brick2',
		src : '/testbdcraft/default_brick.png',
		hidden : true
	},{
		value : 10,
		name : 'brick3',
		src : '/testbdcraft/default_brick.png',
		hidden : true
	},{
		value : 4,
		name : 'coal',
		src : '/testbdcraft/default_mineral_coal.png'
	},{
		value : 13,
		name : 'iron',
		src : '/testbdcraft/default_mineral_iron.png'
	},{
		value : 19,
		name : 'clay',
		src : '/testbdcraft/default_clay.png'
	},{
		value : 18,
		name : 'sandstone',
		src : '/testbdcraft/default_sandstone.png'
	},{
		value : 11,
		name : 'cobble',
		src : '/testbdcraft/default_cobble.png'
	},{
		value : 12,
		name : 'cobble2',
		src : '/testbdcraft/default_cobble.png',
		hidden : true
	},{
		value : 15,
		name : 'moss cobble',
		src : '/testbdcraft/default_mossycobble.png'
	},{
		value : 7,
		name : 'lava',
		src : '/testbdcraft/default_lava.png'
	},{
		value : 6,
		name : 'water',
		src : '/testbdcraft/default_water.png'
	},{
		value : 16,
		name : 'ice',
		src : '/textures/ice.png',
		hidden : true
	},{
		value : 20,
		name : 'snow',
		src : '/textures/sparkly_snow.png',
		hidden : true
	},{
		value : 8,
		name : 'chest',
		sides : [
			300,
			301, 301, 301, 301,
			301
		]
	},{
		value : 300,
		name : 'chest top',
		src : '/testbdcraft/default_chest_top.png',
		hidden : true
	},{
		value : 301,
		name : 'chest side',
		src : '/testbdcraft/default_chest_side.png',
		hidden : true
	},{
		value : 22,
		name : 'wood',
		src : '/testbdcraft/default_wood.png'
	},{
		value : 24,
		name : 'tree',
		sides : [
			303,
			304, 304, 304, 304,
			303
		]
	},{
		value : 303,
		name : 'tree_top',
		src : '/testbdcraft/default_tree_top.png',
		hidden : true
	},{
		value : 304,
		name : 'tree_side',
		src : '/testbdcraft/default_tree.png',
		hidden : true
	},{
		value : 100,
		name : 'leaves',
		src : '/testbdcraft/default_leaves.png'
	},{
		value : 305,
		name : 'full-tree',
		src : '/testbdcraft/default_tree.png',
	},{
		value : 27,
		name : 'black wool',
		src : '/testbdcraft/wool_black.png'
	},{
		value : 34,
		name : 'grey wool',
		src : '/testbdcraft/wool_grey.png'
	},{
		value : 32,
		name : 'dk grey wool',
		src : '/testbdcraft/wool_dark_grey.png'
	},{
		value : 29,
		name : 'brown wool',
		src : '/testbdcraft/wool_brown.png'
	},{
		value : 28,
		name : 'blue wool',
		src : '/testbdcraft/wool_blue.png'
	},{
		value : 30,
		name : 'cyan wool',
		src : '/testbdcraft/wool_cyan.png'
	},{
		value : 33,
		name : 'green wool',
		src : '/testbdcraft/wool_green.png'
	},{
		value : 31,
		name : 'dk green wool',
		src : '/testbdcraft/wool_dark_green.png'
	},{
		value : 35,
		name : 'magenta wool',
		src : '/testbdcraft/wool_magenta.png'
	},{
		value : 39,
		name : 'violet wool',
		src : '/testbdcraft/wool_violet.png'
	},{
		value : 37,
		name : 'pink wool',
		src : '/testbdcraft/wool_pink.png'
	},{
		value : 38,
		name : 'red wool',
		src : '/testbdcraft/wool_red.png'
	},{
		value : 21,
		name : 'yellow wool',
		src : '/testbdcraft/wool_yellow.png'
	},{
		value : 36,
		name : 'orange wool',
		src : '/testbdcraft/wool_orange.png'
	},{
		value : 5,
		name : 'white wool',
		src : '/testbdcraft/wool_white.png'
	},{
		value : 101,
		name : 'glass',
		src : '/textures/glass.png'
	},{
		value : 50,
		name : 'player',
		src : '/textures/player.png',
		hidden : true
	},{
		value : 51,
		name : 'substack',
		src : '/textures/substack.png',
		hidden : true
	},{
		value : 52,
		name : 'viking',
		src : '/textures/viking.png',
		hidden : true
	}]
}

},{}],31:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],32:[function(require,module,exports){
/**
 * @fileoverview gl-matrix - High performance matrix and vector operations
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 2.3.0
 */

/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */
// END HEADER

exports.glMatrix = require("./gl-matrix/common.js");
exports.mat2 = require("./gl-matrix/mat2.js");
exports.mat2d = require("./gl-matrix/mat2d.js");
exports.mat3 = require("./gl-matrix/mat3.js");
exports.mat4 = require("./gl-matrix/mat4.js");
exports.quat = require("./gl-matrix/quat.js");
exports.vec2 = require("./gl-matrix/vec2.js");
exports.vec3 = require("./gl-matrix/vec3.js");
exports.vec4 = require("./gl-matrix/vec4.js");
},{"./gl-matrix/common.js":33,"./gl-matrix/mat2.js":34,"./gl-matrix/mat2d.js":35,"./gl-matrix/mat3.js":36,"./gl-matrix/mat4.js":37,"./gl-matrix/quat.js":38,"./gl-matrix/vec2.js":39,"./gl-matrix/vec3.js":40,"./gl-matrix/vec4.js":41}],33:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

/**
 * @class Common utilities
 * @name glMatrix
 */
var glMatrix = {};

// Constants
glMatrix.EPSILON = 0.000001;
glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
glMatrix.RANDOM = Math.random;

/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */
glMatrix.setMatrixArrayType = function(type) {
    GLMAT_ARRAY_TYPE = type;
}

var degree = Math.PI / 180;

/**
* Convert Degree To Radian
*
* @param {Number} Angle in Degrees
*/
glMatrix.toRadian = function(a){
     return a * degree;
}

module.exports = glMatrix;

},{}],34:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2x2 Matrix
 * @name mat2
 */
var mat2 = {};

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */
mat2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */
mat2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */
mat2.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a1 = a[1];
        out[1] = a[2];
        out[2] = a1;
    } else {
        out[0] = a[0];
        out[1] = a[2];
        out[2] = a[1];
        out[3] = a[3];
    }
    
    return out;
};

/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],

        // Calculate the determinant
        det = a0 * a3 - a2 * a1;

    if (!det) {
        return null;
    }
    det = 1.0 / det;
    
    out[0] =  a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] =  a0 * det;

    return out;
};

/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */
mat2.adjoint = function(out, a) {
    // Caching this value is nessecary if out == a
    var a0 = a[0];
    out[0] =  a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] =  a0;

    return out;
};

/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */
mat2.determinant = function (a) {
    return a[0] * a[3] - a[2] * a[1];
};

/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */
mat2.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
};

/**
 * Alias for {@link mat2.multiply}
 * @function
 */
mat2.mul = mat2.multiply;

/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
};

/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/
mat2.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */
mat2.fromRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */
mat2.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2.str = function (a) {
    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
};

/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix 
 * @param {mat2} D the diagonal matrix 
 * @param {mat2} U the upper triangular matrix 
 * @param {mat2} a the input matrix to factorize
 */

mat2.LDU = function (L, D, U, a) { 
    L[2] = a[2]/a[0]; 
    U[0] = a[0]; 
    U[1] = a[1]; 
    U[3] = a[3] - L[2] * U[1]; 
    return [L, D, U];       
}; 


module.exports = mat2;

},{"./common.js":33}],35:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2x3 Matrix
 * @name mat2d
 * 
 * @description 
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, c, tx,
 *  b, d, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, c, tx,
 *  b, d, ty,
 *  0, 0, 1]
 * </pre>
 * The last row is ignored so the array is shorter and operations are faster.
 */
var mat2d = {};

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.create = function() {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */
mat2d.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
};

/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */
mat2d.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
};

/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */
mat2d.invert = function(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
        atx = a[4], aty = a[5];

    var det = aa * ad - ab * ac;
    if(!det){
        return null;
    }
    det = 1.0 / det;

    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
};

/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */
mat2d.determinant = function (a) {
    return a[0] * a[3] - a[1] * a[2];
};

/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */
mat2d.multiply = function (out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
};

/**
 * Alias for {@link mat2d.multiply}
 * @function
 */
mat2d.mul = mat2d.multiply;

/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.rotate = function (out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        s = Math.sin(rad),
        c = Math.cos(rad);
    out[0] = a0 *  c + a2 * s;
    out[1] = a1 *  c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/
mat2d.scale = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
};

/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/
mat2d.translate = function(out, a, v) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
        v0 = v[0], v1 = v[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
};

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */
mat2d.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */
mat2d.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v[1];
    out[4] = 0;
    out[5] = 0;
    return out;
}

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */
mat2d.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v[0];
    out[5] = v[1];
    return out;
}

/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat2d.str = function (a) {
    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
};

/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat2d.frob = function (a) { 
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
}; 

module.exports = mat2d;

},{"./common.js":33}],36:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 3x3 Matrix
 * @name mat3
 */
var mat3 = {};

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */
mat3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */
mat3.fromMat4 = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
};

/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */
mat3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */
mat3.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
};

/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a12 = a[5];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a01;
        out[5] = a[7];
        out[6] = a02;
        out[7] = a12;
    } else {
        out[0] = a[0];
        out[1] = a[3];
        out[2] = a[6];
        out[3] = a[1];
        out[4] = a[4];
        out[5] = a[7];
        out[6] = a[2];
        out[7] = a[5];
        out[8] = a[8];
    }
    
    return out;
};

/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,

        // Calculate the determinant
        det = a00 * b01 + a01 * b11 + a02 * b21;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
};

/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */
mat3.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    out[0] = (a11 * a22 - a12 * a21);
    out[1] = (a02 * a21 - a01 * a22);
    out[2] = (a01 * a12 - a02 * a11);
    out[3] = (a12 * a20 - a10 * a22);
    out[4] = (a00 * a22 - a02 * a20);
    out[5] = (a02 * a10 - a00 * a12);
    out[6] = (a10 * a21 - a11 * a20);
    out[7] = (a01 * a20 - a00 * a21);
    out[8] = (a00 * a11 - a01 * a10);
    return out;
};

/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */
mat3.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8];

    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
};

/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */
mat3.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        b00 = b[0], b01 = b[1], b02 = b[2],
        b10 = b[3], b11 = b[4], b12 = b[5],
        b20 = b[6], b21 = b[7], b22 = b[8];

    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;

    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;

    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
};

/**
 * Alias for {@link mat3.multiply}
 * @function
 */
mat3.mul = mat3.multiply;

/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */
mat3.translate = function(out, a, v) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],
        x = v[0], y = v[1];

    out[0] = a00;
    out[1] = a01;
    out[2] = a02;

    out[3] = a10;
    out[4] = a11;
    out[5] = a12;

    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
};

/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.rotate = function (out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2],
        a10 = a[3], a11 = a[4], a12 = a[5],
        a20 = a[6], a21 = a[7], a22 = a[8],

        s = Math.sin(rad),
        c = Math.cos(rad);

    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;

    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;

    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
};

/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/
mat3.scale = function(out, a, v) {
    var x = v[0], y = v[1];

    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];

    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];

    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */
mat3.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v[0];
    out[7] = v[1];
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */
mat3.fromRotation = function(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);

    out[0] = c;
    out[1] = s;
    out[2] = 0;

    out[3] = -s;
    out[4] = c;
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */
mat3.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;

    out[3] = 0;
    out[4] = v[1];
    out[5] = 0;

    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
}

/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/
mat3.fromMat2d = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;

    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;

    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
};

/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/
mat3.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;

    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;

    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;

    return out;
};

/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/
mat3.normalFromMat4 = function (out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

    return out;
};

/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat3.str = function (a) {
    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
};

/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat3.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
};


module.exports = mat3;

},{"./common.js":33}],37:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 4x4 Matrix
 * @name mat4
 */
var mat4 = {};

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */
mat4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */
mat4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */
mat4.identity = function(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
};

/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.transpose = function(out, a) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (out === a) {
        var a01 = a[1], a02 = a[2], a03 = a[3],
            a12 = a[6], a13 = a[7],
            a23 = a[11];

        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a01;
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a02;
        out[9] = a12;
        out[11] = a[14];
        out[12] = a03;
        out[13] = a13;
        out[14] = a23;
    } else {
        out[0] = a[0];
        out[1] = a[4];
        out[2] = a[8];
        out[3] = a[12];
        out[4] = a[1];
        out[5] = a[5];
        out[6] = a[9];
        out[7] = a[13];
        out[8] = a[2];
        out[9] = a[6];
        out[10] = a[10];
        out[11] = a[14];
        out[12] = a[3];
        out[13] = a[7];
        out[14] = a[11];
        out[15] = a[15];
    }
    
    return out;
};

/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.invert = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,

        // Calculate the determinant
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

    if (!det) { 
        return null; 
    }
    det = 1.0 / det;

    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;

    return out;
};

/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */
mat4.adjoint = function(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
    return out;
};

/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */
mat4.determinant = function (a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],

        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32;

    // Calculate the determinant
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
};

/**
 * Multiplies two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */
mat4.multiply = function (out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
    return out;
};

/**
 * Alias for {@link mat4.multiply}
 * @function
 */
mat4.mul = mat4.multiply;

/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */
mat4.translate = function (out, a, v) {
    var x = v[0], y = v[1], z = v[2],
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23;

    if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;

        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }

    return out;
};

/**
 * Scales the mat4 by the dimensions in the given vec3
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/
mat4.scale = function(out, a, v) {
    var x = v[0], y = v[1], z = v[2];

    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
};

/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.rotate = function (out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t,
        a00, a01, a02, a03,
        a10, a11, a12, a13,
        a20, a21, a22, a23,
        b00, b01, b02,
        b10, b11, b12,
        b20, b21, b22;

    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;

    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;

    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];

    // Construct the elements of the rotation matrix
    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;

    // Perform rotation-specific matrix multiplication
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }
    return out;
};

/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateX = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[0]  = a[0];
        out[1]  = a[1];
        out[2]  = a[2];
        out[3]  = a[3];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateY = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11];

    if (a !== out) { // If the source and destination differ, copy the unchanged rows
        out[4]  = a[4];
        out[5]  = a[5];
        out[6]  = a[6];
        out[7]  = a[7];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
};

/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.rotateZ = function (out, a, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad),
        a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7];

    if (a !== out) { // If the source and destination differ, copy the unchanged last row
        out[8]  = a[8];
        out[9]  = a[9];
        out[10] = a[10];
        out[11] = a[11];
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
    }

    // Perform axis-specific matrix multiplication
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
};

/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromTranslation = function(out, v) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */
mat4.fromScaling = function(out, v) {
    out[0] = v[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */
mat4.fromRotation = function(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s, c, t;
    
    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
    
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    
    // Perform rotation-specific matrix multiplication
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromXRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    
    // Perform axis-specific matrix multiplication
    out[0]  = 1;
    out[1]  = 0;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromYRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    
    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = 0;
    out[2]  = -s;
    out[3]  = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */
mat4.fromZRotation = function(out, rad) {
    var s = Math.sin(rad),
        c = Math.cos(rad);
    
    // Perform axis-specific matrix multiplication
    out[0]  = c;
    out[1]  = s;
    out[2]  = 0;
    out[3]  = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
}

/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslation = function (out, q, v) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScale = function (out, q, v, s) {
    // Quaternion math
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2,
        sx = s[0],
        sy = s[1],
        sz = s[2];

    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v[0];
    out[13] = v[1];
    out[14] = v[2];
    out[15] = 1;
    
    return out;
};

/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     var quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */
mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
  // Quaternion math
  var x = q[0], y = q[1], z = q[2], w = q[3],
      x2 = x + x,
      y2 = y + y,
      z2 = z + z,

      xx = x * x2,
      xy = x * y2,
      xz = x * z2,
      yy = y * y2,
      yz = y * z2,
      zz = z * z2,
      wx = w * x2,
      wy = w * y2,
      wz = w * z2,
      
      sx = s[0],
      sy = s[1],
      sz = s[2],

      ox = o[0],
      oy = o[1],
      oz = o[2];
      
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
  out[15] = 1;
        
  return out;
};

mat4.fromQuat = function (out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,

        xx = x * x2,
        yx = y * x2,
        yy = y * y2,
        zx = z * x2,
        zy = z * y2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;

    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;

    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;

    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;

    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;

    return out;
};

/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.frustum = function (out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left),
        tb = 1 / (top - bottom),
        nf = 1 / (near - far);
    out[0] = (near * 2) * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = (near * 2) * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (far * near * 2) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspective = function (out, fovy, aspect, near, far) {
    var f = 1.0 / Math.tan(fovy / 2),
        nf = 1 / (near - far);
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = (2 * far * near) * nf;
    out[15] = 0;
    return out;
};

/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
        xScale = 2.0 / (leftTan + rightTan),
        yScale = 2.0 / (upTan + downTan);

    out[0] = xScale;
    out[1] = 0.0;
    out[2] = 0.0;
    out[3] = 0.0;
    out[4] = 0.0;
    out[5] = yScale;
    out[6] = 0.0;
    out[7] = 0.0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = ((upTan - downTan) * yScale * 0.5);
    out[10] = far / (near - far);
    out[11] = -1.0;
    out[12] = 0.0;
    out[13] = 0.0;
    out[14] = (far * near) / (near - far);
    out[15] = 0.0;
    return out;
}

/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */
mat4.ortho = function (out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right),
        bt = 1 / (bottom - top),
        nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
};

/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */
mat4.lookAt = function (out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
        Math.abs(eyey - centery) < glMatrix.EPSILON &&
        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
        return mat4.identity(out);
    }

    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
    if (!len) {
        x0 = 0;
        x1 = 0;
        x2 = 0;
    } else {
        len = 1 / len;
        x0 *= len;
        x1 *= len;
        x2 *= len;
    }

    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;

    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
    if (!len) {
        y0 = 0;
        y1 = 0;
        y2 = 0;
    } else {
        len = 1 / len;
        y0 *= len;
        y1 *= len;
        y2 *= len;
    }

    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;

    return out;
};

/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} mat matrix to represent as a string
 * @returns {String} string representation of the matrix
 */
mat4.str = function (a) {
    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
};

/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */
mat4.frob = function (a) {
    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
};


module.exports = mat4;

},{"./common.js":33}],38:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");
var mat3 = require("./mat3.js");
var vec3 = require("./vec3.js");
var vec4 = require("./vec4.js");

/**
 * @class Quaternion
 * @name quat
 */
var quat = {};

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */
quat.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */
quat.rotationTo = (function() {
    var tmpvec3 = vec3.create();
    var xUnitVec3 = vec3.fromValues(1,0,0);
    var yUnitVec3 = vec3.fromValues(0,1,0);

    return function(out, a, b) {
        var dot = vec3.dot(a, b);
        if (dot < -0.999999) {
            vec3.cross(tmpvec3, xUnitVec3, a);
            if (vec3.length(tmpvec3) < 0.000001)
                vec3.cross(tmpvec3, yUnitVec3, a);
            vec3.normalize(tmpvec3, tmpvec3);
            quat.setAxisAngle(out, tmpvec3, Math.PI);
            return out;
        } else if (dot > 0.999999) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out;
        } else {
            vec3.cross(tmpvec3, a, b);
            out[0] = tmpvec3[0];
            out[1] = tmpvec3[1];
            out[2] = tmpvec3[2];
            out[3] = 1 + dot;
            return quat.normalize(out, out);
        }
    };
})();

/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */
quat.setAxes = (function() {
    var matr = mat3.create();

    return function(out, view, right, up) {
        matr[0] = right[0];
        matr[3] = right[1];
        matr[6] = right[2];

        matr[1] = up[0];
        matr[4] = up[1];
        matr[7] = up[2];

        matr[2] = -view[0];
        matr[5] = -view[1];
        matr[8] = -view[2];

        return quat.normalize(out, quat.fromMat3(out, matr));
    };
})();

/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */
quat.clone = vec4.clone;

/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */
quat.fromValues = vec4.fromValues;

/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */
quat.copy = vec4.copy;

/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */
quat.set = vec4.set;

/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */
quat.identity = function(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
};

/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/
quat.setAxisAngle = function(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
};

/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */
quat.add = vec4.add;

/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */
quat.multiply = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
};

/**
 * Alias for {@link quat.multiply}
 * @function
 */
quat.mul = quat.multiply;

/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */
quat.scale = vec4.scale;

/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateX = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateY = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        by = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
};

/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */
quat.rotateZ = function (out, a, rad) {
    rad *= 0.5; 

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bz = Math.sin(rad), bw = Math.cos(rad);

    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
};

/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */
quat.calculateW = function (out, a) {
    var x = a[0], y = a[1], z = a[2];

    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return out;
};

/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */
quat.dot = vec4.dot;

/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 * @function
 */
quat.lerp = vec4.lerp;

/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {quat} out
 */
quat.slerp = function (out, a, b, t) {
    // benchmarks:
    //    http://jsperf.com/quaternion-slerp-implementations

    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
        bx = b[0], by = b[1], bz = b[2], bw = b[3];

    var        omega, cosom, sinom, scale0, scale1;

    // calc cosine
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    // adjust signs (if necessary)
    if ( cosom < 0.0 ) {
        cosom = -cosom;
        bx = - bx;
        by = - by;
        bz = - bz;
        bw = - bw;
    }
    // calculate coefficients
    if ( (1.0 - cosom) > 0.000001 ) {
        // standard case (slerp)
        omega  = Math.acos(cosom);
        sinom  = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
    } else {        
        // "from" and "to" quaternions are very close 
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
    }
    // calculate final values
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    
    return out;
};

/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount
 * @returns {quat} out
 */
quat.sqlerp = (function () {
  var temp1 = quat.create();
  var temp2 = quat.create();
  
  return function (out, a, b, c, d, t) {
    quat.slerp(temp1, a, d, t);
    quat.slerp(temp2, b, c, t);
    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
    
    return out;
  };
}());

/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */
quat.invert = function(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
        invDot = dot ? 1.0/dot : 0;
    
    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    out[0] = -a0*invDot;
    out[1] = -a1*invDot;
    out[2] = -a2*invDot;
    out[3] = a3*invDot;
    return out;
};

/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */
quat.conjugate = function (out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
};

/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 * @function
 */
quat.length = vec4.length;

/**
 * Alias for {@link quat.length}
 * @function
 */
quat.len = quat.length;

/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */
quat.squaredLength = vec4.squaredLength;

/**
 * Alias for {@link quat.squaredLength}
 * @function
 */
quat.sqrLen = quat.squaredLength;

/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */
quat.normalize = vec4.normalize;

/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */
quat.fromMat3 = function(out, m) {
    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;

    if ( fTrace > 0.0 ) {
        // |w| > 1/2, may as well choose w > 1/2
        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
        out[3] = 0.5 * fRoot;
        fRoot = 0.5/fRoot;  // 1/(4w)
        out[0] = (m[5]-m[7])*fRoot;
        out[1] = (m[6]-m[2])*fRoot;
        out[2] = (m[1]-m[3])*fRoot;
    } else {
        // |w| <= 1/2
        var i = 0;
        if ( m[4] > m[0] )
          i = 1;
        if ( m[8] > m[i*3+i] )
          i = 2;
        var j = (i+1)%3;
        var k = (i+2)%3;
        
        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
        out[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
    }
    
    return out;
};

/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
quat.str = function (a) {
    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

module.exports = quat;

},{"./common.js":33,"./mat3.js":36,"./vec3.js":40,"./vec4.js":41}],39:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 2 Dimensional Vector
 * @name vec2
 */
var vec2 = {};

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */
vec2.create = function() {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for {@link vec2.subtract}
 * @function
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for {@link vec2.multiply}
 * @function
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for {@link vec2.divide}
 * @function
 */
vec2.div = vec2.divide;

/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
};

/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */
vec2.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
};

/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */
vec2.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.distance}
 * @function
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for {@link vec2.length}
 * @function
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */
vec2.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
};

/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */
vec2.cross = function(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
};

/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec2} out
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */
vec2.random = function (out, scale) {
    scale = scale || 1.0;
    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    out[0] = Math.cos(r) * scale;
    out[1] = Math.sin(r) * scale;
    return out;
};

/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
};

/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat2d = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
};

/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat3 = function(out, a, m) {
    var x = a[0],
        y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
};

/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */
vec2.transformMat4 = function(out, a, m) {
    var x = a[0], 
        y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
};

/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec2.forEach = (function() {
    var vec = vec2.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 2;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec2} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

module.exports = vec2;

},{"./common.js":33}],40:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 3 Dimensional Vector
 * @name vec3
 */
var vec3 = {};

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */
vec3.create = function() {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
};

/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */
vec3.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */
vec3.fromValues = function(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */
vec3.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
};

/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */
vec3.set = function(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
};

/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
};

/**
 * Alias for {@link vec3.subtract}
 * @function
 */
vec3.sub = vec3.subtract;

/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
};

/**
 * Alias for {@link vec3.multiply}
 * @function
 */
vec3.mul = vec3.multiply;

/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
};

/**
 * Alias for {@link vec3.divide}
 * @function
 */
vec3.div = vec3.divide;

/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
};

/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
};

/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */
vec3.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
};

/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */
vec3.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */
vec3.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.distance}
 * @function
 */
vec3.dist = vec3.distance;

/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec3.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */
vec3.sqrDist = vec3.squaredDistance;

/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */
vec3.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return Math.sqrt(x*x + y*y + z*z);
};

/**
 * Alias for {@link vec3.length}
 * @function
 */
vec3.len = vec3.length;

/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec3.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    return x*x + y*y + z*z;
};

/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */
vec3.sqrLen = vec3.squaredLength;

/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */
vec3.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
};

/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */
vec3.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
};

/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */
vec3.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2];
    var len = x*x + y*y + z*z;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
        out[2] = a[2] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */
vec3.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
};

/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */
vec3.cross = function(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2],
        bx = b[0], by = b[1], bz = b[2];

    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
};

/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
};

/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.hermite = function (out, a, b, c, d, t) {
  var factorTimes2 = t * t,
      factor1 = factorTimes2 * (2 * t - 3) + 1,
      factor2 = factorTimes2 * (t - 2) + t,
      factor3 = factorTimes2 * (t - 1),
      factor4 = factorTimes2 * (3 - 2 * t);
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec3} out
 */
vec3.bezier = function (out, a, b, c, d, t) {
  var inverseFactor = 1 - t,
      inverseFactorTimesTwo = inverseFactor * inverseFactor,
      factorTimes2 = t * t,
      factor1 = inverseFactorTimesTwo * inverseFactor,
      factor2 = 3 * t * inverseFactorTimesTwo,
      factor3 = 3 * factorTimes2 * inverseFactor,
      factor4 = factorTimes2 * t;
  
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  
  return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */
vec3.random = function (out, scale) {
    scale = scale || 1.0;

    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
    var zScale = Math.sqrt(1.0-z*z) * scale;

    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale;
    return out;
};

/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2],
        w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1.0;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
};

/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */
vec3.transformMat3 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
};

/**
 * Transforms the vec3 with a quat
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */
vec3.transformQuat = function(out, a, q) {
    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return out;
};

/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateX = function(out, a, b, c){
   var p = [], r=[];
	  //Translate point to the origin
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];

	  //perform rotation
	  r[0] = p[0];
	  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
	  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);

	  //translate to correct position
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];

  	return out;
};

/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateY = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
  	r[1] = p[1];
  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */
vec3.rotateZ = function(out, a, b, c){
  	var p = [], r=[];
  	//Translate point to the origin
  	p[0] = a[0] - b[0];
  	p[1] = a[1] - b[1];
  	p[2] = a[2] - b[2];
  
  	//perform rotation
  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
  	r[2] = p[2];
  
  	//translate to correct position
  	out[0] = r[0] + b[0];
  	out[1] = r[1] + b[1];
  	out[2] = r[2] + b[2];
  
  	return out;
};

/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec3.forEach = (function() {
    var vec = vec3.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 3;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
        }
        
        return a;
    };
})();

/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */
vec3.angle = function(a, b) {
   
    var tempA = vec3.fromValues(a[0], a[1], a[2]);
    var tempB = vec3.fromValues(b[0], b[1], b[2]);
 
    vec3.normalize(tempA, tempA);
    vec3.normalize(tempB, tempB);
 
    var cosine = vec3.dot(tempA, tempB);

    if(cosine > 1.0){
        return 0;
    } else {
        return Math.acos(cosine);
    }     
};

/**
 * Returns a string representation of a vector
 *
 * @param {vec3} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec3.str = function (a) {
    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
};

module.exports = vec3;

},{"./common.js":33}],41:[function(require,module,exports){
/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. */

var glMatrix = require("./common.js");

/**
 * @class 4 Dimensional Vector
 * @name vec4
 */
var vec4 = {};

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */
vec4.create = function() {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
};

/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */
vec4.clone = function(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */
vec4.fromValues = function(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */
vec4.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
};

/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */
vec4.set = function(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
};

/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
};

/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
};

/**
 * Alias for {@link vec4.subtract}
 * @function
 */
vec4.sub = vec4.subtract;

/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
};

/**
 * Alias for {@link vec4.multiply}
 * @function
 */
vec4.mul = vec4.multiply;

/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
};

/**
 * Alias for {@link vec4.divide}
 * @function
 */
vec4.div = vec4.divide;

/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.min = function(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
};

/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */
vec4.max = function(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
};

/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */
vec4.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
};

/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */
vec4.scaleAndAdd = function(out, a, b, scale) {
    out[0] = a[0] + (b[0] * scale);
    out[1] = a[1] + (b[1] * scale);
    out[2] = a[2] + (b[2] * scale);
    out[3] = a[3] + (b[3] * scale);
    return out;
};

/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */
vec4.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.distance}
 * @function
 */
vec4.dist = vec4.distance;

/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */
vec4.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1],
        z = b[2] - a[2],
        w = b[3] - a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */
vec4.sqrDist = vec4.squaredDistance;

/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */
vec4.length = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return Math.sqrt(x*x + y*y + z*z + w*w);
};

/**
 * Alias for {@link vec4.length}
 * @function
 */
vec4.len = vec4.length;

/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */
vec4.squaredLength = function (a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    return x*x + y*y + z*z + w*w;
};

/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */
vec4.sqrLen = vec4.squaredLength;

/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */
vec4.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
};

/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */
vec4.inverse = function(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
};

/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */
vec4.normalize = function(out, a) {
    var x = a[0],
        y = a[1],
        z = a[2],
        w = a[3];
    var len = x*x + y*y + z*z + w*w;
    if (len > 0) {
        len = 1 / Math.sqrt(len);
        out[0] = x * len;
        out[1] = y * len;
        out[2] = z * len;
        out[3] = w * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */
vec4.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
};

/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount between the two inputs
 * @returns {vec4} out
 */
vec4.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1],
        az = a[2],
        aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
};

/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */
vec4.random = function (out, scale) {
    scale = scale || 1.0;

    //TODO: This is a pretty awful way of doing this. Find something better.
    out[0] = glMatrix.RANDOM();
    out[1] = glMatrix.RANDOM();
    out[2] = glMatrix.RANDOM();
    out[3] = glMatrix.RANDOM();
    vec4.normalize(out, out);
    vec4.scale(out, out, scale);
    return out;
};

/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */
vec4.transformMat4 = function(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
};

/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */
vec4.transformQuat = function(out, a, q) {
    var x = a[0], y = a[1], z = a[2],
        qx = q[0], qy = q[1], qz = q[2], qw = q[3],

        // calculate quat * vec
        ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z;

    // calculate result * inverse quat
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
};

/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */
vec4.forEach = (function() {
    var vec = vec4.create();

    return function(a, stride, offset, count, fn, arg) {
        var i, l;
        if(!stride) {
            stride = 4;
        }

        if(!offset) {
            offset = 0;
        }
        
        if(count) {
            l = Math.min((count * stride) + offset, a.length);
        } else {
            l = a.length;
        }

        for(i = offset; i < l; i += stride) {
            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
            fn(vec, vec, arg);
            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
        }
        
        return a;
    };
})();

/**
 * Returns a string representation of a vector
 *
 * @param {vec4} vec vector to represent as a string
 * @returns {String} string representation of the vector
 */
vec4.str = function (a) {
    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
};

module.exports = vec4;

},{"./common.js":33}],42:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],43:[function(require,module,exports){
var defaultPlayerName = 'Player Name';

var adjectives = ["Black","White","Gray","Brown","Red","Pink","Crimson","Carnelian","Orange","Yellow","Ivory","Cream","Green","Viridian","Aquamarine","Cyan","Blue","Cerulean","Azure","Indigo","Navy","Violet","Purple","Lavender","Magenta","Rainbow","Iridescent","Spectrum","Prism","Bold","Vivid","Pale","Clear","Glass","Translucent","Misty","Dark","Light","Gold","Silver","Copper","Bronze","Steel","Iron","Brass","Mercury","Zinc","Chrome","Platinum","Titanium","Nickel","Lead","Pewter","Rust","Metal","Stone","Quartz","Granite","Marble","Alabaster","Agate","Jasper","Pebble","Pyrite","Crystal","Geode","Obsidian","Mica","Flint","Sand","Gravel","Boulder","Basalt","Ruby","Beryl","Scarlet","Citrine","Sulpher","Topaz","Amber","Emerald","Malachite","Jade","Abalone","Lapis","Sapphire","Diamond","Peridot","Gem","Jewel","Bevel","Coral","Jet","Ebony","Wood","Tree","Cherry","Maple","Cedar","Branch","Bramble","Rowan","Ash","Fir","Pine","Cactus","Alder","Grove","Forest","Jungle","Palm","Bush","Mulberry","Juniper","Vine","Ivy","Rose","Lily","Tulip","Daffodil","Honeysuckle","Fuschia","Hazel","Walnut","Almond","Lime","Lemon","Apple","Blossom","Bloom","Crocus","Rose","Buttercup","Dandelion","Iris","Carnation","Fern","Root","Branch","Leaf","Seed","Flower","Petal","Pollen","Orchid","Mangrove","Cypress","Sequoia","Sage","Heather","Snapdragon","Daisy","Mountain","Hill","Alpine","Chestnut","Valley","Glacier","Forest","Grove","Glen","Tree","Thorn","Stump","Desert","Canyon","Dune","Oasis","Mirage","Well","Spring","Meadow","Field","Prairie","Grass","Tundra","Island","Shore","Sand","Shell","Surf","Wave","Foam","Tide","Lake","River","Brook","Stream","Pool","Pond","Sun","Sprinkle","Shade","Shadow","Rain","Cloud","Storm","Hail","Snow","Sleet","Thunder","Lightning","Wind","Hurricane","Typhoon","Dawn","Sunrise","Morning","Noon","Twilight","Evening","Sunset","Midnight","Night","Sky","Star","Stellar","Comet","Nebula","Quasar","Solar","Lunar","Planet","Meteor","Sprout","Pear","Plum","Kiwi","Berry","Apricot","Peach","Mango","Pineapple","Coconut","Olive","Ginger","Root","Plain","Fancy","Stripe","Spot","Speckle","Spangle","Ring","Band","Blaze","Paint","Pinto","Shade","Tabby","Brindle","Patch","Calico","Checker","Dot","Pattern","Glitter","Glimmer","Shimmer","Dull","Dust","Dirt","Glaze","Scratch","Quick","Swift","Fast","Slow","Clever","Fire","Flicker","Flash","Spark","Ember","Coal","Flame","Chocolate","Vanilla","Sugar","Spice","Cake","Pie","Cookie","Candy","Caramel","Spiral","Round","Jelly","Square","Narrow","Long","Short","Small","Tiny","Big","Giant","Great","Atom","Peppermint","Mint","Butter","Fringe","Rag","Quilt","Truth","Lie","Holy","Curse","Noble","Sly","Brave","Shy","Lava","Foul","Leather","Fantasy","Keen","Luminous","Feather","Sticky","Gossamer","Cotton","Rattle","Silk","Satin","Cord","Denim","Flannel","Plaid","Wool","Linen","Silent","Flax","Weak","Valiant","Fierce","Gentle","Rhinestone","Splash","North","South","East","West","Summer","Winter","Autumn","Spring","Season","Equinox","Solstice","Paper","Motley","Torch","Ballistic","Rampant","Shag","Freckle","Wild","Free","Chain","Sheer","Crazy","Mad","Candle","Ribbon","Lace","Notch","Wax","Shine","Shallow","Deep","Bubble","Harvest","Fluff","Venom","Boom","Slash","Rune","Cold","Quill","Love","Hate","Garnet","Zircon","Power","Bone","Void","Horn","Glory","Cyber","Nova","Hot","Helix","Cosmic","Quark","Quiver","Holly","Clover","Polar","Regal","Ripple","Ebony","Wheat","Phantom","Dew","Chisel","Crack","Chatter","Laser","Foil","Tin","Clever","Treasure","Maze","Twisty","Curly","Fortune","Fate","Destiny","Cute","Slime","Ink","Disco","Plume","Time","Psychadelic","Relic","Fossil","Water","Savage","Ancient","Rapid","Road","Trail","Stitch","Button","Bow","Nimble","Zest","Sour","Bitter","Phase","Fan","Frill","Plump","Pickle","Mud","Puddle","Pond","River","Spring","Stream","Battle","Arrow","Plume","Roan","Pitch","Tar","Cat","Dog","Horse","Lizard","Bird","Fish","Saber","Scythe","Sharp","Soft","Razor","Neon","Dandy","Weed","Swamp","Marsh","Bog","Peat","Moor","Muck","Mire","Grave","Fair","Just","Brick","Puzzle","Skitter","Prong","Fork","Dent","Dour","Warp","Luck","Coffee","Split","Chip","Hollow","Heavy","Legend","Hickory","Mesquite","Nettle","Rogue","Charm","Prickle","Bead","Sponge","Whip","Bald","Frost","Fog","Oil","Veil","Cliff","Volcano","Rift","Maze","Proud","Dew","Mirror","Shard","Salt","Pepper","Honey","Thread","Bristle","Ripple","Glow","Zenith"];

var nouns = ["head","crest","crown","tooth","fang","horn","frill","skull","bone","tongue","throat","voice","nose","snout","chin","eye","sight","seer","speaker","singer","song","chanter","howler","chatter","shrieker","shriek","jaw","bite","biter","neck","shoulder","fin","wing","arm","lifter","grasp","grabber","hand","paw","foot","finger","toe","thumb","talon","palm","touch","racer","runner","hoof","fly","flier","swoop","roar","hiss","hisser","snarl","dive","diver","rib","chest","back","ridge","leg","legs","tail","beak","walker","lasher","swisher","carver","kicker","roarer","crusher","spike","shaker","charger","hunter","weaver","crafter","binder","scribe","muse","snap","snapper","slayer","stalker","track","tracker","scar","scarer","fright","killer","death","doom","healer","saver","friend","foe","guardian","thunder","lightning","cloud","storm","forger","scale","hair","braid","nape","belly","thief","stealer","reaper","giver","taker","dancer","player","gambler","twister","turner","painter","dart","drifter","sting","stinger","venom","spur","ripper","swallow","devourer","knight","lady","lord","queen","king","master","mistress","prince","princess","duke","dutchess","samurai","ninja","knave","slave","servant","sage","wizard","witch","warlock","warrior","jester","paladin","bard","trader","sword","shield","knife","dagger","arrow","bow","fighter","bane","follower","leader","scourge","watcher","cat","panther","tiger","cougar","puma","jaguar","ocelot","lynx","lion","leopard","ferret","weasel","wolverine","bear","raccoon","dog","wolf","kitten","puppy","cub","fox","hound","terrier","coyote","hyena","jackal","pig","horse","donkey","stallion","mare","zebra","antelope","gazelle","deer","buffalo","bison","boar","elk","whale","dolphin","shark","fish","minnow","salmon","ray","fisher","otter","gull","duck","goose","crow","raven","bird","eagle","raptor","hawk","falcon","moose","heron","owl","stork","crane","sparrow","robin","parrot","cockatoo","carp","lizard","gecko","iguana","snake","python","viper","boa","condor","vulture","spider","fly","scorpion","heron","oriole","toucan","bee","wasp","hornet","rabbit","bunny","hare","brow","mustang","ox","piper","soarer","flasher","moth","mask","hide","hero","antler","chill","chiller","gem","ogre","myth","elf","fairy","pixie","dragon","griffin","unicorn","pegasus","sprite","fancier","chopper","slicer","skinner","butterfly","legend","wanderer","rover","raver","loon","lancer","glass","glazer","flame","crystal","lantern","lighter","cloak","bell","ringer","keeper","centaur","bolt","catcher","whimsey","quester","rat","mouse","serpent","wyrm","gargoyle","thorn","whip","rider","spirit","sentry","bat","beetle","burn","cowl","stone","gem","collar","mark","grin","scowl","spear","razor","edge","seeker","jay","ape","monkey","gorilla","koala","kangaroo","yak","sloth","ant","roach","weed","seed","eater","razor","shirt","face","goat","mind","shift","rider","face","mole","vole","pirate","llama","stag","bug","cap","boot","drop","hugger","sargent","snagglefoot","carpet","curtain"];

function randomNoun(){
    return nouns[Math.floor(Math.random()*nouns.length)];
}

function randomAdjective(){
    return adjectives[Math.floor(Math.random()*adjectives.length)];
}

function generateStupidName(){
    var noun1 = randomNoun();
    var noun2 = randomNoun();
    noun2 = noun2.substr(0, 1).toUpperCase() + noun2.substr(1);
    var adjective = randomAdjective();
    return adjective + noun1 + ' ' + noun2;
}

module.exports = generateStupidName;
module.exports.randomNoun = randomNoun;
module.exports.randomAdjective = randomAdjective;

},{}],44:[function(require,module,exports){
"use strict"

function traceRay_impl(
  voxels,
  px, py, pz,
  dx, dy, dz,
  max_d,
  hit_pos,
  hit_norm,
  EPSILON) {
  var t = 0.0
    , nx=0, ny=0, nz=0
    , ix, iy, iz
    , fx, fy, fz
    , ox, oy, oz
    , ex, ey, ez
    , b, step, min_step
    , floor = Math.floor
  //Step block-by-block along ray
  while(t <= max_d) {
    ox = px + t * dx
    oy = py + t * dy
    oz = pz + t * dz
    ix = floor(ox)|0
    iy = floor(oy)|0
    iz = floor(oz)|0
    fx = ox - ix
    fy = oy - iy
    fz = oz - iz
    b = voxels.getBlock(ix, iy, iz)
    if(b) {
      if(hit_pos) {
        //Clamp to face on hit
        hit_pos[0] = fx < EPSILON ? +ix : (fx > 1.0-EPSILON ? ix+1.0-EPSILON : ox)
        hit_pos[1] = fy < EPSILON ? +iy : (fy > 1.0-EPSILON ? iy+1.0-EPSILON : oy)
        hit_pos[2] = fz < EPSILON ? +iz : (fz > 1.0-EPSILON ? iz+1.0-EPSILON : oz)
      }
      if(hit_norm) {
        hit_norm[0] = nx
        hit_norm[1] = ny
        hit_norm[2] = nz
      }
      return b
    }
    //Check edge cases
    min_step = +(EPSILON * (1.0 + t))
    if(t > min_step) {
      ex = nx < 0 ? fx <= min_step : fx >= 1.0 - min_step
      ey = ny < 0 ? fy <= min_step : fy >= 1.0 - min_step
      ez = nz < 0 ? fz <= min_step : fz >= 1.0 - min_step
      if(ex && ey && ez) {
        b = voxels.getBlock(ix+nx, iy+ny, iz) ||
            voxels.getBlock(ix, iy+ny, iz+nz) ||
            voxels.getBlock(ix+nx, iy, iz+nz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = nx < 0 ? ix-EPSILON : ix + 1.0-EPSILON
            hit_pos[1] = ny < 0 ? iy-EPSILON : iy + 1.0-EPSILON
            hit_pos[2] = nz < 0 ? iz-EPSILON : iz + 1.0-EPSILON
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
      if(ex && (ey || ez)) {
        b = voxels.getBlock(ix+nx, iy, iz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = nx < 0 ? ix-EPSILON : ix + 1.0-EPSILON
            hit_pos[1] = fy < EPSILON ? +iy : oy
            hit_pos[2] = fz < EPSILON ? +iz : oz
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
      if(ey && (ex || ez)) {
        b = voxels.getBlock(ix, iy+ny, iz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = fx < EPSILON ? +ix : ox
            hit_pos[1] = ny < 0 ? iy-EPSILON : iy + 1.0-EPSILON
            hit_pos[2] = fz < EPSILON ? +iz : oz
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
      if(ez && (ex || ey)) {
        b = voxels.getBlock(ix, iy, iz+nz)
        if(b) {
          if(hit_pos) {
            hit_pos[0] = fx < EPSILON ? +ix : ox
            hit_pos[1] = fy < EPSILON ? +iy : oy
            hit_pos[2] = nz < 0 ? iz-EPSILON : iz + 1.0-EPSILON
          }
          if(hit_norm) {
            hit_norm[0] = nx
            hit_norm[1] = ny
            hit_norm[2] = nz
          }
          return b
        }
      }
    }
    //Walk to next face of cube along ray
    nx = ny = nz = 0
    step = 2.0
    if(dx < -EPSILON) {
      var s = -fx/dx
      nx = 1
      step = s
    }
    if(dx > EPSILON) {
      var s = (1.0-fx)/dx
      nx = -1
      step = s
    }
    if(dy < -EPSILON) {
      var s = -fy/dy
      if(s < step-min_step) {
        nx = 0
        ny = 1
        step = s
      } else if(s < step+min_step) {
        ny = 1
      }
    }
    if(dy > EPSILON) {
      var s = (1.0-fy)/dy
      if(s < step-min_step) {
        nx = 0
        ny = -1
        step = s
      } else if(s < step+min_step) {
        ny = -1
      }
    }
    if(dz < -EPSILON) {
      var s = -fz/dz
      if(s < step-min_step) {
        nx = ny = 0
        nz = 1
        step = s
      } else if(s < step+min_step) {
        nz = 1
      }
    }
    if(dz > EPSILON) {
      var s = (1.0-fz)/dz
      if(s < step-min_step) {
        nx = ny = 0
        nz = -1
        step = s
      } else if(s < step+min_step) {
        nz = -1
      }
    }
    if(step > max_d - t) {
      step = max_d - t - min_step
    }
    if(step < min_step) {
      step = min_step
    }
    t += step
  }
  if(hit_pos) {
    hit_pos[0] = ox;
    hit_pos[1] = oy;
    hit_pos[2] = oz;
  }
  if(hit_norm) {
    hit_norm[0] = hit_norm[1] = hit_norm[2] = 0;
  }
  return 0
}

function traceRay(voxels, origin, direction, max_d, hit_pos, hit_norm, EPSILON) {
  var px = +origin[0]
    , py = +origin[1]
    , pz = +origin[2]
    , dx = +direction[0]
    , dy = +direction[1]
    , dz = +direction[2]
    , ds = Math.sqrt(dx*dx + dy*dy + dz*dz)
  if(typeof(EPSILON) === "undefined") {
    EPSILON = 1e-8
  }
  if(ds < EPSILON) {
    if(hit_pos) {
      hit_pos[0] = hit_pos[1] = hit_pos[2]
    }
    if(hit_norm) {
      hit_norm[0] = hit_norm[1] = hit_norm[2]
    }
    return 0;
  }
  dx /= ds
  dy /= ds
  dz /= ds
  if(typeof(max_d) === "undefined") {
    max_d = 64.0
  } else {
    max_d = +max_d
  }
  return traceRay_impl(voxels, px, py, pz, dx, dy, dz, max_d, hit_pos, hit_norm, EPSILON)
}

module.exports = traceRay
},{}],45:[function(require,module,exports){
module.exports = function (opts) {
    if (!opts) opts = {};
    if (opts.bark === undefined) opts.bark = 1;
    if (opts.leaves === undefined) opts.leaves = 2;
    if (opts.random == undefined) opts.random = function() { return Math.random(); };
    if (!opts.height) opts.height = opts.random() * 16 + 4;
    if (opts.base === undefined) opts.base = opts.height / 3;
    if (opts.radius === undefined) opts.radius = opts.base;
    if (opts.treeType === undefined) opts.treeType = 'subspace';
    if (opts.position === undefined) throw "voxel-trees requires position option";
    if (opts.setBlock === undefined) throw "voxel-trees requires setBlock option";

    var set = opts.setBlock;

    var generators = {
    subspace: function() {
        var around = [
        [ 0, 1 ], [ 0, -1 ],
        [ 1, 1 ], [ 1, 0 ], [ 1, -1 ],
        [ -1, 1 ], [ -1, 0 ], [ -1, -1 ]
        ];
        for (var y = 0; y < opts.height - 1; y++) {
            var pos = {x:opts.position.x, y:opts.position.y, z:opts.position.z};
            pos.y += y
            if (set(pos, opts.bark)) break;
            if (y < opts.base) continue;
            around.forEach(function (offset) {
                if (opts.random() > 0.5) return;
                var x = offset[0]
                var z = offset[1]
                pos.x += x;
                pos.z += z;
                set(pos, opts.leaves);
                pos.x -= x;
                pos.z -= z;
            });
        }
    },

    guybrush: function() {
        var sphere = function(x,y,z, r) {
            return x*x + y*y + z*z <= r*r;
        }
        for (var y = 0; y < opts.height - 1; y++) {
            var pos = {x:opts.position.x, y:opts.position.y, z:opts.position.z};
            pos.y += y;
            if (set(pos, opts.bark)) break;
        }
        var radius = opts.radius;
        for (var xstep = -radius; xstep <= radius; xstep++) {
            for (var ystep = -radius; ystep <= radius; ystep++) {
                for (var zstep = -radius; zstep <= radius; zstep++) {
                    if (sphere(xstep,ystep,zstep, radius)) {
                        var leafpos = {
                            x: pos.x + xstep,
                            y: pos.y + ystep,
                            z: pos.z + zstep
                        }
                        set(leafpos, opts.leaves);
                    }
                }
            }
        }
    },

    fractal: function() {
        function drawAxiom(axiom, angle, unitsize, units) {
            var posstack = [];
            
            var penangle = 0;
            var pos = {x:opts.position.x, y:opts.position.y, z:opts.position.z};
            pos.y += unitsize * 30;
            function moveForward() {
                var ryaw = penangle * Math.PI/180;
                for (var i = 0; i < units; i++) {
                    pos.y += unitsize * Math.cos(ryaw);
                    pos.z += unitsize * Math.sin(ryaw);
                    set(pos,opts.leaves);
                }
            }

            function setPoint() {
                set(pos, opts.bark);
            }
            function setMaterial(value) {
                mindex = value;
            }
            function yaw(angle) {
                penangle += angle;
            }
            function pitch(angle) {
                //turtle.pitch += angle;
            }
            function roll(angle) {
                //turtle.roll += angle;
            }
            function PushState() {
                //penstack.push(turtle);
                posstack.push(pos);
            }
            function PopState() {
              //  turtle = penstack.pop();
                pos = posstack.pop();
            }
            
            //F  - move forward one unit with the pen down
            //G  - move forward one unit with the pen up
            //#  - Changes draw medium.

            // +  - yaw the turtle right by angle parameter
            // -  - yaw the turtle left by angle parameter
            // &  - pitch the turtle down by angle parameter
            // ^  - pitch the turtle up by angle parameter
            // /  - roll the turtle to the right by angle parameter
            // *  - roll the turtle to the left by angle parameter
            // [  - save in stack current state info
            // ]  - recover from stack state info
            for (var i = 0; i < axiom.length; i++) {
                var c = axiom.charAt(i);
                switch(c) {
                    case 'F':
                        moveForward();
                        setPoint();
                        break;
                    case '+':
                        yaw(+angle);
                        break;
                    case '-':
                        yaw(-angle);
                        break;
                    case '&':
                        pitch(+angle);
                        break;
                    case '^':
                        pitch(-angle);
                        break;
                    case '/':
                        roll(+angle);
                        break;
                    case '*':
                        roll(-angle);
                        break;
                    case 'G':
                        moveForward();
                        break;
                    case '[':
                        PushState();
                        break;
                    case ']':
                        PopState();
                        break;
                    case '0':
                        setMaterial(0);
                        break;
                    case '1':
                        setMaterial(1);
                        break;
                    case '2':
                        setMaterial(2);
                        break;
                    case '3':
                        setMaterial(3);
                        break;

                }
            }
        }

        var axiom = "FX";
        var rules = [ ["X", "X+YF+"], ["Y", "-FX-Y"]];
        axiom = applyRules(axiom,rules);
        axiom = applyRules(axiom,rules);
        axiom = applyRules(axiom,rules);
        axiom = applyRules(axiom,rules);
        axiom = applyRules(axiom,rules);
        axiom = applyRules(axiom,rules);
        drawAxiom(axiom, 90, 1, 5);
    }
    };
  
    if (!generators[opts.treeType]) throw 'voxel-trees invalid treeType: ' + opts.treeType;

    generators[opts.treeType]();
};

function regexRules(rules) {
    var regexrule = '';
    rules.forEach(function (rule) {
        if (regexrule != '') {
            regexrule = regexrule+ '|' ;
        }
        regexrule = regexrule+rule[0];
    });
    return new RegExp(regexrule, "g");
}

function applyRules(axiom, rules) {
    function matchRule(match)
    {
        for (var i=0;i<rules.length;i++)
        { 
            if (rules[i][0] == match) return rules[i][1];
        }
        return '';
    }
    return axiom.replace(regexRules(rules), matchRule);
}

},{}]},{},[1]);
